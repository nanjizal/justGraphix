<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.

		If `s` does not match these formats, the result is unspecified.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<t path="haxe.extern.Rest"><d/></t>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<c path="Date"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<class path="IntIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Math" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<exp public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/Reflect.hx">
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<getProperty public="1" set="method" line="41" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<fields public="1" set="method" line="60" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="String" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns the position of the leftmost occurrence of `str` within `this` String.

		If `str` is the empty String `""`, then:
			* If `startIndex` is not specified or < 0, 0 is returned.
			* If `startIndex >= this.length`, `this.length` is returned.
			* Otherwise, `startIndex` is returned,

		Otherwise, if `startIndex` is not specified or < 0, it is treated as 0.

		If `startIndex >= this.length`, -1 is returned.

		Otherwise the search is performed within the substring of `this` String starting
		at `startIndex`. If `str` is found, the position of its first character in `this`
		String relative to position 0 is returned.

		If `str` cannot be found, -1 is returned.]]></haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/Std.hx">
		<string public="1" set="method" line="47" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="56" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringBuf" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/StringTools.hx">
		<isSpace public="1" set="method" line="274" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<trim public="1" set="method" line="331" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<hex public="1" set="method" line="415" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/UInt.hx" private="1" module="UInt" final="1">
	<toFloat set="method" line="310" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/UInt.hx" private="1" module="UInt" final="1">
		<toFloat set="method" line="310" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.CallStack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<toString public="1" set="method" line="74">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<get_message set="method" line="88"><f a=""><c path="String"/></f></get_message>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
	<ucompare public="1" set="method" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
		<ucompare public="1" set="method" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.Int64" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<new public="1" get="inline" set="null" line="473"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.Json" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding (but not decoding) features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.

	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ValueException" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<iterator public="1" set="method" line="185">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="62" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		<overloads><_new public="1" get="inline" set="null" line="92">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
	</_new>
	<blit public="1" params="T" set="method" line="186" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<copy public="1" params="T" get="inline" set="null" line="306" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="329" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="352" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="62" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
			<overloads><_new public="1" get="inline" set="null" line="92">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
		</_new>
		<blit public="1" params="T" set="method" line="186" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<copy public="1" params="T" get="inline" set="null" line="306" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="329" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="352" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.extern.Rest" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/Bytes.hx">
		<ofData public="1" set="method" line="243" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.lib.Uint8Array"/></b>
		<data><c path="js.lib.DataView"/></data>
		<getFloat public="1" set="method" line="90">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setFloat public="1" set="method" line="100">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getInt32 public="1" set="method" line="115">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<setInt32 public="1" set="method" line="120">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<getString public="1" set="method" line="134">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<toString public="1" set="method" line="180">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<new set="method" line="32">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<enum path="haxe.io.Encoding" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.io.Error" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><c path="js.lib.Uint32Array"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><c path="js.lib.Uint8Array"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="js.Boot" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/Boot.hx">
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<x path="Null"><a>
	<toString set="null"><f a=""><c path="String"/></f></toString>
	<length set="null"><x path="Int"/></length>
	<hasOwnProperty set="null"><x path="Null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></x></hasOwnProperty>
	<_hx_index set="null"><x path="Int"/></_hx_index>
	<__params__ set="null"><x path="Bool"/></__params__>
	<__enum__ set="null"><x path="Bool"/></__enum__>
</a></x>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Browser" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/Browser.hx">
		<window public="1" get="accessor" set="null" static="1">
			<c path="js.html.Window"/>
			<haxe_doc>The global window object.</haxe_doc>
		</window>
		<get_window get="inline" set="null" line="40" static="1"><f a=""><c path="js.html.Window"/></f></get_window>
		<document public="1" get="accessor" set="null" static="1">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Shortcut to Window.document.</haxe_doc>
		</document>
		<get_document get="inline" set="null" line="46" static="1"><f a=""><c path="js.html.HTMLDocument"/></f></get_document>
		<location public="1" get="accessor" set="null" static="1">
			<c path="js.html.Location"/>
			<haxe_doc>Shortcut to Window.location.</haxe_doc>
		</location>
		<get_location get="inline" set="null" line="52" static="1"><f a=""><c path="js.html.Location"/></f></get_location>
		<navigator public="1" get="accessor" set="null" static="1">
			<c path="js.html.Navigator"/>
			<haxe_doc>Shortcut to Window.navigator.</haxe_doc>
		</navigator>
		<get_navigator get="inline" set="null" line="58" static="1"><f a=""><c path="js.html.Navigator"/></f></get_navigator>
		<console public="1" get="accessor" set="null" static="1">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Shortcut to Window.console.</haxe_doc>
		</console>
		<get_console get="inline" set="null" line="64" static="1"><f a=""><c path="js.html.ConsoleInstance"/></f></get_console>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Lib" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="65" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="77" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="108" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="118" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="130" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.html.EventTarget" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?options:?wantsUntrusted">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.AddEventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><addEventListener public="1" set="method">
	<f a="type:listener:?options:?wantsUntrusted">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.AddEventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
</addEventListener></overloads>
		</addEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?options">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.EventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><removeEventListener public="1" set="method">
	<f a="type:listener:?options">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.EventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
</removeEventListener></overloads>
		</removeEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="js.html.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Dispatch an event to this `EventTarget`.
		@throws DOMError</haxe_doc>
		</dispatchEvent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`EventTarget` is an interface implemented by objects that can receive events and may have listeners for them.

	Documentation [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.AbortSignal" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AbortSignal.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the request(s) the signal is communicating with is/are aborted (`true`) or not (`false`).</haxe_doc>
		</aborted>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Invoked when an `abort_(dom_abort_api)` event fires, i.e. when the DOM request(s) the signal is communicating with is/are aborted.</haxe_doc>
		</onabort>
		<haxe_doc><![CDATA[The `AbortSignal` interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an `AbortController` object.

	Documentation [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal>]]></haxe_doc>
		<meta><m n=":native"><e>"AbortSignal"</e></m></meta>
	</class>
	<typedef path="js.html.AddEventListenerOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AddEventListenerOptions.hx"><a>
	<passive>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</passive>
	<once>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</once>
	<capture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</capture>
</a></typedef>
	<abstract path="js.html.AlignSetting" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Node" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ELEMENT_NODE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ATTRIBUTE_NODE>
		<TEXT_NODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TEXT_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</COMMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</NOTATION_NODE>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" expr="4" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" expr="8" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" expr="32" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<nodeType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the type of the node. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		   </tr>
		   <tr>
		    <td><code>ELEMENT_NODE</code></td>
		    <td><code>1</code></td>
		   </tr>
		   <tr>
		    <td><code>ATTRIBUTE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		   </tr>
		   <tr>
		    <td><code>TEXT_NODE</code></td>
		    <td><code>3</code></td>
		   </tr>
		   <tr>
		    <td><code>CDATA_SECTION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>4</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_REFERENCE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>5</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_NODE</code> <em>(deprecated)</em></td>
		    <td><code>6</code></td>
		   </tr>
		   <tr>
		    <td><code>PROCESSING_INSTRUCTION_NODE</code></td>
		    <td><code>7</code></td>
		   </tr>
		   <tr>
		    <td><code>COMMENT_NODE</code></td>
		    <td><code>8</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_NODE</code></td>
		    <td><code>9</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_TYPE_NODE</code></td>
		    <td><code>10</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_FRAGMENT_NODE</code></td>
		    <td><code>11</code></td>
		   </tr>
		   <tr>
		    <td><code>NOTATION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>12</code></td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</nodeType>
		<nodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the name of the `Node`. The structure of the name will differ with the node type. E.g. An `HTMLElement` will contain the name of the corresponding tag, like `'audio'` for an `HTMLAudioElement`, a `Text` node will have the `'#text'` string, or a `Document` node will have the `'#document'` string.</haxe_doc>
		</nodeName>
		<baseURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the base URL. The concept of base URL changes from one language to another; in HTML, it corresponds to the protocol, the domain name and the directory structure, that is all until the last `'/'`.</haxe_doc>
		</baseURI>
		<isConnected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the `Document` object in the case of the normal DOM, or the `ShadowRoot` in the case of a shadow DOM.</haxe_doc>
		</isConnected>
		<ownerDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns the `Document` that this node belongs to. If the node is itself a document, returns `null`.</haxe_doc>
		</ownerDocument>
		<parentNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns `null`.</haxe_doc>
		</parentNode>
		<parentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.</haxe_doc>
		</parentElement>
		<childNodes public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the `Node` change, the `NodeList` object is automatically updated.</haxe_doc>
		</childNodes>
		<firstChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the first direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</firstChild>
		<lastChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the last direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the previous node in the tree, or `null` if there isn't such node.</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the next node in the tree, or `null` if there isn't such node.</haxe_doc>
		</nextSibling>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the value of the current node</haxe_doc>
		</nodeValue>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the textual content of an element and all its descendants.</haxe_doc>
		</textContent>
		<getRootNode public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.GetRootNodeOptions"/></x>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns the context object's root which optionally includes the shadow root if it is available. </haxe_doc>
		</getRootNode>
		<hasChildNodes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has any child nodes, or not.</haxe_doc>
		</hasChildNodes>
		<insertBefore public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Inserts a `Node` before the reference node as a child of a specified parent node.
		@throws DOMError</haxe_doc>
		</insertBefore>
		<appendChild public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adds the specified childNode argument as the last child to the current node.
		
		 If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.
		@throws DOMError</haxe_doc>
		</appendChild>
		<replaceChild public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Replaces one child `Node` of the current one with the second one given in parameter.
		@throws DOMError</haxe_doc>
		</replaceChild>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Removes a child node from the current element, which must be a child of the current node.
		@throws DOMError</haxe_doc>
		</removeChild>
		<normalize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</normalize>
		<cloneNode public="1" set="method">
			<f a="?deep" v="false">
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Clone a `Node`, and optionally, all of its contents. By default, it clones the content of the node.
		@throws DOMError</haxe_doc>
		</cloneNode>
		<isSameNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether or not the two nodes are the same (that is, they reference the same object).</haxe_doc>
		</isSameNode>
		<isEqualNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isEqualNode>
		<compareDocumentPosition public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the position of the current node against another node in any other document.</haxe_doc>
		</compareDocumentPosition>
		<contains public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether a node is a descendant of a given node or not.</haxe_doc>
		</contains>
		<lookupPrefix public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the prefix for a given namespace URI, if present, and `null` if not. When multiple prefixes are possible, the result is implementation-dependent.</haxe_doc>
		</lookupPrefix>
		<lookupNamespaceURI public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Accepts a prefix and returns the namespace URI associated with it on the given node if found (and `null` if not). Supplying `null` for the prefix will return the default namespace.</haxe_doc>
		</lookupNamespaceURI>
		<isDefaultNamespace public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Accepts a namespace URI as an argument and returns a `Boolean` with a value of `true` if the namespace is the default namespace on the given node or `false` if not.</haxe_doc>
		</isDefaultNamespace>
		<haxe_doc><![CDATA[`Node` is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.

	Documentation [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Node$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Node>]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.DOMElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMElement.hx" extern="1">
		<extends path="js.html.Node"/>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>The namespace URI of the element, or `null` if it is no namespace.
		 
		 Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the `http://www.w3.org/1999/xhtml` namespace in both HTML and XML trees. `1.9.2`</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the element, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the element.</haxe_doc>
		</localName>
		<tagName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `String` with the name of the tag for the given element.</haxe_doc>
		</tagName>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the id of the element.</haxe_doc>
		</id>
		<className public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the class of the element.</haxe_doc>
		</className>
		<classList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` containing the list of class attributes.</haxe_doc>
		</classList>
		<attributes public="1" set="null">
			<c path="js.html.NamedNodeMap"/>
			<haxe_doc>Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.</haxe_doc>
		</attributes>
		<title public="1"><c path="String"/></title>
		<lang public="1"><c path="String"/></lang>
		<dir public="1"><c path="String"/></dir>
		<dataset public="1" set="null"><c path="js.html.DOMStringMap"/></dataset>
		<innerText public="1"><c path="String"/></innerText>
		<itemScope public="1"><x path="Bool"/></itemScope>
		<itemType public="1" set="null"><c path="js.html.DOMTokenList"/></itemType>
		<itemId public="1"><c path="String"/></itemId>
		<itemRef public="1" set="null"><c path="js.html.DOMTokenList"/></itemRef>
		<itemProp public="1" set="null"><c path="js.html.DOMTokenList"/></itemProp>
		<properties public="1" set="null"><c path="js.html.HTMLPropertiesCollection"/></properties>
		<itemValue public="1"><d/></itemValue>
		<hidden public="1"><x path="Bool"/></hidden>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<accessKey public="1"><c path="String"/></accessKey>
		<accessKeyLabel public="1" set="null"><c path="String"/></accessKeyLabel>
		<draggable public="1"><x path="Bool"/></draggable>
		<contentEditable public="1"><c path="String"/></contentEditable>
		<isContentEditable public="1" set="null"><x path="Bool"/></isContentEditable>
		<contextMenu public="1" set="null"><c path="js.html.MenuElement"/></contextMenu>
		<spellcheck public="1"><x path="Bool"/></spellcheck>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<oncopy public="1"><x path="haxe.Function"/></oncopy>
		<oncut public="1"><x path="haxe.Function"/></oncut>
		<onpaste public="1"><x path="haxe.Function"/></onpaste>
		<offsetParent public="1" set="null"><c path="js.html.Element"/></offsetParent>
		<offsetTop public="1" set="null"><x path="Int"/></offsetTop>
		<offsetLeft public="1" set="null"><x path="Int"/></offsetLeft>
		<offsetWidth public="1" set="null"><x path="Int"/></offsetWidth>
		<offsetHeight public="1" set="null"><x path="Int"/></offsetHeight>
		<scrollTop public="1">
			<x path="Int"/>
			<haxe_doc>A `Number` representing number of pixels the top of the document is scrolled vertically.</haxe_doc>
		</scrollTop>
		<scrollLeft public="1">
			<x path="Int"/>
			<haxe_doc>Is a `Number` representing the left scroll offset of the element.</haxe_doc>
		</scrollLeft>
		<scrollWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view width of the element.</haxe_doc>
		</scrollWidth>
		<scrollHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view height of an element.</haxe_doc>
		</scrollHeight>
		<clientTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the top border of the element.</haxe_doc>
		</clientTop>
		<clientLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the left border of the element.</haxe_doc>
		</clientLeft>
		<clientWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner width of the element.</haxe_doc>
		</clientWidth>
		<clientHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner height of the element.</haxe_doc>
		</clientHeight>
		<scrollTopMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum top scroll offset possible for the element.</haxe_doc>
		</scrollTopMax>
		<scrollLeftMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum left scroll offset possible for the element.</haxe_doc>
		</scrollLeftMax>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element's content.</haxe_doc>
		</innerHTML>
		<outerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.</haxe_doc>
		</outerHTML>
		<shadowRoot public="1" set="null">
			<c path="js.html.ShadowRoot"/>
			<haxe_doc>Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.</haxe_doc>
		</shadowRoot>
		<assignedSlot public="1" set="null"><c path="js.html.SlotElement"/></assignedSlot>
		<slot public="1">
			<c path="String"/>
			<haxe_doc>Returns the name of the shadow DOM slot the element is inserted in.</haxe_doc>
		</slot>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handling code for the `wheel` event. This is now implemented on `GlobalEventHandlers.onwheel`.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `gotpointercapture` event type.</haxe_doc>
		</ongotpointercapture>
		<onlostpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `lostpointercapture` event type.</haxe_doc>
		</onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getAttributeNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of attribute names from the current element.</haxe_doc>
		</getAttributeNames>
		<getAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the named attribute from the current node and returns it as an `Object`.</haxe_doc>
		</getAttribute>
		<getAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an `Object`.</haxe_doc>
		</getAttributeNS>
		<toggleAttribute public="1" set="method">
			<f a="name:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.
		@throws DOMError</haxe_doc>
		</toggleAttribute>
		<setAttribute public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of a named attribute of the current node.
		@throws DOMError</haxe_doc>
		</setAttribute>
		<setAttributeNS public="1" set="method">
			<f a="namespace:name:value">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNS>
		<removeAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttribute>
		<removeAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNS>
		<hasAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute or not.</haxe_doc>
		</hasAttribute>
		<hasAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute, in the specified namespace, or not.</haxe_doc>
		</hasAttributeNS>
		<hasAttributes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has one or more HTML attributes present.</haxe_doc>
		</hasAttributes>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the `Element` which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.
		@throws DOMError</haxe_doc>
		</closest>
		<matches public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating whether or not the element would be selected by the specified selector string.
		@throws DOMError</haxe_doc>
		</matches>
		<webkitMatchesSelector public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</webkitMatchesSelector>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name and namespace, from the current element.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.</haxe_doc>
		</getElementsByClassName>
		<insertAdjacentElement public="1" set="method">
			<f a="where:element">
				<c path="String"/>
				<c path="js.html.Element"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Inserts a given element node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentElement>
		<insertAdjacentText public="1" set="method">
			<f a="where:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a given text node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentText>
		<setPointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Designates a specific element as the capture target of future pointer events.
		@throws DOMError</haxe_doc>
		</setPointerCapture>
		<releasePointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Releases (stops) pointer capture that was previously set for a specific `PointerEvent`.
		@throws DOMError</haxe_doc>
		</releasePointerCapture>
		<hasPointerCapture public="1" set="method"><f a="pointerId">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasPointerCapture>
		<setCapture public="1" set="method">
			<f a="?retargetToElement" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ retargetToElement : false }</e></m></meta>
			<haxe_doc>Sets up mouse event capture, redirecting all mouse events to this element.</haxe_doc>
		</setCapture>
		<releaseCapture public="1" set="method"><f a=""><x path="Void"/></f></releaseCapture>
		<getAttributeNode public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the named attribute from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNode>
		<setAttributeNode public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNode>
		<removeAttributeNode public="1" set="method">
			<f a="oldAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNode>
		<getAttributeNodeNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNodeNS>
		<setAttributeNodeNS public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNodeNS>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns the size of an element and its position relative to the viewport.</haxe_doc>
		</getBoundingClientRect>
		<scrollIntoView public="1" set="method">
			<f a="?arg">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
			<overloads><scrollIntoView public="1" set="method">
	<f a="?arg">
		<x path="Null"><t path="js.html.ScrollIntoViewOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
</scrollIntoView></overloads>
		</scrollIntoView>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<insertAdjacentHTML public="1" set="method">
			<f a="position:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.
		@throws DOMError</haxe_doc>
		</insertAdjacentHTML>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Node` which matches the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of nodes which match the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<attachShadow public="1" set="method">
			<f a="shadowRootInitDict">
				<t path="js.html.ShadowRootInit"/>
				<c path="js.html.ShadowRoot"/>
			</f>
			<haxe_doc>Attatches a shadow DOM tree to the specified element and returns a reference to its `ShadowRoot`.
		@throws DOMError</haxe_doc>
		</attachShadow>
		<requestFullscreen public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.FullscreenOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Asynchronously asks the browser to make the element full-screen.
		@throws DOMError</haxe_doc>
		</requestFullscreen>
		<requestPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Allows to asynchronously ask for the pointer to be locked on the given element.</haxe_doc>
		</requestPointerLock>
		<animate public="1" set="method">
			<f a="keyframes:?options">
				<d/>
				<x path="Float"/>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="keyframes:?options">
		<d/>
		<x path="Null"><t path="js.html.KeyframeAnimationOptions"/></x>
		<c path="js.html.Animation"/>
	</f>
	<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
</animate></overloads>
		</animate>
		<getAnimations public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.AnimationFilter"/></x>
				<c path="Array"><c path="js.html.Animation"/></c>
			</f>
			<haxe_doc>Returns an array of Animation objects currently active on the element.</haxe_doc>
		</getAnimations>
		<before public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<haxe_doc><![CDATA[`Element` is the most general base class from which all objects in a `Document` inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from `Element`.

	Documentation [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Element$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Element>]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<click public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a mouse click event to the element.</haxe_doc>
		</click>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Makes the element the current keyboard focus.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes keyboard focus from the currently focused element.
		@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[The `HTMLElement` interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.

	Documentation [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLElement"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating where to display the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a comma-separated list of coordinates.</haxe_doc>
		</coords>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding of the linked resource.</haxe_doc>
		</charset>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the anchor name.</haxe_doc>
		</name>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the shape of the active area.</haxe_doc>
		</shape>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAnchorElement` interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface that they inherit from) for manipulating the layout and presentation of such elements.

	Documentation [HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.Animation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Animation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the `String` used to identify the animation.</haxe_doc>
		</id>
		<effect public="1">
			<c path="js.html.AnimationEffect"/>
			<haxe_doc>Gets and sets the `AnimationEffectReadOnly` associated with this animation. This will usually be a `KeyframeEffect` object.</haxe_doc>
		</effect>
		<timeline public="1">
			<c path="js.html.AnimationTimeline"/>
			<haxe_doc>Gets or sets the `AnimationTimeline` associated with this animation.</haxe_doc>
		</timeline>
		<startTime public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the scheduled time when an animation's playback should begin.</haxe_doc>
		</startTime>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `AnimationTimeline`, is inactive or hasn't been played yet, its value is `null`.</haxe_doc>
		</currentTime>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the playback rate of the animation.</haxe_doc>
		</playbackRate>
		<playState public="1" set="null">
			<x path="js.html.AnimationPlayState"/>
			<haxe_doc>Returns an enumerated value describing the playback state of an animation.</haxe_doc>
		</playState>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.</haxe_doc>
		</pending>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current ready Promise for this animation.</haxe_doc>
		</ready>
		<finished public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current finished Promise for this animation.</haxe_doc>
		</finished>
		<onfinish public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `finish` event.</haxe_doc>
		</onfinish>
		<oncancel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `cancel` event.</haxe_doc>
		</oncancel>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears all `KeyframeEffect` caused by this animation and aborts its playback.</haxe_doc>
		</cancel>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Seeks either end of an animation, depending on whether the animation is playing or reversing.
		@throws DOMError</haxe_doc>
		</finish>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Starts or resumes playing of an animation, or begins the animation again if it previously finished.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends playing of an animation.
		@throws DOMError</haxe_doc>
		</pause>
		<updatePlaybackRate public="1" set="method">
			<f a="playbackRate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the speed of an animation after first synchronizing its playback position.</haxe_doc>
		</updatePlaybackRate>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.
		@throws DOMError</haxe_doc>
		</reverse>
		<new public="1" set="method">
			<f a="?effect:?timeline">
				<c path="js.html.AnimationEffect"/>
				<c path="js.html.AnimationTimeline"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Animation` interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.

	Documentation [Animation](https://developer.mozilla.org/en-US/docs/Web/API/Animation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Animation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Animation>]]></haxe_doc>
		<meta><m n=":native"><e>"Animation"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffect" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AnimationEffect.hx" extern="1">
		<getTiming public="1" set="method"><f a=""><t path="js.html.EffectTiming"/></f></getTiming>
		<getComputedTiming public="1" set="method"><f a=""><t path="js.html.ComputedEffectTiming"/></f></getComputedTiming>
		<updateTiming public="1" set="method">
			<f a="?timing">
				<x path="Null"><t path="js.html.OptionalEffectTiming"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</updateTiming>
		<haxe_doc><![CDATA[The `AnimationEffect` interface of the Web Animations API defines current and future animation effects like `KeyframeEffect`, which can be passed to `Animation` objects for playing, and `KeyframeEffectReadOnly` (which is used by CSS Animations and Transitions).

	Documentation [AnimationEffect](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffect"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationFilter" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AnimationFilter.hx"><a><subtree>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</subtree></a></typedef>
	<abstract path="js.html.AnimationPlayState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AnimationPlayState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.AnimationTimeline" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AnimationTimeline.hx" extern="1">
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the time value in milliseconds for this timeline or `null` if this timeline is inactive.</haxe_doc>
		</currentTime>
		<haxe_doc><![CDATA[The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by `DocumentTimeline` and future timeline types) and is not itself directly used by developers. Anywhere you see `AnimationTimeline`, you should use `DocumentTimeline` or any other timeline type instead.

	Documentation [AnimationTimeline](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationTimeline"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute, containing alternative text for the element.</haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.</haxe_doc>
		</coords>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.</haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.</haxe_doc>
		</relList>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the area is inactive (`true`) or active (`false`).</haxe_doc>
		</noHref>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAreaElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.

	Documentation [HTMLAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.AssignedNodesOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AssignedNodesOptions.hx"><a><flatten>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</flatten></a></typedef>
	<class path="js.html.Attr" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the attribute.</haxe_doc>
		</localName>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The attribute's value.</haxe_doc>
		</value>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The attribute's name.</haxe_doc>
		</name>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace URI of the attribute, or `null` if there is no namespace.</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the attribute, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<specified public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property always returns `true`. Originally, it returned `true `if the attribute was explicitly specified in the source code or by a script, and `false` if its value came from the default one defined in the document's DTD.</haxe_doc>
		</specified>
		<ownerElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element holding the attribute.
		
			
			Note: DOM Level 4 removed this property. The assumption was that since you get an `Attr` object from an `Element`, you should already know the associated element.
		
			As that doesn't hold true in cases like `Attr` objects being returned by `Document.evaluate`, the DOM Living Standard reintroduced the property.
		
			Gecko outputs a deprecation note starting from Gecko 7.0 `7.0`. This note was removed again in Gecko 49.0 `49.0`.</haxe_doc>
		</ownerElement>
		<haxe_doc><![CDATA[This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., `Element.getAttribute()`, but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating give `Attr` types.

	Documentation [Attr](https://developer.mozilla.org/en-US/docs/Web/API/Attr) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Attr$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Attr>]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NETWORK_EMPTY public="1" get="inline" set="null" expr="0" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" expr="1" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" expr="2" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<HAVE_NOTHING public="1" get="inline" set="null" expr="0" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<HAVE_METADATA public="1" get="inline" set="null" expr="1" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" expr="2" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" expr="3" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" expr="4" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.</haxe_doc>
		</error>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.</haxe_doc>
		</src>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the absolute URL of the chosen media resource.</haxe_doc>
		</currentSrc>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the CORS setting for this media element.</haxe_doc>
		</crossOrigin>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.</haxe_doc>
		</networkState>
		<preload public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.</haxe_doc>
		</preload>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.</haxe_doc>
		</buffered>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the readiness state of the media.</haxe_doc>
		</readyState>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.</haxe_doc>
		</currentTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` indicating the length of the media in seconds, or 0 if no media data is available.</haxe_doc>
		</duration>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element is paused.</haxe_doc>
		</paused>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the default playback rate for the media.</haxe_doc>
		</defaultPlaybackRate>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` that indicates the rate at which the media is being played back. </haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element has finished playing.</haxe_doc>
		</ended>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
		 Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.</haxe_doc>
		</autoplay>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.</haxe_doc>
		</loop>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.</haxe_doc>
		</controls>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</haxe_doc>
		</volume>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.</haxe_doc>
		</muted>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.</haxe_doc>
		</defaultMuted>
		<audioTracks public="1" set="null">
			<c path="js.html.AudioTrackList"/>
			<haxe_doc>A `AudioTrackList` that lists the `AudioTrack` objects contained in the element.</haxe_doc>
		</audioTracks>
		<videoTracks public="1" set="null">
			<c path="js.html.VideoTrackList"/>
			<haxe_doc>Returns the list of `VideoTrack` objects contained in the element.

		 Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.</haxe_doc>
		</videoTracks>
		<textTracks public="1" set="null">
			<c path="js.html.TextTrackList"/>
			<haxe_doc>Returns the list of `TextTrack` objects contained in the element.</haxe_doc>
		</textTracks>
		<srcObject public="1">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.</haxe_doc>
		</srcObject>
		<mediaKeys public="1" set="null">
			<c path="js.html.eme.MediaKeys"/>
			<haxe_doc>Returns a `MediaKeys` object or `null`. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.</haxe_doc>
		</mediaKeys>
		<onencrypted public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the media is encrypted.</haxe_doc>
		</onencrypted>
		<onwaitingforkey public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when playback is blocked while waiting for an encryption key.</haxe_doc>
		</onwaitingforkey>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.</haxe_doc>
		</load>
		<canPlayType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Determines whether the specified media type can be played back.</haxe_doc>
		</canPlayType>
		<fastSeek public="1" set="method">
			<f a="time">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Directly seeks to the given time.
		@throws DOMError</haxe_doc>
		</fastSeek>
		<play public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Begins playback of the media.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses the media playback.
		@throws DOMError</haxe_doc>
		</pause>
		<addTextTrack public="1" set="method">
			<f a="kind:?label:?language" v=":&quot;&quot;:&quot;&quot;">
				<x path="js.html.TextTrackKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.TextTrack"/>
			</f>
			<meta><m n=":value"><e>{ language : "", label : "" }</e></m></meta>
			<haxe_doc>Adds a text track (such as a track for subtitles) to a media element.</haxe_doc>
		</addTextTrack>
		<setMediaKeys public="1" set="method">
			<f a="mediaKeys">
				<c path="js.html.eme.MediaKeys"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.</haxe_doc>
		</setMediaKeys>
		<haxe_doc><![CDATA[The `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.

	Documentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<haxe_doc><![CDATA[The `HTMLAudioElement` interface provides access to the properties of `audio` elements, as well as methods to manipulate them. It derives from the `HTMLMediaElement` interface.

	Documentation [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.MediaStreamTrack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` set to `"audio"` if the track is an audio track and to `"video"`, if it is a video track. It doesn't change if the track is deassociated from its source.</haxe_doc>
		</kind>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a unique identifier (GUID) for the track; it is generated by the browser.</haxe_doc>
		</id>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a user agent-assigned label that identifies the track source, as in `"internal microphone"`. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.</haxe_doc>
		</label>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean whose value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`. The `muted` property refers to a condition in which there's no media because of a technical issue.</haxe_doc>
		</enabled>
		<muted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`, and unmute the media by setting it back to `true` again.</haxe_doc>
		</muted>
		<onmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `mute` event is fired on the object, that is when the streaming is terminating.</haxe_doc>
		</onmute>
		<onunmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `unmute` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onunmute>
		<readyState public="1" set="null">
			<x path="js.html.MediaStreamTrackState"/>
			<haxe_doc>Returns an enumerated value giving the status of the track. This will be one of the following values:

		  `"live"` which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the `MediaStreamTrack.enabled` attribute.
		  `"ended"` which indicates that the input is not giving any more data and will never provide new data.</haxe_doc>
		</readyState>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `ended_(MediaStream)` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onended>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStreamTrack"/></f>
			<haxe_doc>Returns a duplicate of the `MediaStreamTrack`.</haxe_doc>
		</clone>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to `ended`.</haxe_doc>
		</stop>
		<getConstraints public="1" set="method">
			<f a=""><t path="js.html.MediaTrackConstraints"/></f>
			<haxe_doc>Returns a `MediaTrackConstraints` object containing the currently set constraints for the track; the returned value matches the constraints last set using `MediaStreamTrack.applyConstraints`.</haxe_doc>
		</getConstraints>
		<getSettings public="1" set="method">
			<f a=""><t path="js.html.MediaTrackSettings"/></f>
			<haxe_doc>Returns a `MediaTrackSettings` object containing the current values of each of the `MediaStreamTrack`'s constrainable properties.</haxe_doc>
		</getSettings>
		<applyConstraints public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaTrackConstraints"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the `MediaStreamTrack`.
		@throws DOMError</haxe_doc>
		</applyConstraints>
		<haxe_doc><![CDATA[The `MediaStreamTrack` interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.

	Documentation [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioStreamTrack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AudioStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"AudioStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AudioTrack.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling `AudioTrackList.getTrackById()`. The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.</haxe_doc>
		</id>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the category into which the track falls. For example, the main audio track would have a `kind` of `"main"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` providing a human-readable label for the track. For example, an audio commentary track for a movie might have a `label` of `"Commentary with director John Q. Public and actors John Doe and Jane Eod."` This string is empty if no label is provided.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 ({{RFC(5646)}}) language code, such as `"en-US"` or `"pt-BR"`.</haxe_doc>
		</language>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to `false` mutes the track's audio.</haxe_doc>
		</enabled>
		<haxe_doc><![CDATA[The `AudioTrack` interface represents a single audio track from one of the HTML media elements, `audio` or `video`. 

	Documentation [AudioTrack](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrackList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AudioTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of tracks in the list.</haxe_doc>
		</length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.AudioTrack"/>
</f></getTrackById>
		<haxe_doc><![CDATA[The `AudioTrackList` interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate `AudioTrack` object in the list.

	Documentation [AudioTrackList](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.AutoKeyword" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AutoKeyword.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AutoKeyword.AutoKeyword_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/AutoKeyword.hx" private="1" module="js.html.AutoKeyword" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.BRElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `HTMLBRElement` interface represents a HTML line break element (`br`). It inherits from `HTMLElement`.

	Documentation [HTMLBRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarProp" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/BarProp.hx" extern="1">
		<visible public="1"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarProp"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.</haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `HTMLBaseElement` interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.

	Documentation [HTMLBaseElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.Blob" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of the data contained in the `Blob` object.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty.</haxe_doc>
		</type>
		<slice public="1" set="method">
			<f a="?start:?end:?contentType">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.Blob"/>
			</f>
			<haxe_doc>Returns a new `Blob` object containing the data in the specified range of bytes of the source `Blob`.
		@throws DOMError</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a="?blobParts:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
				<x path="Null"><t path="js.html.BlobPropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `Blob` object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.

	Documentation [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Blob$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Blob>]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<typedef path="js.html.BlobPropertyBag" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/BlobPropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<endings>
		<x path="Null"><x path="js.html.EndingTypes"/></x>
		<meta><m n=":optional"/></meta>
	</endings>
</a></typedef>
	<class path="js.html.BodyElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</text>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of unvisited links.</haxe_doc>
		</link>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</vLink>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of active hyperlinks.</haxe_doc>
		</aLink>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the background color for the document.</haxe_doc>
		</bgColor>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.</haxe_doc>
		</background>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLBodyElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating body elements.

	Documentation [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.
		
			If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `form` element that owns this element.</haxe_doc>
		</formAction>
		<formEnctype public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the `enctype` attribute of the `form` element that owns this element.</haxe_doc>
		</formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `form` element that owns this element.</haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `form` element that owns this element.</haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `form` element that owns this element.</haxe_doc>
		</formTarget>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the object when submitted with a form. {{HTMLVersionInline(5)}} If specified, it must not be the empty string.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Is a `DOMString` indicating the behavior of the button. This is an enumerated attribute with the following possible values:
			
				`"submit"`: The button submits the form. This is the default value if the attribute is not specified, {{HTMLVersionInline(5)}} or if it is dynamically changed to an empty or invalid value.
				`"reset"`: The button resets the form.
				`"button"`: The button does nothing.
				`"menu"`: The button displays a menu. <em>(experimental)</em>]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the current form control value of the button.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Is a `ValidityState` representing the validity states that this button is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Is a `NodeList` that represents a list of `label` elements that are labels for this button.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLButtonElement` interface provides properties and methods (beyond the `button` object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.

	Documentation [HTMLButtonElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the textual data contained in this object.</haxe_doc>
		</data>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the size of the string contained in `CharacterData.data`.</haxe_doc>
		</length>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<substringData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the part of `CharacterData.data` of the specified length and starting at the specified offset.
		@throws DOMError</haxe_doc>
		</substringData>
		<appendData public="1" set="method">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the given `DOMString` to the `CharacterData.data` string; when this method returns, `data` contains the concatenated `DOMString`.
		@throws DOMError</haxe_doc>
		</appendData>
		<insertData public="1" set="method">
			<f a="offset:data">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the specified characters, at the specified offset, in the `CharacterData.data` string; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</insertData>
		<deleteData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified amount of characters, starting at the specified offset, from the `CharacterData.data` string; when this method returns, `data` contains the shortened `DOMString`.
		@throws DOMError</haxe_doc>
		</deleteData>
		<replaceData public="1" set="method">
			<f a="offset:count:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the specified amount of characters, starting at the specified offset, with the specified `DOMString`; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</replaceData>
		<before public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `CharacterData` abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any object of type `CharacterData`: it is implemented by other interfaces, like `Text`, '. In XML, the character sequence '--' cannot be used within a comment.">`Comment`, or `ProcessingInstruction` which aren't abstract.

	Documentation [CharacterData](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CharacterData>]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order.</haxe_doc>
		</wholeText>
		<splitText public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</splitText>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Text` interface represents the textual content of `Element` or `Attr`.  If an element has no markup within its content, it has a single child implementing `Text` that contains the element's text.  However, if the element contains markup, it is parsed into information items and `Text` nodes that form its children.

	Documentation [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Text$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Text>]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[The `CDATASection` interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols `` and `&amp;` don’t need escaping as they normally do when inside a CDATA section.

	Documentation [CDATASection](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CDATASection>]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<abstract path="js.html.CSSBoxType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CSSBoxType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CSSBoxType.CSSBoxType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CSSBoxType.hx" private="1" module="js.html.CSSBoxType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CSSRule" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CSSRule.hx" extern="1">
		<STYLE_RULE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STYLE_RULE>
		<CHARSET_RULE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHARSET_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</IMPORT_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</FONT_FACE_RULE>
		<PAGE_RULE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PAGE_RULE>
		<NAMESPACE_RULE public="1" get="inline" set="null" expr="10" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</NAMESPACE_RULE>
		<KEYFRAMES_RULE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</KEYFRAMES_RULE>
		<KEYFRAME_RULE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</KEYFRAME_RULE>
		<COUNTER_STYLE_RULE public="1" get="inline" set="null" expr="11" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</COUNTER_STYLE_RULE>
		<SUPPORTS_RULE public="1" get="inline" set="null" expr="12" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SUPPORTS_RULE>
		<FONT_FEATURE_VALUES_RULE public="1" get="inline" set="null" expr="14" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</FONT_FEATURE_VALUES_RULE>
		<type public="1" set="null"><x path="Int"/></type>
		<cssText public="1"><c path="String"/></cssText>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<parentStyleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></parentStyleSheet>
		<haxe_doc><![CDATA[The `CSSRule` interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.

	Documentation [CSSRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A `CSSRuleList` is an (indirect-modify only) array-like object containing an ordered collection of `CSSRule` objects.

	Documentation [CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1"><c path="String"/></cssText>
		<length public="1" set="null"><x path="Int"/></length>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<alignContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-content" CSS property.</haxe_doc>
		</alignContent>
		<alignItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-items" CSS property.</haxe_doc>
		</alignItems>
		<alignSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-self" CSS property.</haxe_doc>
		</alignSelf>
		<alignmentAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-adjust" CSS property.</haxe_doc>
		</alignmentAdjust>
		<alignmentBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-baseline" CSS property.</haxe_doc>
		</alignmentBaseline>
		<all public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "all" CSS property.</haxe_doc>
		</all>
		<anchorPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "anchor-point" CSS property.</haxe_doc>
		</anchorPoint>
		<animation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation" CSS property.</haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-delay" CSS property.</haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-direction" CSS property.</haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-duration" CSS property.</haxe_doc>
		</animationDuration>
		<animationFillMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-fill-mode" CSS property.</haxe_doc>
		</animationFillMode>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-iteration-count" CSS property.</haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-name" CSS property.</haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-play-state" CSS property.</haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-timing-function" CSS property.</haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "azimuth" CSS property.</haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "backface-visibility" CSS property.</haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background" CSS property.</haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-attachment" CSS property.</haxe_doc>
		</backgroundAttachment>
		<backgroundBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-blend-mode" CSS property.</haxe_doc>
		</backgroundBlendMode>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-clip" CSS property.</haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-color" CSS property.</haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-image" CSS property.</haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-origin" CSS property.</haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position" CSS property.</haxe_doc>
		</backgroundPosition>
		<backgroundPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-x" CSS property.</haxe_doc>
		</backgroundPositionX>
		<backgroundPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-y" CSS property.</haxe_doc>
		</backgroundPositionY>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat" CSS property.</haxe_doc>
		</backgroundRepeat>
		<backgroundRepeatX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-x" CSS property.</haxe_doc>
		</backgroundRepeatX>
		<backgroundRepeatY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-y" CSS property.</haxe_doc>
		</backgroundRepeatY>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-size" CSS property.</haxe_doc>
		</backgroundSize>
		<baselineShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "baseline-shift" CSS property.</haxe_doc>
		</baselineShift>
		<binding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "binding" CSS property.</haxe_doc>
		</binding>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bleed" CSS property.</haxe_doc>
		</bleed>
		<blockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "block-size" CSS property.</haxe_doc>
		</blockSize>
		<bookmarkLabel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-label" CSS property.</haxe_doc>
		</bookmarkLabel>
		<bookmarkLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-level" CSS property.</haxe_doc>
		</bookmarkLevel>
		<bookmarkState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-state" CSS property.</haxe_doc>
		</bookmarkState>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border" CSS property.</haxe_doc>
		</border>
		<borderBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end" CSS property.</haxe_doc>
		</borderBlockEnd>
		<borderBlockEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-color" CSS property.</haxe_doc>
		</borderBlockEndColor>
		<borderBlockEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-style" CSS property.</haxe_doc>
		</borderBlockEndStyle>
		<borderBlockEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-width" CSS property.</haxe_doc>
		</borderBlockEndWidth>
		<borderBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start" CSS property.</haxe_doc>
		</borderBlockStart>
		<borderBlockStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-color" CSS property.</haxe_doc>
		</borderBlockStartColor>
		<borderBlockStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-style" CSS property.</haxe_doc>
		</borderBlockStartStyle>
		<borderBlockStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-width" CSS property.</haxe_doc>
		</borderBlockStartWidth>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom" CSS property.</haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-color" CSS property.</haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-left-radius" CSS property.</haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-right-radius" CSS property.</haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-style" CSS property.</haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-width" CSS property.</haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-collapse" CSS property.</haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-color" CSS property.</haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image" CSS property.</haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-outset" CSS property.</haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-repeat" CSS property.</haxe_doc>
		</borderImageRepeat>
		<borderImageSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-slice" CSS property.</haxe_doc>
		</borderImageSlice>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-source" CSS property.</haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-width" CSS property.</haxe_doc>
		</borderImageWidth>
		<borderInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end" CSS property.</haxe_doc>
		</borderInlineEnd>
		<borderInlineEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-color" CSS property.</haxe_doc>
		</borderInlineEndColor>
		<borderInlineEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-style" CSS property.</haxe_doc>
		</borderInlineEndStyle>
		<borderInlineEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-width" CSS property.</haxe_doc>
		</borderInlineEndWidth>
		<borderInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start" CSS property.</haxe_doc>
		</borderInlineStart>
		<borderInlineStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-color" CSS property.</haxe_doc>
		</borderInlineStartColor>
		<borderInlineStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-style" CSS property.</haxe_doc>
		</borderInlineStartStyle>
		<borderInlineStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-width" CSS property.</haxe_doc>
		</borderInlineStartWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left" CSS property.</haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-color" CSS property.</haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-style" CSS property.</haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-width" CSS property.</haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-radius" CSS property.</haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right" CSS property.</haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-color" CSS property.</haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-style" CSS property.</haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-width" CSS property.</haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-spacing" CSS property.</haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-style" CSS property.</haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top" CSS property.</haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-color" CSS property.</haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-left-radius" CSS property.</haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-right-radius" CSS property.</haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-style" CSS property.</haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-width" CSS property.</haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-width" CSS property.</haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bottom" CSS property.</haxe_doc>
		</bottom>
		<boxDecorationBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-decoration-break" CSS property.</haxe_doc>
		</boxDecorationBreak>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-shadow" CSS property.</haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-sizing" CSS property.</haxe_doc>
		</boxSizing>
		<boxSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-snap" CSS property.</haxe_doc>
		</boxSnap>
		<boxSuppress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-suppress" CSS property.</haxe_doc>
		</boxSuppress>
		<breakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-after" CSS property.</haxe_doc>
		</breakAfter>
		<breakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-before" CSS property.</haxe_doc>
		</breakBefore>
		<breakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-inside" CSS property.</haxe_doc>
		</breakInside>
		<bufferedRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "buffered-rendering" CSS property.</haxe_doc>
		</bufferedRendering>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caption-side" CSS property.</haxe_doc>
		</captionSide>
		<caretColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caret-color" CSS property.</haxe_doc>
		</caretColor>
		<chains public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "chains" CSS property.</haxe_doc>
		</chains>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clear" CSS property.</haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip" CSS property.</haxe_doc>
		</clip>
		<clipPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-path" CSS property.</haxe_doc>
		</clipPath>
		<clipRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-rule" CSS property.</haxe_doc>
		</clipRule>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color" CSS property.</haxe_doc>
		</color>
		<colorAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-adjust" CSS property.</haxe_doc>
		</colorAdjust>
		<colorInterpolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation" CSS property.</haxe_doc>
		</colorInterpolation>
		<colorInterpolationFilters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation-filters" CSS property.</haxe_doc>
		</colorInterpolationFilters>
		<colorRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-rendering" CSS property.</haxe_doc>
		</colorRendering>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-count" CSS property.</haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-fill" CSS property.</haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-gap" CSS property.</haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule" CSS property.</haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-color" CSS property.</haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-style" CSS property.</haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-width" CSS property.</haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-span" CSS property.</haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-width" CSS property.</haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "columns" CSS property.</haxe_doc>
		</columns>
		<contain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "contain" CSS property.</haxe_doc>
		</contain>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "content" CSS property.</haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-increment" CSS property.</haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-reset" CSS property.</haxe_doc>
		</counterReset>
		<counterSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-set" CSS property.</haxe_doc>
		</counterSet>
		<crop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "crop" CSS property.</haxe_doc>
		</crop>
		<cssFloat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "css-float" CSS property.</haxe_doc>
		</cssFloat>
		<cue public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue" CSS property.</haxe_doc>
		</cue>
		<cueAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-after" CSS property.</haxe_doc>
		</cueAfter>
		<cueBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-before" CSS property.</haxe_doc>
		</cueBefore>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cursor" CSS property.</haxe_doc>
		</cursor>
		<cx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cx" CSS property.</haxe_doc>
		</cx>
		<cy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cy" CSS property.</haxe_doc>
		</cy>
		<d public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "d" CSS property.</haxe_doc>
		</d>
		<direction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "direction" CSS property.</haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display" CSS property.</haxe_doc>
		</display>
		<displayInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-inside" CSS property.</haxe_doc>
		</displayInside>
		<displayList public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-list" CSS property.</haxe_doc>
		</displayList>
		<displayOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-outside" CSS property.</haxe_doc>
		</displayOutside>
		<dominantBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "dominant-baseline" CSS property.</haxe_doc>
		</dominantBaseline>
		<elevation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "elevation" CSS property.</haxe_doc>
		</elevation>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "empty-cells" CSS property.</haxe_doc>
		</emptyCells>
		<fill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill" CSS property.</haxe_doc>
		</fill>
		<fillOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-opacity" CSS property.</haxe_doc>
		</fillOpacity>
		<fillRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-rule" CSS property.</haxe_doc>
		</fillRule>
		<filter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "filter" CSS property.</haxe_doc>
		</filter>
		<flex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex" CSS property.</haxe_doc>
		</flex>
		<flexBasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-basis" CSS property.</haxe_doc>
		</flexBasis>
		<flexDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-direction" CSS property.</haxe_doc>
		</flexDirection>
		<flexFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-flow" CSS property.</haxe_doc>
		</flexFlow>
		<flexGrow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-grow" CSS property.</haxe_doc>
		</flexGrow>
		<flexShrink public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-shrink" CSS property.</haxe_doc>
		</flexShrink>
		<flexWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-wrap" CSS property.</haxe_doc>
		</flexWrap>
		<float public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float" CSS property.</haxe_doc>
		</float>
		<floatOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float-offset" CSS property.</haxe_doc>
		</floatOffset>
		<floodColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-color" CSS property.</haxe_doc>
		</floodColor>
		<floodOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-opacity" CSS property.</haxe_doc>
		</floodOpacity>
		<flowFrom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-from" CSS property.</haxe_doc>
		</flowFrom>
		<flowInto public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-into" CSS property.</haxe_doc>
		</flowInto>
		<font public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font" CSS property.</haxe_doc>
		</font>
		<fontDisplay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-display" CSS property.</haxe_doc>
		</fontDisplay>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-family" CSS property.</haxe_doc>
		</fontFamily>
		<fontFeatureSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-feature-settings" CSS property.</haxe_doc>
		</fontFeatureSettings>
		<fontKerning public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-kerning" CSS property.</haxe_doc>
		</fontKerning>
		<fontLanguageOverride public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-language-override" CSS property.</haxe_doc>
		</fontLanguageOverride>
		<fontOpticalSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-optical-sizing" CSS property.</haxe_doc>
		</fontOpticalSizing>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size" CSS property.</haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size-adjust" CSS property.</haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-stretch" CSS property.</haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-style" CSS property.</haxe_doc>
		</fontStyle>
		<fontSynthesis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-synthesis" CSS property.</haxe_doc>
		</fontSynthesis>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant" CSS property.</haxe_doc>
		</fontVariant>
		<fontVariantAlternates public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-alternates" CSS property.</haxe_doc>
		</fontVariantAlternates>
		<fontVariantCaps public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-caps" CSS property.</haxe_doc>
		</fontVariantCaps>
		<fontVariantEastAsian public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-east-asian" CSS property.</haxe_doc>
		</fontVariantEastAsian>
		<fontVariantLigatures public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-ligatures" CSS property.</haxe_doc>
		</fontVariantLigatures>
		<fontVariantNumeric public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-numeric" CSS property.</haxe_doc>
		</fontVariantNumeric>
		<fontVariantPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-position" CSS property.</haxe_doc>
		</fontVariantPosition>
		<fontVariationSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variation-settings" CSS property.</haxe_doc>
		</fontVariationSettings>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-weight" CSS property.</haxe_doc>
		</fontWeight>
		<gap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "gap" CSS property.</haxe_doc>
		</gap>
		<grid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid" CSS property.</haxe_doc>
		</grid>
		<gridArea public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-area" CSS property.</haxe_doc>
		</gridArea>
		<gridAutoColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-columns" CSS property.</haxe_doc>
		</gridAutoColumns>
		<gridAutoFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-flow" CSS property.</haxe_doc>
		</gridAutoFlow>
		<gridAutoRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-rows" CSS property.</haxe_doc>
		</gridAutoRows>
		<gridColumn public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column" CSS property.</haxe_doc>
		</gridColumn>
		<gridColumnEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-end" CSS property.</haxe_doc>
		</gridColumnEnd>
		<gridColumnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-gap" CSS property.</haxe_doc>
		</gridColumnGap>
		<gridColumnStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-start" CSS property.</haxe_doc>
		</gridColumnStart>
		<gridGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-gap" CSS property.</haxe_doc>
		</gridGap>
		<gridRow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row" CSS property.</haxe_doc>
		</gridRow>
		<gridRowEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-end" CSS property.</haxe_doc>
		</gridRowEnd>
		<gridRowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-gap" CSS property.</haxe_doc>
		</gridRowGap>
		<gridRowStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-start" CSS property.</haxe_doc>
		</gridRowStart>
		<gridTemplate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template" CSS property.</haxe_doc>
		</gridTemplate>
		<gridTemplateAreas public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-areas" CSS property.</haxe_doc>
		</gridTemplateAreas>
		<gridTemplateColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-columns" CSS property.</haxe_doc>
		</gridTemplateColumns>
		<gridTemplateRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-rows" CSS property.</haxe_doc>
		</gridTemplateRows>
		<hangingPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hanging-punctuation" CSS property.</haxe_doc>
		</hangingPunctuation>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "height" CSS property.</haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hyphens" CSS property.</haxe_doc>
		</hyphens>
		<icon public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "icon" CSS property.</haxe_doc>
		</icon>
		<imageOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-orientation" CSS property.</haxe_doc>
		</imageOrientation>
		<imageRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-rendering" CSS property.</haxe_doc>
		</imageRendering>
		<imageResolution public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-resolution" CSS property.</haxe_doc>
		</imageResolution>
		<imeMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ime-mode" CSS property.</haxe_doc>
		</imeMode>
		<initialLetters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "initial-letters" CSS property.</haxe_doc>
		</initialLetters>
		<inlineBoxAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-box-align" CSS property.</haxe_doc>
		</inlineBoxAlign>
		<inlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-size" CSS property.</haxe_doc>
		</inlineSize>
		<isolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "isolation" CSS property.</haxe_doc>
		</isolation>
		<justifyContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-content" CSS property.</haxe_doc>
		</justifyContent>
		<justifyItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-items" CSS property.</haxe_doc>
		</justifyItems>
		<justifySelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-self" CSS property.</haxe_doc>
		</justifySelf>
		<left public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "left" CSS property.</haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "letter-spacing" CSS property.</haxe_doc>
		</letterSpacing>
		<lightingColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "lighting-color" CSS property.</haxe_doc>
		</lightingColor>
		<lineBoxContain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-box-contain" CSS property.</haxe_doc>
		</lineBoxContain>
		<lineBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-break" CSS property.</haxe_doc>
		</lineBreak>
		<lineGrid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-grid" CSS property.</haxe_doc>
		</lineGrid>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-height" CSS property.</haxe_doc>
		</lineHeight>
		<lineSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-snap" CSS property.</haxe_doc>
		</lineSnap>
		<lineStacking public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking" CSS property.</haxe_doc>
		</lineStacking>
		<lineStackingRuby public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-ruby" CSS property.</haxe_doc>
		</lineStackingRuby>
		<lineStackingShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-shift" CSS property.</haxe_doc>
		</lineStackingShift>
		<lineStackingStrategy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-strategy" CSS property.</haxe_doc>
		</lineStackingStrategy>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style" CSS property.</haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-image" CSS property.</haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-position" CSS property.</haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-type" CSS property.</haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin" CSS property.</haxe_doc>
		</margin>
		<marginBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-end" CSS property.</haxe_doc>
		</marginBlockEnd>
		<marginBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-start" CSS property.</haxe_doc>
		</marginBlockStart>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-bottom" CSS property.</haxe_doc>
		</marginBottom>
		<marginInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-end" CSS property.</haxe_doc>
		</marginInlineEnd>
		<marginInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-start" CSS property.</haxe_doc>
		</marginInlineStart>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-left" CSS property.</haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-right" CSS property.</haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-top" CSS property.</haxe_doc>
		</marginTop>
		<marker public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker" CSS property.</haxe_doc>
		</marker>
		<markerEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-end" CSS property.</haxe_doc>
		</markerEnd>
		<markerMid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-mid" CSS property.</haxe_doc>
		</markerMid>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-offset" CSS property.</haxe_doc>
		</markerOffset>
		<markerSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-side" CSS property.</haxe_doc>
		</markerSide>
		<markerStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-start" CSS property.</haxe_doc>
		</markerStart>
		<marks public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marks" CSS property.</haxe_doc>
		</marks>
		<mask public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask" CSS property.</haxe_doc>
		</mask>
		<maskBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box" CSS property.</haxe_doc>
		</maskBox>
		<maskBoxOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-outset" CSS property.</haxe_doc>
		</maskBoxOutset>
		<maskBoxRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-repeat" CSS property.</haxe_doc>
		</maskBoxRepeat>
		<maskBoxSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-slice" CSS property.</haxe_doc>
		</maskBoxSlice>
		<maskBoxSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-source" CSS property.</haxe_doc>
		</maskBoxSource>
		<maskBoxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-width" CSS property.</haxe_doc>
		</maskBoxWidth>
		<maskClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-clip" CSS property.</haxe_doc>
		</maskClip>
		<maskComposite public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-composite" CSS property.</haxe_doc>
		</maskComposite>
		<maskImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-image" CSS property.</haxe_doc>
		</maskImage>
		<maskMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-mode" CSS property.</haxe_doc>
		</maskMode>
		<maskOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-origin" CSS property.</haxe_doc>
		</maskOrigin>
		<maskPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position" CSS property.</haxe_doc>
		</maskPosition>
		<maskPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-x" CSS property.</haxe_doc>
		</maskPositionX>
		<maskPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-y" CSS property.</haxe_doc>
		</maskPositionY>
		<maskRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-repeat" CSS property.</haxe_doc>
		</maskRepeat>
		<maskSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-size" CSS property.</haxe_doc>
		</maskSize>
		<maskSourceType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-source-type" CSS property.</haxe_doc>
		</maskSourceType>
		<maskType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-type" CSS property.</haxe_doc>
		</maskType>
		<maxBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-block-size" CSS property.</haxe_doc>
		</maxBlockSize>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-height" CSS property.</haxe_doc>
		</maxHeight>
		<maxInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-inline-size" CSS property.</haxe_doc>
		</maxInlineSize>
		<maxLines public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-lines" CSS property.</haxe_doc>
		</maxLines>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-width" CSS property.</haxe_doc>
		</maxWidth>
		<maxZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-zoom" CSS property.</haxe_doc>
		</maxZoom>
		<minBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-block-size" CSS property.</haxe_doc>
		</minBlockSize>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-height" CSS property.</haxe_doc>
		</minHeight>
		<minInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-inline-size" CSS property.</haxe_doc>
		</minInlineSize>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-width" CSS property.</haxe_doc>
		</minWidth>
		<minZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-zoom" CSS property.</haxe_doc>
		</minZoom>
		<mixBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mix-blend-mode" CSS property.</haxe_doc>
		</mixBlendMode>
		<moveTo public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "move-to" CSS property.</haxe_doc>
		</moveTo>
		<navDown public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-down" CSS property.</haxe_doc>
		</navDown>
		<navIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-index" CSS property.</haxe_doc>
		</navIndex>
		<navLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-left" CSS property.</haxe_doc>
		</navLeft>
		<navRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-right" CSS property.</haxe_doc>
		</navRight>
		<navUp public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-up" CSS property.</haxe_doc>
		</navUp>
		<objectFit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-fit" CSS property.</haxe_doc>
		</objectFit>
		<objectPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-position" CSS property.</haxe_doc>
		</objectPosition>
		<offset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset" CSS property.</haxe_doc>
		</offset>
		<offsetBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-end" CSS property.</haxe_doc>
		</offsetBlockEnd>
		<offsetBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-start" CSS property.</haxe_doc>
		</offsetBlockStart>
		<offsetDistance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-distance" CSS property.</haxe_doc>
		</offsetDistance>
		<offsetInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-end" CSS property.</haxe_doc>
		</offsetInlineEnd>
		<offsetInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-start" CSS property.</haxe_doc>
		</offsetInlineStart>
		<offsetPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-path" CSS property.</haxe_doc>
		</offsetPath>
		<offsetRotate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-rotate" CSS property.</haxe_doc>
		</offsetRotate>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "opacity" CSS property.</haxe_doc>
		</opacity>
		<order public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "order" CSS property.</haxe_doc>
		</order>
		<orientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orientation" CSS property.</haxe_doc>
		</orientation>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orphans" CSS property.</haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline" CSS property.</haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-color" CSS property.</haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-offset" CSS property.</haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-style" CSS property.</haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-width" CSS property.</haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow" CSS property.</haxe_doc>
		</overflow>
		<overflowAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-anchor" CSS property.</haxe_doc>
		</overflowAnchor>
		<overflowWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-wrap" CSS property.</haxe_doc>
		</overflowWrap>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-x" CSS property.</haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-y" CSS property.</haxe_doc>
		</overflowY>
		<overscrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior" CSS property.</haxe_doc>
		</overscrollBehavior>
		<overscrollBehaviorX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-x" CSS property.</haxe_doc>
		</overscrollBehaviorX>
		<overscrollBehaviorY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-y" CSS property.</haxe_doc>
		</overscrollBehaviorY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding" CSS property.</haxe_doc>
		</padding>
		<paddingBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-end" CSS property.</haxe_doc>
		</paddingBlockEnd>
		<paddingBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-start" CSS property.</haxe_doc>
		</paddingBlockStart>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-bottom" CSS property.</haxe_doc>
		</paddingBottom>
		<paddingInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-end" CSS property.</haxe_doc>
		</paddingInlineEnd>
		<paddingInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-start" CSS property.</haxe_doc>
		</paddingInlineStart>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-left" CSS property.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-right" CSS property.</haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-top" CSS property.</haxe_doc>
		</paddingTop>
		<page public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page" CSS property.</haxe_doc>
		</page>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-after" CSS property.</haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-before" CSS property.</haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-inside" CSS property.</haxe_doc>
		</pageBreakInside>
		<pagePolicy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-policy" CSS property.</haxe_doc>
		</pagePolicy>
		<paintOrder public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "paint-order" CSS property.</haxe_doc>
		</paintOrder>
		<pause public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause" CSS property.</haxe_doc>
		</pause>
		<pauseAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-after" CSS property.</haxe_doc>
		</pauseAfter>
		<pauseBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-before" CSS property.</haxe_doc>
		</pauseBefore>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective" CSS property.</haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective-origin" CSS property.</haxe_doc>
		</perspectiveOrigin>
		<pitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch" CSS property.</haxe_doc>
		</pitch>
		<pitchRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch-range" CSS property.</haxe_doc>
		</pitchRange>
		<placeContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-content" CSS property.</haxe_doc>
		</placeContent>
		<placeItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-items" CSS property.</haxe_doc>
		</placeItems>
		<placeSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-self" CSS property.</haxe_doc>
		</placeSelf>
		<playDuring public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "play-during" CSS property.</haxe_doc>
		</playDuring>
		<pointerEvents public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pointer-events" CSS property.</haxe_doc>
		</pointerEvents>
		<position public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "position" CSS property.</haxe_doc>
		</position>
		<presentationLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "presentation-level" CSS property.</haxe_doc>
		</presentationLevel>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "quotes" CSS property.</haxe_doc>
		</quotes>
		<r public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "r" CSS property.</haxe_doc>
		</r>
		<regionFragment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "region-fragment" CSS property.</haxe_doc>
		</regionFragment>
		<resize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "resize" CSS property.</haxe_doc>
		</resize>
		<rest public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest" CSS property.</haxe_doc>
		</rest>
		<restAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-after" CSS property.</haxe_doc>
		</restAfter>
		<restBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-before" CSS property.</haxe_doc>
		</restBefore>
		<richness public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "richness" CSS property.</haxe_doc>
		</richness>
		<right public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "right" CSS property.</haxe_doc>
		</right>
		<rotation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation" CSS property.</haxe_doc>
		</rotation>
		<rotationPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation-point" CSS property.</haxe_doc>
		</rotationPoint>
		<rowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "row-gap" CSS property.</haxe_doc>
		</rowGap>
		<rubyAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-align" CSS property.</haxe_doc>
		</rubyAlign>
		<rubyMerge public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-merge" CSS property.</haxe_doc>
		</rubyMerge>
		<rubyPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-position" CSS property.</haxe_doc>
		</rubyPosition>
		<rx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rx" CSS property.</haxe_doc>
		</rx>
		<ry public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ry" CSS property.</haxe_doc>
		</ry>
		<scrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-behavior" CSS property.</haxe_doc>
		</scrollBehavior>
		<scrollSnapCoordinate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-coordinate" CSS property.</haxe_doc>
		</scrollSnapCoordinate>
		<scrollSnapDestination public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-destination" CSS property.</haxe_doc>
		</scrollSnapDestination>
		<scrollSnapPointsX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-x" CSS property.</haxe_doc>
		</scrollSnapPointsX>
		<scrollSnapPointsY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-y" CSS property.</haxe_doc>
		</scrollSnapPointsY>
		<scrollSnapType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type" CSS property.</haxe_doc>
		</scrollSnapType>
		<scrollSnapTypeX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-x" CSS property.</haxe_doc>
		</scrollSnapTypeX>
		<scrollSnapTypeY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-y" CSS property.</haxe_doc>
		</scrollSnapTypeY>
		<shapeImageThreshold public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-image-threshold" CSS property.</haxe_doc>
		</shapeImageThreshold>
		<shapeMargin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-margin" CSS property.</haxe_doc>
		</shapeMargin>
		<shapeOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-outside" CSS property.</haxe_doc>
		</shapeOutside>
		<shapeRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-rendering" CSS property.</haxe_doc>
		</shapeRendering>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "size" CSS property.</haxe_doc>
		</size>
		<speak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak" CSS property.</haxe_doc>
		</speak>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-as" CSS property.</haxe_doc>
		</speakAs>
		<speakHeader public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-header" CSS property.</haxe_doc>
		</speakHeader>
		<speakNumeral public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-numeral" CSS property.</haxe_doc>
		</speakNumeral>
		<speakPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-punctuation" CSS property.</haxe_doc>
		</speakPunctuation>
		<speechRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speech-rate" CSS property.</haxe_doc>
		</speechRate>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "src" CSS property.</haxe_doc>
		</src>
		<stopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-color" CSS property.</haxe_doc>
		</stopColor>
		<stopOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-opacity" CSS property.</haxe_doc>
		</stopOpacity>
		<stress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stress" CSS property.</haxe_doc>
		</stress>
		<stringSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "string-set" CSS property.</haxe_doc>
		</stringSet>
		<stroke public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke" CSS property.</haxe_doc>
		</stroke>
		<strokeDasharray public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dasharray" CSS property.</haxe_doc>
		</strokeDasharray>
		<strokeDashoffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dashoffset" CSS property.</haxe_doc>
		</strokeDashoffset>
		<strokeLinecap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linecap" CSS property.</haxe_doc>
		</strokeLinecap>
		<strokeLinejoin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linejoin" CSS property.</haxe_doc>
		</strokeLinejoin>
		<strokeMiterlimit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-miterlimit" CSS property.</haxe_doc>
		</strokeMiterlimit>
		<strokeOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-opacity" CSS property.</haxe_doc>
		</strokeOpacity>
		<strokeWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-width" CSS property.</haxe_doc>
		</strokeWidth>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "tab-size" CSS property.</haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "table-layout" CSS property.</haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align" CSS property.</haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align-last" CSS property.</haxe_doc>
		</textAlignLast>
		<textAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-anchor" CSS property.</haxe_doc>
		</textAnchor>
		<textCombineUpright public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-combine-upright" CSS property.</haxe_doc>
		</textCombineUpright>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration" CSS property.</haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-color" CSS property.</haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-line" CSS property.</haxe_doc>
		</textDecorationLine>
		<textDecorationSkip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip" CSS property.</haxe_doc>
		</textDecorationSkip>
		<textDecorationSkipInk public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip-ink" CSS property.</haxe_doc>
		</textDecorationSkipInk>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-style" CSS property.</haxe_doc>
		</textDecorationStyle>
		<textEmphasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis" CSS property.</haxe_doc>
		</textEmphasis>
		<textEmphasisColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-color" CSS property.</haxe_doc>
		</textEmphasisColor>
		<textEmphasisPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-position" CSS property.</haxe_doc>
		</textEmphasisPosition>
		<textEmphasisStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-style" CSS property.</haxe_doc>
		</textEmphasisStyle>
		<textHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-height" CSS property.</haxe_doc>
		</textHeight>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-indent" CSS property.</haxe_doc>
		</textIndent>
		<textJustify public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-justify" CSS property.</haxe_doc>
		</textJustify>
		<textOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-orientation" CSS property.</haxe_doc>
		</textOrientation>
		<textOverflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-overflow" CSS property.</haxe_doc>
		</textOverflow>
		<textRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-rendering" CSS property.</haxe_doc>
		</textRendering>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-shadow" CSS property.</haxe_doc>
		</textShadow>
		<textSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-size-adjust" CSS property.</haxe_doc>
		</textSizeAdjust>
		<textSpaceCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-space-collapse" CSS property.</haxe_doc>
		</textSpaceCollapse>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-transform" CSS property.</haxe_doc>
		</textTransform>
		<textUnderlinePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-underline-position" CSS property.</haxe_doc>
		</textUnderlinePosition>
		<textWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-wrap" CSS property.</haxe_doc>
		</textWrap>
		<top public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "top" CSS property.</haxe_doc>
		</top>
		<touchAction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "touch-action" CSS property.</haxe_doc>
		</touchAction>
		<transform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform" CSS property.</haxe_doc>
		</transform>
		<transformBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-box" CSS property.</haxe_doc>
		</transformBox>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-origin" CSS property.</haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-style" CSS property.</haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition" CSS property.</haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-delay" CSS property.</haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-duration" CSS property.</haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-property" CSS property.</haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-timing-function" CSS property.</haxe_doc>
		</transitionTimingFunction>
		<unicodeBidi public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-bidi" CSS property.</haxe_doc>
		</unicodeBidi>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-range" CSS property.</haxe_doc>
		</unicodeRange>
		<userSelect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-select" CSS property.</haxe_doc>
		</userSelect>
		<userZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-zoom" CSS property.</haxe_doc>
		</userZoom>
		<vectorEffect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vector-effect" CSS property.</haxe_doc>
		</vectorEffect>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vertical-align" CSS property.</haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "visibility" CSS property.</haxe_doc>
		</visibility>
		<voiceBalance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-balance" CSS property.</haxe_doc>
		</voiceBalance>
		<voiceDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-duration" CSS property.</haxe_doc>
		</voiceDuration>
		<voiceFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-family" CSS property.</haxe_doc>
		</voiceFamily>
		<voicePitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-pitch" CSS property.</haxe_doc>
		</voicePitch>
		<voiceRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-range" CSS property.</haxe_doc>
		</voiceRange>
		<voiceRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-rate" CSS property.</haxe_doc>
		</voiceRate>
		<voiceStress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-stress" CSS property.</haxe_doc>
		</voiceStress>
		<voiceVolume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-volume" CSS property.</haxe_doc>
		</voiceVolume>
		<volume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "volume" CSS property.</haxe_doc>
		</volume>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "white-space" CSS property.</haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "widows" CSS property.</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "width" CSS property.</haxe_doc>
		</width>
		<willChange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "will-change" CSS property.</haxe_doc>
		</willChange>
		<wordBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-break" CSS property.</haxe_doc>
		</wordBreak>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-spacing" CSS property.</haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-wrap" CSS property.</haxe_doc>
		</wordWrap>
		<wrapFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-flow" CSS property.</haxe_doc>
		</wrapFlow>
		<wrapThrough public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-through" CSS property.</haxe_doc>
		</wrapThrough>
		<writingMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "writing-mode" CSS property.</haxe_doc>
		</writingMode>
		<x public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "x" CSS property.</haxe_doc>
		</x>
		<y public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "y" CSS property.</haxe_doc>
		</y>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "z-index" CSS property.</haxe_doc>
		</zIndex>
		<zoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "zoom" CSS property.</haxe_doc>
		</zoom>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<getPropertyValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyValue>
		<getPropertyPriority public="1" set="method"><f a="property">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<setProperty public="1" set="method">
			<f a="property:value:?priority" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setProperty>
		<removeProperty public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeProperty>
		<haxe_doc><![CDATA[`CSSStyleDeclaration` represents a collection of CSS property-value pairs. It is used in a few APIs:

	Documentation [CSSStyleDeclaration](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StyleSheet.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the style sheet language for this style sheet.</haxe_doc>
		</type>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the location of the stylesheet.</haxe_doc>
		</href>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` associating this style sheet with the current document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the advisory title of the current style sheet.</haxe_doc>
		</title>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Returns a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` representing whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<haxe_doc><![CDATA[An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.

	Documentation [StyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<ownerRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc>If this style sheet is imported into the document using an `@import` rule, the `ownerRule` property will return that `CSSImportRule`, otherwise it returns `null`.</haxe_doc>
		</ownerRule>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc>Returns a live `CSSRuleList`, listing the `CSSRule` objects in the style sheet.
		
		 This is normally used to access individual rules like this:
		
		 `   styleSheet.cssRules[i] // where i = 0..cssRules.length-1`
		
		 To add or remove items in `cssRules`, use the `CSSStyleSheet`'s `deleteRule()` and `insertRule()` methods, described below.</haxe_doc>
		</cssRules>
		<insertRule public="1" set="method">
			<f a="rule:?index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
			<haxe_doc>Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.
		@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a rule at the specified position from the style sheet.
		@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[The `CSSStyleSheet` interface represents a single CSS style sheet. It inherits properties and methods from its parent, `StyleSheet`.

	Documentation [CSSStyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.Cache" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Cache.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><match public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></match></overloads>
		</match>
		<matchAll public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
			</f>
			<overloads><matchAll public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
</f></matchAll></overloads>
		</matchAll>
		<add public="1" set="method">
			<f a="request">
				<c path="js.html.Request"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><add public="1" set="method"><f a="request">
	<c path="String"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></add></overloads>
		</add>
		<addAll public="1" set="method"><f a="requests">
	<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Request"/>
	<c path="String"/>
</x></c>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addAll>
		<put public="1" set="method">
			<f a="request:response">
				<c path="js.html.Request"/>
				<c path="js.html.Response"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><put public="1" set="method"><f a="request:response">
	<c path="String"/>
	<c path="js.html.Response"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></put></overloads>
		</put>
		<delete public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<overloads><delete public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><x path="Bool"/></c>
</f></delete></overloads>
		</delete>
		<keys public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
			</f>
			<overloads><keys public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
</f></keys></overloads>
		</keys>
		<haxe_doc><![CDATA[The `Cache` interface provides a storage mechanism for `Request` / `Response` object pairs that are cached, for example as part of the `ServiceWorker` life cycle. Note that the `Cache` interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.

	Documentation [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Cache$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Cache>]]></haxe_doc>
		<meta><m n=":native"><e>"Cache"</e></m></meta>
	</class>
	<typedef path="js.html.CacheQueryOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CacheQueryOptions.hx"><a>
	<ignoreVary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreVary>
	<ignoreSearch>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreSearch>
	<ignoreMethod>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreMethod>
	<cacheName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</cacheName>
</a></typedef>
	<class path="js.html.CacheStorage" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CacheStorage.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
			<overloads><match public="1" set="method">
	<f a="request:?options">
		<c path="String"/>
		<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
		<c path="js.lib.Promise"><c path="js.html.Response"/></c>
	</f>
	<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
</match></overloads>
		</match>
		<has public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if a `Cache` object matching the `cacheName` exists.</haxe_doc>
		</has>
		<open public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.Cache"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the `Cache` object matching the `cacheName` (a new cache is created if it doesn't already exist.)</haxe_doc>
		</open>
		<delete public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Finds the `Cache` object matching the `cacheName`, and if found, deletes the `Cache` object and returns a `Promise` that resolves to `true`. If no `Cache` object is found, it returns `false`.</haxe_doc>
		</delete>
		<keys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="String"/></c></c></f>
			<haxe_doc>Returns a `Promise` that will resolve with an array containing strings corresponding to all of the named `Cache` objects tracked by the `CacheStorage`. Use this method to iterate over a list of all the `Cache` objects.</haxe_doc>
		</keys>
		<new public="1" set="method">
			<f a="namespace:principal">
				<x path="js.html.CacheStorageNamespace"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `CacheStorage` interface represents the storage for `Cache` objects.

	Documentation [CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage>]]></haxe_doc>
		<meta><m n=":native"><e>"CacheStorage"</e></m></meta>
	</class>
	<abstract path="js.html.CacheStorageNamespace" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CacheStorageNamespace.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CacheStorageNamespace.CacheStorageNamespace_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CacheStorageNamespace.hx" private="1" module="js.html.CacheStorageNamespace" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaStream" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.</haxe_doc>
		</id>
		<active public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.</haxe_doc>
		</active>
		<onaddtrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `addtrack` event is fired when a new `MediaStreamTrack` object is added.</haxe_doc>
		</onaddtrack>
		<onremovetrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when a `removetrack` event is fired when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onremovetrack>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<getAudioTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.AudioStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the MediaStream` object that have their kind` attribute set to "audio"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getAudioTracks>
		<getVideoTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.VideoStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `"video"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getVideoTracks>
		<getTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.MediaStreamTrack"/></c></f>
			<haxe_doc>Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getTracks>
		<getTrackById public="1" set="method">
			<f a="trackId">
				<c path="String"/>
				<c path="js.html.MediaStreamTrack"/>
			</f>
			<haxe_doc>Returns the track whose ID corresponds to the one given in parameters, trackid`. If no parameter is given, or if no track with that ID does exist, it returns null`. If several tracks have the same ID, it returns the first one.</haxe_doc>
		</getTrackById>
		<addTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.</haxe_doc>
		</addTrack>
		<removeTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.</haxe_doc>
		</removeTrack>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStream"/></f>
			<haxe_doc>Returns a clone of the `MediaStream` object. The clone will, however, have a unique value for `MediaStream.id`.</haxe_doc>
		</clone>
		<new public="1" set="method">
			<f a="tracks">
				<c path="Array"><c path="js.html.MediaStreamTrack"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="stream">
						<c path="js.html.MediaStream"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.

	Documentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasCaptureMediaStream" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasCaptureMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<requestFrame public="1" set="method"><f a=""><x path="Void"/></f></requestFrame>
		<meta><m n=":native"><e>"CanvasCaptureMediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.</haxe_doc>
		</height>
		<getContext public="1" set="method">
			<f a="contextId:?contextOptions">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `"2d"` returns a `CanvasRenderingContext2D` object, whereas calling it with `"webgl"` (or `"experimental-webgl"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.
		@throws DOMError</haxe_doc>
		</getContext>
		<toDataURL public="1" set="method">
			<f a="?type:?encoderOptions" v="&quot;&quot;:">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Returns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.
		@throws DOMError</haxe_doc>
		</toDataURL>
		<toBlob public="1" set="method">
			<f a="callback:?type:?encoderOptions" v=":&quot;&quot;:">
				<f a="">
					<c path="js.html.Blob"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Creates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.
		@throws DOMError</haxe_doc>
		</toBlob>
		<captureStream public="1" set="method">
			<f a="?frameRate">
				<x path="Float"/>
				<c path="js.html.CanvasCaptureMediaStream"/>
			</f>
			<haxe_doc>Returns a `CanvasCaptureMediaStream` that is a real-time video capture of the surface of the canvas.
		@throws DOMError</haxe_doc>
		</captureStream>
		<getContext2d public="1" get="inline" set="null" line="73">
			<f a="?attribs">
				<a/>
				<c path="js.html.CanvasRenderingContext2D"/>
			</f>
			<haxe_doc>Shorthand for getting a CanvasRenderingContext2D.</haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="77">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.RenderingContext.</haxe_doc>
		</getContextWebGL>
		<getContextWebGL2 public="1" get="inline" set="null" line="81">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.WebGL2RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.WebGL2RenderingContext.</haxe_doc>
		</getContextWebGL2>
		<haxe_doc><![CDATA[The `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html.CanvasGradient" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method">
			<f a="offset:color">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new stop, defined by an `offset` and a `color`, to the gradient. If the offset is not between `0` and `1` an `INDEX_SIZE_ERR` is raised, if the color can't be parsed as a CSS `color`, a `SYNTAX_ERR` is raised.
		@throws DOMError</haxe_doc>
		</addColorStop>
		<haxe_doc><![CDATA[The `CanvasGradient` interface represents an opaque object describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.

	Documentation [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasPattern.hx" extern="1">
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies an `SVGMatrix` representing a linear transform to the pattern.</haxe_doc>
		</setTransform>
		<haxe_doc><![CDATA[The `CanvasPattern` interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the `CanvasRenderingContext2D.createPattern()` method.

	Documentation [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<globalAlpha public="1"><x path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<strokeStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></strokeStyle>
		<fillStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></fillStyle>
		<filter public="1"><c path="String"/></filter>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<shadowOffsetX public="1"><x path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><x path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><x path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<drawImage public="1" set="method">
			<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
				<c path="js.html.ImageElement"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<fill public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><fill public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</fill></overloads>
		</fill>
		<stroke public="1" set="method">
			<f a="path">
				<c path="js.html.Path2D"/>
				<x path="Void"/>
			</f>
			<overloads><stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke></overloads>
		</stroke>
		<clip public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><clip public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</clip></overloads>
		</clip>
		<isPointInPath public="1" set="method">
			<f a="path:x:y:?winding" v=":::NONZERO">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><isPointInPath public="1" set="method">
	<f a="x:y:?winding" v="::NONZERO">
		<x path="Float"/>
		<x path="Float"/>
		<x path="js.html.CanvasWindingRule"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</isPointInPath></overloads>
		</isPointInPath>
		<isPointInStroke public="1" set="method">
			<f a="path:x:y">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<overloads><isPointInStroke public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInStroke></overloads>
		</isPointInStroke>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method">
			<f a="x0:y0:r0:x1:y1:r1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CanvasGradient"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRadialGradient>
		<createPattern public="1" set="method">
			<f a="image:repetition">
				<c path="js.html.ImageElement"/>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.svg.ImageElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.CanvasElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.VideoElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.ImageBitmap"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
			</overloads>
		</createPattern>
		<addHitRegion public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.HitRegionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addHitRegion>
		<removeHitRegion public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></removeHitRegion>
		<clearHitRegions public="1" set="method"><f a=""><x path="Void"/></f></clearHitRegions>
		<createImageData public="1" set="method">
			<f a="imagedata">
				<c path="js.html.ImageData"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="sw:sh">
		<x path="Float"/>
		<x path="Float"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<getImageData public="1" set="method">
			<f a="sx:sy:sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getImageData>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</putImageData></overloads>
		</putImageData>
		<setLineDash public="1" set="method">
			<f a="segments">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setLineDash>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<fillText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fillText>
		<strokeText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</strokeText>
		<measureText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="js.html.TextMetrics"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</measureText>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotate>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</translate>
		<transform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transform>
		<setTransform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTransform>
		<resetTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resetTransform>
		<drawFocusIfNeeded public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</drawFocusIfNeeded>
		<drawCustomFocusRing public="1" set="method"><f a="element">
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></drawCustomFocusRing>
		<haxe_doc><![CDATA[To get an object of this interface, call `getContext()` on a `canvas element`, supplying "2d" as the argument:

	Documentation [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<abstract path="js.html.CanvasWindingRule" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasWindingRule.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CaretPosition" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CaretPosition.hx" extern="1">
		<offsetNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` containing the found node at the caret's position.</haxe_doc>
		</offsetNode>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the character offset in the caret position node.</haxe_doc>
		</offset>
		<getClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getClientRect>
		<haxe_doc><![CDATA[The `CaretPosition` interface represents the caret postion, an indicator for the text insertion point. You can get a `CaretPosition` using the `document.caretPositionFromPoint` method.

	Documentation [CaretPosition](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition>]]></haxe_doc>
		<meta><m n=":native"><e>"CaretPosition"</e></m></meta>
	</class>
	<typedef path="js.html.ChannelPixelLayout" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ChannelPixelLayout.hx"><a>
	<width><x path="Int"/></width>
	<stride><x path="Int"/></stride>
	<skip><x path="Int"/></skip>
	<offset><x path="Int"/></offset>
	<height><x path="Int"/></height>
	<dataType><x path="js.html.ChannelPixelLayoutDataType"/></dataType>
</a></typedef>
	<abstract path="js.html.ChannelPixelLayoutDataType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ChannelPixelLayoutDataType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ChannelPixelLayoutDataType.ChannelPixelLayoutDataType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ChannelPixelLayoutDataType.hx" private="1" module="js.html.ChannelPixelLayoutDataType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Clipboard" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Clipboard.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<read public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.DataTransfer"/></c></f>
			<haxe_doc>Requests arbitrary data (such as images) from the clipboard, returning a `Promise`. When the data has been retrieved, the promise is resolved with a `DataTransfer` object that provides the data.
		@throws DOMError</haxe_doc>
		</read>
		<readText public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>Requests text from the system clipboard; returns a `Promise` which is resolved with a `DOMString` containing the clipboard's text once it's available.
		@throws DOMError</haxe_doc>
		</readText>
		<write public="1" set="method">
			<f a="data">
				<c path="js.html.DataTransfer"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned `Promise`.
		@throws DOMError</haxe_doc>
		</write>
		<writeText public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes text to the system clipboard, returning a `Promise` which is resolved once the text is fully copied into the clipboard.
		@throws DOMError</haxe_doc>
		</writeText>
		<haxe_doc><![CDATA[The `Clipboard` interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.

	Documentation [Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clipboard>]]></haxe_doc>
		<meta><m n=":native"><e>"Clipboard"</e></m></meta>
	</class>
	<class path="js.html.Comment" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Comment` interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '`!--`' and '`--`'. In XML, the character sequence '`--`' cannot be used within a comment.

	Documentation [Comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Comment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Comment>]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<abstract path="js.html.CompositeOperation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ComputedEffectTiming" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ComputedEffectTiming.hx"><a>
	<progress>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</progress>
	<localTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</localTime>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endTime>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<currentIteration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</currentIteration>
	<activeDuration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</activeDuration>
</a></typedef>
	<class path="js.html.ConsoleInstance" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ConsoleInstance.hx" extern="1" interface="1">
		<assert public="1" set="method">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [Console](https://developer.mozilla.org/en-US/docs/Web/API/Console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Console>]]></haxe_doc>
	</class>
	<typedef path="js.html.ConstrainBooleanParameters" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ConstrainBooleanParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDOMStringParameters" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ConstrainDOMStringParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDoubleRange" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ConstrainDoubleRange.hx"><a>
	<min>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainLongRange" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ConstrainLongRange.hx"><a>
	<min>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConvertCoordinateOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ConvertCoordinateOptions.hx"><a>
	<toBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</toBox>
	<fromBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</fromBox>
</a></typedef>
	<typedef path="js.html.Coordinates" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Coordinates.hx">
		<a>
			<speed set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the velocity of the device in meters per second. This value can be `null`.</haxe_doc>
			</speed>
			<longitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's longitude in decimal degrees.</haxe_doc>
			</longitude>
			<latitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's latitude in decimal degrees.</haxe_doc>
			</latitude>
			<heading set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.</haxe_doc>
			</heading>
			<altitudeAccuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null`.</haxe_doc>
			</altitudeAccuracy>
			<altitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's altitude in meters, relative to sea level. This value can be `null` if the implementation cannot provide the data.</haxe_doc>
			</altitude>
			<accuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.</haxe_doc>
			</accuracy>
		</a>
		<haxe_doc><![CDATA[The `Coordinates` interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.

	Documentation [Coordinates](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Coordinates>]]></haxe_doc>
	</typedef>
	<class path="js.html.Crypto" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Crypto.hx" extern="1">
		<subtle public="1" set="null">
			<c path="js.html.SubtleCrypto"/>
			<haxe_doc>Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption or decryption.</haxe_doc>
		</subtle>
		<getRandomValues public="1" set="method">
			<f a="array">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.ArrayBufferView"/>
			</f>
			<haxe_doc>Fills the passed `TypedArray` with cryptographically sound random values.
		@throws DOMError</haxe_doc>
		</getRandomValues>
		<haxe_doc><![CDATA[The `Crypto` interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.

	Documentation [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Crypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Crypto>]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.CryptoKey" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/CryptoKey.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns an enumerated value representing the type of the key, a secret key (for symmetric algorithm), a public or a private key (for an asymmetric algorithm)</haxe_doc>
		</type>
		<extractable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating if the raw information may be exported to the application or not.</haxe_doc>
		</extractable>
		<algorithm public="1" set="null">
			<d/>
			<haxe_doc>Returns an opaque object representing a particular cipher the key has to be used with.</haxe_doc>
		</algorithm>
		<usages public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Returns an array of enumerated values indicating what the key can be used for.</haxe_doc>
		</usages>
		<haxe_doc><![CDATA[The `CryptoKey` interface represents a cryptographic key derived from a specific key algorithm.

	Documentation [CryptoKey](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey>]]></haxe_doc>
		<meta><m n=":native"><e>"CryptoKey"</e></m></meta>
	</class>
	<class path="js.html.DListElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLDListElement` interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list elements.

	Documentation [HTMLDListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMException" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMException.hx" extern="1">
		<INDEX_SIZE_ERR public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" expr="13" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" expr="14" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" expr="15" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" expr="16" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" expr="17" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</TYPE_MISMATCH_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" expr="18" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</SECURITY_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" expr="19" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</NETWORK_ERR>
		<ABORT_ERR public="1" get="inline" set="null" expr="20" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</ABORT_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" expr="21" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</URL_MISMATCH_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" expr="22" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</QUOTA_EXCEEDED_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" expr="23" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</TIMEOUT_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" expr="24" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</INVALID_NODE_TYPE_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" expr="25" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DATA_CLONE_ERR>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains one of the strings associated with an error name.</haxe_doc>
		</name>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a message or description associated with the given error name.</haxe_doc>
		</message>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `short` that contains one of the `Error codes`, or `0` if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the `DOMException.name` attribute.</haxe_doc>
		</code>
		<result public="1" set="null"><x path="Int"/></result>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method">
			<f a="?message:?name" v="&quot;&quot;:">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMException` interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.

	Documentation [DOMException](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMException$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMException>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMImplementation.hx" extern="1">
		<hasFeature public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior.</haxe_doc>
		</hasFeature>
		<createDocumentType public="1" set="method">
			<f a="qualifiedName:publicId:systemId">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
			</f>
			<haxe_doc>Creates and returns a `DocumentType`.
		@throws DOMError</haxe_doc>
		</createDocumentType>
		<createDocument public="1" set="method">
			<f a="namespace:qualifiedName:?doctype">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an `XMLDocument`.
		@throws DOMError</haxe_doc>
		</createDocument>
		<createHTMLDocument public="1" set="method">
			<f a="?title">
				<c path="String"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an HTML `Document`.
		@throws DOMError</haxe_doc>
		</createHTMLDocument>
		<haxe_doc><![CDATA[The `DOMImplementation` interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.

	Documentation [DOMImplementation](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMPointReadOnly" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMPointReadOnly.hx" extern="1">
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPointReadOnly"/>
</f></fromPoint>
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's horizontal coordinate, `x`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's vertical coordinate, `y`.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's depth coordinate, `z`.</haxe_doc>
		</z>
		<w public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's perspective value, `w`.</haxe_doc>
		</w>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of the `DOMPointReadOnly` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMPointReadOnly` interface specifies the coordinate and perspective fields used by `DOMPoint` to define a 2D or 3D point in a coordinate system.

	Documentation [DOMPointReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPointReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMPoint" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMPoint.hx" extern="1">
		<extends path="js.html.DOMPointReadOnly"/>
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPoint"/>
</f></fromPoint>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMPoint` object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.

	Documentation [DOMPoint](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPoint"</e></m></meta>
	</class>
	<typedef path="js.html.DOMPointInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMPointInit.hx">
		<a>
			<z>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0.</haxe_doc>
			</z>
			<y>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0.</haxe_doc>
			</y>
			<x>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0.</haxe_doc>
			</x>
			<w>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The point's w perspective value given as an unrestricted floating-point number. The default is 1.</haxe_doc>
			</w>
		</a>
		<haxe_doc><![CDATA[The `DOMPointInit` dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a `DOMPoint` or `DOMPointReadOnly` object.

	Documentation [DOMPointInit](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit>]]></haxe_doc>
	</typedef>
	<class path="js.html.DOMQuad" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMQuad.hx" extern="1">
		<p1 public="1" set="null">
			<c path="js.html.DOMPoint"/>
			<haxe_doc>are `DOMPoint` objects for each of the `DOMQuad` object's four corners.</haxe_doc>
		</p1>
		<p2 public="1" set="null"><c path="js.html.DOMPoint"/></p2>
		<p3 public="1" set="null"><c path="js.html.DOMPoint"/></p3>
		<p4 public="1" set="null"><c path="js.html.DOMPoint"/></p4>
		<bounds public="1" set="null"><c path="js.html.DOMRectReadOnly"/></bounds>
		<getBounds public="1" set="method">
			<f a=""><c path="js.html.DOMRectReadOnly"/></f>
			<haxe_doc>Returns a `DOMRect` object with the coordinates and dimensions of the `DOMQuad` object.</haxe_doc>
		</getBounds>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.DOMQuadJSON"/></f>
			<haxe_doc>Returns a JSON representation of the `DOMQuad` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="rect">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?p1:?p2:?p3:?p4">
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral. Returning `DOMQuad`s lets `getBoxQuads()` return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy `bounds` attribute returning a `DOMRectReadOnly` for those cases where you just want an axis-aligned bounding rectangle.

	Documentation [DOMQuad](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMQuad"</e></m></meta>
	</class>
	<typedef path="js.html.DOMQuadJSON" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMQuadJSON.hx"><a>
	<p4>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p4>
	<p3>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p3>
	<p2>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p2>
	<p1>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p1>
</a></typedef>
	<class path="js.html.DOMRectReadOnly" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMRectReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMRect`'s origin.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMRect`'s origin.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The width of the `DOMRect`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The height of the `DOMRect`.</haxe_doc>
		</height>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the top coordinate value of the `DOMRect` (usually the same as `y`.)</haxe_doc>
		</top>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the right coordinate value of the `DOMRect` (usually the same as `x + width`).</haxe_doc>
		</right>
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the bottom coordinate value of the `DOMRect` (usually the same as y + height).</haxe_doc>
		</bottom>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the left coordinate value of the `DOMRect` (usually the same as `x`).</haxe_doc>
		</left>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle.

	Documentation [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMRect" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMRect.hx" extern="1">
		<extends path="js.html.DOMRectReadOnly"/>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMRect` represents a rectangle.

	Documentation [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRect>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRect"</e></m></meta>
	</class>
	<class path="js.html.DOMRectList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMRect"/>
</f></item>
		<meta><m n=":native"><e>"DOMRectList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the list,</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString`.</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `Boolean` indicating if the given string is in the list</haxe_doc>
		</contains>
		<haxe_doc><![CDATA[A type returned by some APIs which contains a list of DOMString (strings).

	Documentation [DOMStringList](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMStringMap.hx" extern="1">
		<haxe_doc><![CDATA[Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.

	Documentation [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringMap"</e></m></meta>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` representing the number of objects stored in the object.</haxe_doc>
		</length>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The value of the list as a `DOMString`.</haxe_doc>
		</value>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns an item in the list by its index (returns undefined if the number is greater than or equal to the length of the list).</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the list contains the given token, otherwise `false`.</haxe_doc>
		</contains>
		<add public="1" set="method">
			<f a="tokens">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the given token to the list.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="tokens">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified token from the list.
		@throws DOMError</haxe_doc>
		</remove>
		<replace public="1" set="method">
			<f a="token:newToken">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Replaces an existing token with a new token.
		@throws DOMError</haxe_doc>
		</replace>
		<toggle public="1" set="method">
			<f a="token:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a given token from the list and returns false. If token doesn't exist it's added and the function returns `true`.
		@throws DOMError</haxe_doc>
		</toggle>
		<supports public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given token is in the associated attribute's supported tokens.
		@throws DOMError</haxe_doc>
		</supports>
		<haxe_doc><![CDATA[The `DOMTokenList` interface represents a set of space-separated tokens. Such a set is returned by `Element.classList`, `HTMLLinkElement.relList`, `HTMLAnchorElement.relList`, `HTMLAreaElement.relList`, `HTMLIframeElement.sandbox`, or `HTMLOutputElement.htmlFor`. It is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.

	Documentation [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a `HTMLCollection` representing a collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[The `HTMLDataListElement` interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `datalist` elements and their content.

	Documentation [HTMLDataListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransfer" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DataTransfer.hx" extern="1">
		<dropEffect public="1">
			<c path="String"/>
			<haxe_doc>Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.</haxe_doc>
		</dropEffect>
		<effectAllowed public="1">
			<c path="String"/>
			<haxe_doc>Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.</haxe_doc>
		</effectAllowed>
		<items public="1" set="null">
			<c path="js.html.DataTransferItemList"/>
			<haxe_doc>Gives a `DataTransferItemList` object which is a list of all of the drag data.</haxe_doc>
		</items>
		<types public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array of `DOMString` giving the formats that were set in the `dragstart` event.</haxe_doc>
		</types>
		<files public="1" set="null">
			<c path="js.html.FileList"/>
			<haxe_doc>Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.</haxe_doc>
		</files>
		<setDragImage public="1" set="method">
			<f a="image:x:y">
				<c path="js.html.Element"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the image to be used for dragging if a custom one is desired.</haxe_doc>
		</setDragImage>
		<getData public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.
		@throws DOMError</haxe_doc>
		</getData>
		<setData public="1" set="method">
			<f a="format:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.
		@throws DOMError</haxe_doc>
		</setData>
		<clearData public="1" set="method">
			<f a="?format">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.
		@throws DOMError</haxe_doc>
		</clearData>
		<addElement public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the drag source to the given element.
		@throws DOMError</haxe_doc>
		</addElement>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DataTransfer` object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.

	Documentation [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransfer"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItem" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DataTransferItem.hx" extern="1">
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>The kind of drag data item, `string` or `file`.</haxe_doc>
		</kind>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The drag data item's type, typically a MIME type.</haxe_doc>
		</type>
		<getAsString public="1" set="method">
			<f a="callback">
				<f a="">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Invokes the specified callback with the drag data item string as its argument.
		@throws DOMError</haxe_doc>
		</getAsString>
		<getAsFile public="1" set="method">
			<f a=""><c path="js.html.File"/></f>
			<haxe_doc>Returns the `File` object associated with the drag data item (or null if the drag item is not a file).
		@throws DOMError</haxe_doc>
		</getAsFile>
		<haxe_doc><![CDATA[The `DataTransferItem` object represents one drag data item. During a drag operation, each `drag event` has a `dataTransfer` property which contains a `list` of drag data items. Each item in the list is a `DataTransferItem` object.

	Documentation [DataTransferItem](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItem"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItemList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DataTransferItemList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` that is the number of drag items in the list.</haxe_doc>
		</length>
		<add public="1" set="method">
			<f a="data">
				<c path="js.html.File"/>
				<c path="js.html.DataTransferItem"/>
			</f>
			<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
			<overloads><add public="1" set="method">
	<f a="data:type">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.DataTransferItem"/>
	</f>
	<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
</add></overloads>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the drag item from the list at the given index.
		@throws DOMError</haxe_doc>
		</remove>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all of the drag items from the list.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `DataTransferItemList` object is a list of `DataTransferItem` objects representing items being dragged. During a drag operation, each `DragEvent` has a `dataTransfer` property and that property is a `DataTransferItemList`.

	Documentation [DataTransferItemList](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItemList"</e></m></meta>
	</class>
	<class path="js.html.DetailsElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DetailsElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` reflecting the `open` HTML attribute, indicating whether or not the element’s contents (not counting the `summary`) is to be shown to the user.</haxe_doc>
		</open>
		<haxe_doc><![CDATA[The `HTMLDetailsElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `details` elements.

	Documentation [HTMLDetailsElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDetailsElement"</e></m></meta>
	</class>
	<class path="js.html.DialogElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DialogElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the open HTML attribute, indicating whether the dialog is available for interaction.</haxe_doc>
		</open>
		<returnValue public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` that sets or returns the return value for the dialog.</haxe_doc>
		</returnValue>
		<close public="1" set="method">
			<f a="?returnValue">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Closes the dialog.
		An optional `DOMString` may be passed as an argument, updating the `returnValue` of the the dialog.</haxe_doc>
		</close>
		<show public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.</haxe_doc>
		</show>
		<showModal public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Displays the dialog as a modal, over the top of any other dialogs that might be present.
		Interaction outside the dialog is blocked.</haxe_doc>
		</showModal>
		<haxe_doc><![CDATA[The `HTMLDialogElement` interface provides methods to manipulate `<dialog>` elements.
	It inherits properties and methods from the `HTMLElement` interface.

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDialogElement"</e></m></meta>
	</class>
	<abstract path="js.html.DirectionSetting" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DirectionSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Directory" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Directory.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" set="null"><c path="String"/></path>
		<getFilesAndDirectories public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.File"/>
	<c path="js.html.Directory"/>
</x></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFilesAndDirectories>
		<getFiles public="1" set="method">
			<f a="?recursiveFlag" v="false">
				<x path="Bool"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.File"/></c></c>
			</f>
			<meta><m n=":value"><e>{ recursiveFlag : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFiles>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Directory"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<class path="js.html.DivElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLDivElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating div elements.

	Documentation [HTMLDivElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</URL>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</documentURI>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in quirks or strict mode.</haxe_doc>
		</compatMode>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</charset>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</inputEncoding>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the Content-Type from the MIME Header of the current document.</haxe_doc>
		</contentType>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `HTMLElement` element.</haxe_doc>
		</documentElement>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document.</haxe_doc>
		</readyState>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Sets or gets the title of the current document.</haxe_doc>
		</title>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document.</haxe_doc>
		</dir>
		<body public="1">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `body` or `frameset` node of the current document.</haxe_doc>
		</body>
		<head public="1" set="null">
			<c path="js.html.HeadElement"/>
			<haxe_doc>Returns the `head` element of the current document.</haxe_doc>
		</head>
		<images public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the images in the current document.</haxe_doc>
		</images>
		<embeds public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the embedded `embed` elements within the current document.</haxe_doc>
		</embeds>
		<plugins public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the available plugins.</haxe_doc>
		</plugins>
		<links public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all the hyperlinks in the document.</haxe_doc>
		</links>
		<forms public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the `form` elements within the current document.</haxe_doc>
		</forms>
		<scripts public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns all the `script` elements on the document.</haxe_doc>
		</scripts>
		<defaultView public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `readystatechange` event.</haxe_doc>
		</onreadystatechange>
		<onbeforescriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `beforescriptexecute` event.</haxe_doc>
		</onbeforescriptexecute>
		<onafterscriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `afterscriptexecute` event.</haxe_doc>
		</onafterscriptexecute>
		<onselectionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `selectionchange` event is raised.</haxe_doc>
		</onselectionchange>
		<currentScript public="1" set="null"><c path="js.html.Element"/></currentScript>
		<anchors public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all of the anchors in the document.</haxe_doc>
		</anchors>
		<applets public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns an ordered list of the applets within a document.</haxe_doc>
		</applets>
		<fullscreen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` when the document is in `Using_full-screen_mode`.</haxe_doc>
		</fullscreen>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<onfullscreenchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenchange` event is raised.</haxe_doc>
		</onfullscreenchange>
		<onfullscreenerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenerror` event is raised.</haxe_doc>
		</onfullscreenerror>
		<onpointerlockchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockchange` event.</haxe_doc>
		</onpointerlockchange>
		<onpointerlockerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockerror` event.</haxe_doc>
		</onpointerlockerror>
		<hidden public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>…</haxe_doc>
		</hidden>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Returns a `string` denoting the visibility state of the document. Possible values are `visible`,  `hidden`,  `prerender`, and `unloaded`.</haxe_doc>
		</visibilityState>
		<onvisibilitychange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `visibilitychange` event is raised.</haxe_doc>
		</onvisibilitychange>
		<selectedStyleSheetSet public="1">
			<c path="String"/>
			<haxe_doc>Returns which style sheet set is currently in use.</haxe_doc>
		</selectedStyleSheetSet>
		<lastStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `document.selectedStyleSheetSet`.</haxe_doc>
		</lastStyleSheetSet>
		<preferredStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the preferred style sheet set as specified by the page author.</haxe_doc>
		</preferredStyleSheetSet>
		<styleSheetSets public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a list of the style sheet sets available on the document.</haxe_doc>
		</styleSheetSets>
		<scrollingElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the `Element` that scrolls the document.</haxe_doc>
		</scrollingElement>
		<timeline public="1" set="null">
			<c path="js.html.DocumentTimeline"/>
			<haxe_doc>…</haxe_doc>
		</timeline>
		<rootElement public="1" set="null"><c path="js.html.svg.SVGElement"/></rootElement>
		<oncopy public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `copy` event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `cut` event.</haxe_doc>
		</oncut>
		<onpaste public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `paste` event.</haxe_doc>
		</onpaste>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element that's currently in full screen mode for this document.</haxe_doc>
		</fullscreenElement>
		<fonts public="1" set="null"><c path="js.html.FontFaceSet"/></fonts>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `wheel` event.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name and namespace.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given class name.</haxe_doc>
		</getElementsByClassName>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<createElement public="1" set="method">
			<f a="localName:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
			<overloads><createElement public="1" set="method">
	<f a="localName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
</createElement></overloads>
		</createElement>
		<createElementNS public="1" set="method">
			<f a="namespace:qualifiedName:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
			<overloads><createElementNS public="1" set="method">
	<f a="namespace:qualifiedName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
</createElementNS></overloads>
		</createElementNS>
		<createDocumentFragment public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Creates a new document fragment.</haxe_doc>
		</createDocumentFragment>
		<createTextNode public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>Creates a text node.</haxe_doc>
		</createTextNode>
		<createComment public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Comment"/>
			</f>
			<haxe_doc>Creates a new comment node and returns it.</haxe_doc>
		</createComment>
		<createProcessingInstruction public="1" set="method">
			<f a="target:data">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.ProcessingInstruction"/>
			</f>
			<haxe_doc>Creates a new `ProcessingInstruction` object.
		@throws DOMError</haxe_doc>
		</createProcessingInstruction>
		<importNode public="1" set="method">
			<f a="node:?deep" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Returns a clone of a node from an external document.
		@throws DOMError</haxe_doc>
		</importNode>
		<adoptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adopt node from an external document.
		@throws DOMError</haxe_doc>
		</adoptNode>
		<createEvent public="1" set="method">
			<f a="interface_">
				<c path="String"/>
				<c path="js.html.Event"/>
			</f>
			<haxe_doc>Creates an event object.
		@throws DOMError</haxe_doc>
		</createEvent>
		<createRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Creates a `Range` object.
		@throws DOMError</haxe_doc>
		</createRange>
		<createNodeIterator public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeIterator"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
			</overloads>
		</createNodeIterator>
		<createTreeWalker public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.TreeWalker"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
			</overloads>
		</createTreeWalker>
		<createCDATASection public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.CDATASection"/>
			</f>
			<haxe_doc>Creates a new CDATA node and returns it.
		@throws DOMError</haxe_doc>
		</createCDATASection>
		<createAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new `Attr` object and returns it.
		@throws DOMError</haxe_doc>
		</createAttribute>
		<createAttributeNS public="1" set="method">
			<f a="namespace:name">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new attribute node in a given namespace and returns it.
		@throws DOMError</haxe_doc>
		</createAttributeNS>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<hasFocus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the focus is currently located anywhere inside the specified document.
		@throws DOMError</haxe_doc>
		</hasFocus>
		<releaseCapture public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the current mouse capture if it's on an element in this document.</haxe_doc>
		</releaseCapture>
		<exitFullscreen public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Requests that the element on this document which is currently being presented in fullscreen mode
		be taken out of fullscreen mode, restoring the previous state of the screen.</haxe_doc>
		</exitFullscreen>
		<exitPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the pointer lock.</haxe_doc>
		</exitPointerLock>
		<enableStyleSheetsForSet public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables the style sheets for the specified style sheet set.</haxe_doc>
		</enableStyleSheetsForSet>
		<caretPositionFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CaretPosition"/>
</f></caretPositionFromPoint>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the `document`.</haxe_doc>
		</getAnimations>
		<createTouch public="1" set="method">
			<f a="?view:?target:?identifier:?pageX:?pageY:?screenX:?screenY:?clientX:?clientY:?radiusX:?radiusY:?rotationAngle:?force" v="::0:0:0:0:0:0:0:0:0:0.0:0.0">
				<c path="js.html.Window"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Touch"/>
			</f>
			<meta><m n=":value"><e>{ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 }</e></m></meta>
			<haxe_doc>Creates a `Touch` object.</haxe_doc>
		</createTouch>
		<createTouchList public="1" set="method">
			<f a="touches">
				<c path="Array"><c path="js.html.Touch"/></c>
				<c path="js.html.TouchList"/>
			</f>
			<haxe_doc>Creates a `TouchList` object.</haxe_doc>
			<overloads>
				<createTouchList public="1" set="method">
					<f a="touch:touches">
						<c path="js.html.Touch"/>
						<t path="haxe.extern.Rest"><c path="js.html.Touch"/></t>
						<c path="js.html.TouchList"/>
					</f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
				<createTouchList public="1" set="method">
					<f a=""><c path="js.html.TouchList"/></f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
			</overloads>
		</createTouchList>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<createExpression public="1" set="method">
			<f a="expression:?resolver">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
			</overloads>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
				<c path="String"/>
				<c path="js.html.Node"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="haxe.Function"/>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
			</overloads>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.`HTMLElement`

	Documentation [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Document$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Document>]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the DocumentFragment`, in document order, that matches the specified ID.</haxe_doc>
		</getElementById>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of all the `Element` nodes within the `DocumentFragment` that match the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<prepend public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentFragment` interface represents a minimal document object that has no parent. It is used as a lightweight version of `Document` that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.

	Documentation [DocumentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentTimeline" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DocumentTimeline.hx" extern="1">
		<extends path="js.html.AnimationTimeline"/>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.DocumentTimelineOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentTimeline` interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).

	Documentation [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentTimeline"</e></m></meta>
	</class>
	<typedef path="js.html.DocumentTimelineOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DocumentTimelineOptions.hx"><a><originTime>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</originTime></a></typedef>
	<class path="js.html.DocumentType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"html"` for `!DOCTYPE HTML`.</haxe_doc>
		</name>
		<publicId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"-//W3C//DTD HTML 4.01//EN"`, empty string for HTML5.</haxe_doc>
		</publicId>
		<systemId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"http://www.w3.org/TR/html4/strict.dtd"`, empty string for HTML5.</haxe_doc>
		</systemId>
		<before public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `DocumentType` interface represents a `Node` containing a doctype.

	Documentation [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentType>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<typedef path="js.html.EffectTiming" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EffectTiming.hx">
		<a>
			<iterations>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
			</iterations>
			<iterationStart>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
			</iterationStart>
			<fill>
				<x path="Null"><x path="js.html.FillMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
			</fill>
			<endDelay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
			</endDelay>
			<easing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
			</easing>
			<duration>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
			</duration>
			<direction>
				<x path="Null"><x path="js.html.PlaybackDirection"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
			</direction>
			<delay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
			</delay>
		</a>
		<haxe_doc><![CDATA[The `EffectTiming` dictionary, part of the Web Animations API, is used by `Element.animate()`, `KeyframeEffectReadOnly()`, and `KeyframeEffect()` to describe timing properties for animation effects. These properties are all optional, although without setting a `duration` the animation will not play.

	Documentation [EffectTiming](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.ElementCreationOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ElementCreationOptions.hx"><a><is>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</is></a></typedef>
	<class path="js.html.EmbedElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the resource.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, containing the type of the resource.</haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, containing the displayed width of the resource.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `height` HTML attribute, containing the displayed height of the resource.</haxe_doc>
		</height>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"center"`, and `"justify"`.</haxe_doc>
		</align>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the embedded object.</haxe_doc>
		</name>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLEmbedElement` interface, which provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `embed` elements.

	Documentation [HTMLEmbedElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<abstract path="js.html.EndingTypes" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EndingTypes.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._EndingTypes.EndingTypes_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EndingTypes.hx" private="1" module="js.html.EndingTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Event" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Event.hx" extern="1">
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<CAPTURING_PHASE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CAPTURING_PHASE>
		<AT_TARGET public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BUBBLING_PHASE>
		<ALT_MASK public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ALT_MASK>
		<CONTROL_MASK public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROL_MASK>
		<SHIFT_MASK public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHIFT_MASK>
		<META_MASK public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</META_MASK>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent; it's possible this has been changed along the way through retargeting.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<returnValue public="1">
			<x path="Bool"/>
			<haxe_doc>A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use `Event.preventDefault()` and `Event.defaultPrevented` instead, but you can use `returnValue` if you choose to do so.</haxe_doc>
		</returnValue>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not `event.preventDefault()` has been called on the event.</haxe_doc>
		</defaultPrevented>
		<composed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.</haxe_doc>
		</composed>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent).</haxe_doc>
		</isTrusted>
		<timeStamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time at which the event was created (in milliseconds). By specification, this value is time since epoch, but in reality browsers' definitions vary; in addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.</haxe_doc>
		</timeStamp>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>A historical alias to `Event.stopPropagation()`. Setting its value to `true` before returning from an event handler prevents propagation of the event.</haxe_doc>
		</cancelBubble>
		<originalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The original target of the event, before any retargetings (Mozilla-specific).</haxe_doc>
		</originalTarget>
		<explicitOriginalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The explicit original target of the event (Mozilla-specific).</haxe_doc>
		</explicitOriginalTarget>
		<composedPath public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.EventTarget"/></c></f>
			<haxe_doc>Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its `ShadowRoot.mode` closed.</haxe_doc>
		</composedPath>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the propagation of events further along in the DOM.</haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance)</haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels the event (if it is cancelable).</haxe_doc>
		</preventDefault>
		<initEvent public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
			<haxe_doc>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.EventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Event` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of events, some of which use other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.

	Documentation [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Event$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Event>]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<typedef path="js.html.EventInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventListener" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EventListener.hx">
		<a><handleEvent set="method">
	<f a="event">
		<c path="js.html.Event"/>
		<x path="Void"/>
	</f>
	<haxe_doc>A function that is called whenever an event of the specified type occurs.</haxe_doc>
</handleEvent></a>
		<haxe_doc><![CDATA[The `EventListener` interface represents an object that can handle an event dispatched by an `EventTarget` object.

	Documentation [EventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventListener>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.EventListenerOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/EventListenerOptions.hx"><a><capture>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</capture></a></typedef>
	<class path="js.html.FetchObserver" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FetchObserver.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null"><x path="js.html.FetchState"/></state>
		<onstatechange public="1"><x path="haxe.Function"/></onstatechange>
		<onrequestprogress public="1"><x path="haxe.Function"/></onrequestprogress>
		<onresponseprogress public="1"><x path="haxe.Function"/></onresponseprogress>
		<meta><m n=":native"><e>"FetchObserver"</e></m></meta>
	</class>
	<abstract path="js.html.FetchState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FetchState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FetchState.FetchState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FetchState.hx" private="1" module="js.html.FetchState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FieldSetElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, indicating whether the user can interact with the control.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormControlsCollection` or `HTMLCollection` referencing the containing form element, if this element is in a form.
		
		 If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of the field set, used for submitting the form.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"fieldset"`.</haxe_doc>
		</type>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.</haxe_doc>
		</elements>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` `false`, because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Always returns `true` because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLFieldSetElement` interface has special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.

	Documentation [HTMLFieldSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the file referenced by the `File` object.</haxe_doc>
		</name>
		<lastModified public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</haxe_doc>
		</lastModified>
		<new public="1" set="method">
			<f a="fileBits:fileName:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Blob"/>
		<c path="String"/>
	</x>
</x></c>
				<c path="String"/>
				<x path="Null"><t path="js.html.FilePropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `File` interface provides information about files and allows JavaScript in a web page to access their content.

	Documentation [File](https://developer.mozilla.org/en-US/docs/Web/API/File) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/File$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/File>]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<class path="js.html.FileList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[An object of this type is returned by the `files` property of the HTML `input` element; this lets you access the list of files selected with the `input type="file"` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.

	Documentation [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileList>]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<typedef path="js.html.FilePropertyBag" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FilePropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<lastModified>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<abstract path="js.html.FillMode" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FillMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FillMode.FillMode_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.</haxe_doc>
		</face>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `size` HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the `size` attribute of the `basefont` element, for example -2 or +1.</haxe_doc>
		</size>
		<haxe_doc><![CDATA[Implements the document object model (DOM) representation of the font element. The HTML Font Element `font` defines the font size, font face and color of text.

	Documentation [HTMLFontElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FontFace" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFace.hx" extern="1">
		<family public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the family of the font. It is equivalent to the `@font-face/font-family` descriptor.</haxe_doc>
		</family>
		<style public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the style of the font. It is equivalent to the `@font-face/font-style` descriptor.</haxe_doc>
		</style>
		<weight public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the weight of the font. It is equivalent to the `@font-face/font-weight` descriptor.</haxe_doc>
		</weight>
		<stretch public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains how the font stretches. It is equivalent to the `@font-face/font-stretch` descriptor.</haxe_doc>
		</stretch>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the range of code encompassed the font. It is equivalent to the `@font-face/unicode-range` descriptor.</haxe_doc>
		</unicodeRange>
		<variant public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the variant of the font. It is equivalent to the `@font-face/font-variant` descriptor.</haxe_doc>
		</variant>
		<featureSettings public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the features of the font. It is equivalent to the `@font-face/font-feature-settings`descriptor.</haxe_doc>
		</featureSettings>
		<status public="1" set="null">
			<x path="js.html.FontFaceLoadStatus"/>
			<haxe_doc>Returns an enumerated value indicating the status of the font. It can be one of the following: `"unloaded"`, `"loading"`, `"loaded"`, or `"error"`.</haxe_doc>
		</status>
		<loaded public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.</haxe_doc>
		</loaded>
		<load public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FontFace"/></c></f>
			<haxe_doc>Loads the font, returning a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.
		@throws DOMError</haxe_doc>
		</load>
		<new public="1" set="method">
			<f a="family:source:?descriptors">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `FontFace` interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.

	Documentation [FontFace](https://developer.mozilla.org/en-US/docs/Web/API/FontFace) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFace$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFace>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFace"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceDescriptors" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceDescriptors.hx"><a>
	<weight>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</weight>
	<variationSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variationSettings>
	<variant>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variant>
	<unicodeRange>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</unicodeRange>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<stretch>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</stretch>
	<featureSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</featureSettings>
	<display>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</display>
</a></typedef>
	<abstract path="js.html.FontFaceLoadStatus" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontFaceSet" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceSet.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<size public="1" set="null"><x path="Int"/></size>
		<onloading public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loading` is fired, indicating a font-face set has started loading.</haxe_doc>
		</onloading>
		<onloadingdone public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingdone` is fired, indicating that a font face set has finished loading.</haxe_doc>
		</onloadingdone>
		<onloadingerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingerror` is fired, indicating that an error occurred whilst loading a font-face set.</haxe_doc>
		</onloadingerror>
		<ready public="1" set="null"><c path="js.lib.Promise"><x path="Void"/></c></ready>
		<status public="1" set="null">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<haxe_doc>Indicates the font-face's loading status. It will be one of `'loading'` or `'loaded'`.</haxe_doc>
		</status>
		<add public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<has public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></has>
		<delete public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></delete>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<entries public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></entries>
		<values public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></values>
		<forEach public="1" set="method">
			<f a="cb:?thisArg">
				<f a="::">
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFaceSet"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<load public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.FontFace"/></c></c>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
		</load>
		<check public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</check>
		<haxe_doc><![CDATA[The `FontFaceSet` interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.

	Documentation [FontFaceSet](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSet"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceSetIterator.hx"><a><next set="method">
	<f a=""><t path="js.html.FontFaceSetIteratorResult"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<typedef path="js.html.FontFaceSetIteratorResult" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceSetIteratorResult.hx"><a>
	<value><d/></value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.html.FontFaceSetLoadStatus" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceSetLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FormData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FormData.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a key/value pair from a `FormData` object.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Blob"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Directory"/>
						<c path="String"/>
					</x>
				</x>
			</f>
			<haxe_doc>Returns the first value associated with a given key from within a `FormData` object.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Directory"/>
		<c path="String"/>
	</x>
</x></c>
			</f>
			<haxe_doc>Returns an array of all the values associated with a given key from within a `FormData`.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `FormData` object contains a certain key/value pair.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
</set></overloads>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?form">
				<c path="js.html.FormElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FormData` interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the `XMLHttpRequest.send()` method. It uses the same format a form would use if the encoding type were set to `"multipart/form-data"`.

	Documentation [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FormData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FormData>]]></haxe_doc>
		<meta><m n=":native"><e>"FormData"</e></m></meta>
	</class>
	<typedef path="js.html.FormDataIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FormDataIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.FormElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `accept-charset` HTML attribute, representing the character encoding that the server accepts.</haxe_doc>
		</acceptCharset>
		<action public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `action` HTML attribute, containing the URI of a program that processes the information submitted by the form.</haxe_doc>
		</action>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `autocomplete` HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.</haxe_doc>
		</autocomplete>
		<enctype public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</enctype>
		<encoding public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</encoding>
		<method public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `method` HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.</haxe_doc>
		</method>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `name` HTML attribute, containing the name of the form.</haxe_doc>
		</name>
		<noValidate public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the value of the form's  `novalidate` HTML attribute, indicating whether the form should not be validated.</haxe_doc>
		</noValidate>
		<target public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `target` HTML attribute, indicating where to display the results received from submitting the form.</haxe_doc>
		</target>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>A `HTMLFormControlsCollection` holding all form controls belonging to this form element.</haxe_doc>
		</elements>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting  the number of controls in the form.</haxe_doc>
		</length>
		<submit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Submits the form to the server.
		@throws DOMError</haxe_doc>
		</submit>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the form to its initial state.</haxe_doc>
		</reset>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls are subject to constraint validation and satisfy those contraints; returns `false` if some controls do not satisfy their constraints. Fires an event named `invalid` at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to `false`.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls satisfy their validation constraints. When `false` is returned, cancelable `invalid` events are fired for each invalid child and validation problems are reported to the user.</haxe_doc>
		</reportValidity>
		<haxe_doc><![CDATA[The `HTMLFormElement` interface represents a `form` element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.

	Documentation [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<scrolling public="1"><c path="String"/></scrolling>
		<src public="1"><c path="String"/></src>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<longDesc public="1"><c path="String"/></longDesc>
		<noResize public="1"><x path="Bool"/></noResize>
		<contentDocument public="1" set="null"><c path="js.html.HTMLDocument"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.Window"/></contentWindow>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the width of each column inside a frameset.</haxe_doc>
		</cols>
		<rows public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the height of each column inside a frameset.</haxe_doc>
		</rows>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLFrameSetElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `frameset` elements.

	Documentation [HTMLFrameSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<typedef path="js.html.FullscreenOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FullscreenOptions.hx">
		<a><navigationUI>
	<x path="Null"><x path="js.html.FullscreenOptionsNavigationUI"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>Controls whether or not to show navigation UI while the element is in fullscreen mode.</haxe_doc>
</navigationUI></a>
		<haxe_doc>An object that controls the behavior of the transition to fullscreen mode.</haxe_doc>
	</typedef>
	<abstract path="js.html.FullscreenOptionsNavigationUI" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FullscreenOptions.hx" module="js.html.FullscreenOptions">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FullscreenOptions.FullscreenOptionsNavigationUI_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/FullscreenOptions.hx" private="1" module="js.html.FullscreenOptions" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Gamepad" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Gamepad.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing identifying information about the controller.</haxe_doc>
		</id>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer that is auto-incremented to be unique for each device currently connected to the system.</haxe_doc>
		</index>
		<mapping public="1" set="null">
			<x path="js.html.GamepadMappingType"/>
			<haxe_doc>A string indicating whether the browser has remapped the controls on the device to a known layout.</haxe_doc>
		</mapping>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the gamepad is still connected to the system.</haxe_doc>
		</connected>
		<buttons public="1" set="null">
			<c path="Array"><c path="js.html.GamepadButton"/></c>
			<haxe_doc>An array of `gamepadButton` objects representing the buttons present on the device.</haxe_doc>
		</buttons>
		<axes public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>An array representing the controls with axes present on the device (e.g. analog thumb sticks).</haxe_doc>
		</axes>
		<timestamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Gamepad` interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.

	Documentation [Gamepad](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Gamepad>]]></haxe_doc>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadButton" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/GamepadButton.hx" extern="1">
		<pressed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).</haxe_doc>
		</pressed>
		<touched public="1" set="null"><x path="Bool"/></touched>
		<value public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `GamepadButton` interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.

	Documentation [GamepadButton](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadButton"</e></m></meta>
	</class>
	<abstract path="js.html.GamepadMappingType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/GamepadMappingType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.Geolocation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Geolocation.hx">
		<a>
			<watchPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Int"/>
				</f>
				<haxe_doc>Returns a `long` value representing the newly established callback function to be invoked whenever the device location changes.
		@throws DOMError</haxe_doc>
			</watchPosition>
			<getCurrentPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Determines the device's current location and gives back a `Position` object with the data.
		@throws DOMError</haxe_doc>
			</getCurrentPosition>
			<clearWatch set="method">
				<f a="watchId">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes the particular handler previously installed using `watchPosition()`.</haxe_doc>
			</clearWatch>
		</a>
		<haxe_doc><![CDATA[The `Geolocation` interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.

	Documentation [Geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Geolocation>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.GetNotificationOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/GetNotificationOptions.hx"><a><tag>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</tag></a></typedef>
	<typedef path="js.html.GetRootNodeOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/GetRootNodeOptions.hx"><a><composed>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</composed></a></typedef>
	<class path="js.html.HRElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<color public="1"><c path="String"/></color>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1"><c path="String"/></size>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLHRElement` interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `hr` elements.

	Documentation [HTMLHRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Node"/>
					<c path="js.html.HTMLCollection"/>
				</x>
			</f>
			<overloads><item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item></overloads>
		</item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Node"/>
		<c path="js.html.HTMLCollection"/>
	</x>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of items in the collection.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.

	Documentation [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLDocument" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HTMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1"><c path="String"/></domain>
		<cookie public="1"><c path="String"/></cookie>
		<designMode public="1"><c path="String"/></designMode>
		<fgColor public="1"><c path="String"/></fgColor>
		<linkColor public="1"><c path="String"/></linkColor>
		<vlinkColor public="1"><c path="String"/></vlinkColor>
		<alinkColor public="1"><c path="String"/></alinkColor>
		<bgColor public="1"><c path="String"/></bgColor>
		<all public="1" set="null"><c path="js.html.HTMLAllCollection"/></all>
		<open public="1" set="method">
			<f a="url:name:features:?replace" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ replace : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="?type:?replace" v=":&quot;&quot;">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.HTMLDocument"/>
	</f>
	<meta><m n=":value"><e>{ replace : "" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<write public="1" set="method">
			<f a="text">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<writeln public="1" set="method">
			<f a="text">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</writeln>
		<execCommand public="1" set="method">
			<f a="commandId:?showUI:?value" v=":false:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ value : "", showUI : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</execCommand>
		<queryCommandEnabled public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandIndeterm>
		<queryCommandState public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="commandId">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandValue>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<createTableCellElement public="1" get="inline" set="null" line="70">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<td>` element.]]></haxe_doc>
		</createTableCellElement>
		<createSelectElement public="1" get="inline" set="null" line="72">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<select>` element.]]></haxe_doc>
		</createSelectElement>
		<createFontElement public="1" get="inline" set="null" line="74">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<font>` element.]]></haxe_doc>
		</createFontElement>
		<createDListElement public="1" get="inline" set="null" line="76">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dl>` element.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="78">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frame>` element.]]></haxe_doc>
		</createFrameElement>
		<createOListElement public="1" get="inline" set="null" line="80">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ol>` element.]]></haxe_doc>
		</createOListElement>
		<createLIElement public="1" get="inline" set="null" line="82">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<li>` element.]]></haxe_doc>
		</createLIElement>
		<createHRElement public="1" get="inline" set="null" line="84">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<hr>` element.]]></haxe_doc>
		</createHRElement>
		<createParamElement public="1" get="inline" set="null" line="86">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<param>` element.]]></haxe_doc>
		</createParamElement>
		<createLabelElement public="1" get="inline" set="null" line="88">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<label>` element.]]></haxe_doc>
		</createLabelElement>
		<createTrackElement public="1" get="inline" set="null" line="90">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<track>` element.]]></haxe_doc>
		</createTrackElement>
		<createDivElement public="1" get="inline" set="null" line="92">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<div>` element.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="94">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<title>` element.]]></haxe_doc>
		</createTitleElement>
		<createAnchorElement public="1" get="inline" set="null" line="96">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<a>` element.]]></haxe_doc>
		</createAnchorElement>
		<createStyleElement public="1" get="inline" set="null" line="98">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<style>` element.]]></haxe_doc>
		</createStyleElement>
		<createEmbedElement public="1" get="inline" set="null" line="100">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<embed>` element.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="102">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meter>` element.]]></haxe_doc>
		</createMeterElement>
		<createPictureElement public="1" get="inline" set="null" line="104">
			<f a=""><c path="js.html.PictureElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<picture>` element.]]></haxe_doc>
		</createPictureElement>
		<createPreElement public="1" get="inline" set="null" line="106">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<pre>` element.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="108">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<thead>` element.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="110">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<head>` element.]]></haxe_doc>
		</createHeadElement>
		<createOptGroupElement public="1" get="inline" set="null" line="112">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<optgroup>` element.]]></haxe_doc>
		</createOptGroupElement>
		<createAudioElement public="1" get="inline" set="null" line="114">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<audio>` element.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="116">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<video>` element.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="118">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<legend>` element.]]></haxe_doc>
		</createLegendElement>
		<createUListElement public="1" get="inline" set="null" line="120">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ul>` element.]]></haxe_doc>
		</createUListElement>
		<createDirectoryElement public="1" get="inline" set="null" line="122">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dir>` element.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="124">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<table>` element.]]></haxe_doc>
		</createTableElement>
		<createSlotElement public="1" get="inline" set="null" line="126">
			<f a=""><c path="js.html.SlotElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<slot>` element.]]></haxe_doc>
		</createSlotElement>
		<createSourceElement public="1" get="inline" set="null" line="128">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<source>` element.]]></haxe_doc>
		</createSourceElement>
		<createLinkElement public="1" get="inline" set="null" line="130">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<link>` element.]]></haxe_doc>
		</createLinkElement>
		<createIFrameElement public="1" get="inline" set="null" line="132">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<iframe>` element.]]></haxe_doc>
		</createIFrameElement>
		<createMediaElement public="1" get="inline" set="null" line="134">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<media>` element.]]></haxe_doc>
		</createMediaElement>
		<createMapElement public="1" get="inline" set="null" line="136">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<map>` element.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="138">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<form>` element.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="140">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<option>` element.]]></haxe_doc>
		</createOptionElement>
		<createMetaElement public="1" get="inline" set="null" line="142">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meta>` element.]]></haxe_doc>
		</createMetaElement>
		<createObjectElement public="1" get="inline" set="null" line="144">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<object>` element.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="146">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<caption>` element.]]></haxe_doc>
		</createTableCaptionElement>
		<createImageElement public="1" get="inline" set="null" line="148">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<img>` element.]]></haxe_doc>
		</createImageElement>
		<createTextAreaElement public="1" get="inline" set="null" line="150">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<textarea>` element.]]></haxe_doc>
		</createTextAreaElement>
		<createScriptElement public="1" get="inline" set="null" line="152">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<script>` element.]]></haxe_doc>
		</createScriptElement>
		<createDataListElement public="1" get="inline" set="null" line="154">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<datalist>` element.]]></haxe_doc>
		</createDataListElement>
		<createModElement public="1" get="inline" set="null" line="156">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<mod>` element.]]></haxe_doc>
		</createModElement>
		<createOutputElement public="1" get="inline" set="null" line="158">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<output>` element.]]></haxe_doc>
		</createOutputElement>
		<createAreaElement public="1" get="inline" set="null" line="160">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<area>` element.]]></haxe_doc>
		</createAreaElement>
		<createProgressElement public="1" get="inline" set="null" line="162">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<progress>` element.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="164">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<button>` element.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="166">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<fieldset>` element.]]></haxe_doc>
		</createFieldSetElement>
		<createMenuElement public="1" get="inline" set="null" line="168">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<menu>` element.]]></haxe_doc>
		</createMenuElement>
		<createBRElement public="1" get="inline" set="null" line="170">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<br>` element.]]></haxe_doc>
		</createBRElement>
		<createSpanElement public="1" get="inline" set="null" line="172">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<span>` element.]]></haxe_doc>
		</createSpanElement>
		<createDetailsElement public="1" get="inline" set="null" line="174">
			<f a=""><c path="js.html.DetailsElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<details>` element.]]></haxe_doc>
		</createDetailsElement>
		<createBodyElement public="1" get="inline" set="null" line="176">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<body>` element.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="178">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<input>` element.]]></haxe_doc>
		</createInputElement>
		<createBaseElement public="1" get="inline" set="null" line="180">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<base>` element.]]></haxe_doc>
		</createBaseElement>
		<createQuoteElement public="1" get="inline" set="null" line="182">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<quote>` element.]]></haxe_doc>
		</createQuoteElement>
		<createFrameSetElement public="1" get="inline" set="null" line="184">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frameset>` element.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="186">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<canvas>` element.]]></haxe_doc>
		</createCanvasElement>
		<createParagraphElement public="1" get="inline" set="null" line="188">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<p>` element.]]></haxe_doc>
		</createParagraphElement>
		<createTableColElement public="1" get="inline" set="null" line="190">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<col>` element.]]></haxe_doc>
		</createTableColElement>
		<createTableRowElement public="1" get="inline" set="null" line="192">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<tr>` element.]]></haxe_doc>
		</createTableRowElement>
		<createHtmlElement public="1" get="inline" set="null" line="194">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<html>` element.]]></haxe_doc>
		</createHtmlElement>
		<createDialoglElement public="1" get="inline" set="null" line="196">
			<f a=""><c path="js.html.DialogElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dialog>` element.]]></haxe_doc>
		</createDialoglElement>
		<haxe_doc><![CDATA[`HTMLDocument` is an abstract interface which extends the `Document` interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides.

	Documentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDocument"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[`HTMLOptionsCollection` is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.

	Documentation [HTMLOptionsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLPropertiesCollection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HTMLPropertiesCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<names public="1" set="null"><c path="js.html.DOMStringList"/></names>
		<namedItem public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="js.html.PropertyNodeList"/>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLPropertiesCollection"</e></m></meta>
	</class>
	<class path="js.html.HeadElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLHeadElement` interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.Headers" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Headers.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a header from a `Headers` object.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `ByteString` sequence of all the values of a header within a `Headers` object with a given name.
		@throws DOMError</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `Headers` object contains a certain header.
		@throws DOMError</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes a provided function once for each array element.
		@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="js.html.Headers"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<c path="Array"><c path="Array"><c path="String"/></c></c>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Headers` interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.

	Documentation [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Headers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Headers>]]></haxe_doc>
		<meta><m n=":native"><e>"Headers"</e></m></meta>
	</class>
	<typedef path="js.html.HeadersIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HeadersIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.History" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `Integer` representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns `1`.</haxe_doc>
		</length>
		<scrollRestoration public="1">
			<x path="js.html.ScrollRestoration"/>
			<haxe_doc>Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either `auto` or `manual`.</haxe_doc>
		</scrollRestoration>
		<state public="1" set="null">
			<d/>
			<haxe_doc>Returns an `any` value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a `popstate` event.</haxe_doc>
		</state>
		<go public="1" set="method">
			<f a="?delta" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0 }</e></m></meta>
			<haxe_doc>Loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1  for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling `go()` without parameters or a value of 0 reloads the current page. Internet Explorer lets you also specify a string to go to a specific page in the history list.
		@throws DOMError</haxe_doc>
		</go>
		<back public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to `history.go(-1)`.
		 Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</back>
		<forward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to `history.go(1)`.
		 Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</forward>
		<pushState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes the given data onto the session history stack with the specified title and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</pushState>
		<replaceState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</replaceState>
		<haxe_doc><![CDATA[The `History` interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.

	Documentation [History](https://developer.mozilla.org/en-US/docs/Web/API/History) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/History$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/History>]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<typedef path="js.html.HitRegionOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HitRegionOptions.hx"><a>
	<path>
		<x path="Null"><c path="js.html.Path2D"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<control>
		<x path="Null"><c path="js.html.Element"/></x>
		<meta><m n=":optional"/></meta>
	</control>
</a></typedef>
	<class path="js.html.HtmlElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<version public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Simply omit it.</haxe_doc>
		</version>
		<haxe_doc><![CDATA[The `HTMLHtmlElement` interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the content to be embedded.</haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the content to display in the frame.</haxe_doc>
		</srcdoc>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing a name by which to refer to the frame.</haxe_doc>
		</name>
		<sandbox public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.</haxe_doc>
		</sandbox>
		<allowFullscreen public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details.</haxe_doc>
		</allowFullscreen>
		<allowPaymentRequest public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the Payment Request API may be invoked inside a cross-origin iframe.</haxe_doc>
		</allowPaymentRequest>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, indicating the width of the frame.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, indicating the height of the frame.</haxe_doc>
		</height>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document`, the active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy`, the window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<frameBorder public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether to create borders between frames.</haxe_doc>
		</frameBorder>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the width of the frame margin.</haxe_doc>
		</marginWidth>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLIFrameElement` interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.

	Documentation [HTMLIFrameElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageBitmap" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ImageBitmap.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the width, in CSS pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the height, in CSS pixels, of the `ImageData`.</haxe_doc>
		</height>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of all graphical resources associated with an `ImageBitmap`.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `ImageBitmap` interface represents a bitmap image which can be drawn to a `canvas` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.

	Documentation [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmap"</e></m></meta>
	</class>
	<abstract path="js.html.ImageBitmapFormat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ImageBitmapFormat.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ImageBitmapFormat.ImageBitmapFormat_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ImageBitmapFormat.hx" private="1" module="js.html.ImageBitmapFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ImageData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ImageData.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual width, in pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual height, in pixels, of the `ImageData`.</haxe_doc>
		</height>
		<data public="1" set="null">
			<c path="js.lib.Uint8ClampedArray"/>
			<haxe_doc>Is a `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (included).</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:sw:?sh">
				<c path="js.lib.Uint8ClampedArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="sw:sh">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `ImageData` interface represents the underlying pixel data of an area of a `canvas` element. It is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.

	Documentation [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageData>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"ImageData"</e></m>
		</meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute,  thus indicating fallback context for the image.</haxe_doc>
		</alt>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the full URL of the image including base URI.</haxe_doc>
		</src>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the CORS setting for this image element. See CORS settings attributes for further details.</haxe_doc>
		</crossOrigin>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, containing a partial URL of a map element.</haxe_doc>
		</useMap>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use in order to fetch the image.</haxe_doc>
		</referrerPolicy>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map.</haxe_doc>
		</isMap>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.</haxe_doc>
		</height>
		<decoding public="1">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a hint given to the browser on how it should decode the image.</haxe_doc>
		</decoding>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`.</haxe_doc>
		</naturalWidth>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`.</haxe_doc>
		</naturalHeight>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no `HTMLImageElement.src` value.</haxe_doc>
		</complete>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the element.</haxe_doc>
		</name>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the alignment of the image with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space on either side of the image.</haxe_doc>
		</hspace>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space above and below the image.</haxe_doc>
		</vspace>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI of a long description of the image.</haxe_doc>
		</longDesc>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that is responsible for the width of the border surrounding the image. This is now deprecated and the CSS `border` property should be used instead.</haxe_doc>
		</border>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `sizes` HTML attribute.</haxe_doc>
		</sizes>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the URL to the currently displayed image (which may change, for example in response to media queries).</haxe_doc>
		</currentSrc>
		<lowsrc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that refers to a low-quality (but faster to load) copy of the image.</haxe_doc>
		</lowsrc>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the horizontal offset from the nearest layer. This property mimics an old Netscape 4 behavior.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the vertical offset from the nearest layer. This property is also similar to behavior of an old Netscape 4.</haxe_doc>
		</y>
		<haxe_doc><![CDATA[The `HTMLImageElement` interface provides special properties and methods  for manipulating the layout and presentation of `img` elements.

	Documentation [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1"><c path="String"/></accept>
		<alt public="1"><c path="String"/></alt>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<checked public="1"><x path="Bool"/></checked>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<files public="1"><c path="js.html.FileList"/></files>
		<formAction public="1"><c path="String"/></formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1"><c path="String"/></formMethod>
		<formNoValidate public="1"><x path="Bool"/></formNoValidate>
		<formTarget public="1"><c path="String"/></formTarget>
		<height public="1"><x path="Int"/></height>
		<indeterminate public="1"><x path="Bool"/></indeterminate>
		<list public="1" set="null"><c path="js.html.Element"/></list>
		<max public="1"><c path="String"/></max>
		<maxLength public="1"><x path="Int"/></maxLength>
		<min public="1"><c path="String"/></min>
		<minLength public="1"><x path="Int"/></minLength>
		<multiple public="1"><x path="Bool"/></multiple>
		<name public="1"><c path="String"/></name>
		<pattern public="1"><c path="String"/></pattern>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<size public="1"><x path="Int"/></size>
		<src public="1"><c path="String"/></src>
		<step public="1"><c path="String"/></step>
		<type public="1"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<valueAsDate public="1"><c path="Date"/></valueAsDate>
		<valueAsNumber public="1"><x path="Float"/></valueAsNumber>
		<width public="1"><x path="Int"/></width>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<align public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents the alignment of the element. Use CSS instead.</haxe_doc>
		</align>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents a client-side image map.</haxe_doc>
		</useMap>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<stepUp public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Increments the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value.,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`.
		 
		 
		@throws DOMError</haxe_doc>
		</stepUp>
		<stepDown public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Decrements the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`. 
		 
		 
		@throws DOMError</haxe_doc>
		</stepDown>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLInputElement` interface provides special properties and methods for manipulating the layout and presentation of input elements.

	Documentation [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<abstract path="js.html.IterationCompositeOperation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/IterationCompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.KeyframeAnimationOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/KeyframeAnimationOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<typedef path="js.html.KeyframeEffectOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/KeyframeEffectOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<class path="js.html.LIElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` indicating the ordinal position of the list element inside a given `ol`. It reflects the `value` attribute of the HTML `li` element, and can be smaller than `0`. If the `li` element is not a child of an `ol` element, the property has no meaning.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of the bullets, `"disc"`, `"square"` or `"circle"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLLIElement` interface exposes specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.

	Documentation [HTMLLIElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc>Is a string containing the ID of the labeled control. This reflects the `for` attribute.</haxe_doc>
		</htmlFor>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Is a `HTMLElement` representing the control with which the label is associated.</haxe_doc>
		</control>
		<haxe_doc><![CDATA[The `HTMLLabelElement` interface gives access to properties specific to `label` elements. It inherits methods and properties from the base `HTMLElement` interface.

	Documentation [HTMLLabelElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLLegendElement` is an interface allowing to access properties of the `legend` elements. It inherits properties and methods from the `HTMLElement` interface.

	Documentation [HTMLLegendElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<abstract path="js.html.LineAlignSetting" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/LineAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._LineAlignSetting.LineAlignSetting_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/LineAlignSetting.hx" private="1" module="js.html.LineAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.LinkElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` which represents whether the link is disabled; currently only used with style sheet links.</haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI for the target resource.</haxe_doc>
		</href>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that corresponds to the CORS setting for this link element. See CORS settings attributes for details.</haxe_doc>
		</crossOrigin>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the forward relationship of the linked resource from the document to the resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a list of one or more media formats to which the resource applies.</haxe_doc>
		</media>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the language code for the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the MIME type of the linked resource.</haxe_doc>
		</type>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<sizes public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.</haxe_doc>
		</sizes>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding for the target resource.</haxe_doc>
		</charset>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the reverse relationship of the linked resource from the resource to the document.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the target frame to which the resource applies.</haxe_doc>
		</target>
		<integrity public="1"><c path="String"/></integrity>
		<as public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of content being loaded by the HTML link.</haxe_doc>
		</as>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLLinkElement` interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLLinkElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.Location" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Location.hx" extern="1">
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the canonical form of the origin of the specific location.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters or "querystring" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.</haxe_doc>
		</search>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<assign public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loads the resource at the URL provided in parameter.
		@throws DOMError</haxe_doc>
		</assign>
		<replace public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the current resource with the one at the provided URL. The difference from the `assign()` method is that after using `replace()` the current page will not be saved in session `History`, meaning the user won't be able to use the back button to navigate to it.
		@throws DOMError</haxe_doc>
		</replace>
		<reload public="1" set="method">
			<f a="?forceget" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceget : false }</e></m></meta>
			<haxe_doc>Reloads the resource from the current URL. Its optional unique parameter is a `Boolean`, which, when it is `true`, causes the page to always be reloaded from the server. If it is `false` or not specified, the browser may reload the page from its cache.
		@throws DOMError</haxe_doc>
		</reload>
		<haxe_doc><![CDATA[The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.

	Documentation [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Location$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Location>]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the `map` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty.</haxe_doc>
		</name>
		<areas public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a live `HTMLCollection` representing the `area` elements associated to this `map`.</haxe_doc>
		</areas>
		<haxe_doc><![CDATA[The `HTMLMapElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.

	Documentation [HTMLMapElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MediaDeviceInfo" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaDeviceInfo.hx" extern="1">
		<deviceId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).</haxe_doc>
		</deviceId>
		<kind public="1" set="null">
			<x path="js.html.MediaDeviceKind"/>
			<haxe_doc>Returns an enumerated value that is either `"videoinput"`, `"audioinput"` or `"audiooutput"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a label describing this device (for example "External USB Webcam").</haxe_doc>
		</label>
		<groupId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.</haxe_doc>
		</groupId>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `MediaDevicesInfo` interface contains information that describes a single media input or output device.

	Documentation [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDeviceInfo"</e></m></meta>
	</class>
	<abstract path="js.html.MediaDeviceKind" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaDeviceKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaDeviceKind.MediaDeviceKind_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaDeviceKind.hx" private="1" module="js.html.MediaDeviceKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaDevices" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaDevices.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ondevicechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `devicechange` event. This event is delivered to the `MediaDevices` object when a media input or output device is attached to or removed from the user's computer.</haxe_doc>
		</ondevicechange>
		<getSupportedConstraints public="1" set="method"><f a=""><t path="js.html.MediaTrackSupportedConstraints"/></f></getSupportedConstraints>
		<enumerateDevices public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.MediaDeviceInfo"/></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</enumerateDevices>
		<getUserMedia public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaStreamConstraints"/></x>
				<c path="js.lib.Promise"><c path="js.html.MediaStream"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getUserMedia>
		<haxe_doc><![CDATA[The `MediaDevices` interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.

	Documentation [MediaDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDevices"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MEDIA_ERR_ABORTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIA_ERR_NETWORK>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MEDIA_ERR_DECODE>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number which represents the general type of error that occurred, as follows: `/en-US/docs/Web/API/MediaError/code`</haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't simply a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one `user agent` to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (`""`).</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `MediaError` interface represents an error which occurred while handling media in an HTML media element based on `HTMLMediaElement`, such as `audio` or `video`.

	Documentation [MediaError](https://developer.mozilla.org/en-US/docs/Web/API/MediaError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaError>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<typedef path="js.html.MediaKeyStatusMapIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaKeyStatusMapIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.MediaList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaList.hx" extern="1">
		<mediaText public="1"><c path="String"/></mediaText>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<deleteMedium public="1" set="method">
			<f a="oldMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteMedium>
		<appendMedium public="1" set="method">
			<f a="newMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendMedium>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaQueryList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc> A `DOMString` representing a serialized media query.</haxe_doc>
		</media>
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc> A `Boolean` that returns `true` if the `document` currently matches the media query list, or `false` if not.</haxe_doc>
		</matches>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc> An event handler property representing a function that is invoked when the `change` event fires, i.e when the status of media query support changes. The event object is a `MediaQueryListEvent` instance, which is recognised as a `MediaListQuery` instance in older browsers, for backwards compatibility purposes.</haxe_doc>
		</onchange>
		<addListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<addListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
			</overloads>
		</addListener>
		<removeListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<removeListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
			</overloads>
		</removeListener>
		<haxe_doc><![CDATA[A `MediaQueryList` object stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to `true`).

	Documentation [MediaQueryList](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<typedef path="js.html.MediaStreamConstraints" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaStreamConstraints.hx">
		<a>
			<video>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not a video track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the video track included in the returned `MediaStream`. If constraints are specified, a video track is inherently requested.</haxe_doc>
			</video>
			<picture>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</picture>
			<peerIdentity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` identifying the peer who has sole access to the stream. If this property is specified, only the indicated peer can receive and use the stream. Streams isolated in this way can only be displayed in a media element (`audio` or `video`) where the content is protected just as if `CORS` cross-origin rules were in effect. When a peer identity is set, `MediaStreamTrack`s from that peer have their `MediaStreamTrack.isolated` flag set to `true`.</haxe_doc>
			</peerIdentity>
			<fake>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</fake>
			<audio>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not an audio track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the audio track included in the returned `MediaStream`. If constraints are specified, an audio track is inherently requested.</haxe_doc>
			</audio>
		</a>
		<haxe_doc><![CDATA[The `MediaStreamConstraints` dictionary is used when calling `getUserMedia()` to specify what kinds of tracks should be included in the returned `MediaStream`, and, optionally, to establish constraints for those tracks' settings.

	Documentation [MediaStreamConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.MediaStreamTrackState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaStreamTrackState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaStreamTrackState.MediaStreamTrackState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaStreamTrackState.hx" private="1" module="js.html.MediaStreamTrackState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.MediaTrackConstraintSet" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaTrackConstraintSet.hx"><a>
	<width>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</width>
	<viewportWidth>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportWidth>
	<viewportOffsetY>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetY>
	<viewportOffsetX>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetX>
	<viewportHeight>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportHeight>
	<scrollWithPage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</scrollWithPage>
	<noiseSuppression>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</noiseSuppression>
	<mediaSource>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mediaSource>
	<height>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</height>
	<frameRate>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<facingMode>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</facingMode>
	<echoCancellation>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</echoCancellation>
	<deviceId>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</deviceId>
	<channelCount>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</channelCount>
	<browserWindow>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</browserWindow>
	<autoGainControl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</autoGainControl>
</a></typedef>
	<typedef path="js.html.MediaTrackConstraints" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaTrackConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</width>
			<viewportWidth>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</height>
			<frameRate>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</autoGainControl>
			<advanced>
				<x path="Null"><c path="Array"><t path="js.html.MediaTrackConstraintSet"/></c></x>
				<meta><m n=":optional"/></meta>
			</advanced>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackConstraints` dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.

	Documentation [MediaTrackConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSettings" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaTrackSettings.hx">
		<a>
			<width>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the `MediaTrackSettings.width` property, specifying the width of the track's video data in pixels.</haxe_doc>
			</width>
			<viewportWidth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.noiseSuppression` property, which is `true` if noise suppression is enabled and is `false` otherwise.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.height`` property, specifying the height of the track's video data in pixels.</haxe_doc>
			</height>
			<frameRate>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A double-precision floating point value indicating the current value of the ``MediaTrackConstraints.frameRate`` property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean indicating the current value of the ``MediaTrackConstraints.echoCancellation`` property, specifying `true` if echo cancellation is enabled, otherwise `false`.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` indicating the current value of the ``MediaTrackConstraints.deviceId`` property. The device ID is a origin-unique string identifying the source of the track; this is usually a `GUID`. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling `MediaDevices.getUserMedia()`.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.channelCount`` property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.autoGainControl` property, which is `true` if automatic gain control is enabled and is `false` otherwise.</haxe_doc>
			</autoGainControl>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSettings` dictionary is used to return the current values configured for each of a `MediaStreamTrack`'s settings. These values will adhere as closely as possible to any constraints previously described using a `MediaTrackConstraints` object and set using `applyConstraints()`, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.

	Documentation [MediaTrackSettings](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSupportedConstraints" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MediaTrackSupportedConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `width` constraint is supported in the current environment.</haxe_doc>
			</width>
			<volume>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `volume` constraint is supported in the current environment.</haxe_doc>
			</volume>
			<viewportWidth>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<sampleSize>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleSize` constraint is supported in the current environment.</haxe_doc>
			</sampleSize>
			<sampleRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleRate` constraint is supported in the current environment.</haxe_doc>
			</sampleRate>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `noiseSuppression` constraint is supported in the current environment.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<latency>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `latency` constraint is supported in the current environment.</haxe_doc>
			</latency>
			<height>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `height` constraint is supported in the current environment.</haxe_doc>
			</height>
			<groupId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `groupId` constraint is supported in the current environment.</haxe_doc>
			</groupId>
			<frameRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `frameRate` constraint is supported in the current environment.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `facingMode` constraint is supported in the current environment.</haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `echoCancellation` constraint is supported in the current environment.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `deviceId` constraint is supported in the current environment.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `channelCount` constraint is supported in the current environment.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `autoGainControl` constraint is supported in the current environment.</haxe_doc>
			</autoGainControl>
			<aspectRatio>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `aspectRatio` constraint is supported in the current environment.</haxe_doc>
			</aspectRatio>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSupportedConstraints` dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the `MediaStreamTrack` object. An object conforming to `MediaTrackSupportedConstraints` is returned by `MediaDevices.getSupportedConstraints()`.

	Documentation [MediaTrackSupportedConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MenuElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<httpEquiv public="1"><c path="String"/></httpEquiv>
		<content public="1"><c path="String"/></content>
		<scheme public="1"><c path="String"/></scheme>
		<haxe_doc><![CDATA[The `HTMLMetaElement` interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLMetaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the currrent value, reflecting the `value` attribute.</haxe_doc>
		</value>
		<min public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the minimum value, reflecting the `min` attribute.</haxe_doc>
		</min>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the maximum value, reflecting the `max` attribute.</haxe_doc>
		</max>
		<low public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the low boundary, reflecting the `low`attribute.</haxe_doc>
		</low>
		<high public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the high boundary, reflecting the `high` attribute.</haxe_doc>
		</high>
		<optimum public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the optimum, reflecting the `optimum` attribute.</haxe_doc>
		</optimum>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements that are associated with the element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The HTML `meter` elements expose the `HTMLMeterElement` interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `meter` elements.

	Documentation [HTMLMeterElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.MimeType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MimeType.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a description of the associated plugin or an empty string if there is none.</haxe_doc>
		</description>
		<enabledPlugin public="1" set="null">
			<c path="js.html.Plugin"/>
			<haxe_doc>Returns an instance of `Plugin` containing information about the plugin itself.</haxe_doc>
		</enabledPlugin>
		<suffixes public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list, but support more file extenions than can be anticipated. It might therefore return an empty string.</haxe_doc>
		</suffixes>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type of the associated plugin.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `MimeType` interface provides contains information about a MIME type associated with a particular plugin. `NavigatorPlugins.mimeTypes` returns an array of this object.

	Documentation [MimeType](https://developer.mozilla.org/en-US/docs/Web/API/MimeType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeType>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.MimeTypeArray" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/MimeTypeArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of items in the array.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified index.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `MimeTypeArray` interface returns an array of `MimeType` instances, each of which contains information about a supported browser plugins. This object is returned by `NavigatorPlugins.mimeTypes`.

	Documentation [MimeTypeArray](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.</haxe_doc>
		</cite>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `datetime` HTML attribute, containing a date-and-time string representing a timestamp for the change.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLModElement` interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `del` and `ins`.

	Documentation [HTMLModElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<class path="js.html.NamedNodeMap" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of objects in the map.</haxe_doc>
		</length>
		<getNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr`, corresponding to the given name.</haxe_doc>
		</getNamedItem>
		<setNamedItem public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given name.
		@throws DOMError</haxe_doc>
		</setNamedItem>
		<removeNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given map.
		@throws DOMError</haxe_doc>
		</removeNamedItem>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.</haxe_doc>
		</item>
		<getNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr` identified by a namespace and related local name.</haxe_doc>
		</getNamedItemNS>
		<setNamedItemNS public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</setNamedItemNS>
		<removeNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</removeNamedItemNS>
		<haxe_doc><![CDATA[The `NamedNodeMap` interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.

	Documentation [NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap>]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Navigator.hx" extern="1">
		<permissions public="1" set="null">
			<c path="js.html.Permissions"/>
			<haxe_doc>Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.</haxe_doc>
		</permissions>
		<mimeTypes public="1" set="null"><c path="js.html.MimeTypeArray"/></mimeTypes>
		<plugins public="1" set="null"><c path="js.html.PluginArray"/></plugins>
		<doNotTrack public="1" set="null">
			<c path="String"/>
			<haxe_doc>Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.</haxe_doc>
		</doNotTrack>
		<maxTouchPoints public="1" set="null"><x path="Int"/></maxTouchPoints>
		<oscpu public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string that represents the current operating system.</haxe_doc>
		</oscpu>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g., "Netscape6").</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1").</haxe_doc>
		</vendorSub>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g., "20060909").</haxe_doc>
		</productSub>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if setting a cookie will be ignored and true otherwise.</haxe_doc>
		</cookieEnabled>
		<buildID public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build identifier of the browser (e.g., "2006090803").</haxe_doc>
		</buildID>
		<mediaDevices public="1" set="null">
			<c path="js.html.MediaDevices"/>
			<haxe_doc>Returns a reference to a `MediaDevices` object which can then be used to get information about available media devices (`MediaDevices.enumerateDevices()`), find out what constrainable properties are supported for media on the user's computer and user agent (`MediaDevices.getSupportedConstraints()`), and to request access to media using `MediaDevices.getUserMedia()`.</haxe_doc>
		</mediaDevices>
		<serviceWorker public="1" set="null">
			<c path="js.html.ServiceWorkerContainer"/>
			<haxe_doc>Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the associated document.</haxe_doc>
		</serviceWorker>
		<clipboard public="1" set="null"><c path="js.html.Clipboard"/></clipboard>
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<geolocation public="1" set="null">
			<t path="js.html.Geolocation"/>
			<haxe_doc>Returns a `Geolocation` object allowing accessing the location of the device.</haxe_doc>
		</geolocation>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<wakeLock public="1" set="null">
			<c path="js.html.WakeLock"/>
			<haxe_doc>Returns a `WakeLock` object which allows a document to acquire a screen wake lock.</haxe_doc>
		</wakeLock>
		<vibrate public="1" set="method">
			<f a="pattern">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<overloads><vibrate public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Bool"/>
</f></vibrate></overloads>
		</vibrate>
		<javaEnabled public="1" set="method"><f a=""><x path="Bool"/></f></javaEnabled>
		<getGamepads public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Gamepad"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getGamepads>
		<requestMIDIAccess public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.midi.MIDIOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.midi.MIDIAccess"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestMIDIAccess>
		<sendBeacon public="1" set="method">
			<f a="url:?data">
				<c path="String"/>
				<c path="js.html.Blob"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.FormData"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
			</overloads>
		</sendBeacon>
		<requestMediaKeySystemAccess public="1" set="method"><f a="keySystem:supportedConfigurations">
	<c path="String"/>
	<c path="Array"><t path="js.html.eme.MediaKeySystemConfiguration"/></c>
	<c path="js.lib.Promise"><c path="js.html.eme.MediaKeySystemAccess"/></c>
</f></requestMediaKeySystemAccess>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<canShare public="1" set="method">
			<f a="?data">
				<x path="Null"><t path="js.html.NavigatorShareData"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the equivalent call to `share()` would succeed.
		Returns `false` if the data cannot be validated.</haxe_doc>
		</canShare>
		<share public="1" set="method">
			<f a="data">
				<t path="js.html.NavigatorShareData"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Invokes the native sharing mechanism of the device to share data such as text, URLs, or files.</haxe_doc>
		</share>
		<haxe_doc><![CDATA[The `Navigator` interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

	Documentation [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Navigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<typedef path="js.html.NavigatorShareData" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Navigator.hx" module="js.html.Navigator">
		<a>
			<url>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A string representing a URL to be shared</haxe_doc>
			</url>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A string representing the title to be shared.</haxe_doc>
			</title>
			<text>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A string representing text to be shared.</haxe_doc>
			</text>
			<files>
				<x path="Null"><c path="Array"><c path="js.html.File"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An array of `File` objects representing files to be shared.</haxe_doc>
			</files>
		</a>
		<haxe_doc>An object containing data to share.</haxe_doc>
	</typedef>
	<class path="js.html.NodeFilter" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" expr="cast 4294967295" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</SHOW_ALL>
		<SHOW_ELEMENT public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" get="inline" set="null" expr="32" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" expr="64" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" get="inline" set="null" expr="128" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" expr="256" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" expr="512" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" expr="1024" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" get="inline" set="null" expr="2048" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2048</e></m></meta>
		</SHOW_NOTATION>
		<acceptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> that will be used to tell if a given <code>Node</code> must be accepted or not by the <code>NodeIterator</code> or <code>TreeWalker</code> iteration algorithm. This method is expected to be written by the user of a <code>NodeFilter</code>. Possible return values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>FILTER_ACCEPT</code></td>
						<td>Value returned by the <code>NodeFilter.acceptNode()</code> method when a node should be accepted.</td>
					</tr>
					<tr>
						<td><code>FILTER_REJECT</code></td>
						<td>Value to be returned by the <code>NodeFilter.acceptNode()</code> method when a node should be rejected. For <code>TreeWalker</code>, child nodes are also rejected. For <code>NodeIterator</code>, this flag is synonymous with FILTER_SKIP.</td>
					</tr>
					<tr>
						<td><code>FILTER_SKIP</code></td>
						<td>Value to be returned by <code>NodeFilter.acceptNode()</code> for nodes to be skipped by the <code>NodeIterator</code> or <code>TreeWalker</code> object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".</td>
					</tr>
				
			</table>]]></haxe_doc>
		</acceptNode>
		<haxe_doc><![CDATA[A `NodeFilter` interface represents an object used to filter the nodes in a `NodeIterator` or `TreeWalker`. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.

	Documentation [NodeFilter](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NodeIterator.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `NodeIterator` was created.</haxe_doc>
		</root>
		<referenceNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` to which the iterator is anchored.</haxe_doc>
		</referenceNode>
		<pointerBeforeReferenceNode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` flag that indicates whether the `NodeIterator` is anchored before, the flag being `true`, or after, the flag being `false`, the anchor node.</haxe_doc>
		</pointerBeforeReferenceNode>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Numerical value</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ALL</code></td>
						<td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
						<td>Shows all nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ATTRIBUTE</code> <em>(deprecated)</em></td>
						<td><code>2</code></td>
						<td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_CDATA_SECTION</code> <em>(deprecated)</em></td>
						<td><code>8</code></td>
						<td>Shows <code>CDATASection</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_COMMENT</code></td>
						<td><code>128</code></td>
						<td>Shows <code>Comment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT</code></td>
						<td><code>256</code></td>
						<td>Shows <code>Document</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
						<td><code>1024</code></td>
						<td>Shows <code>DocumentFragment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
						<td><code>512</code></td>
						<td>Shows <code>DocumentType</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ELEMENT</code></td>
						<td><code>1</code></td>
						<td>Shows <code>Element</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY</code> <em>(deprecated)</em></td>
						<td><code>32</code></td>
						<td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> <em>(deprecated)</em></td>
						<td><code>16</code></td>
						<td>Shows <code>EntityReference</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_NOTATION</code> <em>(deprecated)</em></td>
						<td><code>2048</code></td>
						<td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
						<td><code>64</code></td>
						<td>Shows <code>ProcessingInstruction</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_TEXT</code></td>
						<td><code>4</code></td>
						<td>Shows <code>Text</code> nodes.</td>
					</tr>
				
			</table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the next `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</nextNode>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the previous `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</previousNode>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the `NodeIterator` was no more used, but this is now useless.</haxe_doc>
		</detach>
		<haxe_doc><![CDATA[The `NodeIterator` interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.

	Documentation [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of nodes in the `NodeList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns an item in the list by its index, or `null` if the index is out-of-bounds; can be used as an alternative to simply accessing `nodeList[idx]` (which instead returns  `undefined` when `idx` is out-of-bounds).</haxe_doc>
		</item>
		<haxe_doc><![CDATA[`NodeList` objects are collections of nodes such as those returned by properties such as `Node.childNodes` and the `document.querySelectorAll()` method.

	Documentation [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<permission public="1" set="null" static="1">
			<x path="js.html.NotificationPermission"/>
			<haxe_doc>A string representing the current permission to display notifications. Possible values are:
		 
		  `denied` — The user refuses to have notifications displayed.
		  `granted` — The user accepts having notifications displayed.
		  `default` — The user choice is unknown and therefore the browser will act as if the value were denied.</haxe_doc>
		</permission>
		<onclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `click` event. It is triggered each time the user clicks on the notification.</haxe_doc>
		</onclick>
		<onshow public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `show` event. It is triggered when the notification is displayed.</haxe_doc>
		</onshow>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. It is triggered each time the notification encounters an error.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `close` event. It is triggered when the user closes the notification.</haxe_doc>
		</onclose>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>The title of the notification as specified in the first parameter of the constructor.</haxe_doc>
		</title>
		<dir public="1" set="null">
			<x path="js.html.NotificationDirection"/>
			<haxe_doc>The text direction of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</dir>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>The language code of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</lang>
		<body public="1" set="null">
			<c path="String"/>
			<haxe_doc>The body string of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</body>
		<tag public="1" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the notification (if any) as specified in the constructor's `options` parameter.</haxe_doc>
		</tag>
		<icon public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the image used as an icon of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</icon>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a structured clone of the notification’s data.</haxe_doc>
		</data>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Programmatically closes a notification.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Notification` interface of the Notifications API is used to configure and display desktop notifications to the user.

	Documentation [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Notification$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Notification>]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<abstract path="js.html.NotificationDirection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NotificationDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.NotificationOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NotificationOptions.hx"><a>
	<tag>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</tag>
	<requireInteraction>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</requireInteraction>
	<lang>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lang>
	<icon>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</icon>
	<dir>
		<x path="Null"><x path="js.html.NotificationDirection"/></x>
		<meta><m n=":optional"/></meta>
	</dir>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<body>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.NotificationPermission" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NotificationPermission.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OListElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the `start` and defining the value of the first number of the first element of the list.</haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:
		 
		  `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, …
		  `'a'` meaning that the lowercase latin alphabet is used:  `a`, `b`, `c`, `d`, `e`, …
		  `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, …
		  `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, …
		  `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, …</haxe_doc>
		</type>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLOListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.

	Documentation [HTMLOListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `data` HTML attribute, specifying the address of a resource's data.</haxe_doc>
		</data>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, specifying the MIME type of the resource.</haxe_doc>
		</type>
		<typeMustMatch public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `typeMustMatch` HTML attribute, indicating if the resource specified by `data` must only be played if it matches the `type` attribute.</haxe_doc>
		</typeMustMatch>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, specifying the name of the browsing context.</haxe_doc>
		</name>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, specifying a `map` element to use.</haxe_doc>
		</useMap>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Retuns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentWindow>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` with the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.</haxe_doc>
		</code>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.</haxe_doc>
		</declare>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</hspace>
		<standby public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `standby` HTML attribute, specifying a message to display while the object loads.</haxe_doc>
		</standby>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</vspace>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.</haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codetype` HTML attribute, specifying the content type of the data.</haxe_doc>
		</codeType>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `border` HTML attribute, specifying the width of a border around the object.</haxe_doc>
		</border>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Retuns a `Boolean` that always is `true`, because `object` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLObjectElement` interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `object` element, representing external resources.

	Documentation [HTMLObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<typedef path="js.html.ObserverCallback" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ObserverCallback.hx"><a><handleEvent set="method"><f a="observer">
	<c path="js.html.FetchObserver"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.OptGroupElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` representing whether or not the whole list of children `option` is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the label for the group.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[The `HTMLOptGroupElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `optgroup` elements.

	Documentation [HTMLOptGroupElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<label public="1"><c path="String"/></label>
		<defaultSelected public="1"><x path="Bool"/></defaultSelected>
		<selected public="1"><x path="Bool"/></selected>
		<value public="1"><c path="String"/></value>
		<text public="1"><c path="String"/></text>
		<index public="1" set="null"><x path="Int"/></index>
		<haxe_doc><![CDATA[The `HTMLOptionElement` interface represents `option` elements and inherits all classes and methods of the `HTMLElement` interface.

	Documentation [HTMLOptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<typedef path="js.html.OptionalEffectTiming" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OptionalEffectTiming.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delay>
</a></typedef>
	<abstract path="js.html.OrientationLockType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OrientationLockType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.OrientationType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OrientationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OutputElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<htmlFor public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>A `DOMTokenList` reflecting the `for` HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated `value`.</haxe_doc>
		</htmlFor>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` indicating the form associated with the control, reflecting the `form` HTML attribute if it is defined.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name for the control that is submitted with form data.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"output"`.</haxe_doc>
		</type>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the default value of the element, initially the empty string.</haxe_doc>
		</defaultValue>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the value of the contents of the elements. Behaves like the `Node.textContent` property.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the element is a candidate for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks the validity of the element and returns a `Boolean` holding the check result.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Triggers an `invalid` event and evaluates its result. if the result is `true`, then the problems with the constraints of this element are reported to the user. When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.</haxe_doc>
		</reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLOutputElement` interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `output` elements.

	Documentation [HTMLOutputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLParagraphElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `p` elements.

	Documentation [HTMLParagraphElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the parameter. It reflects the `name` attribute.</haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value associated to the parameter. It reflects the `value` attribute.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the parameter when `valueType` has the `"ref"` value. It reflects the `type` attribute.</haxe_doc>
		</type>
		<valueType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the `value`. It reflects the ``valuetype`` attribute and has one of the values: `"data"`, `"ref"`, or `"object"`.</haxe_doc>
		</valueType>
		<haxe_doc><![CDATA[The `HTMLParamElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `param` elements, representing a pair of a key and a value that acts as a parameter for an `object` element.

	Documentation [HTMLParamElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Path2D" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Path2D.hx" extern="1">
		<addPath public="1" set="method">
			<f a="path:?transformation">
				<c path="js.html.Path2D"/>
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a path to the current path.</haxe_doc>
		</addPath>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<new public="1" set="method">
			<f a="pathString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.Path2D"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Path2D` interface of the Canvas 2D API is used to declare paths that are then later used on `CanvasRenderingContext2D` objects. The path methods of the `CanvasRenderingContext2D` interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.

	Documentation [Path2D](https://developer.mozilla.org/en-US/docs/Web/API/Path2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Path2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Path2D>]]></haxe_doc>
		<meta><m n=":native"><e>"Path2D"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Performance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<timeOrigin public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the high resolution timestamp of the start time of the performance measurement.</haxe_doc>
		</timeOrigin>
		<timing public="1" set="null">
			<c path="js.html.PerformanceTiming"/>
			<haxe_doc>A `PerformanceTiming` object containing latency-related performance information</haxe_doc>
		</timing>
		<navigation public="1" set="null">
			<c path="js.html.PerformanceNavigation"/>
			<haxe_doc>A `PerformanceNavigation` object that provides useful context about the operations included in the times listed in `timing`, including whether the page was a load or a refresh, how many redirections occurred, and so forth.</haxe_doc>
		</navigation>
		<onresourcetimingbufferfull public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventTarget` which is a callback that will be called when the `resourcetimingbufferfull` event is fired.</haxe_doc>
		</onresourcetimingbufferfull>
		<now public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a `DOMHighResTimeStamp` representing the number of milliseconds elapsed since a reference instant.</haxe_doc>
		</now>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `Performance` object.</haxe_doc>
		</toJSON>
		<getEntries public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PerformanceEntry"/></c></f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given filter.</haxe_doc>
		</getEntries>
		<getEntriesByType public="1" set="method">
			<f a="entryType">
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects of the given entry type.</haxe_doc>
		</getEntriesByType>
		<getEntriesByName public="1" set="method">
			<f a="name:?entryType">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given name and entry type.</haxe_doc>
		</getEntriesByName>
		<clearResourceTimings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all `PerformanceEntry` with a `PerformanceEntry.entryType` of "`resource`" from the browser's performance data buffer.</haxe_doc>
		</clearResourceTimings>
		<setResourceTimingBufferSize public="1" set="method">
			<f a="maxSize">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the browser's resource timing buffer size to the specified number of "`resource`" `PerformanceEntry.entryType` `PerformanceEntry` objects.</haxe_doc>
		</setResourceTimingBufferSize>
		<mark public="1" set="method">
			<f a="markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a `DOMHighResTimeStamp` in the browser's performance entry buffer with the given name.
		@throws DOMError</haxe_doc>
		</mark>
		<clearMarks public="1" set="method">
			<f a="?markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given mark from the browser's performance entry buffer.</haxe_doc>
		</clearMarks>
		<measure public="1" set="method">
			<f a="measureName:?startMark:?endMark">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a named `DOMHighResTimeStamp` in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).
		@throws DOMError</haxe_doc>
		</measure>
		<clearMeasures public="1" set="method">
			<f a="?measureName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given measure from the browser's performance entry buffer.</haxe_doc>
		</clearMeasures>
		<haxe_doc><![CDATA[The `Performance` interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.

	Documentation [Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Performance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Performance>]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceEntry" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PerformanceEntry.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A value that further specifies the value returned by the `PerformanceEntry.entryType` property. The value of both depends on the subtype. See property page for valid values.</haxe_doc>
		</name>
		<entryType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of performance metric such as, for example, "`mark`". See property page for valid values.</haxe_doc>
		</entryType>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the starting time for the performance metric.</haxe_doc>
		</startTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value of the duration of the performance event.</haxe_doc>
		</duration>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `PerformanceEntry` object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance `mark` or `measure` (for example by calling the `mark()` method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).

	Documentation [PerformanceEntry](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceEntry"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_NAVIGATE public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc></haxe_doc>
		</TYPE_RELOAD>
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
			<haxe_doc></haxe_doc>
		</TYPE_BACK_FORWARD>
		<TYPE_RESERVED public="1" get="inline" set="null" expr="255" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
			<haxe_doc></haxe_doc>
		</TYPE_RESERVED>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc></haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned short` representing the number of REDIRECTs done before reaching the page.</haxe_doc>
		</redirectCount>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `PerformanceNavigation` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The legacy `PerformanceNavigation` interface represents information about how the navigation to the current document was done.

	Documentation [PerformanceNavigation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PerformanceTiming.hx" extern="1">
		<navigationStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</navigationStart>
		<unloadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventEnd>
		<redirectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.</haxe_doc>
		</connectEnd>
		<secureConnectionStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the secure connection handshake starts. If no such connection is requested, it returns `0`.</haxe_doc>
		</secureConnectionStart>
		<requestStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the first byte of the response, from the server from a cache, or from a local resource.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.</haxe_doc>
		</responseEnd>
		<domLoading public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domLoading>
		<domInteractive public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing have been executed.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`</haxe_doc>
		</loadEventEnd>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON object representing this `PerformanceTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceTiming` interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a `PerformanceTiming` object describing your page using the `window.performance.timing` property.

	Documentation [PerformanceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming>]]></haxe_doc>
		<meta>
			<m n=":deprecated"><e>"PerformanceTiming is deprecated, use the PerformanceNavigationTiming interface instead"</e></m>
			<m n=":native"><e>"PerformanceTiming"</e></m>
		</meta>
	</class>
	<abstract path="js.html.PermissionState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PermissionStatus" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PermissionStatus.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null">
			<x path="js.html.PermissionState"/>
			<haxe_doc>Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.</haxe_doc>
		</state>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event called whenever `PermissionStatus.status` changes.</haxe_doc>
		</onchange>
		<haxe_doc><![CDATA[The `PermissionStatus` interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.

	Documentation [PermissionStatus](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus>]]></haxe_doc>
		<meta><m n=":native"><e>"PermissionStatus"</e></m></meta>
	</class>
	<class path="js.html.Permissions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Permissions.hx" extern="1">
		<query public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.lib.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>Returns the user permission status for a given API.
		@throws DOMError</haxe_doc>
		</query>
		<haxe_doc><![CDATA[Documentation [Permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Permissions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Permissions>]]></haxe_doc>
		<meta><m n=":native"><e>"Permissions"</e></m></meta>
	</class>
	<class path="js.html.PictureElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PictureElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLPictureElement` interface represents a `picture` HTML element. It doesn't implement specific properties or methods.

	Documentation [HTMLPictureElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPictureElement"</e></m></meta>
	</class>
	<abstract path="js.html.PlaybackDirection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PlaybackDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Plugin" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Plugin.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human readable description of the plugin.</haxe_doc>
		</description>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>The filename of the plugin file.</haxe_doc>
		</filename>
		<version public="1" set="null">
			<c path="String"/>
			<haxe_doc>The plugin's version number string.</haxe_doc>
		</version>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the plugin.</haxe_doc>
		</name>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The `Plugin` interface provides information about a browser plugin.

	Documentation [Plugin](https://developer.mozilla.org/en-US/docs/Web/API/Plugin) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Plugin$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Plugin>]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.PluginArray" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PluginArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of plugins in the array.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Plugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Plugin"/>
</f></namedItem>
		<refresh public="1" set="method">
			<f a="?reloadDocuments" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reloadDocuments : false }</e></m></meta>
		</refresh>
		<haxe_doc><![CDATA[The `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `window.navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem("name")` methods.

	Documentation [PluginArray](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PluginArray>]]></haxe_doc>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<typedef path="js.html.Position" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Position.hx">
		<a>
			<timestamp set="null">
				<x path="Int"/>
				<haxe_doc>Returns a `DOMTimeStamp` representing the time at which the location was retrieved.</haxe_doc>
			</timestamp>
			<coords set="null">
				<t path="js.html.Coordinates"/>
				<haxe_doc>Returns a `Coordinates` object defining the current location.</haxe_doc>
			</coords>
		</a>
		<haxe_doc><![CDATA[The `Position` interface represents the position of the concerned device at a given time. The position, represented by a `Coordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.

	Documentation [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Position$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Position>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.PositionAlignSetting" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PositionAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PositionAlignSetting.PositionAlignSetting_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PositionAlignSetting.hx" private="1" module="js.html.PositionAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PositionError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TIMEOUT>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the error code. The following values are possible:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Associated constant
		    Description
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>PERMISSION_DENIED</code></td>
		    <td>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>POSITION_UNAVAILABLE</code></td>
		    <td>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</td>
		   </tr>
		   <tr>
		    <td><code>3</code></td>
		    <td><code>TIMEOUT</code></td>
		    <td>The time allowed to acquire the geolocation, defined by <code>PositionOptions.timeout</code> information was reached before the information was obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable `DOMString` describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `PositionError` interface represents the reason of an error occurring when using the geolocating device.

	Documentation [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionError>]]></haxe_doc>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PositionOptions.hx">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is `Infinity`, meaning that `getCurrentPosition()` won't return until the position is available.</haxe_doc>
			</timeout>
			<maximumAge>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to `0`, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to `Infinity` the device must return a cached position regardless of its age. Default: 0.</haxe_doc>
			</maximumAge>
			<enableHighAccuracy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a `Boolean` that indicates the application would like to receive the best possible results. If `true` and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if `false`, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: `false`.</haxe_doc>
			</enableHighAccuracy>
		</a>
		<haxe_doc><![CDATA[The `PositionOptions` interface describes an object containing option properties to pass as a parameter of `Geolocation.getCurrentPosition()` and `Geolocation.watchPosition()`.

	Documentation [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.PreElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `pre` element.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `HTMLPreElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating block of preformatted text.

	Documentation [HTMLPreElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<target public="1" set="null"><c path="String"/></target>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.

	Documentation [ProcessingInstruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction>]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`.</haxe_doc>
		</value>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.</haxe_doc>
		</max>
		<position public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.</haxe_doc>
		</position>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns `NodeList` containing the list of `label` elements that are labels for this element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The `HTMLProgressElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `progress` elements.

	Documentation [HTMLProgressElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.PropertyNodeList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/PropertyNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<getValues public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getValues>
		<meta><m n=":native"><e>"PropertyNodeList"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URL for the source of the quotation.</haxe_doc>
		</cite>
		<haxe_doc><![CDATA[The `HTMLQuoteElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `blockquote` and `q`, but not the `cite` element.

	Documentation [HTMLQuoteElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Range.hx" extern="1">
		<START_TO_START public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START_TO_START>
		<START_TO_END public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</START_TO_END>
		<END_TO_END public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</END_TO_END>
		<END_TO_START public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</END_TO_START>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` starts.</haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `startContainer` the `Range` starts.</haxe_doc>
		</startOffset>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` ends.</haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `endContainer` the `Range` ends.</haxe_doc>
		</endOffset>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the range's start and end points are at the same position.</haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.</haxe_doc>
		</commonAncestorContainer>
		<setStart public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range`.
		@throws DOMError</haxe_doc>
		</setStart>
		<setEnd public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range`.
		@throws DOMError</haxe_doc>
		</setEnd>
		<setStartBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartBefore>
		<setStartAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartAfter>
		<setEndBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndBefore>
		<setEndAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndAfter>
		<collapse public="1" set="method">
			<f a="?toStart" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toStart : false }</e></m></meta>
			<haxe_doc>Collapses the `Range` to one of its boundary points.</haxe_doc>
		</collapse>
		<selectNode public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the `Node` and its contents.
		@throws DOMError</haxe_doc>
		</selectNode>
		<selectNodeContents public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the contents of a `Node`.
		@throws DOMError</haxe_doc>
		</selectNodeContents>
		<compareBoundaryPoints public="1" set="method">
			<f a="how:sourceRange">
				<x path="Int"/>
				<c path="js.html.Range"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the boundary points of the `Range` with another `Range`.
		@throws DOMError</haxe_doc>
		</compareBoundaryPoints>
		<deleteContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the contents of a `Range` from the `Document`.
		@throws DOMError</haxe_doc>
		</deleteContents>
		<extractContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Moves contents of a `Range` from the document tree into a `DocumentFragment`.
		@throws DOMError</haxe_doc>
		</extractContents>
		<cloneContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Returns a `DocumentFragment` copying the nodes of a `Range`.
		@throws DOMError</haxe_doc>
		</cloneContents>
		<insertNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a `Node` at the start of a `Range`.
		@throws DOMError</haxe_doc>
		</insertNode>
		<surroundContents public="1" set="method">
			<f a="newParent">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves content of a `Range` into a new `Node`.
		@throws DOMError</haxe_doc>
		</surroundContents>
		<cloneRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Returns a `Range` object with boundary points identical to the cloned `Range`.</haxe_doc>
		</cloneRange>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the `Range` from use to improve performance.</haxe_doc>
		</detach>
		<isPointInRange public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given point is in the `Range`.
		@throws DOMError</haxe_doc>
		</isPointInRange>
		<comparePoint public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the `Range`.
		@throws DOMError</haxe_doc>
		</comparePoint>
		<intersectsNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given node intersects the `Range`.
		@throws DOMError</haxe_doc>
		</intersectsNode>
		<createContextualFragment public="1" set="method">
			<f a="fragment">
				<c path="String"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>Returns a `DocumentFragment` created from a given string of code.
		@throws DOMError</haxe_doc>
		</createContextualFragment>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a list of `DOMRect` objects that aggregates the results of `Element.getClientRects()` for all the elements in the `Range`.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns a `DOMRect` object which bounds the entire contents of the `Range`; this would be the union of all the rectangles returned by `range.getClientRects()`.</haxe_doc>
		</getBoundingClientRect>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Range` interface represents a fragment of a document that can contain nodes and parts of text nodes.

	Documentation [Range](https://developer.mozilla.org/en-US/docs/Web/API/Range) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Range$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Range>]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<abstract path="js.html.ReferrerPolicy" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ReferrerPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RegistrationOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RegistrationOptions.hx"><a>
	<updateViaCache>
		<x path="Null"><x path="js.html.ServiceWorkerUpdateViaCache"/></x>
		<meta><m n=":optional"/></meta>
	</updateViaCache>
	<scope>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</scope>
</a></typedef>
	<class path="js.html.Request" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Request.hx" extern="1">
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the request's method (`GET`, `POST`, etc.)</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the request.</haxe_doc>
		</url>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the associated `Headers` object of the request.</haxe_doc>
		</headers>
		<destination public="1" set="null">
			<x path="js.html.RequestDestination"/>
			<haxe_doc>Returns a string from the `RequestDestination` enum describing the request's destination. This is a string indicating the type of content being requested.</haxe_doc>
		</destination>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the referrer of the request (e.g., `client`).</haxe_doc>
		</referrer>
		<referrerPolicy public="1" set="null">
			<x path="js.html.ReferrerPolicy"/>
			<haxe_doc>Contains the referrer policy of the request (e.g., `no-referrer`).</haxe_doc>
		</referrerPolicy>
		<mode public="1" set="null">
			<x path="js.html.RequestMode"/>
			<haxe_doc>Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)</haxe_doc>
		</mode>
		<credentials public="1" set="null">
			<x path="js.html.RequestCredentials"/>
			<haxe_doc>Contains the credentials of the request (e.g., `"omit"`, `"same-origin"`, `"include"`). The default is `"same-origin"`.</haxe_doc>
		</credentials>
		<cache public="1" set="null">
			<x path="js.html.RequestCache"/>
			<haxe_doc>Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).</haxe_doc>
		</cache>
		<redirect public="1" set="null">
			<x path="js.html.RequestRedirect"/>
			<haxe_doc>Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.</haxe_doc>
		</redirect>
		<integrity public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the subresource integrity value of the request (e.g., `sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=`).</haxe_doc>
		</integrity>
		<signal public="1" set="null"><c path="js.html.AbortSignal"/></signal>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Request"/></f>
			<haxe_doc>Creates a copy of the current `Request` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="input:?init">
		<c path="String"/>
		<x path="Null"><t path="js.html.RequestInit"/></x>
		<c path="js.html.Request"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `Request` interface of the Fetch API represents a resource request.

	Documentation [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Request$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Request>]]></haxe_doc>
		<meta><m n=":native"><e>"Request"</e></m></meta>
	</class>
	<abstract path="js.html.RequestCache" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestCredentials" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestCredentials.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestDestination" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestDestination.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `RequestDestination` enumerated type contains the permitted values for a request's `destination`. These string values indicate potential types of content that a request may try to retrieve.

	Documentation [RequestDestination](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestDestination.RequestDestination_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestDestination.hx" private="1" module="js.html.RequestDestination" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RequestInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestInit.hx"><a>
	<signal>
		<x path="Null"><c path="js.html.AbortSignal"/></x>
		<meta><m n=":optional"/></meta>
	</signal>
	<referrerPolicy>
		<x path="Null"><x path="js.html.ReferrerPolicy"/></x>
		<meta><m n=":optional"/></meta>
	</referrerPolicy>
	<referrer>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</referrer>
	<redirect>
		<x path="Null"><x path="js.html.RequestRedirect"/></x>
		<meta><m n=":optional"/></meta>
	</redirect>
	<observe>
		<x path="Null"><x path="haxe.extern.EitherType">
	<f a="">
		<c path="js.html.FetchObserver"/>
		<x path="Void"/>
	</f>
	<t path="js.html.ObserverCallback"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</observe>
	<mode>
		<x path="Null"><x path="js.html.RequestMode"/></x>
		<meta><m n=":optional"/></meta>
	</mode>
	<method>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</method>
	<integrity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</integrity>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
	<credentials>
		<x path="Null"><x path="js.html.RequestCredentials"/></x>
		<meta><m n=":optional"/></meta>
	</credentials>
	<cache>
		<x path="Null"><x path="js.html.RequestCache"/></x>
		<meta><m n=":optional"/></meta>
	</cache>
	<body>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<x path="haxe.extern.EitherType">
			<c path="js.lib.ArrayBufferView"/>
			<c path="js.lib.ArrayBuffer"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="js.html.FormData"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.URLSearchParams"/>
				<c path="String"/>
			</x>
		</x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.RequestMode" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestRedirect" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestRedirect.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Response" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Response.hx" extern="1">
		<error public="1" set="method" static="1">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Returns a new `Response` object associated with a network error.</haxe_doc>
		</error>
		<redirect public="1" set="method" static="1">
			<f a="url:?status" v=":302">
				<c path="String"/>
				<x path="Int"/>
				<c path="js.html.Response"/>
			</f>
			<meta><m n=":value"><e>{ status : 302 }</e></m></meta>
			<haxe_doc>Creates a new response with a different URL.
		@throws DOMError</haxe_doc>
		</redirect>
		<type public="1" set="null">
			<x path="js.html.ResponseType"/>
			<haxe_doc>Contains the type of the response (e.g., `basic`, `cors`).</haxe_doc>
		</type>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the response.</haxe_doc>
		</url>
		<redirected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.</haxe_doc>
		</redirected>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Contains the status code of the response (e.g., `200` for a success).</haxe_doc>
		</status>
		<ok public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Contains a boolean stating whether the response was successful (status in the range 200-299) or not.</haxe_doc>
		</ok>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the status message corresponding to the status code (e.g., `OK` for `200`).</haxe_doc>
		</statusText>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the `Headers` object associated with the response.</haxe_doc>
		</headers>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Creates a clone of a `Response` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="?body:?init">
				<c path="js.html.Blob"/>
				<x path="Null"><t path="js.html.ResponseInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.FormData"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.URLSearchParams"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<d/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="String"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Response` interface of the Fetch API represents the response to a request.

	Documentation [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Response$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Response>]]></haxe_doc>
		<meta><m n=":native"><e>"Response"</e></m></meta>
	</class>
	<typedef path="js.html.ResponseInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ResponseInit.hx"><a>
	<statusText>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusText>
	<status>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</status>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
</a></typedef>
	<abstract path="js.html.ResponseType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Screen" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Screen.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<availWidth public="1" set="null"><x path="Int"/></availWidth>
		<availHeight public="1" set="null"><x path="Int"/></availHeight>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<colorDepth public="1" set="null"><x path="Int"/></colorDepth>
		<pixelDepth public="1" set="null"><x path="Int"/></pixelDepth>
		<top public="1" set="null"><x path="Int"/></top>
		<left public="1" set="null"><x path="Int"/></left>
		<availTop public="1" set="null"><x path="Int"/></availTop>
		<availLeft public="1" set="null"><x path="Int"/></availLeft>
		<orientation public="1" set="null"><c path="js.html.ScreenOrientation"/></orientation>
		<haxe_doc><![CDATA[The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using `window.screen`.

	Documentation [Screen](https://developer.mozilla.org/en-US/docs/Web/API/Screen) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Screen$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Screen>]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScreenOrientation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScreenOrientation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<type public="1" set="null">
			<x path="js.html.OrientationType"/>
			<haxe_doc>Returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".</haxe_doc>
		</type>
		<angle public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the document's current orientation angle.</haxe_doc>
		</angle>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever is the `EventHandler` called when the screen changes orientation.</haxe_doc>
		</onchange>
		<lock public="1" set="method">
			<f a="orientation">
				<x path="js.html.OrientationLockType"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Locks the orientation of the containing document to its default orientation and returns a `Promise`. 
		@throws DOMError</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unlocks the orientation of the containing document from its default orientation.
		@throws DOMError</haxe_doc>
		</unlock>
		<haxe_doc><![CDATA[The `ScreenOrientation` interface of the the Screen Orientation API provides information about the current orientation of the document.

	Documentation [ScreenOrientation](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation>]]></haxe_doc>
		<meta><m n=":native"><e>"ScreenOrientation"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1"><c path="String"/></src>
		<type public="1"><c path="String"/></type>
		<charset public="1"><c path="String"/></charset>
		<async public="1"><x path="Bool"/></async>
		<defer public="1"><x path="Bool"/></defer>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<text public="1"><c path="String"/></text>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<integrity public="1"><c path="String"/></integrity>
		<haxe_doc><![CDATA[HTML `script` elements expose the `HTMLScriptElement` interface, which provides special properties and methods for manipulating the behavior and execution of `script` elements (beyond the inherited `HTMLElement` interface).

	Documentation [HTMLScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<abstract path="js.html.ScrollBehavior" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollBehavior.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollBehavior.ScrollBehavior_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollBehavior.hx" private="1" module="js.html.ScrollBehavior" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollIntoViewOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollIntoViewOptions.hx"><a>
	<inline_>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"inline"</e></m>
		</meta>
	</inline_>
	<block>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta><m n=":optional"/></meta>
	</block>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<abstract path="js.html.ScrollLogicalPosition" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollLogicalPosition.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollLogicalPosition.ScrollLogicalPosition_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollLogicalPosition.hx" private="1" module="js.html.ScrollLogicalPosition" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollOptions.hx"><a><behavior>
	<x path="Null"><x path="js.html.ScrollBehavior"/></x>
	<meta><m n=":optional"/></meta>
</behavior></a></typedef>
	<abstract path="js.html.ScrollRestoration" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollRestoration.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ScrollSetting" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollSetting.ScrollSetting_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollSetting.hx" private="1" module="js.html.ScrollSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollToOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ScrollToOptions.hx"><a>
	<top>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</top>
	<left>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</left>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<class path="js.html.SelectElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. `2.0`</haxe_doc>
		</autofocus>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` referencing the form that this element is associated with. If the element is not associated with of a `form` element, then it returns `null`.</haxe_doc>
		</form>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `multiple` HTML attribute, which indicates whether multiple items can be selected.</haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.</haxe_doc>
		</name>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form. `2.0`</haxe_doc>
		</required>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is true, in which case it is 4.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` represeting the form control's type. When `multiple` is `true`, it returns `"select-multiple"`; otherwise, it returns `"select-one"`.</haxe_doc>
		</type>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc>An `HTMLOptionsCollection` representing the set of `option` elements contained by this element.</haxe_doc>
		</options>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>An `unsigned long `The number of `option` elements in this `select` element.</haxe_doc>
		</length>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>An `HTMLCollection` representing the set of `option` elements that are selected.</haxe_doc>
		</selectedOptions>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the index of the first selected `option` element. The value `-1` indicates no element is selected.</haxe_doc>
		</selectedIndex>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form control (the first selected option). Returns the value attribute of the option element or if it is missing, the text attribute.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` reflecting the validity state that this control is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Gets an item from the options collection for this `select` element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.OptionElement"/>
			</f>
			<haxe_doc>Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</namedItem>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element to the collection of `option` elements for this `select` element.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
			<overloads><remove public="1" set="method">
	<f a="index">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
</remove></overloads>
		</remove>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLSelectElement` interface represents a `select` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.

	Documentation [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.Selection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Selection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.</haxe_doc>
		</anchorOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` describing the type of the current selection.</haxe_doc>
		</type>
		<caretBidiLevel public="1"><x path="Int"/></caretBidiLevel>
		<getRangeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Range"/>
			</f>
			<haxe_doc>Returns a `Range` object representing one of the ranges currently selected.
		@throws DOMError</haxe_doc>
		</getRangeAt>
		<addRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A `Range` object that will be added to the selection.
		@throws DOMError</haxe_doc>
		</addRange>
		<removeRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a range from the selection.
		@throws DOMError</haxe_doc>
		</removeRange>
		<removeAllRanges public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all ranges from the selection.
		@throws DOMError</haxe_doc>
		</removeAllRanges>
		<empty public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</empty>
		<collapse public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Collapses the current selection to a single point.
		@throws DOMError</haxe_doc>
		</collapse>
		<setPosition public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setPosition>
		<collapseToStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the start of the first range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToStart>
		<collapseToEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the end of the last range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToEnd>
		<extend public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Moves the focus of the selection to a specified point.
		@throws DOMError</haxe_doc>
		</extend>
		<setBaseAndExtent public="1" set="method">
			<f a="anchorNode:anchorOffset:focusNode:focusOffset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.
		@throws DOMError</haxe_doc>
		</setBaseAndExtent>
		<selectAllChildren public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds all the children of the specified node to the selection.
		@throws DOMError</haxe_doc>
		</selectAllChildren>
		<deleteFromDocument public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deletes the selection's content from the document.
		@throws DOMError</haxe_doc>
		</deleteFromDocument>
		<containsNode public="1" set="method">
			<f a="node:?allowPartialContainment" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allowPartialContainment : false }</e></m></meta>
			<haxe_doc>Indicates if a certain node is part of the selection.
		@throws DOMError</haxe_doc>
		</containsNode>
		<modify public="1" set="method">
			<f a="alter:direction:granularity">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current selection.
		@throws DOMError</haxe_doc>
		</modify>
		<haxe_doc><![CDATA[A `Selection` object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call `window.getSelection()`.

	Documentation [Selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Selection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Selection>]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<abstract path="js.html.SelectionMode" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SelectionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ServiceWorker" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<scriptURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scriptURL>
		<state public="1" set="null">
			<x path="js.html.ServiceWorkerState"/>
			<haxe_doc>Returns the state of the service worker. It returns one of the following values: `installing`, `installed,` `activating`, `activated`, or `redundant`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `statechange` is fired; it is basically fired anytime the `ServiceWorker.state` changes.</haxe_doc>
		</onstatechange>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `ServiceWorker` interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.

	Documentation [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorker"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerContainer" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorkerContainer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<controller public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a `ServiceWorker` object if its state is `activated` (the same object returned by `ServiceWorkerRegistration.active`). This property returns `null` during a force-refresh request (Shift + refresh) or if there is no active worker.</haxe_doc>
		</controller>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
			<haxe_doc>Provides a way of delaying code execution until a service worker is active. It returns a `Promise` that will never reject, and which waits indefinitely until the `ServiceWorkerRegistration` associated with the current page has an `ServiceWorkerRegistration.active` worker. Once that condition is met, it resolves with the `ServiceWorkerRegistration`.</haxe_doc>
		</ready>
		<oncontrollerchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `controllerchange` event occurs — when the document's associated `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</oncontrollerchange>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever an `error` event occurs in the associated service workers.</haxe_doc>
		</onerror>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `message` event occurs — when incoming messages are received to the `ServiceWorkerContainer` object (e.g. via a `MessagePort.postMessage()` call.)</haxe_doc>
		</onmessage>
		<register public="1" set="method"><f a="scriptURL:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.RegistrationOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
</f></register>
		<getRegistration public="1" set="method">
			<f a="?documentURL" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<meta><m n=":value"><e>{ documentURL : "" }</e></m></meta>
			<haxe_doc>Gets a `ServiceWorkerRegistration` object whose scope matches the provided document URL.  If the method can't return a `ServiceWorkerRegistration`, it returns a `Promise`. </haxe_doc>
		</getRegistration>
		<getRegistrations public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.ServiceWorkerRegistration"/></c></c></f>
			<haxe_doc>Returns all `ServiceWorkerRegistration` objects associated with a `ServiceWorkerContainer` in an array.  If the method can't return `ServiceWorkerRegistration` objects, it returns a `Promise`. </haxe_doc>
		</getRegistrations>
		<haxe_doc><![CDATA[The `ServiceWorkerContainer` interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.

	Documentation [ServiceWorkerContainer](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerContainer"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerRegistration" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorkerRegistration.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<installing public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installing`. This is initially set to `null`.</haxe_doc>
		</installing>
		<waiting public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `waiting`. This is initially set to `null`.</haxe_doc>
		</waiting>
		<active public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is either `activating` or `activated`. This is initially set to `null`. An active worker will control a `ServiceWorkerClient` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)</haxe_doc>
		</active>
		<scope public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scope>
		<updateViaCache public="1" set="null"><x path="js.html.ServiceWorkerUpdateViaCache"/></updateViaCache>
		<onupdatefound public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `updatefound` is fired; it is fired any time the `ServiceWorkerRegistration.installing` property acquires a new service worker.</haxe_doc>
		</onupdatefound>
		<pushManager public="1" set="null">
			<c path="js.html.push.PushManager"/>
			<haxe_doc>Returns a reference to the `PushManager` interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.</haxe_doc>
		</pushManager>
		<update public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Checks the server for an updated version of the service worker without consulting caches.
		@throws DOMError</haxe_doc>
		</update>
		<unregister public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Unregisters the service worker registration and returns a `Promise`. The service worker will finish any ongoing operations before it is unregistered.
		@throws DOMError</haxe_doc>
		</unregister>
		<showNotification public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Displays the notification with the requested title.
		@throws DOMError</haxe_doc>
		</showNotification>
		<getNotifications public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.GetNotificationOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Notification"/></c></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to an array of `Notification` objects.
		@throws DOMError</haxe_doc>
		</getNotifications>
		<haxe_doc><![CDATA[The `ServiceWorkerRegistration` interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.

	Documentation [ServiceWorkerRegistration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerRegistration"</e></m></meta>
	</class>
	<abstract path="js.html.ServiceWorkerState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorkerState.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `ServiceWorkerState` is associated with its `ServiceWorker`'s state.

	Documentation [ServiceWorkerState](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ServiceWorkerUpdateViaCache" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorkerUpdateViaCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerUpdateViaCache.ServiceWorkerUpdateViaCache_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ServiceWorkerUpdateViaCache.hx" private="1" module="js.html.ServiceWorkerUpdateViaCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ShadowRoot" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ShadowRoot.hx" extern="1">
		<extends path="js.html.DocumentFragment"/>
		<mode public="1" set="null">
			<x path="js.html.ShadowRootMode"/>
			<haxe_doc>The mode of the `ShadowRoot` — either `open` or `closed`. This defines whether or not the shadow root's internal features are accessible from JavaScript.</haxe_doc>
		</mode>
		<host public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the DOM element the `ShadowRoot` is attached to.</haxe_doc>
		</host>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Sets or returns a reference to the DOM tree inside the `ShadowRoot`.</haxe_doc>
		</innerHTML>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<getElementById public="1" set="method" override="1"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="namespace:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<haxe_doc><![CDATA[The `ShadowRoot` interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.

	Documentation [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot>]]></haxe_doc>
		<meta><m n=":native"><e>"ShadowRoot"</e></m></meta>
	</class>
	<typedef path="js.html.ShadowRootInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ShadowRootInit.hx"><a><mode><x path="js.html.ShadowRootMode"/></mode></a></typedef>
	<abstract path="js.html.ShadowRootMode" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ShadowRootMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ShadowRootMode.ShadowRootMode_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ShadowRootMode.hx" private="1" module="js.html.ShadowRootMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.SlotElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SlotElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>`DOMString`: Can be used to get and set the slot's name.</haxe_doc>
		</name>
		<assignedNodes public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.AssignedNodesOptions"/></x>
				<c path="Array"><c path="js.html.Node"/></c>
			</f>
			<haxe_doc>Returns the sequence of elements assigned to this slot, or alternatively the slot's fallback content.</haxe_doc>
		</assignedNodes>
		<haxe_doc><![CDATA[The `HTMLSlotElement` interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `slot` element.

	Documentation [HTMLSlotElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSlotElement"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `source` element is nested in a media element that is a `video` or an `audio` element. It has no meaning and is ignored when it is nested in a `picture` element. 
		 Note: If the `src` property is updated (along with any siblings), the parent `HTMLMediaElement`'s `load` method should be called when done, since `source` elements are not re-scanned automatically.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `type` HTML attribute, containing the type of the media resource.</haxe_doc>
		</type>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing image sizes between breakpoints</haxe_doc>
		</sizes>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `media` HTML attribute, containing the intended type of the media resource.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `HTMLSourceElement` interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `source` elements.

	Documentation [HTMLSourceElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLSpanElement` interface represents a `span` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesis" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SpeechSynthesis.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the utterance queue contains as-yet-unspoken utterances.</haxe_doc>
		</pending>
		<speaking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a paused state.</haxe_doc>
		</speaking>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the `SpeechSynthesis` object is in a paused state.</haxe_doc>
		</paused>
		<onvoiceschanged public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the list of `SpeechSynthesisVoice` objects that would be returned by the `SpeechSynthesis.getVoices()` method has changed.</haxe_doc>
		</onvoiceschanged>
		<speak public="1" set="method">
			<f a="utterance">
				<c path="js.html.SpeechSynthesisUtterance"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an `SpeechSynthesisUtterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.</haxe_doc>
		</speak>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all utterances from the utterance queue.</haxe_doc>
		</cancel>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a paused state.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.</haxe_doc>
		</resume>
		<getVoices public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.SpeechSynthesisVoice"/></c></f>
			<haxe_doc>Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.</haxe_doc>
		</getVoices>
		<haxe_doc><![CDATA[The `SpeechSynthesis` interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.

	Documentation [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesis"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisUtterance" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SpeechSynthesisUtterance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the text that will be synthesised when the utterance is spoken.</haxe_doc>
		</text>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the language of the utterance.</haxe_doc>
		</lang>
		<voice public="1">
			<c path="js.html.SpeechSynthesisVoice"/>
			<haxe_doc>Gets and sets the voice that will be used to speak the utterance.</haxe_doc>
		</voice>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the volume that the utterance will be spoken at.</haxe_doc>
		</volume>
		<rate public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the speed at which the utterance will be spoken at.</haxe_doc>
		</rate>
		<pitch public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the pitch at which the utterance will be spoken at.</haxe_doc>
		</pitch>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has begun to be spoken.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has finished being spoken.</haxe_doc>
		</onend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when an error occurs that prevents the utterance from being succesfully spoken.</haxe_doc>
		</onerror>
		<onpause public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance is paused part way through.</haxe_doc>
		</onpause>
		<onresume public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a paused utterance is resumed.</haxe_doc>
		</onresume>
		<onmark public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a named SSML "mark" tag.</haxe_doc>
		</onmark>
		<onboundary public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a word or sentence boundary.</haxe_doc>
		</onboundary>
		<new public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisUtterance` interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)

	Documentation [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisUtterance"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisVoice" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SpeechSynthesisVoice.hx" extern="1">
		<voiceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the type of URI and location of the speech synthesis service for this voice.</haxe_doc>
		</voiceURI>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable name that represents the voice.</haxe_doc>
		</name>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a BCP 47 language tag indicating the language of the voice.</haxe_doc>
		</lang>
		<localService public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)</haxe_doc>
		</localService>
		<default_ public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>A `Boolean` indicating whether the voice is the default voice for the current app language (`true`), or not (`false`.)</haxe_doc>
		</default_>
		<haxe_doc><![CDATA[The `SpeechSynthesisVoice` interface of the Web Speech API represents a voice that the system supports. Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.

	Documentation [SpeechSynthesisVoice](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisVoice"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of data items stored in the `Storage` object.</haxe_doc>
		</length>
		<key public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a number n, this method will return the name of the nth key in the storage.
		@throws DOMError</haxe_doc>
		</key>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a key name, will return that key's value.
		@throws DOMError</haxe_doc>
		</getItem>
		<setItem public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
		@throws DOMError</haxe_doc>
		</setItem>
		<removeItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name, will remove that key from the storage.
		@throws DOMError</haxe_doc>
		</removeItem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When invoked, will empty all keys out of the storage.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `Storage` interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.

	Documentation [Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Storage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Storage>]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEstimate" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StorageEstimate.hx">
		<a>
			<usage>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by `quota`.</haxe_doc>
			</usage>
			<quota>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case.</haxe_doc>
			</quota>
		</a>
		<haxe_doc><![CDATA[The `StorageEstimate` dictionary is used by the `StorageManager` to provide estimates of the size of a site's or application's data store and how much of it is in use. The `estimate()` method returns an object that conforms to this dictionary when its `Promise` resolves.

	Documentation [StorageEstimate](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate>]]></haxe_doc>
	</typedef>
	<class path="js.html.StorageManager" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StorageManager.hx" extern="1">
		<persisted public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if persistence has already been granted for your site's storage.
		@throws DOMError</haxe_doc>
		</persisted>
		<persist public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if the user agent is able to persist your site's storage.
		@throws DOMError</haxe_doc>
		</persist>
		<estimate public="1" set="method">
			<f a=""><c path="js.lib.Promise"><t path="js.html.StorageEstimate"/></c></f>
			<haxe_doc>Returns a `StorageEstimate` object containing usage and quota numbers for your origin.
		@throws DOMError</haxe_doc>
		</estimate>
		<haxe_doc><![CDATA[The `StorageManager` interface of the the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either `navigator.storage` or `WorkerNavigator.storage`.

	Documentation [StorageManager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageManager>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageManager"</e></m></meta>
	</class>
	<abstract path="js.html.StorageType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StorageType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._StorageType.StorageType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StorageType.hx" private="1" module="js.html.StorageType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.StyleElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value representing whether or not the stylesheet is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of style being applied by this statement.</haxe_doc>
		</type>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLStyleElement` interface represents a `style` element. It inherits properties and methods from its parent, `HTMLElement`, and from `LinkStyle`.

	Documentation [HTMLStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<haxe_doc><![CDATA[The `StyleSheetList` interface represents a list of `StyleSheet`.

	Documentation [StyleSheetList](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.SubtleCrypto" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/SubtleCrypto.hx" extern="1">
		<encrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the encrypted data corresponding to the clear text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</encrypt>
		<decrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the clear data corresponding to the encrypted text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</decrypt>
		<sign public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the signature corresponding to the text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</sign>
		<verify public="1" set="method">
			<f a="algorithm:key:signature:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `Boolean` value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.
		@throws DOMError</haxe_doc>
		</verify>
		<digest public="1" set="method">
			<f a="algorithm:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a digest generated from the algorithm and text given as parameters.
		@throws DOMError</haxe_doc>
		</digest>
		<generateKey public="1" set="method">
			<f a="algorithm:extractable:keyUsages">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><generateKey public="1" set="method">
	<f a="algorithm:extractable:keyUsages">
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</generateKey></overloads>
		</generateKey>
		<deriveKey public="1" set="method">
			<f a="algorithm:baseKey:derivedKeyType:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey` derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
		</deriveKey>
		<deriveBits public="1" set="method">
			<f a="algorithm:baseKey:length">
				<d/>
				<c path="js.html.CryptoKey"/>
				<x path="Int"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><deriveBits public="1" set="method">
	<f a="algorithm:baseKey:length">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<x path="Int"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
</deriveBits></overloads>
		</deriveBits>
		<importKey public="1" set="method">
			<f a="format:keyData:algorithm:extractable:keyUsages">
				<c path="String"/>
				<d/>
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><importKey public="1" set="method">
	<f a="format:keyData:algorithm:extractable:keyUsages">
		<c path="String"/>
		<d/>
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</importKey></overloads>
		</importKey>
		<exportKey public="1" set="method">
			<f a="format:key">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a buffer containing the key in the format requested.
		@throws DOMError</haxe_doc>
		</exportKey>
		<wrapKey public="1" set="method">
			<f a="format:key:wrappingKey:wrapAlgorithm">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.html.CryptoKey"/>
				<d/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
			<overloads><wrapKey public="1" set="method">
	<f a="format:key:wrappingKey:wrapAlgorithm">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<c path="js.html.CryptoKey"/>
		<c path="String"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
</wrapKey></overloads>
		</wrapKey>
		<unwrapKey public="1" set="method">
			<f a="format:wrappedKey:unwrappingKey:unwrapAlgorithm:unwrappedKeyAlgorithm:extractable:keyUsages">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the wrapped key given in parameter.
		@throws DOMError</haxe_doc>
		</unwrapKey>
		<haxe_doc><![CDATA[The `SubtleCrypto` interface represents a set of cryptographic primitives. It is available via the `Crypto.subtle` properties available in a window context (via `Window.crypto`).

	Documentation [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto>]]></haxe_doc>
		<meta><m n=":native"><e>"SubtleCrypto"</e></m></meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` which represents an enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLTableCaptionElement` interface special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table caption elements.

	Documentation [HTMLTableCaptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<colSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the `colspan` attribute.</haxe_doc>
		</colSpan>
		<rowSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the `rowspan` attribute.</haxe_doc>
		</rowSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMSettableTokenList` describing a list of `id` of `th` elements that represents headers associated with the cell. It reflects the `headers` attribute.</haxe_doc>
		</headers>
		<cellIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A long integer representing the cell's position in the `HTMLTableRowElement.cells` collection of the `tr` the cell is contained within. If the cell doesn't belong to a `tr`, it returns `-1`.</haxe_doc>
		</cellIndex>
		<abbr public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` which can be used on `th` elements (not on `td`), specifying an alternative label for the header cell.. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of `abbr` is an abbreviation or acronym, but can be any text that's appropriate contextually.</haxe_doc>
		</abbr>
		<scope public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</scope>
		<align public="1"><c path="String"/></align>
		<axis public="1"><c path="String"/></axis>
		<height public="1"><c path="String"/></height>
		<width public="1"><c path="String"/></width>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<noWrap public="1"><x path="Bool"/></noWrap>
		<vAlign public="1"><c path="String"/></vAlign>
		<bgColor public="1"><c path="String"/></bgColor>
		<haxe_doc><![CDATA[The `HTMLTableCellElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.

	Documentation [HTMLTableCellElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<span public="1"><x path="Int"/></span>
		<align public="1"><c path="String"/></align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLTableColElement` interface provides special properties (beyond the `HTMLElement` interface it also has available to it inheritance) for manipulating single or grouped table column elements.

	Documentation [HTMLTableColElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc>Is a `HTMLTableCaptionElement` representing the first `caption` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `caption`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `caption` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</caption>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `thead` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `thead`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element, and the first `thead` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tHead>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `tfoot` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `tfoot`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element, and the first `tfoot` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tFoot>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the `tbody` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</tBodies>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the rows of the element, that is all `tr` that are a child of the element, or a child or one of its `thead`, `tbody` and `tfoot` children. The rows members of a `thead` appear first, in tree order, and those members of a `tbody` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.</haxe_doc>
		</border>
		<frame public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `"void"`, `"above"`, `"below"`, `"hsides"`, `"vsides"`, `"lhs"`, `"rhs"`, `"box"`, or `"border"`.</haxe_doc>
		</frame>
		<rules public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `"none"`, `"groups"`, `"rows"`, `"cols"`, or `"all"`.</haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.</haxe_doc>
		</summary>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.</haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.</haxe_doc>
		</cellSpacing>
		<createCaption public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `caption` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `table` element.</haxe_doc>
		</createCaption>
		<deleteCaption public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `caption` that is a child of the element.</haxe_doc>
		</deleteCaption>
		<createTHead public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `thead` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element.</haxe_doc>
		</createTHead>
		<deleteTHead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `thead` that is a child of the element.</haxe_doc>
		</deleteTHead>
		<createTFoot public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `tfoot` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element.</haxe_doc>
		</createTFoot>
		<deleteTFoot public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `tfoot` that is a child of the element.</haxe_doc>
		</deleteTFoot>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Returns an `HTMLTableRowElement` representing a new row of the table. It inserts it in the rows collection immediately before the `tr` element at the given `index` position. If necessary a `tbody` is created. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the row corresponding to the `index` given in parameter. If the `index` value is `-1` the last row is removed; if it smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.

	Documentation [HTMLTableElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.</haxe_doc>
		</sectionRowIndex>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.</haxe_doc>
		</cells>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<insertCell public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new cell just before the given position in the row. If the given position is not given or is `-1`, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value. Returns a reference to a HTMLTableCellElement [en-US].
		@throws DOMError</haxe_doc>
		</insertCell>
		<deleteCell public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteCell>
		<haxe_doc><![CDATA[The `HTMLTableRowElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.

	Documentation [HTMLTableRowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new row just before the given position in the section. If the given position is not given or is `-1`, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableSectionElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.

	Documentation [HTMLTableSectionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<cols public="1"><x path="Int"/></cols>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<maxLength public="1"><x path="Int"/></maxLength>
		<minLength public="1"><x path="Int"/></minLength>
		<name public="1"><c path="String"/></name>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<rows public="1"><x path="Int"/></rows>
		<wrap public="1"><c path="String"/></wrap>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLTextAreaElement` interface provides special properties and methods for manipulating the layout and presentation of `textarea` elements.

	Documentation [HTMLTextAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `double` giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `TextMetrics` interface represents the dimension of a text in the canvas, as created by the `CanvasRenderingContext2D.measureText()` method.

	Documentation [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics>]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<x path="js.html.TextTrackKind"/>
			<haxe_doc>Returns a `DOMString` indicating what kind of text track the `TextTrack` describes. The value must be one of those in the TextTrackKind enum.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human-readable `DOMString` which contains the text track's label, if one is present; otherwise, this is an empty string (`""`), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML `lang` attribute. For example, this can be `"en-US"` for United States English or `"pt-BR"` for Brazilian Portuguese.</haxe_doc>
		</language>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (`""`). If the `TextTrack` is associated with a `track` element, then the track's ID matches the element's ID.</haxe_doc>
		</id>
		<inBandMetadataTrackDispatchType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` which indicates the track's in-band metadata track dispatch type. needs details</haxe_doc>
		</inBandMetadataTrackDispatchType>
		<mode public="1">
			<x path="js.html.TextTrackMode"/>
			<haxe_doc>A `DOMString` specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants.</haxe_doc>
		</mode>
		<cues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` which contains all of the track's cues.</haxe_doc>
		</cues>
		<activeCues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times.</haxe_doc>
		</activeCues>
		<oncuechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A `EventHandler` specifying a function to be called when a `cuechange` event occurs. Handling these events lets you know when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited.</haxe_doc>
		</oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.VTTCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method">
			<f a="cue">
				<c path="js.html.VTTCue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeCue>
		<haxe_doc><![CDATA[This interface also inherits properties from `EventTarget`.

	Documentation [TextTrack](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<id public="1"><c path="String"/></id>
		<startTime public="1"><x path="Float"/></startTime>
		<endTime public="1"><x path="Float"/></endTime>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<onenter public="1"><x path="haxe.Function"/></onenter>
		<onexit public="1"><x path="haxe.Function"/></onexit>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VTTCue"/>
</f></getCueById>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackKind" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TextTrackList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackMode" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TimeRanges" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the number of time ranges represented by the time range object.</haxe_doc>
		</length>
		<start public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the start of the range with the specified index.
		@throws DOMError</haxe_doc>
		</start>
		<end public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the end of the specified range.
		@throws DOMError</haxe_doc>
		</end>
		<haxe_doc><![CDATA[The `TimeRanges` interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the `audio` and `video` elements.

	Documentation [TimeRanges](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the text of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `HTMLTitleElement` interface contains the title for a document. This element inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Touch.hx" extern="1">
		<identifier public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a unique identifier for this `Touch` object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.</haxe_doc>
		</identifier>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Returns the `Element` on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.</haxe_doc>
		</target>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the screen.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the screen.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the document. Unlike `clientX`, this value includes the horizontal scroll offset, if any.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top of the document. Unlike `clientY,` this value includes the vertical scroll offset, if any.</haxe_doc>
		</pageY>
		<radiusX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenX`.</haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenY`.</haxe_doc>
		</radiusY>
		<rotationAngle public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.</haxe_doc>
		</rotationAngle>
		<force public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the amount of pressure being applied to the surface by the user, as a `float` between `0.0` (no pressure) and `1.0` (maximum pressure).</haxe_doc>
		</force>
		<new public="1" set="method">
			<f a="touchInitDict">
				<t path="js.html.TouchInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Touch` interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.

	Documentation [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Touch$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Touch>]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<typedef path="js.html.TouchInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TouchInit.hx"><a>
	<target><c path="js.html.EventTarget"/></target>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<rotationAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rotationAngle>
	<radiusY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusY>
	<radiusX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusX>
	<pageY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageY>
	<pageX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageX>
	<identifier><x path="Int"/></identifier>
	<force>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</force>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
</a></typedef>
	<class path="js.html.TouchList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of `Touch` objects in the `TouchList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the `Touch` object at the specified index in the list.</haxe_doc>
		</item>
		<haxe_doc><![CDATA[The `TouchList` interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.

	Documentation [TouchList](https://developer.mozilla.org/en-US/docs/Web/API/TouchList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchList>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<LOADING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ERROR>
		<kind public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, metadata.</haxe_doc>
		</kind>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, indicating the address of the text track data.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `srclang` HTML attribute, indicating the language of the text track data.</haxe_doc>
		</srclang>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `label` HTML attribute, indicating a user-readable title for the track.</haxe_doc>
		</label>
		<default_ public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>Is a `Boolean` reflects the `default` HTML attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.</haxe_doc>
		</default_>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns  an <code>unsigned short</code> that show the readiness state of the track:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NONE</code></td>
		    <td>0</td>
		    <td>Indicates that the text track's cues have not been obtained.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td>1</td>
		    <td>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</td>
		   </tr>
		   <tr>
		    <td><code>LOADED</code></td>
		    <td>2</td>
		    <td>Indicates that the text track has been loaded with no fatal errors.</td>
		   </tr>
		   <tr>
		    <td><code>ERROR</code></td>
		    <td>3</td>
		    <td>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<track public="1" set="null">
			<c path="js.html.TextTrack"/>
			<haxe_doc>Returns `TextTrack` is the track element's text track data.</haxe_doc>
		</track>
		<haxe_doc><![CDATA[The `HTMLTrackElement`

	Documentation [HTMLTrackElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TreeWalker" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/TreeWalker.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `TreeWalker` was created.</haxe_doc>
		</root>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> {{deprecated_inline}}</td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Attr</code> node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> {{deprecated_inline}}</td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> {{deprecated_inline}}</td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> {{deprecated_inline}}</td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> {{deprecated_inline}}</td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Is the `Node` on which the `TreeWalker` is currently pointing at.</haxe_doc>
		</currentNode>
		<parentNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</parentNode>
		<firstChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</firstChild>
		<lastChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its previous sibling, if any, and returns the found sibling. If there is no such node, return `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its next sibling, if any, and returns the found sibling. If there is no such node, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextSibling>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousNode>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextNode>
		<haxe_doc><![CDATA[The `TreeWalker` object represents the nodes of a document subtree and a position within them.

	Documentation [TreeWalker](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker>]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<class path="js.html.UListElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLUListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list elements.

	Documentation [HTMLUListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParams" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a specified key/value pair as a new search parameter.</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the given search parameter, and its associated value, from the list of all search parameters.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the first value associated to the given search parameter.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the values associated with a given search parameter.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if such a search parameter exists.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.</haxe_doc>
		</set>
		<sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sorts all key/value pairs, if any, by their keys.
		@throws DOMError</haxe_doc>
		</sort>
		<entries public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="Array"><c path="Array"><c path="String"/></c></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.URLSearchParams"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init" v="&quot;&quot;">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
					</f>
					<meta><m n=":value"><e>{ init : "" }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` interface defines utility methods to work with the query string of a URL.

	Documentation [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams>]]></haxe_doc>
		<meta><m n=":native"><e>"URLSearchParams"</e></m></meta>
	</class>
	<typedef path="js.html.URLSearchParamsIterator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/URLSearchParamsIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.VTTCue" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VTTCue.hx" extern="1">
		<extends path="js.html.TextTrackCue"/>
		<region public="1"><c path="js.html.VTTRegion"/></region>
		<vertical public="1"><x path="js.html.DirectionSetting"/></vertical>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<line public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></line>
		<lineAlign public="1"><x path="js.html.LineAlignSetting"/></lineAlign>
		<position public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></position>
		<positionAlign public="1"><x path="js.html.PositionAlignSetting"/></positionAlign>
		<size public="1"><x path="Float"/></size>
		<align public="1"><x path="js.html.AlignSetting"/></align>
		<text public="1"><c path="String"/></text>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method">
			<f a="startTime:endTime:text">
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[VTTCues represent a cue in a text track.

	Documentation [VTTCue](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VTTCue>]]></haxe_doc>
		<meta><m n=":native"><e>"VTTCue"</e></m></meta>
	</class>
	<class path="js.html.VTTRegion" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VTTRegion.hx" extern="1">
		<id public="1"><c path="String"/></id>
		<width public="1"><x path="Float"/></width>
		<lines public="1"><x path="Int"/></lines>
		<regionAnchorX public="1"><x path="Float"/></regionAnchorX>
		<regionAnchorY public="1"><x path="Float"/></regionAnchorY>
		<viewportAnchorX public="1"><x path="Float"/></viewportAnchorX>
		<viewportAnchorY public="1"><x path="Float"/></viewportAnchorY>
		<scroll public="1"><x path="js.html.ScrollSetting"/></scroll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTRegion"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/ValidityState.hx" extern="1">
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element has a `required` attribute, but no value.</haxe_doc>
		</valueMissing>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is not in the required syntax (when `type` is `email` or `url`).</haxe_doc>
		</typeMismatch>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not match the specified `pattern`.</haxe_doc>
		</patternMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value exceeds the specified `maxlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects. Note: This will never be `true` in Gecko, because elements' values are prevented from being longer than `maxlength`.</haxe_doc>
		</tooLong>
		<tooShort public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value fails to meet the specified `minlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects.</haxe_doc>
		</tooShort>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is less than the minimum specified by the `min` attribute.</haxe_doc>
		</rangeUnderflow>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is greater than the maximum specified by the `max` attribute.</haxe_doc>
		</rangeOverflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not fit the rules determined by the `step` attribute (that is, it's not evenly divisible by the step value).</haxe_doc>
		</stepMismatch>
		<badInput public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the user has provided input that the browser is unable to convert.</haxe_doc>
		</badInput>
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element's custom validity message has been set to a non-empty string by calling the element's `setCustomValidity()` method.</haxe_doc>
		</customError>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element meets all constraint validations, and is therefore considered to be valid.</haxe_doc>
		</valid>
		<haxe_doc><![CDATA[The `ValidityState` interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.

	Documentation [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ValidityState>]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.</haxe_doc>
		</height>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoWidth>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoHeight>
		<poster public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.</haxe_doc>
		</poster>
		<getVideoPlaybackQuality public="1" set="method">
			<f a=""><c path="js.html.VideoPlaybackQuality"/></f>
			<haxe_doc>Returns a `VideoPlaybackQuality` objects that contains the current playback metrics.</haxe_doc>
		</getVideoPlaybackQuality>
		<haxe_doc><![CDATA[The `HTMLVideoElement` interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.

	Documentation [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<class path="js.html.VideoPlaybackQuality" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VideoPlaybackQuality.hx" extern="1">
		<creationTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` containing the time in miliseconds since the start of the navigation and the creation of the object.</haxe_doc>
		</creationTime>
		<totalVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames created and dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</totalVideoFrames>
		<droppedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</droppedVideoFrames>
		<corruptedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames corrupted since the creation of the associated `HTMLVideoElement`. A corrupted frame may be created or dropped.</haxe_doc>
		</corruptedVideoFrames>
		<haxe_doc><![CDATA[The `VideoPlaybackQuality` interface represents the set of metrics describing the playback quality of a video.

	Documentation [VideoPlaybackQuality](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality>]]></haxe_doc>
		<meta><m n=":native"><e>"VideoPlaybackQuality"</e></m></meta>
	</class>
	<class path="js.html.VideoStreamTrack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VideoStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"VideoStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrack" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VideoTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<selected public="1"><x path="Bool"/></selected>
		<meta><m n=":native"><e>"VideoTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrackList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VideoTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<selectedIndex public="1" set="null"><x path="Int"/></selectedIndex>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VideoTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"VideoTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.VisibilityState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VisibilityState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.WakeLock" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WakeLock.hx" extern="1">
		<request public="1" set="method">
			<f a="?type">
				<x path="js.html.WakeLockType"/>
				<c path="js.lib.Promise"><c path="js.html.WakeLockSentinel"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves with a `WakeLockSentinel` object, which allows control over screen dimming and locking.</haxe_doc>
		</request>
		<haxe_doc><![CDATA[Prevents device screens from dimming or locking when an application needs to keep running.

	Documentation [WakeLock](https://developer.mozilla.org/en-US/docs/Web/API/WakeLock) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WakeLock/contributors.txt), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WakeLock>]]></haxe_doc>
		<meta><m n=":native"><e>"WakeLock"</e></m></meta>
	</class>
	<class path="js.html.WakeLockSentinel" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WakeLock.hx" module="js.html.WakeLock" extern="1">
		<extends path="js.html.EventTarget"/>
		<released final="1" public="1">
			<x path="Bool"/>
			<haxe_doc>A boolean a that indicates whether a `WakeLockSentinel` has been released yet.</haxe_doc>
		</released>
		<type final="1" public="1">
			<x path="js.html.WakeLockType"/>
			<haxe_doc>A string representation of the currently acquired `WakeLockSentinel` type.</haxe_doc>
		</type>
		<release public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Releases the `WakeLockSentinel`, returning a `Promise` that is resolved once the sentinel has been successfully released.</haxe_doc>
		</release>
		<haxe_doc><![CDATA[Provides a handle to the underlying platform wake lock and can be manually released and reacquired.

	Documentation [WakeLockSentinel](https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel/contributors.txt), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WakeLockSentinel>]]></haxe_doc>
		<meta><m n=":native"><e>"WakeLockSentinel"</e></m></meta>
	</class>
	<abstract path="js.html.WakeLockType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WakeLock.hx" module="js.html.WakeLock">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Indicates the type of `WakeLockSentinel` to be acquired.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._WakeLock.WakeLockType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WakeLock.hx" private="1" module="js.html.WakeLock" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Window" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/Window.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<window public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the current window.</haxe_doc>
		</window>
		<self public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<document public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<locationbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<personalbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<scrollbars public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<statusbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<toolbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current window is closed or not.</haxe_doc>
		</closed>
		<event public="1" set="null">
			<d/>
			<haxe_doc>Returns the current event, which is the event currently being handled by the JavaScript code's context, or `undefined` if no event is currently being handled. The `Event` object passed directly to event handlers should be used instead whenever possible.</haxe_doc>
		</event>
		<frames public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of frames in the window. See also `window.frames`.</haxe_doc>
		</length>
		<top public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the topmost window in the window hierarchy. This property is read only.</haxe_doc>
		</top>
		<opener public="1">
			<d/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<parent public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<console public="1" set="null">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Returns a reference to the console object which provides access to the browser's debugging console.</haxe_doc>
		</console>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<innerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<scrollX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<pageXOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollX`.</haxe_doc>
		</pageXOffset>
		<scrollY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<pageYOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollY`</haxe_doc>
		</pageYOffset>
		<screenX public="1">
			<d/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1">
			<d/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<outerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<outerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns a `Performance` object, which includes the `Performance.timing` and `Performance.navigation` attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.</haxe_doc>
		</performance>
		<devicePixelRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio between physical pixels and device independent pixels in the current display.</haxe_doc>
		</devicePixelRatio>
		<scrollMaxX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.</haxe_doc>
		</scrollMaxX>
		<scrollMaxY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).</haxe_doc>
		</scrollMaxY>
		<fullScreen public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the window is displayed in full screen or not.</haxe_doc>
		</fullScreen>
		<ondevicemotion public="1"><x path="haxe.Function"/></ondevicemotion>
		<ondeviceorientation public="1"><x path="haxe.Function"/></ondeviceorientation>
		<onabsolutedeviceorientation public="1"><x path="haxe.Function"/></onabsolutedeviceorientation>
		<ondeviceproximity public="1"><x path="haxe.Function"/></ondeviceproximity>
		<onuserproximity public="1"><x path="haxe.Function"/></onuserproximity>
		<ondevicelight public="1"><x path="haxe.Function"/></ondevicelight>
		<content public="1" set="null">
			<d/>
			<haxe_doc>Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.</haxe_doc>
		</content>
		<orientation public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.</haxe_doc>
		</orientation>
		<onorientationchange public="1"><x path="haxe.Function"/></onorientationchange>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><f a="::::">
	<x path="haxe.extern.EitherType">
		<c path="js.html.Event"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<d/>
</f></onerror>
		<speechSynthesis public="1" set="null">
			<c path="js.html.SpeechSynthesis"/>
			<haxe_doc>Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.</haxe_doc>
		</speechSynthesis>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</localStorage>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether a context is capable of using features that require secure contexts.</haxe_doc>
		</isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</sessionStorage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the current window.
		@throws DOMError</haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method stops window loading.
		@throws DOMError</haxe_doc>
		</stop>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus on the current window.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus away from the window.
		@throws DOMError</haxe_doc>
		</blur>
		<open public="1" set="method">
			<f a="?url:?target:?features" v="&quot;&quot;:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ features : "", target : "", url : "" }</e></m></meta>
			<haxe_doc>Opens a new window.
		@throws DOMError</haxe_doc>
		</open>
		<alert public="1" set="method">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
			<overloads><alert public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
</alert></overloads>
		</alert>
		<confirm public="1" set="method">
			<f a="?message" v="&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>Displays a dialog with a message that the user needs to respond to.
		@throws DOMError</haxe_doc>
		</confirm>
		<prompt public="1" set="method">
			<f a="?message:?default_" v="&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ default_ : "", message : "" }</e></m></meta>
			<haxe_doc>Returns the text entered by the user in a prompt dialog.
		@throws DOMError</haxe_doc>
		</prompt>
		<print public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Opens the Print Dialog to print the current document.
		@throws DOMError</haxe_doc>
		</print>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:?transfer">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.
		@throws DOMError</haxe_doc>
		</postMessage>
		<captureEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Registers the window to capture all events of the specified type.</haxe_doc>
		</captureEvents>
		<releaseEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the window from trapping events of a specific type.</haxe_doc>
		</releaseEvents>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>Returns the selection object representing the selected item(s).
		@throws DOMError</haxe_doc>
		</getSelection>
		<getComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.
		@throws DOMError</haxe_doc>
		</getComputedStyle>
		<matchMedia public="1" set="method">
			<f a="query">
				<c path="String"/>
				<c path="js.html.MediaQueryList"/>
			</f>
			<haxe_doc>Returns a `MediaQueryList` object representing the specified media query string.
		@throws DOMError</haxe_doc>
		</matchMedia>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the window to the specified coordinates.
		@throws DOMError</haxe_doc>
		</moveTo>
		<moveBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the current window by a specified amount.
		@throws DOMError</haxe_doc>
		</moveBy>
		<resizeTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Dynamically resizes window.
		@throws DOMError</haxe_doc>
		</resizeTo>
		<resizeBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resizes the current window by a certain amount.
		@throws DOMError</haxe_doc>
		</resizeBy>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
			<overloads><scroll public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
</scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
			<overloads><scrollTo public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
</scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
			<overloads><scrollBy public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
</scrollBy></overloads>
		</scrollBy>
		<requestAnimationFrame public="1" set="method">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.
		@throws DOMError</haxe_doc>
		</requestAnimationFrame>
		<cancelAnimationFrame public="1" set="method">
			<f a="handle">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables you to cancel a callback previously scheduled with `Window.requestAnimationFrame`.
		@throws DOMError</haxe_doc>
		</cancelAnimationFrame>
		<getDefaultComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets default computed style for the specified element, ignoring author stylesheets.
		@throws DOMError</haxe_doc>
		</getDefaultComputedStyle>
		<scrollByLines public="1" set="method">
			<f a="numLines:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document by the given number of lines.</haxe_doc>
		</scrollByLines>
		<scrollByPages public="1" set="method">
			<f a="numPages:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the current document by the specified number of pages.</haxe_doc>
		</scrollByPages>
		<sizeToContent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sizes the window according to its content.
		@throws DOMError</haxe_doc>
		</sizeToContent>
		<updateCommands public="1" set="method">
			<f a="action:?sel:?reason" v="::0">
				<c path="String"/>
				<c path="js.html.Selection"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reason : 0 }</e></m></meta>
			<haxe_doc>Updates the state of commands of the current chrome window (UI).</haxe_doc>
		</updateCommands>
		<find public="1" set="method">
			<f a="?str:?caseSensitive:?backwards:?wrapAround:?wholeWord:?searchInFrames:?showDialog" v="&quot;&quot;:false:false:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ showDialog : false, searchInFrames : false, wholeWord : false, wrapAround : false, backwards : false, caseSensitive : false, str : "" }</e></m></meta>
			<haxe_doc>Searches for a given string in a window.
		@throws DOMError</haxe_doc>
		</find>
		<dump public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes a message to the console.</haxe_doc>
		</dump>
		<structuredClone public="1" params="T" set="method">
			<f a="value:?options">
				<c path="structuredClone.T"/>
				<a><transfer><c path="Array"><x path="Any"/></c></transfer></a>
				<c path="structuredClone.T"/>
			</f>
			<haxe_doc>Creates a deep clone of a given value using the structured clone algorithm.</haxe_doc>
		</structuredClone>
		<setResizable public="1" set="method">
			<f a="resizable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggles a user's ability to resize a window.</haxe_doc>
		</setResizable>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `Window` interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.

	Documentation [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Window$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Window>]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.WorkerGlobalScope" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WorkerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<self public="1" set="null">
			<c path="js.html.WorkerGlobalScope"/>
			<haxe_doc>Returns a reference to the `WorkerGlobalScope` itself. Most of the time it is a specific scope like `DedicatedWorkerGlobalScope`,  `SharedWorkerGlobalScope` or `ServiceWorkerGlobalScope`.</haxe_doc>
		</self>
		<location public="1" set="null">
			<c path="js.html.WorkerLocation"/>
			<haxe_doc>Returns the `WorkerLocation` associated with the worker. It is a specific location object, mostly a subset of the `Location` for browsing scopes, but adapted to workers.</haxe_doc>
		</location>
		<navigator public="1" set="null"><c path="js.html.WorkerNavigator"/></navigator>
		<onerror public="1">
			<f a="::::">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Event"/>
					<c path="String"/>
				</x>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `error` event is raised.</haxe_doc>
		</onerror>
		<onoffline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `offline` event is raised.</haxe_doc>
		</onoffline>
		<ononline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `online` event is raised.</haxe_doc>
		</ononline>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns the `Performance` associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.</haxe_doc>
		</performance>
		<crypto public="1" set="null"><c path="js.html.Crypto"/></crypto>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null"><x path="Bool"/></isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<importScripts public="1" set="method">
			<f a="urls">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example:` importScripts('foo.js', 'bar.js');`
		@throws DOMError</haxe_doc>
		</importScripts>
		<dump public="1" set="method">
			<f a="?str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's `window.dump`, but for workers.</haxe_doc>
		</dump>
		<structuredClone public="1" params="T" set="method">
			<f a="value:?options">
				<c path="structuredClone.T"/>
				<a><transfer><c path="Array"><x path="Any"/></c></transfer></a>
				<c path="structuredClone.T"/>
			</f>
			<haxe_doc>Creates a deep clone of a given value using the structured clone algorithm.</haxe_doc>
		</structuredClone>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<t path="js.html.RequestInit"/>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<t path="js.html.RequestInit"/>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `WorkerGlobalScope` interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by `Window` objects — in this case event handlers, the console or the associated `WorkerNavigator` object. Each `WorkerGlobalScope` has its own event loop.

	Documentation [WorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.WorkerLocation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WorkerLocation.hx" extern="1">
		<href public="1" set="null"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<host public="1" set="null"><c path="String"/></host>
		<hostname public="1" set="null"><c path="String"/></hostname>
		<port public="1" set="null"><c path="String"/></port>
		<pathname public="1" set="null"><c path="String"/></pathname>
		<search public="1" set="null"><c path="String"/></search>
		<hash public="1" set="null"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `WorkerLocation` interface defines the absolute location of the script executed by the `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.location` property obtained by calling `self.location`.

	Documentation [WorkerLocation](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerLocation"</e></m></meta>
	</class>
	<class path="js.html.WorkerNavigator" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/WorkerNavigator.hx" extern="1">
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `WorkerNavigator` interface represents a subset of the `Navigator` interface allowed to be accessed from a `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.navigator` property obtained by calling `window.self.navigator`.

	Documentation [WorkerNavigator](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerNavigator"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequestEventTarget" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XMLHttpRequestEventTarget.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onload public="1"><x path="haxe.Function"/></onload>
		<ontimeout public="1"><x path="haxe.Function"/></ontimeout>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<meta><m n=":native"><e>"XMLHttpRequestEventTarget"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequest" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XMLHttpRequest.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<UNSENT public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNSENT>
		<OPENED public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPENED>
		<HEADERS_RECEIVED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HEADERS_RECEIVED>
		<LOADING public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DONE>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` that is called whenever the `readyState` attribute changes.</haxe_doc>
		</onreadystatechange>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short`, the state of the request.</haxe_doc>
		</readyState>
		<timeout public="1">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` representing the number of milliseconds a request can take before automatically being terminated.</haxe_doc>
		</timeout>
		<withCredentials public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that indicates whether or not cross-site `Access-Control` requests should be made using credentials such as cookies or authorization headers.</haxe_doc>
		</withCredentials>
		<upload public="1" set="null">
			<c path="js.html.XMLHttpRequestUpload"/>
			<haxe_doc>Is an `XMLHttpRequestUpload`, representing the upload process.</haxe_doc>
		</upload>
		<responseURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the serialized URL of the response or the empty string if the URL is null.</haxe_doc>
		</responseURL>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short` with the status of the response of the request.</haxe_doc>
		</status>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the response string returned by the HTTP server. Unlike `XMLHTTPRequest.status`, this includes the entire text of the response message ("`200 OK`", for example).</haxe_doc>
		</statusText>
		<responseType public="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<haxe_doc>Is an enumerated value that defines the response type.</haxe_doc>
		</responseType>
		<response public="1" set="null">
			<d/>
			<haxe_doc>Returns an `ArrayBuffer`, `Blob`, `Document`, JavaScript object, or a `DOMString`, depending on the value of `XMLHttpRequest.responseType`. that contains the response entity body.</haxe_doc>
		</response>
		<responseText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains the response to the request as text, or `null` if the request was unsuccessful or has not yet been sent.</haxe_doc>
		</responseText>
		<responseXML public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` containing the response to the request, or `null` if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML.</haxe_doc>
		</responseXML>
		<open public="1" set="method">
			<f a="method:url:async:?user:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="method:url">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<setRequestHeader public="1" set="method">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of an HTTP request header. You must call `setRequestHeader()`after `open()`, but before `send()`.
		@throws DOMError</haxe_doc>
		</setRequestHeader>
		<send public="1" set="method">
			<f a="?body">
				<c path="js.html.HTMLDocument"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.FormData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.URLSearchParams"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts the request if it has already been sent.
		@throws DOMError</haxe_doc>
		</abort>
		<getResponseHeader public="1" set="method">
			<f a="header">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the string containing the text of the specified header, or `null` if either the response has not yet been received or the header doesn't exist in the response.
		@throws DOMError</haxe_doc>
		</getResponseHeader>
		<getAllResponseHeaders public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns all the response headers, separated by CRLF, as a string, or `null` if no response has been received.
		@throws DOMError</haxe_doc>
		</getAllResponseHeaders>
		<overrideMimeType public="1" set="method">
			<f a="mime">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Overrides the MIME type returned by the server.
		@throws DOMError</haxe_doc>
		</overrideMimeType>
		<new public="1" set="method">
			<f a="ignored">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?params">
		<d/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[Use `XMLHttpRequest` (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.

	Documentation [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLHttpRequest"</e></m></meta>
	</class>
	<abstract path="js.html.XMLHttpRequestResponseType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XMLHttpRequestResponseType.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `XMLHttpRequestResponseType` type is an enumerated set of strings which are used to specify the type of data contained in the `response` of an `XMLHttpRequest`.

	Documentation [XMLHttpRequestResponseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.XMLHttpRequestUpload" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XMLHttpRequestUpload.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<meta><m n=":native"><e>"XMLHttpRequestUpload"</e></m></meta>
	</class>
	<class path="js.html.XPathExpression" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method">
			<f a="contextNode:?type:?result" v=":0:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>provide a context node/document, `XPathResult` constant, and `XPathResult` to store the query or null to return a new XPathResult.
		@throws DOMError</haxe_doc>
		</evaluate>
		<haxe_doc><![CDATA[An `XPathExpression` is a compiled XPath query returned from `document.createExpression()`. It has a method `evaluate()` which can be used to execute the compiled XPath.

	Documentation [XPathExpression](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<typedef path="js.html.XPathNSResolver" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XPathNSResolver.hx"><a><lookupNamespaceURI set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI></a></typedef>
	<class path="js.html.XPathResult" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANY_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NUMBER_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STRING_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BOOLEAN_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ANY_UNORDERED_NODE_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</FIRST_ORDERED_NODE_TYPE>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>integer (short)</haxe_doc>
		</resultType>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>float</haxe_doc>
		</numberValue>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>String</haxe_doc>
		</stringValue>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</booleanValue>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Node</haxe_doc>
		</singleNodeValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</invalidIteratorState>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Integer</haxe_doc>
		</snapshotLength>
		<iterateNext public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</iterateNext>
		<snapshotItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</snapshotItem>
		<haxe_doc><![CDATA[The `XPathResult` interface represents the results generated by evaluating an XPath 1.0 expression within the context of a given node.

	Documentation [XPathResult](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathResult>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeyError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeyError.hx" extern="1">
		<extends path="js.html.Event"/>
		<systemCode public="1" set="null"><x path="Int"/></systemCode>
		<meta><m n=":native"><e>"MediaKeyError"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySession" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeySession.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<error public="1" set="null"><c path="js.html.eme.MediaKeyError"/></error>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.</haxe_doc>
		</sessionId>
		<expiration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time after which the keys in the current session can no longer be used to decrypt media data, or `NaN` if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.</haxe_doc>
		</expiration>
		<closed public="1" set="null">
			<c path="js.lib.Promise"><x path="Void"/></c>
			<haxe_doc>Returns a `Promise` signaling when a `MediaKeySession` closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data. </haxe_doc>
		</closed>
		<keyStatuses public="1" set="null">
			<c path="js.html.eme.MediaKeyStatusMap"/>
			<haxe_doc>Contains a reference to a read-only `MediaKeyStatusMap` of the current session's keys and their statuses.</haxe_doc>
		</keyStatuses>
		<onkeystatuseschange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when there has been a change in the keys in a session or their statuses.</haxe_doc>
		</onkeystatuseschange>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the content decryption module has generated a message for the session.</haxe_doc>
		</onmessage>
		<generateRequest public="1" set="method">
			<f a="initDataType:initData">
				<c path="String"/>
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
			<overloads><generateRequest public="1" set="method">
	<f a="initDataType:initData">
		<c path="String"/>
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
</generateRequest></overloads>
		</generateRequest>
		<load public="1" set="method">
			<f a="sessionId">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to a boolean value after loading data for a specified session object. </haxe_doc>
		</load>
		<update public="1" set="method">
			<f a="response">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
			<overloads><update public="1" set="method">
	<f a="response">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
</update></overloads>
		</update>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.</haxe_doc>
		</close>
		<remove public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after removing any session data associated with the current object.</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[The `MediaKeySession` interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).

	Documentation [MediaKeySession](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySession"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeySessionType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeySessionType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeySessionType.MediaKeySessionType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeySessionType.hx" private="1" module="js.html.eme.MediaKeySessionType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.eme.MediaKeyStatusMap" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeyStatusMap.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of key/value pars in the status map.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
			<overloads><has public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
</has></overloads>
		</has>
		<get public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<d/>
			</f>
			<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<d/>
	</f>
	<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
</get></overloads>
		</get>
		<entries public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing keys for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing values for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair in the status map, in insertion order. If `argument` is present it will be passed to the callback.
		@throws DOMError</haxe_doc>
		</forEach>
		<haxe_doc><![CDATA[The `MediaKeyStatusMap` interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.

	Documentation [MediaKeyStatusMap](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeyStatusMap"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySystemAccess" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeySystemAccess.hx" extern="1">
		<keySystem public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` identifying the key system being used.</haxe_doc>
		</keySystem>
		<getConfiguration public="1" set="method">
			<f a=""><t path="js.html.eme.MediaKeySystemConfiguration"/></f>
			<haxe_doc>Returns a `MediaKeySystemConfiguration` object with the supported combination of configuration options.</haxe_doc>
		</getConfiguration>
		<createMediaKeys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.eme.MediaKeys"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to a new `MediaKeys` object.</haxe_doc>
		</createMediaKeys>
		<haxe_doc><![CDATA[The `MediaKeySystemAccess` interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the `Navigator.requestMediaKeySystemAccess` method.

	Documentation [MediaKeySystemAccess](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySystemAccess"</e></m></meta>
	</class>
	<typedef path="js.html.eme.MediaKeySystemConfiguration" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeySystemConfiguration.hx">
		<a>
			<videoCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported video type and capability pairs.</haxe_doc>
			</videoCapabilities>
			<sessionTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</sessionTypes>
			<persistentState>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether the ability to persist state is required.</haxe_doc>
			</persistentState>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</label>
			<initDataTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.</haxe_doc>
			</initDataTypes>
			<distinctiveIdentifier>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether a persistent distinctive identifier is required.</haxe_doc>
			</distinctiveIdentifier>
			<audioCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported audio type and capability pairs.</haxe_doc>
			</audioCapabilities>
		</a>
		<haxe_doc><![CDATA[The `MediaKeySystemConfiguration` interface Encrypted Media Extensions API provides configuration information about the media key system.

	Documentation [MediaKeySystemConfiguration](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.eme.MediaKeySystemMediaCapability" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeySystemMediaCapability.hx"><a>
	<robustness>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</robustness>
	<contentType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contentType>
</a></typedef>
	<class path="js.html.eme.MediaKeys" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeys.hx" extern="1">
		<keySystem public="1" set="null"><c path="String"/></keySystem>
		<createSession public="1" set="method">
			<f a="?sessionType" v="TEMPORARY">
				<x path="js.html.eme.MediaKeySessionType"/>
				<c path="js.html.eme.MediaKeySession"/>
			</f>
			<meta><m n=":value"><e>{ sessionType : TEMPORARY }</e></m></meta>
			<haxe_doc>Returns a new `MediaKeySession` object, which represents a context for message exchange with a content decryption module (CDM).
		@throws DOMError</haxe_doc>
		</createSession>
		<setServerCertificate public="1" set="method">
			<f a="serverCertificate">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
			<overloads><setServerCertificate public="1" set="method">
	<f a="serverCertificate">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
</setServerCertificate></overloads>
		</setServerCertificate>
		<haxe_doc><![CDATA[The `MediaKeys` interface of EncryptedMediaExtensions API the represents a set of keys that an associated `HTMLMediaElement` can use for decryption of media data during playback.

	Documentation [MediaKeys](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeys"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeysRequirement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeysRequirement.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeysRequirement.MediaKeysRequirement_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/eme/MediaKeysRequirement.hx" private="1" module="js.html.eme.MediaKeysRequirement" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Cursor" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/Cursor.hx" extern="1">
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<c path="js.html.idb.Index"/>
			</x>
			<haxe_doc>Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.</haxe_doc>
		</source>
		<direction public="1" set="null">
			<x path="js.html.idb.CursorDirection"/>
			<haxe_doc>Returns the direction of traversal of the cursor. See Constants for possible values.</haxe_doc>
		</direction>
		<key public="1" set="null">
			<d/>
			<haxe_doc>Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.</haxe_doc>
		</key>
		<primaryKey public="1" set="null">
			<d/>
			<haxe_doc>Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.</haxe_doc>
		</primaryKey>
		<update public="1" set="method">
			<f a="value">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records.
		@throws DOMError</haxe_doc>
		</update>
		<advance public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the number times a cursor should move its position forward.
		@throws DOMError</haxe_doc>
		</advance>
		<continue_ public="1" set="method">
			<f a="?key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>Advances the cursor to the next position along its direction, to the item whose key matches the optional `key` parameter.
		@throws DOMError</haxe_doc>
		</continue_>
		<continuePrimaryKey public="1" set="method">
			<f a="key:primaryKey">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the cursor to the given index key and primary key given as arguments.
		@throws DOMError</haxe_doc>
		</continuePrimaryKey>
		<delete public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.
		@throws DOMError</haxe_doc>
		</delete>
		<haxe_doc><![CDATA[The `IDBCursor` interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.

	Documentation [IDBCursor](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursor"</e></m></meta>
	</class>
	<abstract path="js.html.idb.CursorDirection" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/CursorDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Database" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` that contains the name of the connected database.</haxe_doc>
		</name>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.</haxe_doc>
		</version>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.</haxe_doc>
		</objectStoreNames>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access of the database is aborted.</haxe_doc>
		</onabort>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when the `close` event occurs; this happens when the database is unexpectedly closed, such as during application shutdown.</haxe_doc>
		</onclose>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access to the database fails.</haxe_doc>
		</onerror>
		<onversionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when a database structure change (`IDBOpenDBRequest.onupgradeneeded` event or` ``IDBFactory.deleteDatabase()` was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see `IDBVersionChangeEvent`), but it is related.</haxe_doc>
		</onversionchange>
		<createObjectStore public="1" set="method">
			<f a="name:?optionalParameters">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.ObjectStoreParameters"/></x>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>Creates and returns a new object store or index.
		@throws DOMError</haxe_doc>
		</createObjectStore>
		<deleteObjectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the object store with the given name in the connected database, along with any indexes that reference it.
		@throws DOMError</haxe_doc>
		</deleteObjectStore>
		<transaction public="1" set="method">
			<f a="storeNames:?mode" v=":READONLY">
				<c path="String"/>
				<x path="js.html.idb.TransactionMode"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
			<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
			<overloads><transaction public="1" set="method">
	<f a="storeNames:?mode" v=":READONLY">
		<c path="Array"><c path="String"/></c>
		<x path="js.html.idb.TransactionMode"/>
		<c path="js.html.idb.Transaction"/>
	</f>
	<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
	<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
</transaction></overloads>
		</transaction>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Returns immediately and closes the connection to a database in a separate thread.</haxe_doc>
		</close>
		<createMutableFile public="1" set="method">
			<f a="name:?type">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMutableFile>
		<haxe_doc><![CDATA[The `IDBDatabase` interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.

	Documentation [IDBDatabase](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/Factory.hx" extern="1">
		<open public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="name:version">
		<c path="String"/>
		<x path="Int"/>
		<c path="js.html.idb.OpenDBRequest"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<deleteDatabase public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteDatabase>
		<cmp public="1" set="method">
			<f a="first:second">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cmp>
		<haxe_doc><![CDATA[In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBFactory](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/Index.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this index.</haxe_doc>
		</name>
		<objectStore public="1" set="null">
			<c path="js.html.idb.ObjectStore"/>
			<haxe_doc>The name of the object store referenced by this index.</haxe_doc>
		</objectStore>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this index. If null, this index is not auto-populated.</haxe_doc>
		</keyPath>
		<multiEntry public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.</haxe_doc>
		</multiEntry>
		<unique public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>If `true`, this index does not allow duplicate values for a key.</haxe_doc>
		</unique>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range.
		@throws DOMError</haxe_doc>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the given key or the primary key, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getKey>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and in a separate thread, returns the number of records within a key range.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<haxe_doc><![CDATA[`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.

	Documentation [IDBIndex](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<typedef path="js.html.idb.IndexParameters" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/IndexParameters.hx"><a>
	<unique>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unique>
	<multiEntry>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</multiEntry>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.idb.ObjectStore" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/ObjectStore.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.</haxe_doc>
		</keyPath>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A list of the names of indexes on objects in this object store.</haxe_doc>
		</indexNames>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The `IDBTransaction` object to which this object store belongs.</haxe_doc>
		</transaction>
		<autoIncrement public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The value of the auto increment flag for this object store.</haxe_doc>
		</autoIncrement>
		<put public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is `readwrite`.
		@throws DOMError</haxe_doc>
		</put>
		<add public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for adding new records to an object store.
		@throws DOMError</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>returns an `IDBRequest` object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.
		@throws DOMError</haxe_doc>
		</getKey>
		<clear public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Creates and immediately returns an `IDBRequest` object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.
		@throws DOMError</haxe_doc>
		</clear>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursorWithValue` object. Used for iterating through an object store by primary key with a cursor.
		@throws DOMError</haxe_doc>
		</openCursor>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?optionalParameters">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?optionalParameters">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
</createIndex></overloads>
		</createIndex>
		<index public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.
		@throws DOMError</haxe_doc>
		</index>
		<deleteIndex public="1" set="method">
			<f a="indexName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the specified index in the connected database, used during a version upgrade.
		@throws DOMError</haxe_doc>
		</deleteIndex>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the total number of records that match the provided key or `IDBKeyRange`. If no arguments are provided, it returns the total number of records in the store.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursor`. Used for iterating through an object store with a key.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<haxe_doc><![CDATA[This example shows a variety of different uses of object stores, from updating the data structure with `IDBObjectStore.createIndex` inside an `onupgradeneeded` function, to adding a new item to our object store with `IDBObjectStore.add`. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBObjectStore](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<typedef path="js.html.idb.ObjectStoreParameters" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/ObjectStoreParameters.hx"><a>
	<keyPath>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</keyPath>
	<autoIncrement>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoIncrement>
</a></typedef>
	<typedef path="js.html.idb.OpenDBOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/OpenDBOptions.hx"><a>
	<version>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</version>
	<storage>
		<x path="Null"><x path="js.html.StorageType"/></x>
		<meta><m n=":optional"/></meta>
	</storage>
</a></typedef>
	<class path="js.html.idb.Request" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<result public="1" set="null">
			<d/>
			<haxe_doc>Returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` in the event of an unsuccessful request, indicating what went wrong.</haxe_doc>
		</error>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.idb.Index"/>
					<c path="js.html.idb.Cursor"/>
				</x>
			</x>
			<haxe_doc>The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.</haxe_doc>
		</source>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).</haxe_doc>
		</transaction>
		<readyState public="1" set="null">
			<x path="js.html.idb.RequestReadyState"/>
			<haxe_doc>The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.</haxe_doc>
		</readyState>
		<onsuccess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the success event.</haxe_doc>
		</onsuccess>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the error event.</haxe_doc>
		</onerror>
		<haxe_doc><![CDATA[The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.

	Documentation [IDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the blocked event. This event is triggered when the `upgradeneeded` event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the `versionchange` event was sent.</haxe_doc>
		</onblocked>
		<onupgradeneeded public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `upgradeneeded` event, fired when a database of a bigger version number than the existing stored database is loaded.</haxe_doc>
		</onupgradeneeded>
		<haxe_doc><![CDATA[Also inherits methods from its parents `IDBRequest` and `EventTarget`.

	Documentation [IDBOpenDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<abstract path="js.html.idb.RequestReadyState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/RequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Transaction" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1" set="null">
			<x path="js.html.idb.TransactionMode"/>
			<haxe_doc>The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see the Constants section below. The default value is `readonly`.</haxe_doc>
		</mode>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection with which this transaction is associated.</haxe_doc>
		</db>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` indicating the type of error that occured when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with `IDBTransaction.abort` function.</haxe_doc>
		</error>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `abort` event, fired when the transaction is aborted. This can happen due to:
		 
		  bad requests, e.g. trying to add() the same key twice, or put() with the same index key with a uniqueness constraint and there is no error handler on the request to call preventDefault() on the event,
		  an explicit abort() call from script
		  uncaught exception in request's success/error handler,
		  an I/O error (actual failure to write to disk, e.g. disk detached, or other OS/hardware failure), or
		  quota exceeded.</haxe_doc>
		</onabort>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `complete` event, thrown when the transaction completes successfully.</haxe_doc>
		</oncomplete>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `error` event, thrown when the transaction fails to complete.</haxe_doc>
		</onerror>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a `DOMStringList` of the names of `IDBObjectStore` objects.</haxe_doc>
		</objectStoreNames>
		<objectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</objectStore>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<haxe_doc><![CDATA[Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a `readwrite` transaction `IDBTransaction.oncomplete` was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the `complete` event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The `complete` event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.

	Documentation [IDBTransaction](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<abstract path="js.html.idb.TransactionMode" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/TransactionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.midi.MIDIAccess" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/midi/MIDIAccess.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<inputs public="1" set="null">
			<c path="js.html.midi.MIDIInputMap"/>
			<haxe_doc>Returns an instance of `MIDIInputMap` which provides access to any available MIDI input ports.</haxe_doc>
		</inputs>
		<outputs public="1" set="null">
			<c path="js.html.midi.MIDIOutputMap"/>
			<haxe_doc>Returns an instance of `MIDIOutputMap` which provides access to any available MIDI output ports.</haxe_doc>
		</outputs>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Called whenever a new MIDI port is added or an existing port changes state.</haxe_doc>
		</onstatechange>
		<sysexEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.</haxe_doc>
		</sysexEnabled>
		<haxe_doc><![CDATA[The `MIDIAccess` interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.

	Documentation [MIDIAccess](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIAccess"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIInputMap" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/midi/MIDIInputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIInputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIInputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIInputMap"</e></m></meta>
	</class>
	<typedef path="js.html.midi.MIDIOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/midi/MIDIOptions.hx"><a>
	<sysex>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</sysex>
	<software>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</software>
</a></typedef>
	<class path="js.html.midi.MIDIOutputMap" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/midi/MIDIOutputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIOutputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIOutputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIOutputMap"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushEncryptionKeyName" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushEncryptionKeyName.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushEncryptionKeyName.PushEncryptionKeyName_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushEncryptionKeyName.hx" private="1" module="js.html.push.PushEncryptionKeyName" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushManager" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushManager.hx" extern="1">
		<subscribe public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c>
			</f>
			<haxe_doc>Subscribes to a push service. It returns a `Promise` that resolves to a `PushSubscription` object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.
		@throws DOMError</haxe_doc>
		</subscribe>
		<getSubscription public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c></f>
			<haxe_doc>Retrieves an existing push subscription. It returns a `Promise` that resolves to a `PushSubscription` object containing details of an existing subscription. If no existing subscription exists, this resolves to a `null` value.
		@throws DOMError</haxe_doc>
		</getSubscription>
		<permissionState public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><x path="js.html.push.PushPermissionState"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the permission state of the current `PushManager`, which will be one of `'granted'`, `'denied'`, or `'prompt'`.
		@throws DOMError</haxe_doc>
		</permissionState>
		<new public="1" set="method">
			<f a="scope">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushManager` interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.

	Documentation [PushManager](https://developer.mozilla.org/en-US/docs/Web/API/PushManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushManager>]]></haxe_doc>
		<meta><m n=":native"><e>"PushManager"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushPermissionState" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushPermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushPermissionState.PushPermissionState_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushPermissionState.hx" private="1" module="js.html.push.PushPermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushSubscription" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushSubscription.hx" extern="1">
		<endpoint public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` containing the endpoint associated with the push subscription.</haxe_doc>
		</endpoint>
		<options public="1" set="null">
			<c path="js.html.push.PushSubscriptionOptions"/>
			<haxe_doc>An object containing the options used to create the subscription.</haxe_doc>
		</options>
		<getKey public="1" set="method">
			<f a="name">
				<x path="js.html.push.PushEncryptionKeyName"/>
				<c path="js.lib.ArrayBuffer"/>
			</f>
			<haxe_doc>Returns an `ArrayBuffer` which contains the client's public key, which can then be sent to a server and used in encrypting push message data.
		@throws DOMError</haxe_doc>
		</getKey>
		<unsubscribe public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Starts the asynchronous process of unsubscribing from the push service, returning a `Promise` that resolves to a `Boolean` when the current subscription is successfully unregistered.
		@throws DOMError</haxe_doc>
		</unsubscribe>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.push.PushSubscriptionJSON"/></f>
			<haxe_doc>Standard serializer — returns a JSON representation of the subscription properties.
		@throws DOMError</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="initDict">
				<t path="js.html.push.PushSubscriptionInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushSubscription` interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.

	Documentation [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription>]]></haxe_doc>
		<meta><m n=":native"><e>"PushSubscription"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushSubscriptionInit.hx"><a>
	<scope><c path="String"/></scope>
	<p256dhKey>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</p256dhKey>
	<endpoint><c path="String"/></endpoint>
	<authSecret>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</authSecret>
	<appServerKey>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBufferView"/>
	<c path="js.lib.ArrayBuffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</appServerKey>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionJSON" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushSubscriptionJSON.hx"><a>
	<keys>
		<x path="Null"><t path="js.html.push.PushSubscriptionKeys"/></x>
		<meta><m n=":optional"/></meta>
	</keys>
	<endpoint>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</endpoint>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionKeys" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushSubscriptionKeys.hx"><a>
	<p256dh>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</p256dh>
	<auth>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</auth>
</a></typedef>
	<class path="js.html.push.PushSubscriptionOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushSubscriptionOptions.hx" extern="1">
		<applicationServerKey public="1" set="null"><c path="js.lib.ArrayBuffer"/></applicationServerKey>
		<meta><m n=":native"><e>"PushSubscriptionOptions"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionOptionsInit" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/push/PushSubscriptionOptionsInit.hx"><a><applicationServerKey>
	<x path="Null"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<c path="String"/>
</x></x>
	<meta><m n=":optional"/></meta>
</applicationServerKey></a></typedef>
	<class path="js.html.svg.Angle" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Some unknown type of value.</haxe_doc>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>A unitless `number` interpreted as a value in degrees.</haxe_doc>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
			<haxe_doc>An `angle` with a `deg` unit.</haxe_doc>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" expr="3" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
			<haxe_doc>An `angle` with a `rad` unit.</haxe_doc>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" expr="4" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
			<haxe_doc>An `angle` with a `grad` unit.</haxe_doc>
		</SVG_ANGLETYPE_GRAD>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the `SVG_ANGLETYPE_*` constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in user units. Setting this attribute will cause `valueInSpecifiedUnits` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</value>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in the units expressed by `unitType`. Setting this attribute will cause `value` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueInSpecifiedUnits>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc>The value as a `DOMString` value, in the units expressed by `unitType`. Setting this attribute will cause `value`, `valueInSpecifiedUnits` and `unitType` to be updated automatically to reflect this setting.
		
		 Exceptions on setting:
		 a `DOMException` with code `SYNTAX_ERR` is raised if the assigned string cannot be parsed as a valid `angle`. a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGAngle` interface is used to represent a value that can be an `angle` or `number` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.

	Documentation [SVGAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/AnimatedLength.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Length"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Length"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLength` interface is used for attributes of basic type length which can be animated.

	Documentation [SVGAnimatedLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.

	Documentation [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/AnimatedRect.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Rect"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Rect"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.

	Documentation [SVGAnimatedRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedString" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/AnimatedString.hx" extern="1">
		<baseVal public="1">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.</haxe_doc>
		</baseVal>
		<animVal public="1" set="null">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.</haxe_doc>
		</animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedString` interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.

	Documentation [SVGAnimatedString](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedString"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedTransformList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/AnimatedTransformList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.TransformList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.TransformList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedTransformList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.BoundingBoxOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/BoundingBoxOptions.hx"><a>
	<stroke>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stroke>
	<markers>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</markers>
	<fill>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<clipped>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</clipped>
</a></typedef>
	<class path="js.html.svg.Element" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<ownerSVGElement public="1" set="null">
			<c path="js.html.svg.SVGElement"/>
			<haxe_doc>An `SVGSVGElement` referring to the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</ownerSVGElement>
		<viewportElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc>The `SVGElement`, which established the current viewport. Often, the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</viewportElement>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.

	Documentation [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GraphicsElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/GraphicsElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<transform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>An `SVGAnimatedTransformList` reflecting the computed value of the `transform` property and its corresponding `transform` attribute of the given element.</haxe_doc>
		</transform>
		<nearestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></nearestViewportElement>
		<farthestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></farthestViewportElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getBBox public="1" set="method">
			<f a="?aOptions">
				<x path="Null"><t path="js.html.svg.BoundingBoxOptions"/></x>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>Returns a `DOMRect` representing the computed bounding box of the current element.
		@throws DOMError</haxe_doc>
		</getBBox>
		<getCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.</haxe_doc>
		</getCTM>
		<getScreenCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.</haxe_doc>
		</getScreenCTM>
		<getTransformToElement public="1" set="method">
			<f a="element">
				<c path="js.html.svg.GraphicsElement"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getTransformToElement>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGGraphicsElement` interface represents SVG elements whose primary purpose is to directly render graphics into a group.

	Documentation [SVGGraphicsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGraphicsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ImageElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/ImageElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `image` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `image` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `image` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `image` element.</haxe_doc>
		</height>
		<preserveAspectRatio public="1" set="null">
			<c path="js.html.svg.AnimatedPreserveAspectRatio"/>
			<haxe_doc>An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given `image` element.</haxe_doc>
		</preserveAspectRatio>
		<decoding public="1"><c path="String"/></decoding>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGImageElement` interface corresponds to the `image` element.

	Documentation [SVGImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_LENGTHTYPE_UNKNOWN>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_LENGTHTYPE_PC>
		<unitType public="1" set="null"><x path="Int"/></unitType>
		<value public="1"><x path="Float"/></value>
		<valueInSpecifiedUnits public="1"><x path="Float"/></valueInSpecifiedUnits>
		<valueAsString public="1"><c path="String"/></valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGLength` interface correspond to the length basic data type.

	Documentation [SVGLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the a component of the matrix.</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the b component of the matrix.</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the c component of the matrix.</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the d component of the matrix.</haxe_doc>
		</d>
		<e public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the e component of the matrix.</haxe_doc>
		</e>
		<f public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the f component of the matrix.</haxe_doc>
		</f>
		<multiply public="1" set="method">
			<f a="secondMatrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as `SVGMatrix`.</haxe_doc>
		</multiply>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns the inverse matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</inverse>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scaleFactor">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scale>
		<scaleNonUniform public="1" set="method">
			<f a="scaleFactorX:scaleFactorY">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used.
		@throws DOMError</haxe_doc>
		</rotateFromVector>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipY>
		<skewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewY>
		<haxe_doc><![CDATA[Many of SVG's graphics operations utilize 2x3 matrices of the form:

	Documentation [SVGMatrix](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Number.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the number.
		 Note: If the `SVGNumber` is read-only, a `DOMException` with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `SVGNumber` interface corresponds to the `number` basic data type.

	Documentation [SVGNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<haxe_doc><![CDATA[An `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.

	Documentation [SVGPoint](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" expr="0" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MEETORSLICE_SLICE>
		<align public="1"><x path="Int"/></align>
		<meetOrSlice public="1"><x path="Int"/></meetOrSlice>
		<haxe_doc><![CDATA[The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.

	Documentation [SVGPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Rect.hx" extern="1">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element.If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>This represents the width of the rectangle.A value that is negative results to an error. A value of zero disables rendering of the element</haxe_doc>
		</width>
		<height public="1"><x path="Float"/></height>
		<haxe_doc><![CDATA[The `SVGRect` represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.

	Documentation [SVGRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `svg` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `svg` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `svg` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `svg` element.</haxe_doc>
		</height>
		<useCurrentView public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view, i.e., based on attributes on the `svg` element such as `viewBox`) or on a "custom" view (i.e., a hyperlink into a particular `view` or other element). If the initial view is the "standard" view, then this attribute is `false`. If the initial view is a "custom" view, then this attribute is `true`.</haxe_doc>
		</useCurrentView>
		<currentScale public="1">
			<x path="Float"/>
			<haxe_doc>On an outermost `svg` element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes `currentScale` and `currentTranslate` are equivalent to the 2x3 matrix `[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]`. If "magnification" is enabled (i.e., `zoomAndPan="magnify"`), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost `svg` element).</haxe_doc>
		</currentScale>
		<currentTranslate public="1" set="null">
			<c path="js.html.svg.Point"/>
			<haxe_doc>An `SVGPoint` representing the translation factor that takes into account user "magnification" corresponding to an outermost `svg` element. The behavior is undefined for svg elements that are not at the outermost level.</haxe_doc>
		</currentTranslate>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<suspendRedraw public="1" set="method">
			<f a="maxWaitMilliseconds">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Takes a time-out value which indicates that redraw shall not occur until:
		 the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out.
		
		 In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to `suspendRedraw()` and `unsuspendRedraw()` should, but need not be, made in balanced pairs.
		
		 To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:
		
		 suspendHandleID = suspendRedraw(maxWaitMilliseconds);
		
		 and follow the changes with a method call similar to:
		
		 unsuspendRedraw(suspendHandleID);
		
		 Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls.</haxe_doc>
		</suspendRedraw>
		<unsuspendRedraw public="1" set="method">
			<f a="suspendHandleID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a specified `suspendRedraw()` by providing a unique suspend handle ID that was returned by a previous `suspendRedraw()` call.</haxe_doc>
		</unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels all currently active `suspendRedraw()` method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending `suspendRedraw()` method calls have been cancelled.</haxe_doc>
		</unsuspendRedrawAll>
		<forceRedraw public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</haxe_doc>
		</forceRedraw>
		<pauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this `svg` element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.</haxe_doc>
		</pauseAnimations>
		<unpauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.</haxe_doc>
		</unpauseAnimations>
		<animationsPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this SVG document fragment is in a paused state.</haxe_doc>
		</animationsPaused>
		<getCurrentTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then 0 is returned.</haxe_doc>
		</getCurrentTime>
		<setCurrentTime public="1" set="method">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adjusts the clock for this SVG document fragment, establishing a new current time. If `setCurrentTime` is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.</haxe_doc>
		</setCurrentTime>
		<deselectAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unselects any selected objects, including any selections of text strings and type-in bars.</haxe_doc>
		</deselectAll>
		<createSVGNumber public="1" set="method">
			<f a=""><c path="js.html.svg.Number"/></f>
			<haxe_doc>Creates an `SVGNumber` object outside of any document trees. The object is initialized to a value of zero.</haxe_doc>
		</createSVGNumber>
		<createSVGLength public="1" set="method">
			<f a=""><c path="js.html.svg.Length"/></f>
			<haxe_doc>Creates an `SVGLength` object outside of any document trees. The object is initialized to a value of zero user units.</haxe_doc>
		</createSVGLength>
		<createSVGAngle public="1" set="method">
			<f a=""><c path="js.html.svg.Angle"/></f>
			<haxe_doc>Creates an `SVGAngle` object outside of any document trees. The object is initialized to a value of zero degrees (unitless).</haxe_doc>
		</createSVGAngle>
		<createSVGPoint public="1" set="method">
			<f a=""><c path="js.html.svg.Point"/></f>
			<haxe_doc>Creates an `SVGPoint` object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system.</haxe_doc>
		</createSVGPoint>
		<createSVGMatrix public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Creates an `SVGMatrix` object outside of any document trees. The object is initialized to the identity matrix.</haxe_doc>
		</createSVGMatrix>
		<createSVGRect public="1" set="method">
			<f a=""><c path="js.html.svg.Rect"/></f>
			<haxe_doc>Creates an `SVGRect` object outside of any document trees. The object is initialized such that all values are set to 0 user units.</haxe_doc>
		</createSVGRect>
		<createSVGTransform public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to an identity matrix transform (`SVG_TRANSFORM_MATRIX`).</haxe_doc>
		</createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to the given matrix transform (i.e., `SVG_TRANSFORM_MATRIX`). The values from the parameter matrix are copied, the matrix parameter is not adopted as `SVGTransform::matrix`.</haxe_doc>
		</createSVGTransformFromMatrix>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id.</haxe_doc>
		</getElementById>
		<haxe_doc><![CDATA[The `SVGSVGElement` interface provides access to the properties of `svg` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.

	Documentation [SVGSVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StringList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/StringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGStringList` defines a list of `DOMString` objects.

	Documentation [SVGStringList](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStringList"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TRANSFORM_UNKNOWN>
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_TRANSFORM_SKEWY>
		<type public="1" set="null"><x path="Int"/></type>
		<matrix public="1" set="null"><c path="js.html.svg.Matrix"/></matrix>
		<angle public="1" set="null"><x path="Float"/></angle>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrix>
		<setTranslate public="1" set="method">
			<f a="tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTranslate>
		<setScale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setScale>
		<setRotate public="1" set="method">
			<f a="angle:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRotate>
		<setSkewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewX>
		<setSkewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewY>
		<haxe_doc><![CDATA[`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a `transform` attribute.

	Documentation [SVGTransform](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<consolidate public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</consolidate>
		<haxe_doc><![CDATA[The `SVGTransformList` defines a list of `SVGTransform` objects.

	Documentation [SVGTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only size of the requested variable.</haxe_doc>
		</size>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only type of the requested variable.</haxe_doc>
		</type>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The read-only name of the requested variable.</haxe_doc>
		</name>
		<haxe_doc><![CDATA[The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.

	Documentation [WebGLActiveInfo](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Buffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.

	Documentation [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<powerPreference>
		<x path="Null"><x path="js.html.webgl.PowerPreference"/></x>
		<meta><m n=":optional"/></meta>
	</powerPreference>
	<failIfMajorPerformanceCaveat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</failIfMajorPerformanceCaveat>
	<depth>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<abstract path="js.html.webgl.Extension" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Extension.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._Extension.Extension_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Extension.hx" private="1" module="js.html.webgl.Extension" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Framebuffer" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Framebuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.

	Documentation [WebGLFramebuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta>
	</class>
	<abstract path="js.html.webgl.PowerPreference" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/PowerPreference.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._PowerPreference.PowerPreference_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/PowerPreference.hx" private="1" module="js.html.webgl.PowerPreference" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Program" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Program.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLProgram is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.

	Documentation [WebGLProgram](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLProgram"</e></m></meta>
	</class>
	<class path="js.html.webgl.Query" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Query.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLQuery` interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.

	Documentation [WebGLQuery](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLQuery"</e></m></meta>
	</class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Renderbuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.

	Documentation [WebGLRenderbuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta>
	</class>
	<class path="js.html.webgl.RenderingContext" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/RenderingContext.hx" extern="1">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<canvas public="1" set="null">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `canvas` element.</haxe_doc>
		</canvas>
		<drawingBufferWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.</haxe_doc>
		</drawingBufferWidth>
		<drawingBufferHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.</haxe_doc>
		</drawingBufferHeight>
		<bufferData public="1" set="method">
			<f a="target:data:usage">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
			<overloads><bufferSubData public="1" set="method">
	<f a="target:offset:data">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
</bufferSubData></overloads>
		</bufferSubData>
		<compressedTexImage2D public="1" set="method">
			<f a="target:level:internalformat:width:height:border:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image in a compressed format.</haxe_doc>
		</compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:width:height:format:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture sub-image in a compressed format.</haxe_doc>
		</compressedTexSubImage2D>
		<readPixels public="1" set="method">
			<f a="x:y:width:height:format:type:pixels">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Reads a block of pixels from the `WebGLFrameBuffer`.
		@throws DOMError</haxe_doc>
		</readPixels>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform4iv></overloads>
		</uniform4iv>
		<uniformMatrix2fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix2fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix3fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix4fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<getContextAttributes public="1" set="method">
			<f a=""><t path="js.html.webgl.ContextAttributes"/></f>
			<haxe_doc>Returns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.</haxe_doc>
		</getContextAttributes>
		<isContextLost public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the context is lost, otherwise returns `false`.</haxe_doc>
		</isContextLost>
		<getSupportedExtensions public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an `Array` of `DOMString` elements with all the supported WebGL extensions.</haxe_doc>
		</getSupportedExtensions>
		<getExtension public="1" params="T" set="method">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>Returns an extension object.
		@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method">
			<f a="texture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects the active texture unit.</haxe_doc>
		</activeTexture>
		<attachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLShader` to a `WebGLProgram`.</haxe_doc>
		</attachShader>
		<bindAttribLocation public="1" set="method">
			<f a="program:index:name">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a generic vertex index to a named attribute variable.</haxe_doc>
		</bindAttribLocation>
		<bindBuffer public="1" set="method">
			<f a="target:buffer">
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLBuffer` object to a given target.</haxe_doc>
		</bindBuffer>
		<bindFramebuffer public="1" set="method">
			<f a="target:framebuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLFrameBuffer` object to a given target.</haxe_doc>
		</bindFramebuffer>
		<bindRenderbuffer public="1" set="method">
			<f a="target:renderbuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLRenderBuffer` object to a given target.</haxe_doc>
		</bindRenderbuffer>
		<bindTexture public="1" set="method">
			<f a="target:texture">
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLTexture` object to a given target.</haxe_doc>
		</bindTexture>
		<blendColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source and destination blending factors.</haxe_doc>
		</blendColor>
		<blendEquation public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the RGB blend equation and alpha blend equation to a single equation.</haxe_doc>
		</blendEquation>
		<blendEquationSeparate public="1" set="method">
			<f a="modeRGB:modeAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the RGB blend equation and alpha blend equation separately.</haxe_doc>
		</blendEquationSeparate>
		<blendFunc public="1" set="method">
			<f a="sfactor:dfactor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic.</haxe_doc>
		</blendFunc>
		<blendFuncSeparate public="1" set="method">
			<f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.</haxe_doc>
		</blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the status of the framebuffer.</haxe_doc>
		</checkFramebufferStatus>
		<clear public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears specified buffers to preset values.</haxe_doc>
		</clear>
		<clearColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the color values used when clearing color buffers.</haxe_doc>
		</clearColor>
		<clearDepth public="1" set="method">
			<f a="depth">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth value used when clearing the depth buffer.</haxe_doc>
		</clearDepth>
		<clearStencil public="1" set="method">
			<f a="s">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the stencil value used when clearing the stencil buffer.</haxe_doc>
		</clearStencil>
		<colorMask public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.</haxe_doc>
		</colorMask>
		<compileShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Compiles a `WebGLShader`.</haxe_doc>
		</compileShader>
		<copyTexImage2D public="1" set="method">
			<f a="target:level:internalformat:x:y:width:height:border">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture image.</haxe_doc>
		</copyTexImage2D>
		<copyTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture sub-image.</haxe_doc>
		</copyTexSubImage2D>
		<createBuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Buffer"/></f>
			<haxe_doc>Creates a `WebGLBuffer` object.</haxe_doc>
		</createBuffer>
		<createFramebuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Framebuffer"/></f>
			<haxe_doc>Creates a `WebGLFrameBuffer` object.</haxe_doc>
		</createFramebuffer>
		<createProgram public="1" set="method">
			<f a=""><c path="js.html.webgl.Program"/></f>
			<haxe_doc>Creates a `WebGLProgram`.</haxe_doc>
		</createProgram>
		<createRenderbuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Renderbuffer"/></f>
			<haxe_doc>Creates a `WebGLRenderBuffer` object.</haxe_doc>
		</createRenderbuffer>
		<createShader public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="js.html.webgl.Shader"/>
			</f>
			<haxe_doc>Creates a `WebGLShader`.</haxe_doc>
		</createShader>
		<createTexture public="1" set="method">
			<f a=""><c path="js.html.webgl.Texture"/></f>
			<haxe_doc>Creates a `WebGLTexture` object.</haxe_doc>
		</createTexture>
		<cullFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether or not front- and/or back-facing polygons can be culled.</haxe_doc>
		</cullFace>
		<deleteBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLBuffer` object.</haxe_doc>
		</deleteBuffer>
		<deleteFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLFrameBuffer` object.</haxe_doc>
		</deleteFramebuffer>
		<deleteProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLProgram`.</haxe_doc>
		</deleteProgram>
		<deleteRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLRenderBuffer` object.</haxe_doc>
		</deleteRenderbuffer>
		<deleteShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLShader`.</haxe_doc>
		</deleteShader>
		<deleteTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLTexture` object.</haxe_doc>
		</deleteTexture>
		<depthFunc public="1" set="method">
			<f a="func">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a function that compares incoming pixel depth to the current depth buffer value.</haxe_doc>
		</depthFunc>
		<depthMask public="1" set="method">
			<f a="flag">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets whether writing into the depth buffer is enabled or disabled.</haxe_doc>
		</depthMask>
		<depthRange public="1" set="method">
			<f a="zNear:zFar">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.</haxe_doc>
		</depthRange>
		<detachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Detaches a `WebGLShader`.</haxe_doc>
		</detachShader>
		<disable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables specific WebGL capabilities for this context.</haxe_doc>
		</disable>
		<disableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables a vertex attribute array at a given position.</haxe_doc>
		</disableVertexAttribArray>
		<drawArrays public="1" set="method">
			<f a="mode:first:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data.</haxe_doc>
		</drawArrays>
		<drawElements public="1" set="method">
			<f a="mode:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from element array data.</haxe_doc>
		</drawElements>
		<enable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables specific WebGL capabilities for this context.</haxe_doc>
		</enable>
		<enableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables a vertex attribute array at a given position.</haxe_doc>
		</enableVertexAttribArray>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Blocks execution until all previously called commands are finished.</haxe_doc>
		</finish>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties different buffer commands, causing all commands to be executed as quickly as possible.</haxe_doc>
		</flush>
		<framebufferRenderbuffer public="1" set="method">
			<f a="target:attachment:renderbuffertarget:renderbuffer">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method">
			<f a="target:attachment:textarget:texture:level">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a textures image to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferTexture2D>
		<frontFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether polygons are front- or back-facing by setting a winding orientation.</haxe_doc>
		</frontFace>
		<generateMipmap public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Generates a set of mipmaps for a `WebGLTexture` object.</haxe_doc>
		</generateMipmap>
		<getActiveAttrib public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active attribute variable.</haxe_doc>
		</getActiveAttrib>
		<getActiveUniform public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active uniform variable.</haxe_doc>
		</getActiveUniform>
		<getAttachedShaders public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="js.html.webgl.Shader"/></c>
			</f>
			<haxe_doc>Returns a list of `WebGLShader` objects attached to a `WebGLProgram`.</haxe_doc>
		</getAttachedShaders>
		<getAttribLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the location of an attribute variable.</haxe_doc>
		</getAttribLocation>
		<getBufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the buffer.</haxe_doc>
		</getBufferParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a value for the passed parameter name.
		@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns error information.</haxe_doc>
		</getError>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the framebuffer.
		@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method">
			<f a="program:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the program.</haxe_doc>
		</getProgramParameter>
		<getProgramInfoLog public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLProgram` object.</haxe_doc>
		</getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the renderbuffer.</haxe_doc>
		</getRenderbufferParameter>
		<getShaderParameter public="1" set="method">
			<f a="shader:pname">
				<c path="js.html.webgl.Shader"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the shader.</haxe_doc>
		</getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method">
			<f a="shadertype:precisiontype">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.ShaderPrecisionFormat"/>
			</f>
			<haxe_doc>Returns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.</haxe_doc>
		</getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLShader` object.</haxe_doc>
		</getShaderInfoLog>
		<getShaderSource public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the source code of a `WebGLShader` as a string.</haxe_doc>
		</getShaderSource>
		<getTexParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the texture.</haxe_doc>
		</getTexParameter>
		<getUniform public="1" set="method">
			<f a="program:location">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.UniformLocation"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of a uniform variable at a given location.</haxe_doc>
		</getUniform>
		<getUniformLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<c path="js.html.webgl.UniformLocation"/>
			</f>
			<haxe_doc>Returns the location of a uniform variable.</haxe_doc>
		</getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a vertex attribute at a given position.
		@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the address of a given vertex attribute.</haxe_doc>
		</getVertexAttribOffset>
		<hint public="1" set="method">
			<f a="target:mode">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.</haxe_doc>
		</hint>
		<isBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed buffer is valid.</haxe_doc>
		</isBuffer>
		<isEnabled public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether a specific WebGL capability is enabled or not for this context.</haxe_doc>
		</isEnabled>
		<isFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.</haxe_doc>
		</isFramebuffer>
		<isProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLProgram` is valid.</haxe_doc>
		</isProgram>
		<isRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.</haxe_doc>
		</isRenderbuffer>
		<isShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLShader` is valid.</haxe_doc>
		</isShader>
		<isTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLTexture` is valid.</haxe_doc>
		</isTexture>
		<lineWidth public="1" set="method">
			<f a="width">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the line width of rasterized lines.</haxe_doc>
		</lineWidth>
		<linkProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Links the passed `WebGLProgram` object.</haxe_doc>
		</linkProgram>
		<pixelStorei public="1" set="method">
			<f a="pname:param">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the pixel storage modes</haxe_doc>
		</pixelStorei>
		<polygonOffset public="1" set="method">
			<f a="factor:units">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the scale factors and units to calculate depth values.</haxe_doc>
		</polygonOffset>
		<renderbufferStorage public="1" set="method">
			<f a="target:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a renderbuffer data store.</haxe_doc>
		</renderbufferStorage>
		<sampleCoverage public="1" set="method">
			<f a="value:invert">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies multi-sample coverage parameters for anti-aliasing effects.</haxe_doc>
		</sampleCoverage>
		<scissor public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the scissor box.</haxe_doc>
		</scissor>
		<shaderSource public="1" set="method">
			<f a="shader:source">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source code in a `WebGLShader`.</haxe_doc>
		</shaderSource>
		<stencilFunc public="1" set="method">
			<f a="func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the both front and back function and reference value for stencil testing.</haxe_doc>
		</stencilFunc>
		<stencilFuncSeparate public="1" set="method">
			<f a="face:func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back function and reference value for stencil testing.</haxe_doc>
		</stencilFuncSeparate>
		<stencilMask public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMask>
		<stencilMaskSeparate public="1" set="method">
			<f a="face:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMaskSeparate>
		<stencilOp public="1" set="method">
			<f a="fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the front and back-facing stencil test actions.</haxe_doc>
		</stencilOp>
		<stencilOpSeparate public="1" set="method">
			<f a="face:fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back-facing stencil test actions.</haxe_doc>
		</stencilOpSeparate>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses the specified `WebGLProgram` as part the current rendering state.</haxe_doc>
		</useProgram>
		<validateProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Validates a `WebGLProgram`.</haxe_doc>
		</validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method">
			<f a="indx:size:type:normalized:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribPointer>
		<viewport public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the viewport.</haxe_doc>
		</viewport>
		<haxe_doc><![CDATA[The `WebGLRenderingContext` interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sampler" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Sampler.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSampler` interface is part of the WebGL 2 API and stores sampling parameters for `WebGLTexture` access inside of a shader.

	Documentation [WebGLSampler](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSampler"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Shader.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.

	Documentation [WebGLShader](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShader"</e></m></meta>
	</class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<rangeMin public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the minimum value that can be represented.</haxe_doc>
		</rangeMin>
		<rangeMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the maximum value that can be represented.</haxe_doc>
		</rangeMax>
		<precision public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bits of precision that can be represented. For integer formats this value is always 0.</haxe_doc>
		</precision>
		<haxe_doc><![CDATA[The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.

	Documentation [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sync" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Sync.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSync` interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.

	Documentation [WebGLSync](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSync"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/Texture.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.

	Documentation [WebGLTexture](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTexture"</e></m></meta>
	</class>
	<class path="js.html.webgl.TransformFeedback" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/TransformFeedback.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLTransformFeedback` interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.

	Documentation [WebGLTransformFeedback](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTransformFeedback"</e></m></meta>
	</class>
	<class path="js.html.webgl.UniformLocation" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/UniformLocation.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.

	Documentation [WebGLUniformLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta>
	</class>
	<class path="js.html.webgl.VertexArrayObject" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/VertexArrayObject.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLVertexArrayObject` interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.

	Documentation [WebGLVertexArrayObject](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLVertexArrayObject"</e></m></meta>
	</class>
	<class path="js.html.webgl.WebGL2RenderingContext" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/WebGL2RenderingContext.hx" extern="1">
		<extends path="js.html.webgl.RenderingContext"/>
		<READ_BUFFER public="1" get="inline" set="null" expr="3074" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3074</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="inline" set="null" expr="3314" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3314</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="inline" set="null" expr="3315" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3315</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3316" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3316</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="inline" set="null" expr="3330" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3330</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="inline" set="null" expr="3331" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3331</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3332" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3332</e></m></meta>
		</PACK_SKIP_PIXELS>
		<COLOR public="1" get="inline" set="null" expr="6144" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6144</e></m></meta>
		</COLOR>
		<DEPTH public="1" get="inline" set="null" expr="6145" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6145</e></m></meta>
		</DEPTH>
		<STENCIL public="1" get="inline" set="null" expr="6146" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6146</e></m></meta>
		</STENCIL>
		<RED public="1" get="inline" set="null" expr="6403" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6403</e></m></meta>
		</RED>
		<RGB8 public="1" get="inline" set="null" expr="32849" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32849</e></m></meta>
		</RGB8>
		<RGBA8 public="1" get="inline" set="null" expr="32856" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32856</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" get="inline" set="null" expr="32857" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32857</e></m></meta>
		</RGB10_A2>
		<TEXTURE_BINDING_3D public="1" get="inline" set="null" expr="32874" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32874</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="inline" set="null" expr="32877" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32877</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="inline" set="null" expr="32878" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32878</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<TEXTURE_3D public="1" get="inline" set="null" expr="32879" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32879</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="inline" set="null" expr="32882" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32882</e></m></meta>
		</TEXTURE_WRAP_R>
		<MAX_3D_TEXTURE_SIZE public="1" get="inline" set="null" expr="32883" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32883</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="33640" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33640</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<MAX_ELEMENTS_VERTICES public="1" get="inline" set="null" expr="33000" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33000</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="inline" set="null" expr="33001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33001</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<TEXTURE_MIN_LOD public="1" get="inline" set="null" expr="33082" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33082</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="inline" set="null" expr="33083" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33083</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="33084" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33084</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="33085" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33085</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<MIN public="1" get="inline" set="null" expr="32775" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
		</MIN>
		<MAX public="1" get="inline" set="null" expr="32776" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="33190" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33190</e></m></meta>
		</DEPTH_COMPONENT24>
		<MAX_TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="34045" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34045</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<TEXTURE_COMPARE_MODE public="1" get="inline" set="null" expr="34892" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34892</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="inline" set="null" expr="34893" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34893</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<CURRENT_QUERY public="1" get="inline" set="null" expr="34917" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" get="inline" set="null" expr="34918" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="inline" set="null" expr="34919" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<STREAM_READ public="1" get="inline" set="null" expr="35041" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35041</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" get="inline" set="null" expr="35042" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35042</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" get="inline" set="null" expr="35045" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35045</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" get="inline" set="null" expr="35046" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35046</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" get="inline" set="null" expr="35049" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35049</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="inline" set="null" expr="35050" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35050</e></m></meta>
		</DYNAMIC_COPY>
		<MAX_DRAW_BUFFERS public="1" get="inline" set="null" expr="34852" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="inline" set="null" expr="34853" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="inline" set="null" expr="34854" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="inline" set="null" expr="34855" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="inline" set="null" expr="34856" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="inline" set="null" expr="34857" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="inline" set="null" expr="34858" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="inline" set="null" expr="34859" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="inline" set="null" expr="34860" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="inline" set="null" expr="34861" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="inline" set="null" expr="34862" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="inline" set="null" expr="34863" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="inline" set="null" expr="34864" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="inline" set="null" expr="34865" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="inline" set="null" expr="34866" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="inline" set="null" expr="34867" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="inline" set="null" expr="34868" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35657" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35657</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35658" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35658</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<SAMPLER_3D public="1" get="inline" set="null" expr="35679" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35679</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="inline" set="null" expr="35682" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35682</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="inline" set="null" expr="35723" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<PIXEL_PACK_BUFFER public="1" get="inline" set="null" expr="35051" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35051</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="inline" set="null" expr="35052" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35052</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35053" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35053</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35055" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35055</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="inline" set="null" expr="35685" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35685</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="inline" set="null" expr="35686" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35686</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="inline" set="null" expr="35687" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35687</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="inline" set="null" expr="35688" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35688</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="inline" set="null" expr="35689" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35689</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="inline" set="null" expr="35690" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35690</e></m></meta>
		</FLOAT_MAT4x3>
		<SRGB public="1" get="inline" set="null" expr="35904" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="35905" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35905</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" get="inline" set="null" expr="35907" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="inline" set="null" expr="34894" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34894</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="inline" set="null" expr="34836" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" get="inline" set="null" expr="34837" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" get="inline" set="null" expr="34842" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" get="inline" set="null" expr="34843" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
		</RGB16F>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="inline" set="null" expr="35069" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35069</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="inline" set="null" expr="35071" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35071</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35076" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35076</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35077" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35077</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="inline" set="null" expr="35659" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35659</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="35866" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35866</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="inline" set="null" expr="35869" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35869</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="35898" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35898</e></m></meta>
		</R11F_G11F_B10F>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="35899" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35899</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<RGB9_E5 public="1" get="inline" set="null" expr="35901" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35901</e></m></meta>
		</RGB9_E5>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="inline" set="null" expr="35902" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35902</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="inline" set="null" expr="35967" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35967</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="inline" set="null" expr="35968" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35968</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="inline" set="null" expr="35971" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35971</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="inline" set="null" expr="35972" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35972</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="inline" set="null" expr="35973" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35973</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="inline" set="null" expr="35976" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35976</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<RASTERIZER_DISCARD public="1" get="inline" set="null" expr="35977" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35977</e></m></meta>
		</RASTERIZER_DISCARD>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="inline" set="null" expr="35978" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35978</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35979" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35979</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="inline" set="null" expr="35980" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35980</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35981" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35981</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="inline" set="null" expr="35982" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35982</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35983" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35983</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<RGBA32UI public="1" get="inline" set="null" expr="36208" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36208</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" get="inline" set="null" expr="36209" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36209</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" get="inline" set="null" expr="36214" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36214</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" get="inline" set="null" expr="36215" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36215</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" get="inline" set="null" expr="36220" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36220</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" get="inline" set="null" expr="36221" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36221</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" get="inline" set="null" expr="36226" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36226</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" get="inline" set="null" expr="36227" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36227</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" get="inline" set="null" expr="36232" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36232</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" get="inline" set="null" expr="36233" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36233</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" get="inline" set="null" expr="36238" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36238</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" get="inline" set="null" expr="36239" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36239</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" get="inline" set="null" expr="36244" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36244</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" get="inline" set="null" expr="36248" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36248</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" get="inline" set="null" expr="36249" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36249</e></m></meta>
		</RGBA_INTEGER>
		<SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36289" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36289</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="inline" set="null" expr="36292" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36292</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="inline" set="null" expr="36293" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36293</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<UNSIGNED_INT_VEC2 public="1" get="inline" set="null" expr="36294" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36294</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="inline" set="null" expr="36295" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36295</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="inline" set="null" expr="36296" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36296</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<INT_SAMPLER_2D public="1" get="inline" set="null" expr="36298" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36298</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="inline" set="null" expr="36299" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36299</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36300" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36300</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36303" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36303</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="inline" set="null" expr="36306" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36306</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="inline" set="null" expr="36307" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36307</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36308" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36308</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36311" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36311</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<DEPTH_COMPONENT32F public="1" get="inline" set="null" expr="36012" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36012</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="inline" set="null" expr="36013" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36013</e></m></meta>
		</DEPTH32F_STENCIL8>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="inline" set="null" expr="36269" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36269</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="inline" set="null" expr="33296" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="inline" set="null" expr="33297" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="inline" set="null" expr="33298" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33298</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="inline" set="null" expr="33299" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33299</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="inline" set="null" expr="33300" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33300</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="inline" set="null" expr="33301" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33301</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="inline" set="null" expr="33302" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33302</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="inline" set="null" expr="33303" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33303</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="inline" set="null" expr="33304" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33304</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<UNSIGNED_INT_24_8 public="1" get="inline" set="null" expr="34042" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
		</UNSIGNED_INT_24_8>
		<DEPTH24_STENCIL8 public="1" get="inline" set="null" expr="35056" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35056</e></m></meta>
		</DEPTH24_STENCIL8>
		<UNSIGNED_NORMALIZED public="1" get="inline" set="null" expr="35863" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="inline" set="null" expr="36008" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36008</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="inline" set="null" expr="36009" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36009</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36010" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36010</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="inline" set="null" expr="36011" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36011</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="inline" set="null" expr="36052" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36052</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<MAX_COLOR_ATTACHMENTS public="1" get="inline" set="null" expr="36063" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="inline" set="null" expr="36065" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="inline" set="null" expr="36066" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="inline" set="null" expr="36067" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="inline" set="null" expr="36068" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="inline" set="null" expr="36069" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="inline" set="null" expr="36070" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="inline" set="null" expr="36071" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="inline" set="null" expr="36072" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="inline" set="null" expr="36073" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="inline" set="null" expr="36074" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="inline" set="null" expr="36075" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="inline" set="null" expr="36076" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="inline" set="null" expr="36077" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="inline" set="null" expr="36078" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="inline" set="null" expr="36079" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="inline" set="null" expr="36182" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36182</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<MAX_SAMPLES public="1" get="inline" set="null" expr="36183" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36183</e></m></meta>
		</MAX_SAMPLES>
		<HALF_FLOAT public="1" get="inline" set="null" expr="5131" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5131</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" get="inline" set="null" expr="33319" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33319</e></m></meta>
		</RG>
		<RG_INTEGER public="1" get="inline" set="null" expr="33320" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33320</e></m></meta>
		</RG_INTEGER>
		<R8 public="1" get="inline" set="null" expr="33321" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33321</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="33323" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33323</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="33325" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33325</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="33326" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33326</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="33327" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33327</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="33328" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33328</e></m></meta>
		</RG32F>
		<R8I public="1" get="inline" set="null" expr="33329" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33329</e></m></meta>
		</R8I>
		<R8UI public="1" get="inline" set="null" expr="33330" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33330</e></m></meta>
		</R8UI>
		<R16I public="1" get="inline" set="null" expr="33331" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33331</e></m></meta>
		</R16I>
		<R16UI public="1" get="inline" set="null" expr="33332" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33332</e></m></meta>
		</R16UI>
		<R32I public="1" get="inline" set="null" expr="33333" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33333</e></m></meta>
		</R32I>
		<R32UI public="1" get="inline" set="null" expr="33334" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33334</e></m></meta>
		</R32UI>
		<RG8I public="1" get="inline" set="null" expr="33335" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33335</e></m></meta>
		</RG8I>
		<RG8UI public="1" get="inline" set="null" expr="33336" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33336</e></m></meta>
		</RG8UI>
		<RG16I public="1" get="inline" set="null" expr="33337" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33337</e></m></meta>
		</RG16I>
		<RG16UI public="1" get="inline" set="null" expr="33338" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33338</e></m></meta>
		</RG16UI>
		<RG32I public="1" get="inline" set="null" expr="33339" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33339</e></m></meta>
		</RG32I>
		<RG32UI public="1" get="inline" set="null" expr="33340" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33340</e></m></meta>
		</RG32UI>
		<VERTEX_ARRAY_BINDING public="1" get="inline" set="null" expr="34229" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<R8_SNORM public="1" get="inline" set="null" expr="36756" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36756</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" get="inline" set="null" expr="36757" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36757</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" get="inline" set="null" expr="36758" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36758</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" get="inline" set="null" expr="36759" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36759</e></m></meta>
		</RGBA8_SNORM>
		<SIGNED_NORMALIZED public="1" get="inline" set="null" expr="36764" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36764</e></m></meta>
		</SIGNED_NORMALIZED>
		<COPY_READ_BUFFER public="1" get="inline" set="null" expr="36662" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="inline" set="null" expr="36663" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="inline" set="null" expr="36662" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="inline" set="null" expr="36663" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="35345" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35345</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="inline" set="null" expr="35368" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35368</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="inline" set="null" expr="35369" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35369</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="inline" set="null" expr="35370" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35370</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35371" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35371</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35373" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35373</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35374" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35374</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="inline" set="null" expr="35375" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35375</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="inline" set="null" expr="35376" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35376</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35377" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35377</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35379" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35379</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="inline" set="null" expr="35380" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35380</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35382" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35382</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="inline" set="null" expr="35383" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35383</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="inline" set="null" expr="35384" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35384</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="inline" set="null" expr="35386" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35386</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="inline" set="null" expr="35387" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35387</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="inline" set="null" expr="35388" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35388</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="inline" set="null" expr="35389" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35389</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="inline" set="null" expr="35390" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35390</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="inline" set="null" expr="35391" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35391</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="inline" set="null" expr="35392" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35392</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35394" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35394</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="inline" set="null" expr="35395" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35395</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="inline" set="null" expr="35396" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35396</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="inline" set="null" expr="35398" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35398</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<INVALID_INDEX public="1" get="inline" set="null" expr="cast 4294967295" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</INVALID_INDEX>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="inline" set="null" expr="37154" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37154</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="inline" set="null" expr="37157" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37157</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="inline" set="null" expr="37137" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37137</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<OBJECT_TYPE public="1" get="inline" set="null" expr="37138" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37138</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="inline" set="null" expr="37139" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37139</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" get="inline" set="null" expr="37140" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37140</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" get="inline" set="null" expr="37141" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37141</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" get="inline" set="null" expr="37142" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37142</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="inline" set="null" expr="37143" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37143</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="inline" set="null" expr="37144" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37144</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" get="inline" set="null" expr="37145" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37145</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" get="inline" set="null" expr="37146" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37146</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="inline" set="null" expr="37147" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37147</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="inline" set="null" expr="37148" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37148</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="inline" set="null" expr="37149" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37149</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="inline" set="null" expr="1" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="inline" set="null" expr="35070" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<ANY_SAMPLES_PASSED public="1" get="inline" set="null" expr="35887" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35887</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="inline" set="null" expr="36202" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36202</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<SAMPLER_BINDING public="1" get="inline" set="null" expr="35097" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35097</e></m></meta>
		</SAMPLER_BINDING>
		<RGB10_A2UI public="1" get="inline" set="null" expr="36975" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36975</e></m></meta>
		</RGB10_A2UI>
		<INT_2_10_10_10_REV public="1" get="inline" set="null" expr="36255" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36255</e></m></meta>
		</INT_2_10_10_10_REV>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="36386" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36386</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="inline" set="null" expr="36387" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36387</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="inline" set="null" expr="36388" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36388</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="inline" set="null" expr="36389" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36389</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="inline" set="null" expr="37167" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37167</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<MAX_ELEMENT_INDEX public="1" get="inline" set="null" expr="36203" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36203</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="inline" set="null" expr="33503" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33503</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<TIMEOUT_IGNORED public="1" get="inline" set="null" expr="-1" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="inline" set="null" expr="37447" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37447</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="334" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="335" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="336" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="337" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="338" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="339" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="340" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="341" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="342" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="343" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="344" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="345" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="346" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="347" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="348" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="349" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="350" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="351" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="352" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="353" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="354" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="361" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="362" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="363" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="364" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="365" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="366" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="367" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="368" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="369" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="370" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="371" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="372" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="373" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="374" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="375" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="376" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="377" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="378" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="379" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="380" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="391" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="392" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="393" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="395" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="396" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="397" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="398" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="399" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="400" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="401" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="402" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="403" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="404" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="405" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="406" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="407" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="408" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="409" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="410" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="411" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="412" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="413" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="414" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="415" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="416" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="417" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="418" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="419" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="420" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="421" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="422" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="423" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="424" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="425" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="427" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="428" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="429" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="430" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="431" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="432" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="433" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="434" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="435" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="436" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="437" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="438" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="439" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="440" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="441" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="442" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="443" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="444" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="445" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="446" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="447" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="448" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="449" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="450" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="451" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="452" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="453" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="454" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="455" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="456" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="457" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="458" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="459" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="460" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="461" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="462" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="463" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="464" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="465" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="466" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="467" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="468" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="469" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="470" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="471" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="472" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="473" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="474" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="475" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="476" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="477" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="478" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="479" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="481" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="482" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="483" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="484" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="485" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="486" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="487" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="488" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="489" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="490" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="491" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="492" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="493" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="494" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="495" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="496" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="497" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="498" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="500" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="501" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="502" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="503" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="504" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="505" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="506" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="507" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="508" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="509" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="510" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="511" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="512" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="513" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="514" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="515" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="516" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="517" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="518" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="519" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="520" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="521" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="523" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="524" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="525" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="526" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="539" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="540" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="541" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="542" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="543" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="544" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="545" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="546" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="547" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="548" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="549" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="550" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="551" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="552" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="553" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="554" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="555" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="556" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="557" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="558" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="559" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="560" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="561" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="562" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="563" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="564" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="565" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="566" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="567" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="568" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="569" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="570" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="571" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="572" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="573" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="574" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="575" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="576" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="577" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="578" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="579" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="580" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="581" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="582" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="583" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="584" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="585" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="586" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="587" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="588" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="589" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="590" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="591" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="592" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="593" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="594" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<bufferData public="1" set="method" override="1">
			<f a="target:srcData:usage:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method" override="1">
			<f a="target:dstByteOffset:srcData:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
			<overloads>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
			</overloads>
		</bufferSubData>
		<copyBufferSubData public="1" set="method">
			<f a="readTarget:writeTarget:readOffset:writeOffset:size">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies part of the data of a buffer to another buffer.</haxe_doc>
		</copyBufferSubData>
		<getBufferSubData public="1" set="method">
			<f a="target:srcByteOffset:dstData:?dstOffset:?length" v=":::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, dstOffset : 0 }</e></m></meta>
			<haxe_doc>Reads data from a buffer and writes them to an `ArrayBuffer` or `SharedArrayBuffer`.</haxe_doc>
		</getBufferSubData>
		<blitFramebuffer public="1" set="method">
			<f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transfers a block of pixels from the read framebuffer to the draw framebuffer.</haxe_doc>
		</blitFramebuffer>
		<framebufferTextureLayer public="1" set="method">
			<f a="target:attachment:texture:level:layer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a single layer of a texture to a framebuffer.</haxe_doc>
		</framebufferTextureLayer>
		<invalidateFramebuffer public="1" set="method">
			<f a="target:attachments">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates the contents of attachments in a framebuffer.
		@throws DOMError</haxe_doc>
		</invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" set="method">
			<f a="target:attachments:x:y:width:height">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates portions of the contents of attachments in a framebuffer
		@throws DOMError</haxe_doc>
		</invalidateSubFramebuffer>
		<readBuffer public="1" set="method">
			<f a="src">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects a color buffer as the source for pixels.</haxe_doc>
		</readBuffer>
		<getInternalformatParameter public="1" set="method">
			<f a="target:internalformat:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about implementation-dependent support for internal formats.
		@throws DOMError</haxe_doc>
		</getInternalformatParameter>
		<renderbufferStorageMultisample public="1" set="method">
			<f a="target:samples:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.</haxe_doc>
		</renderbufferStorageMultisample>
		<texStorage2D public="1" set="method">
			<f a="target:levels:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of two-dimensional texture storage.</haxe_doc>
		</texStorage2D>
		<texStorage3D public="1" set="method">
			<f a="target:levels:internalformat:width:height:depth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of a three-dimensional texture or two-dimensional array texture.</haxe_doc>
		</texStorage3D>
		<texImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<texImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
			</overloads>
		</texImage3D>
		<texSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v=":::::::::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
			</overloads>
		</texSubImage3D>
		<copyTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies pixels from the current `WebGLFramebuffer` into an existing 3D texture sub-image.</haxe_doc>
		</copyTexSubImage3D>
		<compressedTexImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexImage2D></overloads>
		</compressedTexImage2D>
		<compressedTexImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexImage3D public="1" set="method">
	<f a="target:level:internalformat:width:height:depth:border:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
</compressedTexImage3D></overloads>
		</compressedTexImage3D>
		<compressedTexSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexSubImage2D></overloads>
		</compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexSubImage3D public="1" set="method">
	<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
</compressedTexSubImage3D></overloads>
		</compressedTexSubImage3D>
		<getFragDataLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the binding of color numbers to user-defined varying out variables.</haxe_doc>
		</getFragDataLocation>
		<uniform1ui public="1" set="method"><f a="location:v0">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform2ui public="1" set="method"><f a="location:v0:v1">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform3ui public="1" set="method"><f a="location:v0:v1:v2">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform4ui public="1" set="method"><f a="location:v0:v1:v2:v3">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform1fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4iv></overloads>
		</uniform4iv>
		<uniform1uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1uiv></overloads>
		</uniform1uiv>
		<uniform2uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2uiv></overloads>
		</uniform2uiv>
		<uniform3uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3uiv></overloads>
		</uniform3uiv>
		<uniform4uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4uiv></overloads>
		</uniform4uiv>
		<uniformMatrix2fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x2fv></overloads>
		</uniformMatrix3x2fv>
		<uniformMatrix4x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x2fv></overloads>
		</uniformMatrix4x2fv>
		<uniformMatrix2x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x3fv></overloads>
		</uniformMatrix2x3fv>
		<uniformMatrix3fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x3fv></overloads>
		</uniformMatrix4x3fv>
		<uniformMatrix2x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x4fv></overloads>
		</uniformMatrix2x4fv>
		<uniformMatrix3x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x4fv></overloads>
		</uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<vertexAttribI4i public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4iv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4iv></overloads>
		</vertexAttribI4iv>
		<vertexAttribI4ui public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4uiv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4uiv></overloads>
		</vertexAttribI4uiv>
		<vertexAttribIPointer public="1" set="method">
			<f a="index:size:type:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies integer data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribIPointer>
		<vertexAttribDivisor public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `WebGL2RenderingContext.drawArraysInstanced()` and `WebGL2RenderingContext.drawElementsInstanced()`.</haxe_doc>
		</vertexAttribDivisor>
		<drawArraysInstanced public="1" set="method">
			<f a="mode:first:count:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.</haxe_doc>
		</drawArraysInstanced>
		<drawElementsInstanced public="1" set="method">
			<f a="mode:count:type:offset:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.</haxe_doc>
		</drawElementsInstanced>
		<drawRangeElements public="1" set="method">
			<f a="mode:start:end:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data in a given range.</haxe_doc>
		</drawRangeElements>
		<readPixels public="1" set="method" override="1">
			<f a="x:y:width:height:format:type:dstData:dstOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:dstData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:offset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
			</overloads>
		</readPixels>
		<drawBuffers public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a list of color buffers to be drawn into.</haxe_doc>
		</drawBuffers>
		<clearBufferfv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferfv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferfv></overloads>
		</clearBufferfv>
		<clearBufferiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferiv></overloads>
		</clearBufferiv>
		<clearBufferuiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferuiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferuiv></overloads>
		</clearBufferuiv>
		<clearBufferfi public="1" set="method"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<createQuery public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery` object.</haxe_doc>
		</createQuery>
		<deleteQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery` object.</haxe_doc>
		</deleteQuery>
		<isQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLQuery` object.</haxe_doc>
		</isQuery>
		<beginQuery public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Begins an asynchronous query.</haxe_doc>
		</beginQuery>
		<endQuery public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Marks the end of an asynchronous query.</haxe_doc>
		</endQuery>
		<getQuery public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a `WebGLQuery` object for a given target.</haxe_doc>
		</getQuery>
		<getQueryParameter public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query.</haxe_doc>
		</getQueryParameter>
		<createSampler public="1" set="method">
			<f a=""><c path="js.html.webgl.Sampler"/></f>
			<haxe_doc>Creates a new `WebGLSampler` object.</haxe_doc>
		</createSampler>
		<deleteSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSampler` object.</haxe_doc>
		</deleteSampler>
		<isSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLSampler` object.</haxe_doc>
		</isSampler>
		<bindSampler public="1" set="method">
			<f a="unit:sampler">
				<x path="Int"/>
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLSampler` to a texture unit.</haxe_doc>
		</bindSampler>
		<samplerParameteri public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<samplerParameterf public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<getSamplerParameter public="1" set="method">
			<f a="sampler:pname">
				<c path="js.html.webgl.Sampler"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns sampler parameter information.</haxe_doc>
		</getSamplerParameter>
		<fenceSync public="1" set="method">
			<f a="condition:flags">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Sync"/>
			</f>
			<haxe_doc>Creates a new `WebGLSync` object and inserts it into the GL command stream.</haxe_doc>
		</fenceSync>
		<isSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLSync` object.</haxe_doc>
		</isSync>
		<deleteSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSync` object.</haxe_doc>
		</deleteSync>
		<clientWaitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Blocks and waits for a `WebGLSync` object to become signaled or a given timeout to be passed.</haxe_doc>
		</clientWaitSync>
		<waitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns immediately, but waits on the GL server until the given `WebGLSync` object is signaled.</haxe_doc>
		</waitSync>
		<getSyncParameter public="1" set="method">
			<f a="sync:pname">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns parameter information of a `WebGLSync` object.</haxe_doc>
		</getSyncParameter>
		<createTransformFeedback public="1" set="method">
			<f a=""><c path="js.html.webgl.TransformFeedback"/></f>
			<haxe_doc>Creates and initializes `WebGLTransformFeedback` objects.</haxe_doc>
		</createTransformFeedback>
		<deleteTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLTransformFeedback` object.</haxe_doc>
		</deleteTransformFeedback>
		<isTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLTransformFeedback` object.</haxe_doc>
		</isTransformFeedback>
		<bindTransformFeedback public="1" set="method">
			<f a="target:tf">
				<x path="Int"/>
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a passed `WebGLTransformFeedback` object to the current GL state.</haxe_doc>
		</bindTransformFeedback>
		<beginTransformFeedback public="1" set="method">
			<f a="primitiveMode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a transform feedback operation.</haxe_doc>
		</beginTransformFeedback>
		<endTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ends a transform feedback operation.</haxe_doc>
		</endTransformFeedback>
		<transformFeedbackVaryings public="1" set="method">
			<f a="program:varyings:bufferMode">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies values to record in `WebGLTransformFeedback` buffers.</haxe_doc>
		</transformFeedbackVaryings>
		<getTransformFeedbackVarying public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about varying variables from `WebGLTransformFeedback` buffers.</haxe_doc>
		</getTransformFeedbackVarying>
		<pauseTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses a transform feedback operation.</haxe_doc>
		</pauseTransformFeedback>
		<resumeTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resumes a transform feedback operation.</haxe_doc>
		</resumeTransformFeedback>
		<bindBufferBase public="1" set="method">
			<f a="target:index:buffer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferBase>
		<bindBufferRange public="1" set="method">
			<f a="target:index:buffer:offset:size">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a range of a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferRange>
		<getIndexedParameter public="1" set="method">
			<f a="target:index">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns the indexed value for the given `target`.
		@throws DOMError</haxe_doc>
		</getIndexedParameter>
		<getUniformIndices public="1" set="method">
			<f a="program:uniformNames">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Retrieves the indices of a number of uniforms within a `WebGLProgram`.</haxe_doc>
		</getUniformIndices>
		<getActiveUniforms public="1" set="method">
			<f a="program:uniformIndices:pname">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about active uniforms within a `WebGLProgram`.</haxe_doc>
		</getActiveUniforms>
		<getUniformBlockIndex public="1" set="method">
			<f a="program:uniformBlockName">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Retrieves the index of a uniform block within a `WebGLProgram`.</haxe_doc>
		</getUniformBlockIndex>
		<getActiveUniformBlockParameter public="1" set="method">
			<f a="program:uniformBlockIndex:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about an active uniform block within a `WebGLProgram`.
		@throws DOMError</haxe_doc>
		</getActiveUniformBlockParameter>
		<getActiveUniformBlockName public="1" set="method">
			<f a="program:uniformBlockIndex">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the name of the active uniform block at a given index within a `WebGLProgram`.</haxe_doc>
		</getActiveUniformBlockName>
		<uniformBlockBinding public="1" set="method">
			<f a="program:uniformBlockIndex:uniformBlockBinding">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Assigns binding points for active uniform blocks.</haxe_doc>
		</uniformBlockBinding>
		<createVertexArray public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArray>
		<deleteVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArray>
		<isVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArray>
		<bindVertexArray public="1" set="method">
			<f a="array">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArray>
		<getContextAttributes public="1" set="method" override="1"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<isContextLost public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isContextLost>
		<getSupportedExtensions public="1" set="method" override="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getExtension public="1" params="T" set="method" override="1">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method" override="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" override="1"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" override="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" override="1"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" override="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" override="1"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" override="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" override="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" override="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" override="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" override="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<copyTexImage2D public="1" set="method" override="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" override="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" override="1"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" override="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" override="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" override="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" override="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" override="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" override="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" override="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" override="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="Array"><c path="js.html.webgl.Shader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getParameter public="1" set="method" override="1">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method" override="1"><f a=""><x path="Int"/></f></getError>
		<getFramebufferAttachmentParameter public="1" set="method" override="1">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method" override="1"><f a="program:pname">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getProgramInfoLog public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderParameter public="1" set="method" override="1"><f a="shader:pname">
	<c path="js.html.webgl.Shader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" override="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderSource public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getTexParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" override="1"><f a="program:location">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.UniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" override="1">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" override="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" override="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" override="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method" override="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" override="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<renderbufferStorage public="1" set="method" override="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" override="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" override="1"><f a="shader:source">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" override="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" override="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" override="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" override="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" override="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texParameterf public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" override="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" override="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" override="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" override="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" override="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<haxe_doc><![CDATA[The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGL2RenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.ANGLEInstancedArrays" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/ANGLEInstancedArrays.hx" extern="1">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" get="inline" set="null" expr="35070" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
			<haxe_doc>Returns a `GLint` describing the frequency divisor used for instanced rendering when used in the `WebGLRenderingContext.getVertexAttrib()` as the `pname` parameter.</haxe_doc>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method">
			<f a="mode:first:count:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawArrays()` except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</haxe_doc>
		</drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method">
			<f a="mode:count:type:offset:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawElements()` except that multiple instances of the set of elements are executed and the instance advances between each set.</haxe_doc>
		</drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `ANGLE_instanced_arrays.drawArraysInstancedANGLE()` and `ANGLE_instanced_arrays.drawElementsInstancedANGLE()`.</haxe_doc>
		</vertexAttribDivisorANGLE>
		<haxe_doc><![CDATA[The `ANGLE_instanced_arrays` extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.

	Documentation [ANGLE_instanced_arrays](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays>]]></haxe_doc>
		<meta><m n=":native"><e>"ANGLE_instanced_arrays"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTBlendMinmax" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTBlendMinmax.hx" extern="1">
		<MIN_EXT public="1" get="inline" set="null" expr="32775" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
			<haxe_doc>Produces the minimum color components of the source and destination colors.</haxe_doc>
		</MIN_EXT>
		<MAX_EXT public="1" get="inline" set="null" expr="32776" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
			<haxe_doc>Produces the maximum color components of the source and destination colors.</haxe_doc>
		</MAX_EXT>
		<haxe_doc><![CDATA[The `EXT_blend_minmax` extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.

	Documentation [EXT_blend_minmax](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_blend_minmax"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTColorBufferFloat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTColorBufferFloat.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTColorBufferHalfFloat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTColorBufferHalfFloat.hx" extern="1">
		<RGBA16F_EXT public="1" get="inline" set="null" expr="34842" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
			<haxe_doc>RGBA 16-bit floating-point color-renderable format.</haxe_doc>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" get="inline" set="null" expr="34843" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
			<haxe_doc>RGB 16-bit floating-point color-renderable format.</haxe_doc>
		</RGB16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `EXT_color_buffer_half_float` extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.

	Documentation [EXT_color_buffer_half_float](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_color_buffer_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTDisjointTimerQuery" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTDisjointTimerQuery.hx" extern="1">
		<QUERY_COUNTER_BITS_EXT public="1" get="inline" set="null" expr="34916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34916</e></m></meta>
			<haxe_doc>A `GLint` indicating the number of bits used to hold the query result for the given target.</haxe_doc>
		</QUERY_COUNTER_BITS_EXT>
		<CURRENT_QUERY_EXT public="1" get="inline" set="null" expr="34917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
			<haxe_doc>A `WebGLQuery` object, which is the currently active query for the given target.</haxe_doc>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" get="inline" set="null" expr="34918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
			<haxe_doc>A `GLuint64EXT` containing the query result.</haxe_doc>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" get="inline" set="null" expr="34919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not a query result is available.</haxe_doc>
		</QUERY_RESULT_AVAILABLE_EXT>
		<TIME_ELAPSED_EXT public="1" get="inline" set="null" expr="35007" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35007</e></m></meta>
			<haxe_doc>Elapsed time (in nanoseconds).</haxe_doc>
		</TIME_ELAPSED_EXT>
		<TIMESTAMP_EXT public="1" get="inline" set="null" expr="36392" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36392</e></m></meta>
			<haxe_doc>The current time.</haxe_doc>
		</TIMESTAMP_EXT>
		<GPU_DISJOINT_EXT public="1" get="inline" set="null" expr="36795" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36795</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not the GPU performed any disjoint operation.</haxe_doc>
		</GPU_DISJOINT_EXT>
		<createQueryEXT public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery`.</haxe_doc>
		</createQueryEXT>
		<deleteQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery`.</haxe_doc>
		</deleteQueryEXT>
		<isQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLQuery`.</haxe_doc>
		</isQueryEXT>
		<beginQueryEXT public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer starts when all commands prior to `beginQueryEXT` have been fully executed.</haxe_doc>
		</beginQueryEXT>
		<endQueryEXT public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer stops when all commands prior to `endQueryEXT` have been fully executed.</haxe_doc>
		</endQueryEXT>
		<queryCounterEXT public="1" set="method">
			<f a="query:target">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Records the current time into the corresponding query object.</haxe_doc>
		</queryCounterEXT>
		<getQueryEXT public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query target.</haxe_doc>
		</getQueryEXT>
		<getQueryObjectEXT public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Return the state of a query object.</haxe_doc>
		</getQueryObjectEXT>
		<haxe_doc><![CDATA[The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.

	Documentation [EXT_disjoint_timer_query](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_disjoint_timer_query"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTFragDepth" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTFragDepth.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.EXTShaderTextureLod" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTShaderTextureLod.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTSrgb" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTSrgb.hx" extern="1">
		<SRGB_EXT public="1" get="inline" set="null" expr="35904" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
			<haxe_doc>Unsized sRGB format that leaves the precision up to the driver.</haxe_doc>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" get="inline" set="null" expr="35906" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35906</e></m></meta>
			<haxe_doc>Unsized sRGB format with unsized alpha component.</haxe_doc>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" get="inline" set="null" expr="35907" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
			<haxe_doc>Sized (8-bit) sRGB and alpha formats.</haxe_doc>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" get="inline" set="null" expr="33296" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
			<haxe_doc>Returns the framebuffer color encoding (`gl.LINEAR` or `ext.SRGB_EXT`).</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<haxe_doc><![CDATA[The `EXT_sRGB` extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.

	Documentation [EXT_sRGB](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_sRGB"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTTextureFilterAnisotropic" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/EXTTextureFilterAnisotropic.hx" extern="1">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34046" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34046</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getTexParameter` and `WebGLRenderingContext.texParameterf` / `WebGLRenderingContext.texParameteri` calls and sets the desired maximum anisotropy for a texture.</haxe_doc>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34047" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34047</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getParameter` call, and it returns the maximum available anisotropy.</haxe_doc>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<haxe_doc><![CDATA[The `EXT_texture_filter_anisotropic` extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).

	Documentation [EXT_texture_filter_anisotropic](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_texture_filter_anisotropic"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESElementIndexUint" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESElementIndexUint.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESStandardDerivatives" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESStandardDerivatives.hx" extern="1">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" get="inline" set="null" expr="35723" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
			<haxe_doc>A `Glenum` indicating the accuracy of the derivative calculation for the GLSL built-in functions: `dFdx`, `dFdy`, and `fwidth`.</haxe_doc>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<haxe_doc><![CDATA[The `OES_standard_derivatives` extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.

	Documentation [OES_standard_derivatives](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_standard_derivatives"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureFloat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESTextureFloat.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.OESTextureFloatLinear" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESTextureFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESTextureHalfFloat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESTextureHalfFloat.hx" extern="1">
		<HALF_FLOAT_OES public="1" get="inline" set="null" expr="36193" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36193</e></m></meta>
			<haxe_doc>Half floating-point type (16-bit).</haxe_doc>
		</HALF_FLOAT_OES>
		<haxe_doc><![CDATA[The `OES_texture_half_float` extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.

	Documentation [OES_texture_half_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureHalfFloatLinear" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESTextureHalfFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESVertexArrayObject" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/OESVertexArrayObject.hx" extern="1">
		<VERTEX_ARRAY_BINDING_OES public="1" get="inline" set="null" expr="34229" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
			<haxe_doc>Returns a `WebGLVertexArrayObject` object when used in the `WebGLRenderingContext.getParameter()` method as the `pname` parameter.</haxe_doc>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArrayOES>
		<haxe_doc><![CDATA[The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.

	Documentation [OES_vertex_array_object](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_vertex_array_object"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLColorBufferFloat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLColorBufferFloat.hx" extern="1">
		<RGBA32F_EXT public="1" get="inline" set="null" expr="34836" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
			<haxe_doc>RGBA 32-bit floating-point color-renderable format.</haxe_doc>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" get="inline" set="null" expr="34837" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
			<haxe_doc>RGB 32-bit floating-point color-renderable format.</haxe_doc>
		</RGB32F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `WEBGL_color_buffer_float` extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.

	Documentation [WEBGL_color_buffer_float](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_color_buffer_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAstc" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTextureAstc.hx" extern="1">
		<COMPRESSED_RGBA_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37808" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37808</e></m></meta>
		</COMPRESSED_RGBA_ASTC_4x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37809" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37809</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37810" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37810</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37811" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37811</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37812" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37812</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37813" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37813</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x5_KHR>
		<COMPRESSED_RGBA_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37814" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37814</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37815" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37815</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37816" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37816</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x5_KHR>
		<COMPRESSED_RGBA_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37817" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37817</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x6_KHR>
		<COMPRESSED_RGBA_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37818" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37818</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37819" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37819</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37820" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37820</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37821" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37821</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x12_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37840" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37840</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37841" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37841</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37842" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37842</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37843" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37843</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37844" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37844</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37845" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37845</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37846" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37846</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37847" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37847</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37848" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37848</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37849" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37849</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37850" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37850</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37851" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37851</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37852" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37852</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37853" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37853</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
		<getSupportedProfiles public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedProfiles>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_astc` extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.

	Documentation [WEBGL_compressed_texture_astc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_astc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAtc" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTextureAtc.hx" extern="1">
		<COMPRESSED_RGB_ATC_WEBGL public="1" get="inline" set="null" expr="35986" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35986</e></m></meta>
			<haxe_doc>Compresses RGB textures with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ATC_WEBGL>
		<COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL public="1" get="inline" set="null" expr="35987" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35987</e></m></meta>
			<haxe_doc>Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).</haxe_doc>
		</COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL>
		<COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL public="1" get="inline" set="null" expr="34798" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34798</e></m></meta>
			<haxe_doc>Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).</haxe_doc>
		</COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_atc` extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.

	Documentation [WEBGL_compressed_texture_atc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_atc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTextureEtc.hx" extern="1">
		<COMPRESSED_R11_EAC public="1" get="inline" set="null" expr="37488" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37488</e></m></meta>
			<haxe_doc>One-channel (red) unsigned format compression.</haxe_doc>
		</COMPRESSED_R11_EAC>
		<COMPRESSED_SIGNED_R11_EAC public="1" get="inline" set="null" expr="37489" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37489</e></m></meta>
			<haxe_doc>One-channel (red) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_R11_EAC>
		<COMPRESSED_RG11_EAC public="1" get="inline" set="null" expr="37490" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37490</e></m></meta>
			<haxe_doc>Two-channel (red and green) unsigned format compression.</haxe_doc>
		</COMPRESSED_RG11_EAC>
		<COMPRESSED_SIGNED_RG11_EAC public="1" get="inline" set="null" expr="37491" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37491</e></m></meta>
			<haxe_doc>Two-channel (red and green) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_RG11_EAC>
		<COMPRESSED_RGB8_ETC2 public="1" get="inline" set="null" expr="37492" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37492</e></m></meta>
			<haxe_doc>Compresses RGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB8_ETC2>
		<COMPRESSED_SRGB8_ETC2 public="1" get="inline" set="null" expr="37493" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37493</e></m></meta>
			<haxe_doc>Compresses sRGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_SRGB8_ETC2>
		<COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37494" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37494</e></m></meta>
			<haxe_doc>Similar to `RGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37495" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37495</e></m></meta>
			<haxe_doc>Similar to `SRGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_RGBA8_ETC2_EAC public="1" get="inline" set="null" expr="37496" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37496</e></m></meta>
			<haxe_doc>Compresses RGBA8 data. The RGB part is encoded the same as `RGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_RGBA8_ETC2_EAC>
		<COMPRESSED_SRGB8_ALPHA8_ETC2_EAC public="1" get="inline" set="null" expr="37497" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37497</e></m></meta>
			<haxe_doc>Compresses sRGBA8 data. The sRGB part is encoded the same as `SRGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc` extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.

	Documentation [WEBGL_compressed_texture_etc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc1" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTextureEtc1.hx" extern="1">
		<COMPRESSED_RGB_ETC1_WEBGL public="1" get="inline" set="null" expr="36196" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36196</e></m></meta>
			<haxe_doc>Compresses 24-bit RGB data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ETC1_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc1` extension is part of the WebGL API and exposes the ETC1 compressed texture format.

	Documentation [WEBGL_compressed_texture_etc1](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc1"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTexturePvrtc.hx" extern="1">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35840" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35840</e></m></meta>
			<haxe_doc>RGB compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35841" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35841</e></m></meta>
			<haxe_doc>RGB compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35842" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35842</e></m></meta>
			<haxe_doc>RGBA compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35843" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35843</e></m></meta>
			<haxe_doc>RGBA compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_pvrtc` extension is part of the WebGL API and exposes four PVRTC compressed texture formats.

	Documentation [WEBGL_compressed_texture_pvrtc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_pvrtc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tc" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTextureS3tc.hx" extern="1">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33776" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33776</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format.</haxe_doc>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33777" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33777</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="33778" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33778</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="33779" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33779</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc` extension is part of the WebGL API and exposes four S3TC compressed texture formats.

	Documentation [WEBGL_compressed_texture_s3tc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLCompressedTextureS3tcSrgb.hx" extern="1">
		<COMPRESSED_SRGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35916</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format.</haxe_doc>
		</COMPRESSED_SRGB_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35917</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="35918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35918</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="35919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35919</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc_srgb` extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.

	Documentation [WEBGL_compressed_texture_s3tc_srgb](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc_srgb"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDebugRendererInfo" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLDebugRendererInfo.hx" extern="1">
		<UNMASKED_VENDOR_WEBGL public="1" get="inline" set="null" expr="37445" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37445</e></m></meta>
		</UNMASKED_VENDOR_WEBGL>
		<UNMASKED_RENDERER_WEBGL public="1" get="inline" set="null" expr="37446" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37446</e></m></meta>
		</UNMASKED_RENDERER_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_debug_renderer_info` extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.

	Documentation [WEBGL_debug_renderer_info](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_renderer_info"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLDebugShaders" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLDebugShaders.hx"><a><getTranslatedShaderSource set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getTranslatedShaderSource></a></typedef>
	<class path="js.html.webgl.extension.WEBGLDepthTexture" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLDepthTexture.hx" extern="1">
		<UNSIGNED_INT_24_8_WEBGL public="1" get="inline" set="null" expr="34042" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
			<haxe_doc>Unsigned integer type for 24-bit depth texture data.</haxe_doc>
		</UNSIGNED_INT_24_8_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_depth_texture` extension is part of the WebGL API and defines 2D depth and depth-stencil textures.

	Documentation [WEBGL_depth_texture](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_depth_texture"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDrawBuffers" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLDrawBuffers.hx" extern="1">
		<COLOR_ATTACHMENT0_WEBGL public="1" get="inline" set="null" expr="36064" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
			<haxe_doc>A `GLenum` specifying a color buffer.</haxe_doc>
		</COLOR_ATTACHMENT0_WEBGL>
		<COLOR_ATTACHMENT1_WEBGL public="1" get="inline" set="null" expr="36065" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1_WEBGL>
		<COLOR_ATTACHMENT2_WEBGL public="1" get="inline" set="null" expr="36066" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2_WEBGL>
		<COLOR_ATTACHMENT3_WEBGL public="1" get="inline" set="null" expr="36067" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3_WEBGL>
		<COLOR_ATTACHMENT4_WEBGL public="1" get="inline" set="null" expr="36068" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4_WEBGL>
		<COLOR_ATTACHMENT5_WEBGL public="1" get="inline" set="null" expr="36069" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5_WEBGL>
		<COLOR_ATTACHMENT6_WEBGL public="1" get="inline" set="null" expr="36070" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6_WEBGL>
		<COLOR_ATTACHMENT7_WEBGL public="1" get="inline" set="null" expr="36071" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7_WEBGL>
		<COLOR_ATTACHMENT8_WEBGL public="1" get="inline" set="null" expr="36072" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8_WEBGL>
		<COLOR_ATTACHMENT9_WEBGL public="1" get="inline" set="null" expr="36073" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9_WEBGL>
		<COLOR_ATTACHMENT10_WEBGL public="1" get="inline" set="null" expr="36074" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10_WEBGL>
		<COLOR_ATTACHMENT11_WEBGL public="1" get="inline" set="null" expr="36075" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11_WEBGL>
		<COLOR_ATTACHMENT12_WEBGL public="1" get="inline" set="null" expr="36076" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12_WEBGL>
		<COLOR_ATTACHMENT13_WEBGL public="1" get="inline" set="null" expr="36077" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13_WEBGL>
		<COLOR_ATTACHMENT14_WEBGL public="1" get="inline" set="null" expr="36078" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14_WEBGL>
		<COLOR_ATTACHMENT15_WEBGL public="1" get="inline" set="null" expr="36079" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15_WEBGL>
		<DRAW_BUFFER0_WEBGL public="1" get="inline" set="null" expr="34853" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
			<haxe_doc>A `GLenum` returning a draw buffer.</haxe_doc>
		</DRAW_BUFFER0_WEBGL>
		<DRAW_BUFFER1_WEBGL public="1" get="inline" set="null" expr="34854" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1_WEBGL>
		<DRAW_BUFFER2_WEBGL public="1" get="inline" set="null" expr="34855" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2_WEBGL>
		<DRAW_BUFFER3_WEBGL public="1" get="inline" set="null" expr="34856" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3_WEBGL>
		<DRAW_BUFFER4_WEBGL public="1" get="inline" set="null" expr="34857" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4_WEBGL>
		<DRAW_BUFFER5_WEBGL public="1" get="inline" set="null" expr="34858" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5_WEBGL>
		<DRAW_BUFFER6_WEBGL public="1" get="inline" set="null" expr="34859" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6_WEBGL>
		<DRAW_BUFFER7_WEBGL public="1" get="inline" set="null" expr="34860" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7_WEBGL>
		<DRAW_BUFFER8_WEBGL public="1" get="inline" set="null" expr="34861" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8_WEBGL>
		<DRAW_BUFFER9_WEBGL public="1" get="inline" set="null" expr="34862" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9_WEBGL>
		<DRAW_BUFFER10_WEBGL public="1" get="inline" set="null" expr="34863" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10_WEBGL>
		<DRAW_BUFFER11_WEBGL public="1" get="inline" set="null" expr="34864" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11_WEBGL>
		<DRAW_BUFFER12_WEBGL public="1" get="inline" set="null" expr="34865" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12_WEBGL>
		<DRAW_BUFFER13_WEBGL public="1" get="inline" set="null" expr="34866" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13_WEBGL>
		<DRAW_BUFFER14_WEBGL public="1" get="inline" set="null" expr="34867" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14_WEBGL>
		<DRAW_BUFFER15_WEBGL public="1" get="inline" set="null" expr="34868" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15_WEBGL>
		<MAX_COLOR_ATTACHMENTS_WEBGL public="1" get="inline" set="null" expr="36063" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of framebuffer color attachment points.</haxe_doc>
		</MAX_COLOR_ATTACHMENTS_WEBGL>
		<MAX_DRAW_BUFFERS_WEBGL public="1" get="inline" set="null" expr="34852" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of draw buffers.</haxe_doc>
		</MAX_DRAW_BUFFERS_WEBGL>
		<drawBuffersWEBGL public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the draw buffers to which all fragment colors are written. (When using `WebGL2RenderingContext`, this method is available as `WebGL2RenderingContext.drawBuffers()` by default).</haxe_doc>
		</drawBuffersWEBGL>
		<haxe_doc><![CDATA[The `WEBGL_draw_buffers` extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.

	Documentation [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_draw_buffers"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLLoseContext" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/html/webgl/extension/WEBGLLoseContext.hx"><a>
	<restoreContext set="method"><f a=""><x path="Void"/></f></restoreContext>
	<loseContext set="method"><f a=""><x path="Void"/></f></loseContext>
</a></typedef>
	<class path="js.lib.ArrayBuffer" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"ArrayBuffer"</e></m>
		</meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint8Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.DataView" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"DataView"</e></m>
		</meta>
	</class>
	<class path="js.lib.Error" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Float32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Object" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="TSource:TDest" set="method" static="1">
			<f a="target:sources">
				<c path="assign.TSource"/>
				<t path="haxe.extern.Rest"><a/></t>
				<c path="assign.TDest"/>
			</f>
			<haxe_doc>The Object.assign() method is used to copy the values of all enumerable
		own properties from one or more source objects to a target object. It
		will return the target object.

		Note: this is an ES2015 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<x path="Null"><a/></x>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"><x path="Any"/></t></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>The Object.create() method create a new object, using an existing object
		to provide the newly created object's __proto__ . (see browser console
		for visual evidence.)

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"><x path="Any"/></t></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>The Object.defineProperties() method defines new or modifies existing
		properties directly on an object, returning the object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T:TProp" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"><c path="defineProperty.TProp"/></t>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>The static method Object.defineProperty() defines a new property directly
		on an object, or modifies an existing property on an object, and returns
		the object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</haxe_doc>
			<overloads><defineProperty public="1" params="T:TProp" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"><c path="defineProperty.TProp"/></t>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>The static method Object.defineProperty() defines a new property directly
		on an object, or modifies an existing property on an object, and returns
		the object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="entries.T"/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>The Object.entries() method returns an array of a given object's own
		enumerable property [key, value] pairs, in the same order as that
		provided by a for...in loop (the difference being that a for-in loop
		enumerates properties in the prototype chain as well).

		Note: this is an ES2017 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>The Object.freeze() method freezes an object: that is, prevents new
		properties from being added to it; prevents existing properties from
		being removed; and prevents existing properties, or their enumerability,
		configurability, or writability, from being changed, it also prevents the
		prototype from being changed.
		The method returns the passed object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" params="T:TProp" set="method" static="1">
			<f a="obj:prop">
				<c path="getOwnPropertyDescriptor.T"/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"><c path="getOwnPropertyDescriptor.TProp"/></t></x>
			</f>
			<haxe_doc>The Object.getOwnPropertyDescriptor() method returns a property
		descriptor for an own property (that is, one directly present on an
		object and not in the object's prototype chain) of a given object.

		In ES5, if the first argument to this method is not an object (a
		primitive), then it will cause a TypeError. In ES2015, a non-object
		first argument will be coerced to an object at first.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<c path="String"/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"><c path="String"/></t></x>
					</f>
					<haxe_doc>The Object.getOwnPropertyDescriptor() method returns a property
		descriptor for an own property (that is, one directly present on an
		object and not in the object's prototype chain) of a given object.

		In ES5, if the first argument to this method is not an object (a
		primitive), then it will cause a TypeError. In ES2015, a non-object
		first argument will be coerced to an object at first.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<c path="String"/>
						<c path="String"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"><c path="String"/></t></x>
					</f>
					<haxe_doc>The Object.getOwnPropertyDescriptor() method returns a property
		descriptor for an own property (that is, one directly present on an
		object and not in the object's prototype chain) of a given object.

		In ES5, if the first argument to this method is not an object (a
		primitive), then it will cause a TypeError. In ES2015, a non-object
		first argument will be coerced to an object at first.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"><c path="getOwnPropertyDescriptor.T"/></t></x>
					</f>
					<haxe_doc>The Object.getOwnPropertyDescriptor() method returns a property
		descriptor for an own property (that is, one directly present on an
		object and not in the object's prototype chain) of a given object.

		In ES5, if the first argument to this method is not an object (a
		primitive), then it will cause a TypeError. In ES2015, a non-object
		first argument will be coerced to an object at first.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" params="T:TProp" set="method">
					<f a="obj:prop">
						<c path="getOwnPropertyDescriptor.T"/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"><c path="getOwnPropertyDescriptor.TProp"/></t></x>
					</f>
					<haxe_doc>The Object.getOwnPropertyDescriptor() method returns a property
		descriptor for an own property (that is, one directly present on an
		object and not in the object's prototype chain) of a given object.

		In ES5, if the first argument to this method is not an object (a
		primitive), then it will cause a TypeError. In ES2015, a non-object
		first argument will be coerced to an object at first.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyDescriptors public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="getOwnPropertyDescriptors.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"><x path="Any"/></t></x>
			</f>
			<haxe_doc>The Object.getOwnPropertyDescriptors() method returns all own property
		descriptors of a given object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptors public="1" set="method">
					<f a="target">
						<c path="String"/>
						<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"><c path="String"/></t></x>
					</f>
					<haxe_doc>The Object.getOwnPropertyDescriptors() method returns all own property
		descriptors of a given object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors</haxe_doc>
				</getOwnPropertyDescriptors>
				<getOwnPropertyDescriptors public="1" params="T" set="method">
					<f a="target">
						<c path="Array"><c path="getOwnPropertyDescriptors.T"/></c>
						<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"><c path="getOwnPropertyDescriptors.T"/></t></x>
					</f>
					<haxe_doc>The Object.getOwnPropertyDescriptors() method returns all own property
		descriptors of a given object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors</haxe_doc>
				</getOwnPropertyDescriptors>
			</overloads>
		</getOwnPropertyDescriptors>
		<getOwnPropertyNames public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="getOwnPropertyNames.T"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>The Object.getOwnPropertyNames() method returns an array of all
		properties (including non-enumerable properties except for those which
		use Symbol) found directly upon a given object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="getOwnPropertySymbols.T"/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>The Object.getOwnPropertySymbols() method returns an array of all symbol
		properties found directly upon a given object.

		Note: this is an ES2015 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="T:TProto" set="method" static="1">
			<f a="obj">
				<c path="getPrototypeOf.T"/>
				<c path="getPrototypeOf.TProto"/>
			</f>
			<haxe_doc>The Object.getPrototypeOf() method returns the prototype (i.e. the value
		of the internal [[Prototype]] property) of the specified object.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf</haxe_doc>
		</getPrototypeOf>
		<isSame public="1" params="T" set="method" static="1">
			<f a="obj1:obj2">
				<c path="isSame.T"/>
				<c path="isSame.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"is"</e></m></meta>
			<haxe_doc>The Object.is() method determines whether two values are the same value.

		Note: this is an ES2015 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is</haxe_doc>
		</isSame>
		<is public="1" params="T" set="method" static="1">
			<f a="obj1:obj2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Use Object.isSame()"</e></m></meta>
			<haxe_doc>The Object.is() method determines whether two values are the same value.

		Note: this is an ES2015 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is</haxe_doc>
		</is>
		<isExtensible public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="isExtensible.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The Object.isExtensible() method determines if an object is extensible
		(whether it can have new properties added to it).

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible</haxe_doc>
		</isExtensible>
		<isFrozen public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="isFrozen.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The Object.isFrozen() determines if an object is frozen.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen</haxe_doc>
		</isFrozen>
		<isSealed public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="isSealed.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The Object.isSealed() method determines if an object is sealed.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed</haxe_doc>
		</isSealed>
		<keys public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="keys.T"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>The Object.keys() method returns an array of a given object's own
		enumerable properties, in the same order as that provided by a for...in
		loop (the difference being that a for-in loop enumerates properties in
		the prototype chain as well).

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>The Object.preventExtensions() method prevents new properties from ever
		being added to an object (i.e. prevents future extensions to the object).

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>The Object.seal() method seals an object, preventing new properties from
		being added to it and marking all existing properties as
		non-configurable. Values of present properties can still be changed as
		long as they are writable.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T:TProto" set="method" static="1">
			<f a="obj:proto">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><c path="setPrototypeOf.TProto"/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>The Object.setPrototypeOf() method sets the prototype (i.e., the internal
		[[Prototype]] property) of a specified object to another object or null.

		Note: this is an ES2015 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf</haxe_doc>
		</setPrototypeOf>
		<values public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="values.T"/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>The Object.values() method returns an array of a given object's own
		enumerable property values, in the same order as that provided by a
		for...in loop (the difference being that a for-in loop enumerates
		properties in the prototype chain as well).

		Note: this is an ES2017 feature

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="TProp" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.
		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><c path="js.lib.ObjectPropertyDescriptor.TProp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<c path="js.lib.ObjectPropertyDescriptor.TProp"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><c path="js.lib.ObjectPropertyDescriptor.TProp"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.
		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.
		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="all.T"/></c></c>
				<c path="js.lib.Promise"><c path="Array"><c path="all.T"/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
			<overloads><all public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><c path="Array"><d/></c></c>
	</f>
	<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
</all></overloads>
		</all>
		<allSettled public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="allSettled.T"/></c></c>
				<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"><c path="allSettled.T"/></t></c></c>
			</f>
			<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
			<overloads><allSettled public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"><d/></t></c></c>
	</f>
	<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
</allSettled></overloads>
		</allSettled>
		<race public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="race.T"/></c></c>
				<c path="js.lib.Promise"><c path="race.T"/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
			<overloads><race public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
</race></overloads>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<typedef path="js.lib.PromiseSettleOutcome" params="T" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" module="js.lib.Promise"><a>
	<value>
		<x path="Null"><c path="js.lib.PromiseSettleOutcome.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<status><x path="js.lib.PromiseSettleStatus"/></status>
	<reason>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</reason>
</a></typedef>
	<abstract path="js.lib.PromiseSettleStatus" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" module="js.lib.Promise">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib._Promise.PromiseSettleStatus_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.RegExpMatch" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>The Symbol.for(key) method searches for existing symbols in a
		runtime-wide symbol registry with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with
		this key.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>The Symbol.keyFor(sym) method retrieves a shared symbol key from the
		global symbol registry for the given symbol.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<match public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that matches against a string, also used to determine if an
		object may be used as a regular expression. Used by
		String.prototype.match().</haxe_doc>
		</match>
		<replace public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that replaces matched substrings of a string. Used by
		String.prototype.replace().</haxe_doc>
		</replace>
		<search public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the index within a string that matches the regular
		expression. Used by String.prototype.search().</haxe_doc>
		</search>
		<split public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that splits a string at the indices that match a regular
		expression. Used by String.prototype.split().</haxe_doc>
		</split>
		<hasInstance public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method determining if a constructor object recognizes an object as its
		instance. Used by instanceof.</haxe_doc>
		</hasInstance>
		<isConcatSpreadable public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A Boolean value indicating if an object should be flattened to its array
		elements. Used by Array.prototype.concat().</haxe_doc>
		</isConcatSpreadable>
		<unscopables public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>An object value of whose own and inherited property names are excluded
		from the with environment bindings of the associated object.</haxe_doc>
		</unscopables>
		<species public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A constructor function that is used to create derived objects.</haxe_doc>
		</species>
		<toPrimitive public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method converting an object to a primitive value.</haxe_doc>
		</toPrimitive>
		<toStringTag public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A string value used for the default description of an object. Used by
		Object.prototype.toString().</haxe_doc>
		</toStringTag>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="134">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.
		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.

		See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint8ClampedArray"</e></m>
		</meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/home/nanjizalmac/haxe/versions/1423a5f/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<class path="justGraphix.JustGraphixDoc" params="" file="src/justGraphix/JustGraphixDoc.hx">
		<main public="1" set="method" line="7" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="justGraphix.color.ColorHelp" params="" file="src/justGraphix/color/ColorHelp.hx">
		<htmlRGBA_ public="1" expr="htmlRGBA">
			<f a="r_:g_:b_:a_">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>htmlRGBA</e></m></meta>
		</htmlRGBA_>
		<stringColor_ public="1" expr="stringColor">
			<f a="col:?alpha">
				<x path="Int"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>stringColor</e></m></meta>
		</stringColor_>
		<stringHashARGB_ public="1" expr="stringHashARGB">
			<f a="col">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>stringHashARGB</e></m></meta>
		</stringHashARGB_>
		<htmlHex_ public="1" expr="htmlHex">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>htmlHex</e></m></meta>
		</htmlHex_>
		<rgbInt_ public="1" expr="rgbInt">
			<f a="c">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rgbInt</e></m></meta>
		</rgbInt_>
		<colorAlpha_ public="1" expr="colorAlpha">
			<f a="color:alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>colorAlpha</e></m></meta>
		</colorAlpha_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<argbInt_ public="1" expr="argbInt">
			<f a="a:r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbInt</e></m></meta>
		</argbInt_>
		<argbIntAvg_ public="1" expr="argbIntAvg">
			<f a="c0:c1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbIntAvg</e></m></meta>
		</argbIntAvg_>
		<luminosityGrey_ public="1" expr="luminosityGrey">
			<f a="color:useAlpha">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>luminosityGrey</e></m></meta>
		</luminosityGrey_>
		<sepia_ public="1" expr="sepia">
			<f a="color">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>sepia</e></m></meta>
		</sepia_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<alphaAvg_ public="1" expr="alphaAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaAvg</e></m></meta>
		</alphaAvg_>
		<redAvg_ public="1" expr="redAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redAvg</e></m></meta>
		</redAvg_>
		<greenAvg_ public="1" expr="greenAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenAvg</e></m></meta>
		</greenAvg_>
		<blueAvg_ public="1" expr="blueAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueAvg</e></m></meta>
		</blueAvg_>
		<clampClosed01_ public="1" expr="clampClosed01">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>clampClosed01</e></m></meta>
		</clampClosed01_>
		<new public="1" set="method" line="3">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.color._ColorHelp.ColorHelp_Fields_" params="" file="src/justGraphix/color/ColorHelp.hx" private="1" module="justGraphix.color.ColorHelp" final="1">
		<htmlRGBA public="1" get="inline" set="null" line="31" static="1"><f a="r_:g_:b_:a_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
</f></htmlRGBA>
		<stringColor public="1" get="inline" set="null" line="39" static="1"><f a="col:?alpha">
	<x path="Int"/>
	<x path="Float"/>
	<c path="String"/>
</f></stringColor>
		<stringHashARGB public="1" get="inline" set="null" line="51" static="1"><f a="col">
	<x path="Int"/>
	<c path="String"/>
</f></stringHashARGB>
		<htmlHex public="1" get="inline" set="null" line="54" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
</f></htmlHex>
		<from_rgb public="1" get="inline" set="null" line="59" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_rgb>
		<alphaChannel public="1" get="inline" set="null" line="65" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="68" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="71" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="74" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<AplusRGB public="1" get="inline" set="null" line="77" static="1"><f a="col:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></AplusRGB>
		<argbInt public="1" get="inline" set="null" line="80" static="1"><f a="a:r:g:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbInt>
		<avg public="1" get="inline" set="null" line="83" static="1"><f a="p:q">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></avg>
		<between public="1" get="inline" set="null" line="86" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</between>
		<alphaAvg public="1" get="inline" set="null" line="89" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alphaAvg>
		<alphaBetween public="1" get="inline" set="null" line="92" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</alphaBetween>
		<redAvg public="1" get="inline" set="null" line="95" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></redAvg>
		<redBetween public="1" get="inline" set="null" line="98" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</redBetween>
		<greenAvg public="1" get="inline" set="null" line="101" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></greenAvg>
		<greenBetween public="1" get="inline" set="null" line="104" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</greenBetween>
		<blueAvg public="1" get="inline" set="null" line="107" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></blueAvg>
		<blueBetween public="1" get="inline" set="null" line="110" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</blueBetween>
		<from_argb public="1" get="inline" set="null" line="113" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<argbIntAvg public="1" get="inline" set="null" line="119" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbIntAvg>
		<argbIntBetween public="1" get="inline" set="null" line="125" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</argbIntBetween>
		<getBlack public="1" get="inline" set="null" line="130" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getBlack>
		<hexToARGB public="1" get="inline" set="null" line="134" static="1"><f a="int">
	<x path="Int"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></hexToARGB>
		<toHexInt public="1" get="inline" set="null" line="143" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbInt public="1" get="inline" set="null" line="146" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></rgbInt>
		<getAlpha public="1" get="inline" set="null" line="150" static="1"><f a="c">
	<x path="Float"/>
	<x path="Float"/>
</f></getAlpha>
		<alpha1 public="1" get="inline" set="null" line="153" static="1"><f a=""><x path="Float"/></f></alpha1>
		<getColor public="1" get="inline" set="null" line="156" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></getColor>
		<colorAlpha public="1" get="inline" set="null" line="161" static="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colorAlpha>
		<colorIntAlpha public="1" get="inline" set="null" line="165" static="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></colorIntAlpha>
		<luminosityGrey public="1" get="inline" set="null" line="169" static="1">
			<f a="color:?useAlpha" v=":true">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ useAlpha : true }</e></m></meta>
		</luminosityGrey>
		<sepia public="1" get="inline" set="null" line="184" static="1"><f a="color">
	<x path="Int"/>
	<x path="Int"/>
</f></sepia>
		<clampClosed01 public="1" get="inline" set="null" line="192" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></clampClosed01>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.color.ColorPercent" params="" file="src/justGraphix/color/ColorPercent.hx">
		<percentHex public="1" get="accessor" set="null" static="1"><c path="Array"><x path="Int"/></c></percentHex>
		<get_percentHex get="inline" set="null" line="5" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></get_percentHex>
		<percentWhite public="1" get="inline" set="null" line="19" static="1"><f a="percent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentWhite>
		<percentBlack public="1" get="inline" set="null" line="24" static="1"><f a="percent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentBlack>
		<rgbPercent public="1" get="inline" set="null" line="29" static="1"><f a="rPercent:gPercent:bPercent">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rgbPercent>
		<argb public="1" get="inline" set="null" line="33" static="1"><f a="a:r:g:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argb>
		<percentColor public="1" get="inline" set="null" line="37" static="1"><f a="rPercent:gPercent:bPercent">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentColor>
		<percentDarkColor public="1" get="inline" set="null" line="41" static="1"><f a="rPercent:gPercent:bPercent">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentDarkColor>
		<percentRed public="1" get="inline" set="null" line="45" static="1"><f a="rPercent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentRed>
		<percentGreen public="1" get="inline" set="null" line="49" static="1"><f a="gPercent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentGreen>
		<percentBlue public="1" get="inline" set="null" line="53" static="1"><f a="bPercent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentBlue>
		<percentRedSoft public="1" get="inline" set="null" line="57" static="1"><f a="rPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentRedSoft>
		<percentGreenSoft public="1" get="inline" set="null" line="62" static="1"><f a="gPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentGreenSoft>
		<percentBlueSoft public="1" get="inline" set="null" line="67" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentBlueSoft>
		<percentYellowSoft public="1" get="inline" set="null" line="72" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentYellowSoft>
		<percentMagentaSoft public="1" get="inline" set="null" line="78" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentMagentaSoft>
		<percentCyanSoft public="1" get="inline" set="null" line="84" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentCyanSoft>
	</class>
	<class path="justGraphix.color.ColorSpaceHelper" params="" file="src/justGraphix/color/ColorSpaceHelper.hx">
		<htmlRGBA_ public="1" expr="htmlRGBA">
			<f a="r_:g_:b_:a_">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>htmlRGBA</e></m></meta>
		</htmlRGBA_>
		<htmlHex_ public="1" expr="htmlHex">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>htmlHex</e></m></meta>
		</htmlHex_>
		<getBlack_ public="1" expr="getBlack">
			<f a="r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>getBlack</e></m></meta>
		</getBlack_>
		<from_oklab_ public="1" expr="from_oklab">
			<f a="L:a:b:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_oklab</e></m></meta>
		</from_oklab_>
		<to_oklab_ public="1" expr="to_oklab">
			<f a="v">
				<x path="Int"/>
				<x path="justGraphix.color.space.OKLAB"/>
			</f>
			<meta><m n=":value"><e>to_oklab</e></m></meta>
		</to_oklab_>
		<from_cymka_ public="1" expr="from_cymka">
			<f a="c:y:m:k:a">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_cymka</e></m></meta>
		</from_cymka_>
		<from_argb_ public="1" expr="from_argb">
			<f a="a:r:g:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>from_argb</e></m></meta>
		</from_argb_>
		<toHexInt_ public="1" expr="toHexInt">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toHexInt</e></m></meta>
		</toHexInt_>
		<rgbInt_ public="1" expr="rgbInt">
			<f a="c">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rgbInt</e></m></meta>
		</rgbInt_>
		<getAlpha_ public="1" expr="getAlpha">
			<f a="c">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>getAlpha</e></m></meta>
		</getAlpha_>
		<getColor_ public="1" expr="getColor">
			<f a="c">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>getColor</e></m></meta>
		</getColor_>
		<colorAlpha_ public="1" expr="colorAlpha">
			<f a="color:alpha">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>colorAlpha</e></m></meta>
		</colorAlpha_>
		<AplusRGB_ public="1" expr="AplusRGB">
			<f a="col:alpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>AplusRGB</e></m></meta>
		</AplusRGB_>
		<colorIntAlpha_ public="1" expr="colorIntAlpha">
			<f a="color:alpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>colorIntAlpha</e></m></meta>
		</colorIntAlpha_>
		<rgbConvert_ public="1" expr="rgbConvert">
			<f a="color:k">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rgbConvert</e></m></meta>
		</rgbConvert_>
		<cymkConvert_ public="1" expr="cymkConvert">
			<f a="color:black">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cymkConvert</e></m></meta>
		</cymkConvert_>
		<alphaChannel_ public="1" expr="alphaChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaChannel</e></m></meta>
		</alphaChannel_>
		<redChannel_ public="1" expr="redChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redChannel</e></m></meta>
		</redChannel_>
		<greenChannel_ public="1" expr="greenChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenChannel</e></m></meta>
		</greenChannel_>
		<blueChannel_ public="1" expr="blueChannel">
			<f a="int">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueChannel</e></m></meta>
		</blueChannel_>
		<alphaBetween_ public="1" expr="alphaBetween">
			<f a="a:b:t">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaBetween</e></m></meta>
		</alphaBetween_>
		<redBetween_ public="1" expr="redBetween">
			<f a="a:b:t">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redBetween</e></m></meta>
		</redBetween_>
		<greenBetween_ public="1" expr="greenBetween">
			<f a="a:b:t">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenBetween</e></m></meta>
		</greenBetween_>
		<blueBetween_ public="1" expr="blueBetween">
			<f a="a:b:t">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueBetween</e></m></meta>
		</blueBetween_>
		<argbIntBetween_ public="1" expr="argbIntBetween">
			<f a="a:b:t">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbIntBetween</e></m></meta>
		</argbIntBetween_>
		<argbInt_ public="1" expr="argbInt">
			<f a="a:r:g:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbInt</e></m></meta>
		</argbInt_>
		<alphaAvg_ public="1" expr="alphaAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>alphaAvg</e></m></meta>
		</alphaAvg_>
		<redAvg_ public="1" expr="redAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>redAvg</e></m></meta>
		</redAvg_>
		<greenAvg_ public="1" expr="greenAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>greenAvg</e></m></meta>
		</greenAvg_>
		<blueAvg_ public="1" expr="blueAvg">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>blueAvg</e></m></meta>
		</blueAvg_>
		<argbIntAvg_ public="1" expr="argbIntAvg">
			<f a="c0:c1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>argbIntAvg</e></m></meta>
		</argbIntAvg_>
		<get_percentHex_ public="1" expr="get_percentHex">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<meta><m n=":value"><e>get_percentHex</e></m></meta>
		</get_percentHex_>
		<percentWhite_ public="1" expr="percentWhite">
			<f a="percent">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentWhite</e></m></meta>
		</percentWhite_>
		<percentBlack_ public="1" expr="percentBlack">
			<f a="percent">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentBlack</e></m></meta>
		</percentBlack_>
		<rgbPercent_ public="1" expr="rgbPercent">
			<f a="rPercent:gPercent:bPercent">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>rgbPercent</e></m></meta>
		</rgbPercent_>
		<percentColor_ public="1" expr="percentColor">
			<f a="rPercent:gPercent:bPercent">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentColor</e></m></meta>
		</percentColor_>
		<percentDarkColor_ public="1" expr="percentDarkColor">
			<f a="rPercent:gPercent:bPercent">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentDarkColor</e></m></meta>
		</percentDarkColor_>
		<percentRed_ public="1" expr="percentRed">
			<f a="rPercent">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentRed</e></m></meta>
		</percentRed_>
		<percentGreen_ public="1" expr="percentGreen">
			<f a="gPercent">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentGreen</e></m></meta>
		</percentGreen_>
		<percentBlue_ public="1" expr="percentBlue">
			<f a="bPercent">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentBlue</e></m></meta>
		</percentBlue_>
		<percentRedSoft_ public="1" expr="percentRedSoft">
			<f a="rPercent:percentSoft">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentRedSoft</e></m></meta>
		</percentRedSoft_>
		<percentGreenSoft_ public="1" expr="percentGreenSoft">
			<f a="gPercent:percentSoft">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentGreenSoft</e></m></meta>
		</percentGreenSoft_>
		<percentBlueSoft_ public="1" expr="percentBlueSoft">
			<f a="bPercent:percentSoft">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentBlueSoft</e></m></meta>
		</percentBlueSoft_>
		<percentYellowSoft_ public="1" expr="percentYellowSoft">
			<f a="bPercent:percentSoft">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentYellowSoft</e></m></meta>
		</percentYellowSoft_>
		<percentMagentaSoft_ public="1" expr="percentMagentaSoft">
			<f a="bPercent:percentSoft">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentMagentaSoft</e></m></meta>
		</percentMagentaSoft_>
		<percentCyanSoft_ public="1" expr="percentCyanSoft">
			<f a="bPercent:percentSoft">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>percentCyanSoft</e></m></meta>
		</percentCyanSoft_>
		<redOfi32_ public="1" expr="redOfi32">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>redOfi32</e></m></meta>
		</redOfi32_>
		<greenOfi32_ public="1" expr="greenOfi32">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>greenOfi32</e></m></meta>
		</greenOfi32_>
		<blueOfi32_ public="1" expr="blueOfi32">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>blueOfi32</e></m></meta>
		</blueOfi32_>
		<i8ifGreyOfi32_ public="1" expr="i8ifGreyOfi32">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>i8ifGreyOfi32</e></m></meta>
		</i8ifGreyOfi32_>
		<isGreyOfi32_ public="1" expr="isGreyOfi32">
			<f a="rgb">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>isGreyOfi32</e></m></meta>
		</isGreyOfi32_>
		<i8toString_ public="1" expr="i8toString">
			<f a="v">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>i8toString</e></m></meta>
		</i8toString_>
		<getIfGreyEmacsIndex_ public="1" expr="getIfGreyEmacsIndex">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>getIfGreyEmacsIndex</e></m></meta>
		</getIfGreyEmacsIndex_>
		<getIfGreyEmacsRGBi32_ public="1" expr="getIfGreyEmacsRGBi32">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>getIfGreyEmacsRGBi32</e></m></meta>
		</getIfGreyEmacsRGBi32_>
		<eliminate16s_ public="1" expr="eliminate16s">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>eliminate16s</e></m></meta>
		</eliminate16s_>
		<toEmacsIndex_ public="1" expr="toEmacsIndex">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>toEmacsIndex</e></m></meta>
		</toEmacsIndex_>
		<new public="1" set="method" line="465">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.color._ColorSpaceHelper.ColorSpaceHelper_Fields_" params="" file="src/justGraphix/color/ColorSpaceHelper.hx" private="1" module="justGraphix.color.ColorSpaceHelper" final="1">
		<between public="1" get="inline" set="null" line="6" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</between>
		<from_oklab public="1" get="inline" set="null" line="9" static="1"><f a="L:a:b:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_oklab>
		<to_oklab public="1" get="inline" set="null" line="22" static="1"><f a="v">
	<x path="Int"/>
	<x path="justGraphix.color.space.OKLAB"/>
</f></to_oklab>
		<from_oklch public="1" get="inline" set="null" line="41" static="1"><f a="L:c:h:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_oklch>
		<to_oklch public="1" get="inline" set="null" line="45" static="1"><f a="v">
	<x path="Int"/>
	<x path="justGraphix.color.space.OKLCH"/>
</f></to_oklch>
		<from_srlab2 public="1" set="method" line="53" static="1"><f a="v">
	<x path="justGraphix.color.space.SRLAB2"/>
	<x path="Int"/>
</f></from_srlab2>
		<to_srlab2 public="1" get="inline" set="null" line="70" static="1"><f a="v">
	<x path="Int"/>
	<x path="justGraphix.color.space.SRLAB2"/>
</f></to_srlab2>
		<from_srlch2 public="1" get="inline" set="null" line="90" static="1"><f a="v">
	<x path="justGraphix.color.space.SRLCH2"/>
	<x path="Int"/>
</f></from_srlch2>
		<to_srlch2 public="1" get="inline" set="null" line="94" static="1"><f a="v">
	<x path="Int"/>
	<x path="justGraphix.color.space.SRLCH2"/>
</f></to_srlch2>
		<from_cymka public="1" get="inline" set="null" line="103" static="1"><f a="c:y:m:k:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymka>
		<from_cymk public="1" get="inline" set="null" line="109" static="1"><f a="c:y:m:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_cymk>
		<from_argb public="1" set="method" line="114" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_argb>
		<from_rgb public="1" get="inline" set="null" line="120" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></from_rgb>
		<toHexInt public="1" set="method" line="125" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></toHexInt>
		<rgbInt public="1" get="inline" set="null" line="128" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></rgbInt>
		<getAlpha public="1" get="inline" set="null" line="132" static="1"><f a="c">
	<x path="Float"/>
	<x path="Float"/>
</f></getAlpha>
		<getColor public="1" get="inline" set="null" line="135" static="1"><f a="c">
	<x path="Float"/>
	<x path="Int"/>
</f></getColor>
		<colorAlpha public="1" get="inline" set="null" line="139" static="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colorAlpha>
		<AplusRGB public="1" get="inline" set="null" line="142" static="1"><f a="col:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></AplusRGB>
		<colorIntAlpha public="1" get="inline" set="null" line="145" static="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></colorIntAlpha>
		<rgbConvert public="1" get="inline" set="null" line="148" static="1"><f a="color:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rgbConvert>
		<cymkConvert public="1" get="inline" set="null" line="151" static="1"><f a="color:black">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cymkConvert>
		<alphaChannel public="1" get="inline" set="null" line="154" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="157" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="160" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="163" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<alphaBetween public="1" get="inline" set="null" line="166" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</alphaBetween>
		<redBetween public="1" get="inline" set="null" line="169" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</redBetween>
		<greenBetween public="1" get="inline" set="null" line="172" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</greenBetween>
		<blueBetween public="1" get="inline" set="null" line="175" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</blueBetween>
		<argbIntBetween public="1" get="inline" set="null" line="178" static="1">
			<f a="a:b:?t" v="::0.5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ t : 0.5 }</e></m></meta>
		</argbIntBetween>
		<colorDistance public="1" get="inline" set="null" line="183" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></colorDistance>
		<colorDistanceArr public="1" get="inline" set="null" line="191" static="1"><f a="a:bs">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></colorDistanceArr>
		<alphaDistance public="1" get="inline" set="null" line="215" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alphaDistance>
		<redDistance public="1" get="inline" set="null" line="218" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></redDistance>
		<greenDistance public="1" get="inline" set="null" line="221" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></greenDistance>
		<blueDistance public="1" get="inline" set="null" line="224" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></blueDistance>
		<argbInt public="1" get="inline" set="null" line="227" static="1"><f a="a:r:g:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbInt>
		<alphaAvg public="1" get="inline" set="null" line="230" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alphaAvg>
		<redAvg public="1" get="inline" set="null" line="233" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></redAvg>
		<greenAvg public="1" get="inline" set="null" line="236" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></greenAvg>
		<blueAvg public="1" get="inline" set="null" line="239" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></blueAvg>
		<argbIntAvg public="1" get="inline" set="null" line="241" static="1"><f a="c0:c1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></argbIntAvg>
		<percentHex public="1" get="accessor" set="null" static="1"><c path="Array"><x path="Int"/></c></percentHex>
		<get_percentHex public="1" get="inline" set="null" line="250" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></get_percentHex>
		<percentWhite public="1" get="inline" set="null" line="264" static="1"><f a="percent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentWhite>
		<percentBlack public="1" get="inline" set="null" line="269" static="1"><f a="percent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentBlack>
		<rgbPercent public="1" get="inline" set="null" line="274" static="1"><f a="rPercent:gPercent:bPercent">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rgbPercent>
		<percentColor public="1" get="inline" set="null" line="278" static="1"><f a="rPercent:gPercent:bPercent">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentColor>
		<percentDarkColor public="1" get="inline" set="null" line="282" static="1"><f a="rPercent:gPercent:bPercent">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentDarkColor>
		<percentRed public="1" get="inline" set="null" line="286" static="1"><f a="rPercent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentRed>
		<percentGreen public="1" get="inline" set="null" line="290" static="1"><f a="gPercent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentGreen>
		<percentBlue public="1" get="inline" set="null" line="294" static="1"><f a="bPercent">
	<x path="Int"/>
	<x path="Int"/>
</f></percentBlue>
		<percentRedSoft public="1" get="inline" set="null" line="298" static="1"><f a="rPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentRedSoft>
		<percentGreenSoft public="1" get="inline" set="null" line="303" static="1"><f a="gPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentGreenSoft>
		<percentBlueSoft public="1" get="inline" set="null" line="308" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentBlueSoft>
		<percentYellowSoft public="1" get="inline" set="null" line="313" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentYellowSoft>
		<percentMagentaSoft public="1" get="inline" set="null" line="319" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentMagentaSoft>
		<percentCyanSoft public="1" get="inline" set="null" line="325" static="1"><f a="bPercent:percentSoft">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></percentCyanSoft>
		<redOfi32 public="1" get="inline" set="null" line="335" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* rgb Int to red Int
 * extract red channel</haxe_doc>
		</redOfi32>
		<greenOfi32 public="1" get="inline" set="null" line="343" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* rgb Int to green Int
 * extract green channel</haxe_doc>
		</greenOfi32>
		<blueOfi32 public="1" get="inline" set="null" line="351" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* rgb Int to blue Int
 * extract blue channel</haxe_doc>
		</blueOfi32>
		<i8ifGreyOfi32 public="1" get="inline" set="null" line="358" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* extract channel _i8 if rgb Int is grey.</haxe_doc>
		</i8ifGreyOfi32>
		<isGreyOfi32 public="1" get="inline" set="null" line="366" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* rgb Int is grey.</haxe_doc>
		</isGreyOfi32>
		<i8toString public="1" get="inline" set="null" line="374" static="1">
			<f a="v">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* formats Int as Hex in form 0x00 to 0xFF</haxe_doc>
		</i8toString>
		<getIfGreyEmacsIndex public="1" get="inline" set="null" line="378" static="1"><f a="rgb">
	<x path="Int"/>
	<x path="Int"/>
</f></getIfGreyEmacsIndex>
		<getIfGreyEmacsRGBi32 public="1" get="inline" set="null" line="395" static="1"><f a="rgb">
	<x path="Int"/>
	<x path="Int"/>
</f></getIfGreyEmacsRGBi32>
		<eliminate16s public="1" get="inline" set="null" line="423" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* check if rgb i32 is one of first 16 emacs index</haxe_doc>
		</eliminate16s>
		<toEmacsIndex public="1" get="inline" set="null" line="448" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* convert rgb i32 into emacs index</haxe_doc>
		</toEmacsIndex>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.color.String_color" params="" file="src/justGraphix/color/String_color.hx">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>* String_color is aimed at use within html
     * if no alpha then #FFFFFF format otherwise in 
     * rgba($r,$g,$b,$alpha) format</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.color._String_color.String_color_Impl_" params="" file="src/justGraphix/color/String_color.hx" private="1" module="justGraphix.color.String_color" final="1">
	<_new get="inline" set="null" line="11" static="1">
		<f a="s">
			<c path="String"/>
			<x path="justGraphix.color.String_color"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<float_rgba public="1" get="inline" set="null" line="16" static="1"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.color.String_color"/>
</f></float_rgba>
	<int_rgba public="1" get="inline" set="null" line="20" static="1">
		<f a="col:?alpha" v=":1.">
			<x path="Int"/>
			<x path="Float"/>
			<x path="justGraphix.color.String_color"/>
		</f>
		<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
	</int_rgba>
	<isHex public="1" get="inline" set="null" line="23" static="1"><f a="this">
	<c path="String"/>
	<x path="Bool"/>
</f></isHex>
	<toInt public="1" get="inline" set="null" line="27" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></toInt>
	<toRGBA public="1" get="inline" set="null" line="37" static="1"><f a="this">
	<c path="String"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></toRGBA>
	<extractRGBA get="inline" set="null" line="45" static="1"><f a="this">
	<c path="String"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></extractRGBA>
</class></impl>
	</abstract>
	<class path="justGraphix.color._String_color.String_color_Impl_" params="" file="src/justGraphix/color/String_color.hx" private="1" module="justGraphix.color.String_color" final="1">
		<_new get="inline" set="null" line="11" static="1">
			<f a="s">
				<c path="String"/>
				<x path="justGraphix.color.String_color"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<float_rgba public="1" get="inline" set="null" line="16" static="1"><f a="r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.color.String_color"/>
</f></float_rgba>
		<int_rgba public="1" get="inline" set="null" line="20" static="1">
			<f a="col:?alpha" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="justGraphix.color.String_color"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
		</int_rgba>
		<isHex public="1" get="inline" set="null" line="23" static="1"><f a="this">
	<c path="String"/>
	<x path="Bool"/>
</f></isHex>
		<toInt public="1" get="inline" set="null" line="27" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></toInt>
		<toRGBA public="1" get="inline" set="null" line="37" static="1"><f a="this">
	<c path="String"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></toRGBA>
		<extractRGBA get="inline" set="null" line="45" static="1"><f a="this">
	<c path="String"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></extractRGBA>
	</class>
	<abstract path="justGraphix.color.String_hex" params="" file="src/justGraphix/color/String_hex.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.color._String_hex.String_hex_Impl_" params="" file="src/justGraphix/color/String_hex.hx" private="1" module="justGraphix.color.String_hex" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="s">
			<c path="String"/>
			<x path="justGraphix.color.String_hex"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<Int_hex8 public="1" get="inline" set="null" line="11" static="1"><f a="col">
	<x path="Int"/>
	<x path="justGraphix.color.String_hex"/>
</f></Int_hex8>
	<Float_hex6 public="1" get="inline" set="null" line="15" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.color.String_hex"/>
</f></Float_hex6>
</class></impl>
	</abstract>
	<class path="justGraphix.color._String_hex.String_hex_Impl_" params="" file="src/justGraphix/color/String_hex.hx" private="1" module="justGraphix.color.String_hex" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="s">
				<c path="String"/>
				<x path="justGraphix.color.String_hex"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<Int_hex8 public="1" get="inline" set="null" line="11" static="1"><f a="col">
	<x path="Int"/>
	<x path="justGraphix.color.String_hex"/>
</f></Int_hex8>
		<Float_hex6 public="1" get="inline" set="null" line="15" static="1"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.color.String_hex"/>
</f></Float_hex6>
	</class>
	<class path="justGraphix.color._SysPrint256.SysPrint256_Fields_" params="" file="src/justGraphix/color/SysPrint256.hx" private="1" module="justGraphix.color.SysPrint256" final="1">
		<begin final="1" public="1" set="null" expr="&quot;\x1B[&quot;" line="3" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"\x1B["</e></m></meta>
		</begin>
		<end final="1" public="1" set="null" expr="&quot;\x1B[0m&quot;" line="4" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"\x1B[0m"</e></m></meta>
		</end>
		<fore final="1" public="1" set="null" expr="&quot;38;5;&quot;" line="5" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"38;5;"</e></m></meta>
		</fore>
		<back final="1" public="1" set="null" expr="&quot;48;5;&quot;" line="6" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"48;5;"</e></m></meta>
		</back>
	</class>
	<class path="justGraphix.color._TwoGrad.TwoGrad_" params="" file="src/justGraphix/color/TwoGrad.hx" private="1" module="justGraphix.color.TwoGrad">
		<colorClock public="1"><x path="Int"/></colorClock>
		<colorAnti public="1"><x path="Int"/></colorAnti>
		<new public="1" set="method" line="8"><f a="colorClock:colorAnti">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.color.TwoGrad" params="" file="src/justGraphix/color/TwoGrad.hx">
		<from><icast><c path="justGraphix.color._TwoGrad.TwoGrad_"/></icast></from>
		<this><c path="justGraphix.color._TwoGrad.TwoGrad_"/></this>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>justGraphix.color.TwoGrad_</e></m>
		</meta>
		<impl><class path="justGraphix.color._TwoGrad.TwoGrad_Impl_" params="" file="src/justGraphix/color/TwoGrad.hx" private="1" module="justGraphix.color.TwoGrad" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="colorClock:colorAnti">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.color.TwoGrad"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<average public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<c path="justGraphix.color._TwoGrad.TwoGrad_"/>
	<x path="Int"/>
</f></average>
	<meta><m n=":access"><e>justGraphix.color.TwoGrad_</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.color._TwoGrad.TwoGrad_Impl_" params="" file="src/justGraphix/color/TwoGrad.hx" private="1" module="justGraphix.color.TwoGrad" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="colorClock:colorAnti">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.color.TwoGrad"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<average public="1" get="inline" set="null" line="22" static="1"><f a="this">
	<c path="justGraphix.color._TwoGrad.TwoGrad_"/>
	<x path="Int"/>
</f></average>
		<meta><m n=":access"><e>justGraphix.color.TwoGrad_</e></m></meta>
	</class>
	<class path="justGraphix.color.space.ARGB" params="" file="src/justGraphix/color/space/ARGB.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="11"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ a, r, g, b }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.color.space.CYMK" params="" file="src/justGraphix/color/space/CYMK.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<new public="1" set="method" line="11"><f a="c:y:m:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ c, y, m, k }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.color.space.CYMKA" params="" file="src/justGraphix/color/space/CYMKA.hx">
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<a public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</a>
		<new public="1" set="method" line="12"><f a="c:y:m:k:?a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ c, y, m, k, ?a }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.color.space.LAB" params="" file="src/justGraphix/color/space/LAB.hx">
		<L public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</L>
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<alpha public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</alpha>
		<new public="1" set="method" line="12"><f a="L:a:b:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ l, a, b, alpha }
   , L – perceived lightness, a – how green/red the color is, b – how blue/yellow the color is, alpha -alpha</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.color.space.LCH" params="" file="src/justGraphix/color/space/LCH.hx">
		<L public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</L>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<alpha public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</alpha>
		<new public="1" set="method" line="12"><f a="L:c:h:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ l, c, h, alpha }
   , L – perceived lightness, c – radius , h – angle , alpha -alpha</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.color.space.OKLAB" params="" file="src/justGraphix/color/space/OKLAB.hx">
		<from><icast><c path="justGraphix.color.space.LAB"/></icast></from>
		<this><c path="justGraphix.color.space.LAB"/></this>
		<to><icast><c path="justGraphix.color.space.LAB"/></icast></to>
		<haxe_doc>{ l, a, b, alpha }
   , L – perceived lightness, a – how green/red the color is, b – how blue/yellow the color is, alpha -alpha</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.color.space._OKLAB.OKLAB_Impl_" params="" file="src/justGraphix/color/space/OKLAB.hx" private="1" module="justGraphix.color.space.OKLAB" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:a:b:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.OKLAB"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="justGraphix.color.space._OKLAB.OKLAB_Impl_" params="" file="src/justGraphix/color/space/OKLAB.hx" private="1" module="justGraphix.color.space.OKLAB" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:a:b:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.OKLAB"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<abstract path="justGraphix.color.space.OKLCH" params="" file="src/justGraphix/color/space/OKLCH.hx">
		<from><icast><c path="justGraphix.color.space.LCH"/></icast></from>
		<this><c path="justGraphix.color.space.LCH"/></this>
		<to><icast><c path="justGraphix.color.space.LCH"/></icast></to>
		<haxe_doc>{ l, c, h, alpha }
   , L – perceived lightness, c – radius, h – angle, alpha -alpha</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.color.space._OKLCH.OKLCH_Impl_" params="" file="src/justGraphix/color/space/OKLCH.hx" private="1" module="justGraphix.color.space.OKLCH" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:c:h:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.OKLCH"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="justGraphix.color.space._OKLCH.OKLCH_Impl_" params="" file="src/justGraphix/color/space/OKLCH.hx" private="1" module="justGraphix.color.space.OKLCH" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:c:h:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.OKLCH"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<class path="justGraphix.color.space.RGB" params="" file="src/justGraphix/color/space/RGB.hx">
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<new public="1" set="method" line="10"><f a="r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ r, g, b }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<abstract path="justGraphix.color.space.SRLAB2" params="" file="src/justGraphix/color/space/SRLAB2.hx">
		<from><icast><c path="justGraphix.color.space.LAB"/></icast></from>
		<this><c path="justGraphix.color.space.LAB"/></this>
		<to><icast><c path="justGraphix.color.space.LAB"/></icast></to>
		<haxe_doc>{ l, a, b, alpha }
   , L – perceived lightness, a – how green/red the color is, b – how blue/yellow the color is, alpha -alpha</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.color.space._SRLAB2.SRLAB2_Impl_" params="" file="src/justGraphix/color/space/SRLAB2.hx" private="1" module="justGraphix.color.space.SRLAB2" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:a:b:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.SRLAB2"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="justGraphix.color.space._SRLAB2.SRLAB2_Impl_" params="" file="src/justGraphix/color/space/SRLAB2.hx" private="1" module="justGraphix.color.space.SRLAB2" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:a:b:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.SRLAB2"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<abstract path="justGraphix.color.space.SRLCH2" params="" file="src/justGraphix/color/space/SRLCH2.hx">
		<from><icast><c path="justGraphix.color.space.LCH"/></icast></from>
		<this><c path="justGraphix.color.space.LCH"/></this>
		<to><icast><c path="justGraphix.color.space.LCH"/></icast></to>
		<haxe_doc>{ l, c, h, alpha }
   , L – perceived lightness, c – radius, h – angle, alpha -alpha</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.color.space._SRLCH2.SRLCH2_Impl_" params="" file="src/justGraphix/color/space/SRLCH2.hx" private="1" module="justGraphix.color.space.SRLCH2" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:c:h:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.SRLCH2"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="justGraphix.color.space._SRLCH2.SRLCH2_Impl_" params="" file="src/justGraphix/color/space/SRLCH2.hx" private="1" module="justGraphix.color.space.SRLCH2" final="1"><_new public="1" get="inline" set="null" line="9" static="1">
	<f a="L:c:h:alpha">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.color.space.SRLCH2"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<typedef path="justGraphix.color.wheel.Rectangle" params="" file="src/justGraphix/color/wheel/ColorHexagon.hx" module="justGraphix.color.wheel.ColorHexagon"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
</a></typedef>
	<class path="justGraphix.color.wheel.ColorHexagon" params="" file="src/justGraphix/color/wheel/ColorHexagon.hx">
		<hexagon public="1" set="method" line="17" static="1"><f a="draw:offX:offY:hexWidth:hexHeight">
	<f a="rectangle:color0:color1">
		<t path="justGraphix.color.wheel.Rectangle"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hexagon>
		<colors public="1" get="inline" set="null" line="48" static="1"><f a=""><c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c></f></colors>
		<haxe_doc>For generating these types of images  
   ![colorHexagon](../../bootstrap/img/colorHex.png)</haxe_doc>
	</class>
	<class path="justGraphix.color.wheel.ColorWheel24" params="" file="src/justGraphix/color/wheel/ColorWheel24.hx">
		<getWheel public="1" get="inline" set="null" line="8" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Wheel24"/></c></f></getWheel>
		<random public="1" get="inline" set="null" line="35" static="1"><f a=""><x path="justGraphix.pallette.wheel.Wheel24"/></f></random>
		<getName public="1" get="inline" set="null" line="41" static="1"><f a="w">
	<x path="justGraphix.pallette.wheel.Wheel24"/>
	<c path="String"/>
</f></getName>
		<next public="1" get="inline" set="null" line="70" static="1"><f a="w">
	<x path="justGraphix.pallette.wheel.Wheel24"/>
	<x path="justGraphix.pallette.wheel.Wheel24"/>
</f></next>
		<haxe_doc>![wheel24](../../bootstrap/img/wheel24.png)</haxe_doc>
	</class>
	<class path="justGraphix.color.wheel.MartianColours" params="" file="src/justGraphix/color/wheel/MartianColors.hx" module="justGraphix.color.wheel.MartianColors">
		<limitRadian get="inline" set="null" line="7" static="1"><f a="radian">
	<x path="Float"/>
	<x path="Float"/>
</f></limitRadian>
		<limitStrength get="inline" set="null" line="24" static="1"><f a="strength">
	<x path="Float"/>
	<x path="Float"/>
</f></limitStrength>
		<getColor public="1" set="method" line="29" static="1"><f a="radian:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getColor>
		<reds public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Reds"/></c></reds>
		<get_reds public="1" get="inline" set="null" line="91" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Reds"/></c></f></get_reds>
		<oranges public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Oranges"/></c></oranges>
		<get_oranges public="1" get="inline" set="null" line="97" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Oranges"/></c></f></get_oranges>
		<turmeric public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Turmeric"/></c></turmeric>
		<get_turmeric public="1" get="inline" set="null" line="103" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Turmeric"/></c></f></get_turmeric>
		<yellowCheese public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.YellowCheese"/></c></yellowCheese>
		<get_yellowCheese public="1" get="inline" set="null" line="109" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.YellowCheese"/></c></f></get_yellowCheese>
		<yellows public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Yellows"/></c></yellows>
		<get_yellows public="1" get="inline" set="null" line="115" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Yellows"/></c></f></get_yellows>
		<greenGrape public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.GreenGrape"/></c></greenGrape>
		<get_greenGrape public="1" get="inline" set="null" line="121" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.GreenGrape"/></c></f></get_greenGrape>
		<chartreuse public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Chartreuse"/></c></chartreuse>
		<get_chartreuse public="1" get="inline" set="null" line="127" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Chartreuse"/></c></f></get_chartreuse>
		<greenPea public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.GreenPea"/></c></greenPea>
		<get_greenPea public="1" get="inline" set="null" line="133" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.GreenPea"/></c></f></get_greenPea>
		<green public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Green"/></c></green>
		<get_green public="1" get="inline" set="null" line="139" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Green"/></c></f></get_green>
		<clover public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Clover"/></c></clover>
		<get_clover public="1" get="inline" set="null" line="145" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Clover"/></c></f></get_clover>
		<emerald public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Emerald"/></c></emerald>
		<get_emerald public="1" get="inline" set="null" line="151" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Emerald"/></c></f></get_emerald>
		<malachite public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Malachite"/></c></malachite>
		<get_malachite public="1" get="inline" set="null" line="157" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Malachite"/></c></f></get_malachite>
		<cyan public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Cyan"/></c></cyan>
		<get_cyan public="1" get="inline" set="null" line="163" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Cyan"/></c></f></get_cyan>
		<turquoise public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Turquoise"/></c></turquoise>
		<get_turquoise public="1" get="inline" set="null" line="169" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Turquoise"/></c></f></get_turquoise>
		<azure public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Azure"/></c></azure>
		<get_azure public="1" get="inline" set="null" line="175" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Azure"/></c></f></get_azure>
		<royalBlue public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.RoyalBlue"/></c></royalBlue>
		<get_royalBlue public="1" get="inline" set="null" line="181" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.RoyalBlue"/></c></f></get_royalBlue>
		<blue public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Blue"/></c></blue>
		<get_blue public="1" get="inline" set="null" line="187" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Blue"/></c></f></get_blue>
		<dioxazine public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Dioxazine"/></c></dioxazine>
		<get_dioxazine public="1" get="inline" set="null" line="193" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Dioxazine"/></c></f></get_dioxazine>
		<violet public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Violet"/></c></violet>
		<get_violet public="1" get="inline" set="null" line="199" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Violet"/></c></f></get_violet>
		<aniline public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Aniline"/></c></aniline>
		<get_aniline public="1" get="inline" set="null" line="205" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Aniline"/></c></f></get_aniline>
		<magenta public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Magenta"/></c></magenta>
		<get_magenta public="1" get="inline" set="null" line="211" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Magenta"/></c></f></get_magenta>
		<bougainville public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Bougainville"/></c></bougainville>
		<get_bougainville public="1" get="inline" set="null" line="217" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Bougainville"/></c></f></get_bougainville>
		<pink public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.Pink"/></c></pink>
		<get_pink public="1" get="inline" set="null" line="223" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.Pink"/></c></f></get_pink>
		<redPlumb public="1" get="accessor" set="null" static="1"><c path="Array"><x path="justGraphix.pallette.wheel.RedPlum"/></c></redPlumb>
		<get_redPlumb public="1" get="inline" set="null" line="229" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.wheel.RedPlum"/></c></f></get_redPlumb>
		<haxe_doc>![martianColors](../../bootstrap/img/martianColors.png)</haxe_doc>
	</class>
	<class path="justGraphix.constraints.Chain" params="" file="src/justGraphix/constraints/Chain.hx">
		<joints public="1" expr="new Array&lt;Matrix1x4&gt;()">
			<c path="Array"><x path="justGraphix.geom.Matrix1x4"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Matrix1x4>()]]></e></m></meta>
		</joints>
		<points><x path="Int"/></points>
		<distance><x path="Float"/></distance>
		<update public="1" get="inline" set="null" line="17"><f a="anchor:render">
	<x path="justGraphix.geom.Matrix1x4"/>
	<f a="i:joint">
		<x path="Int"/>
		<x path="justGraphix.geom.Matrix1x4"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="11"><f a="x:y:points_:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.constraints.Collision" params="" file="src/justGraphix/constraints/Collision.hx">
		<joints expr="new Array&lt;Matrix1x4&gt;()">
			<c path="Array"><x path="justGraphix.geom.Matrix1x4"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Matrix1x4>()]]></e></m></meta>
		</joints>
		<points><x path="Int"/></points>
		<distance><x path="Float"/></distance>
		<circleSize><x path="Float"/></circleSize>
		<x><x path="Float"/></x>
		<y><x path="Float"/></y>
		<update public="1" get="inline" set="null" line="30"><f a="anchor:render">
	<x path="justGraphix.geom.Matrix1x4"/>
	<f a="i:joint">
		<x path="Int"/>
		<x path="justGraphix.geom.Matrix1x4"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="14"><f a="x_:y_:points_:circleSize_:collisionArea:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.constraints.Fabrik" params="" file="src/justGraphix/constraints/Fabrik.hx">
		<joints public="1" expr="new Array&lt;Matrix1x4&gt;()">
			<c path="Array"><x path="justGraphix.geom.Matrix1x4"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Matrix1x4>()]]></e></m></meta>
		</joints>
		<points><x path="Int"/></points>
		<distance><x path="Float"/></distance>
		<x><x path="Float"/></x>
		<y><x path="Float"/></y>
		<update public="1" get="inline" set="null" line="21"><f a="anchor:render">
	<x path="justGraphix.geom.Matrix1x4"/>
	<f a="i:joint">
		<x path="Int"/>
		<x path="justGraphix.geom.Matrix1x4"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="13"><f a="x_:y_:points_:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.constraints.Inner" params="" file="src/justGraphix/constraints/Inner.hx">
		<point public="1"><x path="justGraphix.geom.Matrix1x4"/></point>
		<distance><x path="Float"/></distance>
		<update public="1" get="inline" set="null" line="15"><f a="anchor">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="10"><f a="x:y:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="justGraphix.constraints.Interval" params="" file="src/justGraphix/constraints/Interval.hx">
		<from><icast><c path="justGraphix.geom.structs.Range"/></icast></from>
		<this><c path="justGraphix.geom.structs.Range"/></this>
		<to><icast><c path="justGraphix.geom.structs.Range"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.constraints._Interval.Interval_Impl_" params="" file="src/justGraphix/constraints/Interval.hx" private="1" module="justGraphix.constraints.Interval" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="interval">
			<c path="justGraphix.geom.structs.Range"/>
			<x path="justGraphix.constraints.Interval"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<valid public="1" get="inline" set="null" line="10" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Bool"/>
</f></valid>
	<fix public="1" get="inline" set="null" line="14" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Void"/>
</f></fix>
	<clampClosed public="1" get="inline" set="null" line="22" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampClosed>
	<clampOpen public="1" get="inline" set="null" line="28" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampOpen>
	<close public="1" get="inline" set="null" line="34" static="1">
		<f a="this:v:?delta" v="::0.00001">
			<c path="justGraphix.geom.structs.Range"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
	</close>
	<above public="1" get="inline" set="null" line="39" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></above>
	<below public="1" get="inline" set="null" line="43" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></below>
	<inClampOpen public="1" get="inline" set="null" line="47" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inClampOpen>
	<inClampClosed public="1" get="inline" set="null" line="51" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inClampClosed>
	<unit public="1" get="inline" set="null" line="55" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unit>
	<unitFloat public="1" get="inline" set="null" line="60" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitFloat>
	<unitNegative public="1" get="inline" set="null" line="65" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitNegative>
	<inUnitFloat public="1" get="inline" set="null" line="70" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inUnitFloat>
	<random public="1" get="inline" set="null" line="74" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
</f></random>
	<randomInt public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Int"/>
</f></randomInt>
</class></impl>
	</abstract>
	<class path="justGraphix.constraints._Interval.Interval_Impl_" params="" file="src/justGraphix/constraints/Interval.hx" private="1" module="justGraphix.constraints.Interval" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="interval">
				<c path="justGraphix.geom.structs.Range"/>
				<x path="justGraphix.constraints.Interval"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<valid public="1" get="inline" set="null" line="10" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Bool"/>
</f></valid>
		<fix public="1" get="inline" set="null" line="14" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Void"/>
</f></fix>
		<clampClosed public="1" get="inline" set="null" line="22" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampClosed>
		<clampOpen public="1" get="inline" set="null" line="28" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clampOpen>
		<close public="1" get="inline" set="null" line="34" static="1">
			<f a="this:v:?delta" v="::0.00001">
				<c path="justGraphix.geom.structs.Range"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
		</close>
		<above public="1" get="inline" set="null" line="39" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></above>
		<below public="1" get="inline" set="null" line="43" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></below>
		<inClampOpen public="1" get="inline" set="null" line="47" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inClampOpen>
		<inClampClosed public="1" get="inline" set="null" line="51" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></inClampClosed>
		<unit public="1" get="inline" set="null" line="55" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unit>
		<unitFloat public="1" get="inline" set="null" line="60" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitFloat>
		<unitNegative public="1" get="inline" set="null" line="65" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitNegative>
		<inUnitFloat public="1" get="inline" set="null" line="70" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inUnitFloat>
		<random public="1" get="inline" set="null" line="74" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Float"/>
</f></random>
		<randomInt public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Range"/>
	<x path="Int"/>
</f></randomInt>
	</class>
	<abstract path="justGraphix.constraints.RadianInterval" params="" file="src/justGraphix/constraints/Interval.hx" module="justGraphix.constraints.Interval">
		<from><icast><x path="justGraphix.constraints.Interval"/></icast></from>
		<this><x path="justGraphix.constraints.Interval"/></this>
		<to><icast><x path="justGraphix.constraints.Interval"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.constraints._Interval.RadianInterval_Impl_" params="" file="src/justGraphix/constraints/Interval.hx" private="1" module="justGraphix.constraints.Interval" final="1">
	<_new public="1" get="inline" set="null" line="84" static="1">
		<f a=""><x path="justGraphix.constraints.RadianInterval"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<wrap public="1" get="inline" set="null" line="89" static="1"><f a="this:v">
	<x path="justGraphix.constraints.Interval"/>
	<x path="Float"/>
	<x path="Float"/>
</f></wrap>
	<inPiWrap public="1" get="inline" set="null" line="93" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inPiWrap>
	<wrapRadian public="1" get="inline" set="null" line="97" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></wrapRadian>
</class></impl>
	</abstract>
	<class path="justGraphix.constraints._Interval.RadianInterval_Impl_" params="" file="src/justGraphix/constraints/Interval.hx" private="1" module="justGraphix.constraints.Interval" final="1">
		<_new public="1" get="inline" set="null" line="84" static="1">
			<f a=""><x path="justGraphix.constraints.RadianInterval"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<wrap public="1" get="inline" set="null" line="89" static="1"><f a="this:v">
	<x path="justGraphix.constraints.Interval"/>
	<x path="Float"/>
	<x path="Float"/>
</f></wrap>
		<inPiWrap public="1" get="inline" set="null" line="93" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inPiWrap>
		<wrapRadian public="1" get="inline" set="null" line="97" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></wrapRadian>
	</class>
	<class path="justGraphix.constraints.Precision" params="" file="src/justGraphix/constraints/Precision.hx">
		<floatToStringPrecision public="1" set="method" line="6" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
		<max4 public="1" get="inline" set="null" line="32" static="1"><f a="f0:f1:f2:f3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></max4>
		<max3 public="1" get="inline" set="null" line="36" static="1"><f a="f0:f1:f2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></max3>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.contour.IContour" params="" file="src/justGraphix/contour/IContour.hx" interface="1">
		<pointsClock public="1"><c path="Array"><x path="Float"/></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><x path="Float"/></c></pointsAnti>
		<endCapFactor public="1"><x path="Float"/></endCapFactor>
		<triangleJoin public="1" set="method">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<line public="1" set="method">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.contour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<end public="1" set="method"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<mitreLimit public="1"><x path="Float"/></mitreLimit>
		<useMitre public="1"><x path="Bool"/></useMitre>
	</class>
	<class path="justGraphix.contour.Contour" params="" file="src/justGraphix/contour/Contour.hx">
		<implements path="justGraphix.contour.IContour"/>
		<smallDotScale get="inline" set="null" expr="0.07" line="87" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="169" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist public="1" get="inline" set="null" line="173" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<debugCol0 public="1" expr="redRadish">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<mitreLimit public="1" expr="1.2">
			<x path="Float"/>
			<meta><m n=":value"><e>1.2</e></m></meta>
		</mitreLimit>
		<useMitre public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</useMitre>
		<pen><c path="justGraphix.contour.IPen"/></pen>
		<endLine><x path="justGraphix.contour.StyleEndLine"/></endLine>
		<ax><x path="Null"><x path="Float"/></x></ax>
		<ay><x path="Null"><x path="Float"/></x></ay>
		<bx><x path="Null"><x path="Float"/></x></bx>
		<by><x path="Null"><x path="Float"/></x></by>
		<cx><x path="Null"><x path="Float"/></x></cx>
		<cy><x path="Null"><x path="Float"/></x></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Null"><x path="Float"/></x></jx>
		<jy><x path="Null"><x path="Float"/></x></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<endCapFactor public="1" expr="0.5">
			<x path="Float"/>
			<meta><m n=":value"><e>0.5</e></m></meta>
		</endCapFactor>
		<reset public="1" set="method" line="89"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="128"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="144"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="165"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="182">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="291">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* draws arc at beginning of line</haxe_doc>
		</overlapQuad>
		<end public="1" get="inline" set="null" line="299"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<triangle2DFill get="inline" set="null" line="325">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<addStartShape get="inline" set="null" line="329">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addStartShape>
		<addEndShape get="inline" set="null" line="347">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addEndShape>
		<addPie get="inline" set="null" line="363">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="367"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="377"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="400"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="412"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="420"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="428"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="443"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="459"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="542"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="568"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="734"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="744"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="749">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.contour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<mitreDraw public="1" get="inline" set="null" line="837"><f a="ax_:ay_:bx_:by_:width_:clockWise">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></mitreDraw>
		<circle public="1" get="inline" set="null" line="889">
			<f a="ax:ay:radius:?color:?sides:?omega" v=":::-1:36:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36, color : -1 }</e></m></meta>
		</circle>
		<pie public="1" get="inline" set="null" line="916">
			<f a="ax:ay:radius:beta:gamma:prefer:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<startShape public="1" set="method" line="987">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:?color:?sides" v=":::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</startShape>
		<endShape public="1" get="inline" set="null" line="1173">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:?color:?sides" v=":::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</endShape>
		<pieDifX public="1" get="inline" set="null" line="1363">
			<f a="ax:ay:radius:beta:dif:edgePoly:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
		</pieDifX>
		<new public="1" set="method" line="122">
			<f a="pen_:?endLine_" v=":no">
				<c path="justGraphix.contour.IPen"/>
				<x path="justGraphix.contour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.contour.Color2Grads" params="" file="src/justGraphix/contour/ContourGrad.hx" module="justGraphix.contour.ContourGrad">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.contour._ContourGrad.Color2Grads_Impl_" params="" file="src/justGraphix/contour/ContourGrad.hx" private="1" module="justGraphix.contour.ContourGrad" extern="1" final="1">
	<colorAB public="1" get="inline" set="null" expr="cast &quot;colorAB&quot;" line="16" static="1">
		<x path="justGraphix.contour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorAB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorAB>
	<colorAC public="1" get="inline" set="null" expr="cast &quot;colorAC&quot;" line="17" static="1">
		<x path="justGraphix.contour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorAC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorAC>
	<colorBA public="1" get="inline" set="null" expr="cast &quot;colorBA&quot;" line="18" static="1">
		<x path="justGraphix.contour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorBA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorBA>
	<colorBC public="1" get="inline" set="null" expr="cast &quot;colorBC&quot;" line="19" static="1">
		<x path="justGraphix.contour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorBC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorBC>
	<colorCA public="1" get="inline" set="null" expr="cast &quot;colorCA&quot;" line="20" static="1">
		<x path="justGraphix.contour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorCA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorCA>
	<colorCB public="1" get="inline" set="null" expr="cast &quot;colorCB&quot;" line="21" static="1">
		<x path="justGraphix.contour.Color2Grads"/>
		<meta>
			<m n=":value"><e>cast "colorCB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</colorCB>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour._ContourGrad.Color2Grads_Impl_" params="" file="src/justGraphix/contour/ContourGrad.hx" private="1" module="justGraphix.contour.ContourGrad" extern="1" final="1">
		<colorAB public="1" get="inline" set="null" expr="cast &quot;colorAB&quot;" line="16" static="1">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorAB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorAB>
		<colorAC public="1" get="inline" set="null" expr="cast &quot;colorAC&quot;" line="17" static="1">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorAC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorAC>
		<colorBA public="1" get="inline" set="null" expr="cast &quot;colorBA&quot;" line="18" static="1">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorBA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorBA>
		<colorBC public="1" get="inline" set="null" expr="cast &quot;colorBC&quot;" line="19" static="1">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorBC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorBC>
		<colorCA public="1" get="inline" set="null" expr="cast &quot;colorCA&quot;" line="20" static="1">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorCA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorCA>
		<colorCB public="1" get="inline" set="null" expr="cast &quot;colorCB&quot;" line="21" static="1">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta>
				<m n=":value"><e>cast "colorCB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</colorCB>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.contour.ContourGrad" params="" file="src/justGraphix/contour/ContourGrad.hx">
		<implements path="justGraphix.contour.IContour"/>
		<smallDotScale get="inline" set="null" expr="0.07" line="99" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="208" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="212" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<colorGradChoice public="1" expr="colorAB">
			<x path="justGraphix.contour.Color2Grads"/>
			<meta><m n=":value"><e>colorAB</e></m></meta>
		</colorGradChoice>
		<debugCol0 public="1" expr="redRadish">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<mitreLimit public="1" expr="1.2">
			<x path="Float"/>
			<meta><m n=":value"><e>1.2</e></m></meta>
		</mitreLimit>
		<useMitre public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useMitre>
		<pen><c path="justGraphix.contour.IPen"/></pen>
		<endLine><x path="justGraphix.contour.StyleEndLine"/></endLine>
		<ax><x path="Null"><x path="Float"/></x></ax>
		<ay><x path="Null"><x path="Float"/></x></ay>
		<bx><x path="Null"><x path="Float"/></x></bx>
		<by><x path="Null"><x path="Float"/></x></by>
		<cx><x path="Null"><x path="Float"/></x></cx>
		<cy><x path="Null"><x path="Float"/></x></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Null"><x path="Float"/></x></jx>
		<jy><x path="Null"><x path="Float"/></x></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<endCapFactor public="1" expr="1.45">
			<x path="Float"/>
			<meta><m n=":value"><e>1.45</e></m></meta>
		</endCapFactor>
		<setGradChoice public="1" set="method" line="101"><f a="colorGradChoice_">
	<x path="justGraphix.contour.Color2Grads"/>
	<x path="Void"/>
</f></setGradChoice>
		<getGradColors public="1" set="method" line="105"><f a=""><x path="justGraphix.color.TwoGrad"/></f></getGradColors>
		<reset public="1" set="method" line="128"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="167"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="183"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="204"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="218">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="338">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Adds triangles between lines next to the corners seems pretty good</haxe_doc>
		</overlapQuad>
		<end public="1" get="inline" set="null" line="346"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<twoGrad><x path="justGraphix.color.TwoGrad"/></twoGrad>
		<triangle2DFill get="inline" set="null" line="373">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<tri2DFill_A_C_C get="inline" set="null" line="385">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_C_C>
		<tri2DFill_C_A_C get="inline" set="null" line="394">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_A_C>
		<tri2DFill_C_C_A get="inline" set="null" line="403">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_C_A>
		<tri2DFill_A_A_C get="inline" set="null" line="412">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_A_C>
		<tri2DFill_C_A_A get="inline" set="null" line="421">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_A_A>
		<tri2DFill_A_C_A get="inline" set="null" line="430">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_C_A>
		<tri2DFill_A_h_C get="inline" set="null" line="439">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_h_C>
		<tri2DFill_A_C_h get="inline" set="null" line="446">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_C_h>
		<tri2DFill_C_A_h get="inline" set="null" line="453">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_A_h>
		<tri2DFill_C_h_A get="inline" set="null" line="460">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_h_A>
		<tri2DFill_h_C_A get="inline" set="null" line="467">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_C_A>
		<tri2DFill_h_A_C get="inline" set="null" line="474">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_A_C>
		<tri2DFill_h_A_A get="inline" set="null" line="481">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_A_A>
		<tri2DFill_h_C_C get="inline" set="null" line="488">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_h_C_C>
		<tri2DFill_A_h_A get="inline" set="null" line="495">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_h_A>
		<tri2DFill_C_h_C get="inline" set="null" line="502">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_h_C>
		<tri2DFill_A_A_h get="inline" set="null" line="509">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_A_A_h>
		<tri2DFill_C_C_h get="inline" set="null" line="516">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</tri2DFill_C_C_h>
		<triangle2DFillRGB get="inline" set="null" line="527">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
			<haxe_doc>* Used to help with Debugging trangles.
     *</haxe_doc>
		</triangle2DFillRGB>
		<addStartShape get="inline" set="null" line="535">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addStartShape>
		<addPieXstart get="inline" set="null" line="559">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
			<haxe_doc>* changed to -radius seems to work better!
         * since gradient we actually need to adjust color around the curve ends!!</haxe_doc>
		</addPieXstart>
		<addEndShape get="inline" set="null" line="583">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
			<haxe_doc>* changed to -radius seems to work better!
         * since gradient we actually need to adjust color around the curve ends!!</haxe_doc>
		</addEndShape>
		<addPieX get="inline" set="null" line="604">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
			<haxe_doc>* need to track down where this is...</haxe_doc>
		</addPieX>
		<addPie get="inline" set="null" line="625">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
			<haxe_doc>* need to track down where this is...</haxe_doc>
		</addPie>
		<computeJ get="inline" set="null" line="629"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="639"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="662"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="676"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="684"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="692"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="707"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="725"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="829">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*</haxe_doc>
		</endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="855"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="1052">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* removed for now!!</haxe_doc>
		</storeLastQuads>
		<isClockwise get="inline" set="null" line="1062"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="1066">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.contour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<mitreDraw public="1" get="inline" set="null" line="1154"><f a="ax_:ay_:bx_:by_:width_:clockWise">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></mitreDraw>
		<circle public="1" get="inline" set="null" line="1213">
			<f a="ax:ay:radius:?color:?sides:?omega" v=":::-1:36:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36, color : -1 }</e></m></meta>
		</circle>
		<pie public="1" get="inline" set="null" line="1242">
			<f a="ax:ay:radius:beta:gamma:prefer:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<startShape public="1" get="inline" set="null" line="1274">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:clockWise:?color:?sides" v="::::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
		</startShape>
		<endShape public="1" get="inline" set="null" line="1511">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:clockWise:?color:?sides" v="::::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
		</endShape>
		<pieX public="1" get="inline" set="null" line="1756">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:clockWise:?color:?sides" v="::::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="justGraphix.rose.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="1800">
			<f a="ax:ay:radius:beta:dif:edgePoly:clockWise:?color:?sides" v=":::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* Old code</haxe_doc>
		</pieDifX>
		<new public="1" set="method" line="161">
			<f a="pen_:?endLine_" v=":no">
				<c path="justGraphix.contour.IPen"/>
				<x path="justGraphix.contour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.contour._CurveMath.CurveMath_Fields_" params="" file="src/justGraphix/contour/CurveMath.hx" private="1" module="justGraphix.contour.CurveMath" final="1">
		<distance public="1" get="inline" set="null" line="3" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadStep public="1" expr="0.03" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="11" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="27" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="30" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="46" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="52" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<quadraticThru public="1" get="inline" set="null" line="58" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="63" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<cubic public="1" get="inline" set="null" line="68" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
	</class>
	<class path="justGraphix.contour.IPen" params="" file="src/justGraphix/contour/IPen.hx" interface="1">
		<get_pos public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_pos>
		<set_pos public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</set_pos>
		<get_size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_size>
		<currentColor public="1"><x path="Int"/></currentColor>
		<colorB public="1"><x path="Int"/></colorB>
		<colorC public="1"><x path="Int"/></colorC>
		<triangle2DFill public="1" set="method"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" set="method"><f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
	</class>
	<class path="justGraphix.contour.Pen2D" params="" file="src/justGraphix/contour/Pen2D.hx">
		<implements path="justGraphix.contour.IPen"/>
		<arr public="1" expr="new Array2DTriangles()">
			<x path="justGraphix.contour.io.Array2DTriangles"/>
			<meta><m n=":value"><e>new Array2DTriangles()</e></m></meta>
		</arr>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="9"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="13"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size get="inline" set="null" line="18"><f a=""><x path="Int"/></f></get_size>
		<triangle2DFill public="1" get="inline" set="null" line="26"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" set="method" line="36"><f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<currentColor public="1"><x path="Int"/></currentColor>
		<colorB public="1"><x path="Int"/></colorB>
		<colorC public="1"><x path="Int"/></colorC>
		<new public="1" set="method" line="5"><f a="col">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.contour.Pen2DGrad" params="" file="src/justGraphix/contour/Pen2DGrad.hx">
		<implements path="justGraphix.contour.IPen"/>
		<arr public="1" expr="new Array2DTriGrad()">
			<x path="justGraphix.contour.io.Array2DTriGrad"/>
			<meta><m n=":value"><e>new Array2DTriGrad()</e></m></meta>
		</arr>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="25"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="29"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<get_size get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_size>
		<triangle2DFill public="1" get="inline" set="null" line="42"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" set="method" line="51"><f a="ax:ay:bx:by:cx:cy:?colorA:?colorB:?colorC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<currentColor public="1"><x path="Int"/></currentColor>
		<colorB public="1"><x path="Int"/></colorB>
		<colorC public="1"><x path="Int"/></colorC>
		<new public="1" set="method" line="13"><f a="col:?colB:?colC">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="justGraphix.contour.Dim" params="" file="src/justGraphix/contour/Sketcher.hx" module="justGraphix.contour.Sketcher"><a>
	<minY><x path="Float"/></minY>
	<minX><x path="Float"/></minX>
	<maxY><x path="Float"/></maxY>
	<maxX><x path="Float"/></maxX>
</a></typedef>
	<class path="justGraphix.path.IPathContext" params="" file="src/justGraphix/path/IPathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
	</class>
	<class path="justGraphix.contour.Sketcher" params="" file="src/justGraphix/contour/Sketcher.hx">
		<implements path="justGraphix.path.IPathContext"/>
		<pwm1 public="1" expr="10.">
			<x path="Float"/>
			<meta><m n=":value"><e>10.</e></m></meta>
		</pwm1>
		<pwm2 public="1" expr="5.">
			<x path="Float"/>
			<meta><m n=":value"><e>5.</e></m></meta>
		</pwm2>
		<pwm3 public="1" expr="3.">
			<x path="Float"/>
			<meta><m n=":value"><e>3.</e></m></meta>
		</pwm3>
		<shortestSeg public="1" expr="10.">
			<x path="Float"/>
			<meta><m n=":value"><e>10.</e></m></meta>
		</shortestSeg>
		<wasMove expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</wasMove>
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<penIsDown public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</penIsDown>
		<fill public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</fill>
		<width public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</width>
		<widthFunction public="1"><f a="::::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></widthFunction>
		<colourFunction public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunction>
		<tempArr><c path="Array"><x path="Float"/></c></tempArr>
		<contour public="1"><c path="justGraphix.contour.IContour"/></contour>
		<pen public="1"><c path="justGraphix.contour.IPen"/></pen>
		<endLine><x path="justGraphix.contour.StyleEndLine"/></endLine>
		<sketchForm><x path="justGraphix.contour.StyleSketch"/></sketchForm>
		<points public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></points>
		<pointsClock public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsAnti>
		<dim public="1"><c path="Array"><t path="justGraphix.contour.Dim"/></c></dim>
		<tracerLine get="inline" set="null" line="41"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></tracerLine>
		<fillOnlyLine get="inline" set="null" line="44"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillOnlyLine>
		<baseLine set="method" line="46"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></baseLine>
		<crudeLine get="inline" set="null" line="50"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></crudeLine>
		<roundEndLine get="inline" set="null" line="53"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></roundEndLine>
		<mediumLine get="inline" set="null" line="56"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumLine>
		<mediumOverlapLine get="inline" set="null" line="59"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumOverlapLine>
		<fineLine get="inline" set="null" line="62"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineLine>
		<mitreLine get="inline" set="null" line="65"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mitreLine>
		<dash get="inline" set="null" line="69"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dash>
		<equidistant get="inline" set="null" line="72"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></equidistant>
		<fineOverlapLine get="inline" set="null" line="75"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineOverlapLine>
		<line public="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></line>
		<createContour public="1" set="method" line="105"><f a=""><c path="justGraphix.contour.IContour"/></f></createContour>
		<reset public="1" set="method" line="108"><f a=""><x path="Void"/></f></reset>
		<pointsNoEndOverlap public="1" set="method" line="116"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsNoEndOverlap>
		<pointsRewound public="1" set="method" line="138"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsRewound>
		<mitreLimit public="1" get="null" set="accessor"><x path="Float"/></mitreLimit>
		<set_mitreLimit get="inline" set="null" line="185"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_mitreLimit>
		<initDim get="inline" set="null" line="189"><f a=""><t path="justGraphix.contour.Dim"/></f></initDim>
		<updateDim get="inline" set="null" line="192"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateDim>
		<moveTo public="1" get="inline" set="null" line="200"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lastClock public="1" get="inline" set="null" line="219"><f a=""><x path="Void"/></f></lastClock>
		<getEdges public="1" get="inline" set="null" line="229"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></getEdges>
		<argbAlpha get="inline" set="null" line="257">
			<f a="color:?alpha" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
		</argbAlpha>
		<lineStyle public="1" get="inline" set="null" line="262">
			<f a="thickness:color:?alpha" v="::1.">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
		</lineStyle>
		<distTotal expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</distTotal>
		<dashCurveTo set="method" line="268"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dashCurveTo>
		<shortLine get="inline" set="null" line="285"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></shortLine>
		<toggle3 expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</toggle3>
		<pwmToggle expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</pwmToggle>
		<pz expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</pz>
		<dashTo get="inline" set="null" line="340"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dashTo>
		<lineTo public="1" set="method" line="428"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="452"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<quadThru public="1" get="inline" set="null" line="470"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<curveTo public="1" get="inline" set="null" line="477"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotCoord public="1" get="inline" set="null" line="494">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<drawPath public="1" get="inline" set="null" line="522"><f a="commands:data">
	<x path="haxe.ds.Vector"><x path="justGraphix.path.PathCommand"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></drawPath>
		<drawGraphicsPath public="1" get="inline" set="null" line="527"><f a="graphicsPath">
	<c path="justGraphix.path.GraphicsPath"/>
	<x path="Void"/>
</f></drawGraphicsPath>
		<new public="1" set="method" line="79">
			<f a="pen_:sketchForm_:?endLine_" v="::no">
				<c path="justGraphix.contour.IPen"/>
				<x path="justGraphix.contour.StyleSketch"/>
				<x path="justGraphix.contour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
	</class>
	<class path="justGraphix.contour.SketcherGrad" params="" file="src/justGraphix/contour/SketcherGrad.hx">
		<extends path="justGraphix.contour.Sketcher"/>
		<colourFunctionB public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunctionB>
		<colourFunctionC public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunctionC>
		<createContour public="1" set="method" line="7" override="1"><f a=""><c path="justGraphix.contour.IContour"/></f></createContour>
		<lineTo public="1" set="method" line="12" override="1"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<dashCurveTo get="inline" set="null" line="37" override="1"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></dashCurveTo>
		<new public="1" set="method" line="3"><f a="pen_:sketchForm_:?endLine_">
	<c path="justGraphix.contour.IPen"/>
	<x path="justGraphix.contour.StyleSketch"/>
	<x path="justGraphix.contour.StyleEndLine"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="justGraphix.contour.StyleEndLine" params="" file="src/justGraphix/contour/StyleEndLine.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.contour._StyleEndLine.StyleEndLine_Impl_" params="" file="src/justGraphix/contour/StyleEndLine.hx" private="1" module="justGraphix.contour.StyleEndLine" final="1">
	<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</no>
	<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</begin>
	<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</end>
	<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</both>
	<halfRound public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</halfRound>
	<quadrant public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</quadrant>
	<triangleBegin public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</triangleBegin>
	<triangleEnd public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</triangleEnd>
	<triangleBoth public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</triangleBoth>
	<arrowBegin public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</arrowBegin>
	<arrowEnd public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</arrowEnd>
	<arrowBoth public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</arrowBoth>
	<circleBegin public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</circleBegin>
	<circleEnd public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</circleEnd>
	<circleBoth public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</circleBoth>
	<squareBegin public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</squareBegin>
	<squareEnd public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</squareEnd>
	<squareBoth public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</squareBoth>
	<ellipseBegin public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ellipseBegin>
	<ellipseEnd public="1" get="inline" set="null" expr="cast 19" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ellipseEnd>
	<ellipseBoth public="1" get="inline" set="null" expr="cast 20" line="1" static="1">
		<x path="justGraphix.contour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ellipseBoth>
	<isNo public="1" get="accessor" set="null" static="1"><x path="Bool"/></isNo>
	<get_isNo get="inline" set="null" line="32" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isNo>
	<isBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBegin>
	<get_isBegin get="inline" set="null" line="37" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBegin>
	<isEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEnd>
	<get_isEnd get="inline" set="null" line="42" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEnd>
	<isBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBoth>
	<get_isBoth get="inline" set="null" line="47" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBoth>
	<isBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBeginBoth>
	<get_isBeginBoth get="inline" set="null" line="52" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBeginBoth>
	<isEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEndBoth>
	<get_isEndBoth get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEndBoth>
	<isQuadrant public="1" get="accessor" set="null" static="1"><x path="Bool"/></isQuadrant>
	<get_isQuadrant get="inline" set="null" line="62" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isQuadrant>
	<isHalfRound public="1" get="accessor" set="null" static="1"><x path="Bool"/></isHalfRound>
	<get_isHalfRound get="inline" set="null" line="67" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isHalfRound>
	<isTriangleBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleBegin>
	<get_isTriangleBegin get="inline" set="null" line="72" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleBegin>
	<isTriangleEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleEnd>
	<get_isTriangleEnd get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleEnd>
	<isTriangleBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleBoth>
	<get_isTriangleBoth get="inline" set="null" line="82" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleBoth>
	<isTriangleBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleBeginBoth>
	<get_isTriangleBeginBoth get="inline" set="null" line="87" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleBeginBoth>
	<isTriangleEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleEndBoth>
	<get_isTriangleEndBoth get="inline" set="null" line="92" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleEndBoth>
	<isArrowBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowBegin>
	<get_isArrowBegin get="inline" set="null" line="97" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowBegin>
	<isArrowEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowEnd>
	<get_isArrowEnd get="inline" set="null" line="102" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowEnd>
	<isArrowBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowBoth>
	<get_isArrowBoth get="inline" set="null" line="107" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowBoth>
	<isArrowBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowBeginBoth>
	<get_isArrowBeginBoth get="inline" set="null" line="112" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowBeginBoth>
	<isArrowEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowEndBoth>
	<get_isArrowEndBoth get="inline" set="null" line="117" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowEndBoth>
	<isCircleBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleBegin>
	<get_isCircleBegin get="inline" set="null" line="122" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleBegin>
	<isCircleEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleEnd>
	<get_isCircleEnd get="inline" set="null" line="127" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleEnd>
	<isCircleBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleBoth>
	<get_isCircleBoth get="inline" set="null" line="132" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleBoth>
	<isCircleBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleBeginBoth>
	<get_isCircleBeginBoth get="inline" set="null" line="137" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleBeginBoth>
	<isCircleEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleEndBoth>
	<get_isCircleEndBoth get="inline" set="null" line="142" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleEndBoth>
	<isSquareBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareBegin>
	<get_isSquareBegin get="inline" set="null" line="147" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareBegin>
	<isSquareEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareEnd>
	<get_isSquareEnd get="inline" set="null" line="152" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareEnd>
	<isSquareBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareBoth>
	<get_isSquareBoth get="inline" set="null" line="157" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareBoth>
	<isSquareBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareBeginBoth>
	<get_isSquareBeginBoth get="inline" set="null" line="162" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareBeginBoth>
	<isSquareEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareEndBoth>
	<get_isSquareEndBoth get="inline" set="null" line="167" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareEndBoth>
	<isEllipseBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseBegin>
	<get_isEllipseBegin get="inline" set="null" line="172" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseBegin>
	<isEllipseEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseEnd>
	<get_isEllipseEnd get="inline" set="null" line="177" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseEnd>
	<isEllipseBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseBoth>
	<get_isEllipseBoth get="inline" set="null" line="182" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseBoth>
	<isEllipseBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseBeginBoth>
	<get_isEllipseBeginBoth get="inline" set="null" line="187" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseBeginBoth>
	<isEllipseEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseEndBoth>
	<get_isEllipseEndBoth get="inline" set="null" line="192" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseEndBoth>
	<thisAbstract public="1" get="accessor" set="null" static="1"><x path="justGraphix.contour.StyleEndLine"/></thisAbstract>
	<get_thisAbstract get="inline" set="null" line="198" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.contour.StyleEndLine"/>
</f></get_thisAbstract>
	<isArc public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArc>
	<get_isArc get="inline" set="null" line="206" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArc>
	<isForButton public="1" get="accessor" set="null" static="1"><x path="Bool"/></isForButton>
	<get_isForButton get="inline" set="null" line="211" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isForButton>
	<isArrow public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrow>
	<get_isArrow get="inline" set="null" line="217" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrow>
	<isArrowEnding public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowEnding>
	<get_isArrowEnding get="inline" set="null" line="223" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowEnding>
	<isTriangle public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangle>
	<get_isTriangle get="inline" set="null" line="229" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangle>
	<isSquare public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquare>
	<get_isSquare get="inline" set="null" line="235" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquare>
	<isCircle public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircle>
	<get_isCircle get="inline" set="null" line="241" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircle>
	<isEllipse public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipse>
	<get_isEllipse get="inline" set="null" line="247" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipse>
	<isBeginLine public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBeginLine>
	<get_isBeginLine get="inline" set="null" line="253" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBeginLine>
	<isBeginSymetrical public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBeginSymetrical>
	<get_isBeginSymetrical get="inline" set="null" line="282" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBeginSymetrical>
	<isEndLine public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEndLine>
	<get_isEndLine get="inline" set="null" line="312" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEndLine>
	<isEndSymetrical public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEndSymetrical>
	<get_isEndSymetrical get="inline" set="null" line="342" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEndSymetrical>
	<isBothLine public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBothLine>
	<get_isBothLine get="inline" set="null" line="372" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBothLine>
	<hasCurves public="1" get="accessor" set="null" static="1"><x path="Bool"/></hasCurves>
	<get_hasCurves get="inline" set="null" line="402" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_hasCurves>
	<isStraightEdgesBegins public="1" get="accessor" set="null" static="1"><x path="Bool"/></isStraightEdgesBegins>
	<get_isStraightEdgesBegins get="inline" set="null" line="432" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isStraightEdgesBegins>
	<isStraightEdgesEnds public="1" get="accessor" set="null" static="1"><x path="Bool"/></isStraightEdgesEnds>
	<get_isStraightEdgesEnds get="inline" set="null" line="438" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isStraightEdgesEnds>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour._StyleEndLine.StyleEndLine_Impl_" params="" file="src/justGraphix/contour/StyleEndLine.hx" private="1" module="justGraphix.contour.StyleEndLine" final="1">
		<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</no>
		<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</begin>
		<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</end>
		<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</both>
		<halfRound public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</halfRound>
		<quadrant public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</quadrant>
		<triangleBegin public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</triangleBegin>
		<triangleEnd public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</triangleEnd>
		<triangleBoth public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</triangleBoth>
		<arrowBegin public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</arrowBegin>
		<arrowEnd public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</arrowEnd>
		<arrowBoth public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</arrowBoth>
		<circleBegin public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</circleBegin>
		<circleEnd public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</circleEnd>
		<circleBoth public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</circleBoth>
		<squareBegin public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</squareBegin>
		<squareEnd public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</squareEnd>
		<squareBoth public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</squareBoth>
		<ellipseBegin public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ellipseBegin>
		<ellipseEnd public="1" get="inline" set="null" expr="cast 19" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ellipseEnd>
		<ellipseBoth public="1" get="inline" set="null" expr="cast 20" line="1" static="1">
			<x path="justGraphix.contour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ellipseBoth>
		<isNo public="1" get="accessor" set="null" static="1"><x path="Bool"/></isNo>
		<get_isNo get="inline" set="null" line="32" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isNo>
		<isBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBegin>
		<get_isBegin get="inline" set="null" line="37" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBegin>
		<isEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEnd>
		<get_isEnd get="inline" set="null" line="42" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEnd>
		<isBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBoth>
		<get_isBoth get="inline" set="null" line="47" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBoth>
		<isBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBeginBoth>
		<get_isBeginBoth get="inline" set="null" line="52" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBeginBoth>
		<isEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEndBoth>
		<get_isEndBoth get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEndBoth>
		<isQuadrant public="1" get="accessor" set="null" static="1"><x path="Bool"/></isQuadrant>
		<get_isQuadrant get="inline" set="null" line="62" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isQuadrant>
		<isHalfRound public="1" get="accessor" set="null" static="1"><x path="Bool"/></isHalfRound>
		<get_isHalfRound get="inline" set="null" line="67" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isHalfRound>
		<isTriangleBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleBegin>
		<get_isTriangleBegin get="inline" set="null" line="72" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleBegin>
		<isTriangleEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleEnd>
		<get_isTriangleEnd get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleEnd>
		<isTriangleBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleBoth>
		<get_isTriangleBoth get="inline" set="null" line="82" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleBoth>
		<isTriangleBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleBeginBoth>
		<get_isTriangleBeginBoth get="inline" set="null" line="87" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleBeginBoth>
		<isTriangleEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangleEndBoth>
		<get_isTriangleEndBoth get="inline" set="null" line="92" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangleEndBoth>
		<isArrowBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowBegin>
		<get_isArrowBegin get="inline" set="null" line="97" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowBegin>
		<isArrowEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowEnd>
		<get_isArrowEnd get="inline" set="null" line="102" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowEnd>
		<isArrowBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowBoth>
		<get_isArrowBoth get="inline" set="null" line="107" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowBoth>
		<isArrowBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowBeginBoth>
		<get_isArrowBeginBoth get="inline" set="null" line="112" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowBeginBoth>
		<isArrowEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowEndBoth>
		<get_isArrowEndBoth get="inline" set="null" line="117" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowEndBoth>
		<isCircleBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleBegin>
		<get_isCircleBegin get="inline" set="null" line="122" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleBegin>
		<isCircleEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleEnd>
		<get_isCircleEnd get="inline" set="null" line="127" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleEnd>
		<isCircleBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleBoth>
		<get_isCircleBoth get="inline" set="null" line="132" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleBoth>
		<isCircleBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleBeginBoth>
		<get_isCircleBeginBoth get="inline" set="null" line="137" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleBeginBoth>
		<isCircleEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircleEndBoth>
		<get_isCircleEndBoth get="inline" set="null" line="142" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircleEndBoth>
		<isSquareBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareBegin>
		<get_isSquareBegin get="inline" set="null" line="147" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareBegin>
		<isSquareEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareEnd>
		<get_isSquareEnd get="inline" set="null" line="152" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareEnd>
		<isSquareBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareBoth>
		<get_isSquareBoth get="inline" set="null" line="157" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareBoth>
		<isSquareBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareBeginBoth>
		<get_isSquareBeginBoth get="inline" set="null" line="162" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareBeginBoth>
		<isSquareEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquareEndBoth>
		<get_isSquareEndBoth get="inline" set="null" line="167" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquareEndBoth>
		<isEllipseBegin public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseBegin>
		<get_isEllipseBegin get="inline" set="null" line="172" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseBegin>
		<isEllipseEnd public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseEnd>
		<get_isEllipseEnd get="inline" set="null" line="177" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseEnd>
		<isEllipseBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseBoth>
		<get_isEllipseBoth get="inline" set="null" line="182" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseBoth>
		<isEllipseBeginBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseBeginBoth>
		<get_isEllipseBeginBoth get="inline" set="null" line="187" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseBeginBoth>
		<isEllipseEndBoth public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipseEndBoth>
		<get_isEllipseEndBoth get="inline" set="null" line="192" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipseEndBoth>
		<thisAbstract public="1" get="accessor" set="null" static="1"><x path="justGraphix.contour.StyleEndLine"/></thisAbstract>
		<get_thisAbstract get="inline" set="null" line="198" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.contour.StyleEndLine"/>
</f></get_thisAbstract>
		<isArc public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArc>
		<get_isArc get="inline" set="null" line="206" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArc>
		<isForButton public="1" get="accessor" set="null" static="1"><x path="Bool"/></isForButton>
		<get_isForButton get="inline" set="null" line="211" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isForButton>
		<isArrow public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrow>
		<get_isArrow get="inline" set="null" line="217" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrow>
		<isArrowEnding public="1" get="accessor" set="null" static="1"><x path="Bool"/></isArrowEnding>
		<get_isArrowEnding get="inline" set="null" line="223" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isArrowEnding>
		<isTriangle public="1" get="accessor" set="null" static="1"><x path="Bool"/></isTriangle>
		<get_isTriangle get="inline" set="null" line="229" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isTriangle>
		<isSquare public="1" get="accessor" set="null" static="1"><x path="Bool"/></isSquare>
		<get_isSquare get="inline" set="null" line="235" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isSquare>
		<isCircle public="1" get="accessor" set="null" static="1"><x path="Bool"/></isCircle>
		<get_isCircle get="inline" set="null" line="241" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isCircle>
		<isEllipse public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEllipse>
		<get_isEllipse get="inline" set="null" line="247" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEllipse>
		<isBeginLine public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBeginLine>
		<get_isBeginLine get="inline" set="null" line="253" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBeginLine>
		<isBeginSymetrical public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBeginSymetrical>
		<get_isBeginSymetrical get="inline" set="null" line="282" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBeginSymetrical>
		<isEndLine public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEndLine>
		<get_isEndLine get="inline" set="null" line="312" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEndLine>
		<isEndSymetrical public="1" get="accessor" set="null" static="1"><x path="Bool"/></isEndSymetrical>
		<get_isEndSymetrical get="inline" set="null" line="342" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isEndSymetrical>
		<isBothLine public="1" get="accessor" set="null" static="1"><x path="Bool"/></isBothLine>
		<get_isBothLine get="inline" set="null" line="372" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isBothLine>
		<hasCurves public="1" get="accessor" set="null" static="1"><x path="Bool"/></hasCurves>
		<get_hasCurves get="inline" set="null" line="402" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_hasCurves>
		<isStraightEdgesBegins public="1" get="accessor" set="null" static="1"><x path="Bool"/></isStraightEdgesBegins>
		<get_isStraightEdgesBegins get="inline" set="null" line="432" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isStraightEdgesBegins>
		<isStraightEdgesEnds public="1" get="accessor" set="null" static="1"><x path="Bool"/></isStraightEdgesEnds>
		<get_isStraightEdgesEnds get="inline" set="null" line="438" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_isStraightEdgesEnds>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.contour.StyleSketch" params="" file="src/justGraphix/contour/StyleSketch.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.contour._StyleSketch.StyleSketch_Impl_" params="" file="src/justGraphix/contour/StyleSketch.hx" private="1" module="justGraphix.contour.StyleSketch" extern="1" final="1">
	<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tracer>
	<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Base>
	<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Crude>
	<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FillOnly>
	<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Fine>
	<Dash public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Dash>
	<Equidistant public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Equidistant>
	<FineOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FineOverlap>
	<Medium public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Medium>
	<MediumOverlap public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumOverlap>
	<RoundEnd public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RoundEnd>
	<Mitre public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="justGraphix.contour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Mitre>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour._StyleSketch.StyleSketch_Impl_" params="" file="src/justGraphix/contour/StyleSketch.hx" private="1" module="justGraphix.contour.StyleSketch" extern="1" final="1">
		<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tracer>
		<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Base>
		<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Crude>
		<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FillOnly>
		<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Fine>
		<Dash public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Dash>
		<Equidistant public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Equidistant>
		<FineOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FineOverlap>
		<Medium public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Medium>
		<MediumOverlap public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumOverlap>
		<RoundEnd public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RoundEnd>
		<Mitre public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="justGraphix.contour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Mitre>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.path.ILinePathContext" params="" file="src/justGraphix/path/ILinePathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineSegmentTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
	</class>
	<class path="justGraphix.path.DrawAbstractHelper" params="" file="src/justGraphix/path/DrawAbstractHelper.hx" abstract="1">
		<implements path="justGraphix.path.IPathContext"/>
		<implements path="justGraphix.path.ILinePathContext"/>
		<lineSegmentTo abstract="1" public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo abstract="1" public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<svgLinePath><c path="justGraphix.path.SvgLinePath"/></svgLinePath>
		<x0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x0>
		<y0 expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y0>
		<toggleDraw expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</toggleDraw>
		<moveTo public="1" set="method" line="21"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<quadTo public="1" set="method" line="27"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method" line="31"><f a="x2:y2:x3:y3:x4:y4">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<quadThru public="1" set="method" line="35"><f a="x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<archBezier public="1" get="inline" set="null" line="39"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></archBezier>
		<triangleArch public="1" get="inline" set="null" line="47"><f a="distance:distance2:radius:rotation">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangleArch>
		<path public="1" get="inline" set="null" line="56"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></path>
		<drawPath public="1" get="inline" set="null" line="60"><f a="commands:data">
	<x path="haxe.ds.Vector"><x path="justGraphix.path.PathCommand"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></drawPath>
		<drawGraphicsPath public="1" get="inline" set="null" line="65"><f a="graphicsPath">
	<c path="justGraphix.path.GraphicsPath"/>
	<x path="Void"/>
</f></drawGraphicsPath>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justGraphix.contour.contourPath.DrawContourHelper" params="" file="src/justGraphix/contour/contourPath/DrawContourHelper.hx" abstract="1">
		<extends path="justGraphix.path.DrawAbstractHelper"/>
		<translateX><x path="Float"/></translateX>
		<translateY><x path="Float"/></translateY>
		<scaleX><x path="Float"/></scaleX>
		<scaleY><x path="Float"/></scaleY>
		<pixelImage><x path="justGraphix.image.Pixelimage"/></pixelImage>
		<hitsAllowed><x path="Bool"/></hitsAllowed>
		<hitsArr><c path="justGraphix.hit.HitObjArray"/></hitsArr>
		<new public="1" set="method" line="23">
			<f a="pixelImage:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v=":0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
	</class>
	<class path="justGraphix.contour.contourPath.DrawGradThickHelper" params="" file="src/justGraphix/contour/contourPath/DrawGradThickHelper.hx">
		<extends path="justGraphix.contour.contourPath.DrawContourHelper"/>
		<strokeWidth><x path="Float"/></strokeWidth>
		<strokeTopColor public="1"><x path="Int"/></strokeTopColor>
		<strokeBottomColor public="1"><x path="Int"/></strokeBottomColor>
		<info><c path="justGraphix.hit.HitQuad"/></info>
		<oldInfo><c path="justGraphix.hit.HitQuad"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="33" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="52" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="71" override="1"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<new public="1" set="method" line="25">
			<f a="pixelImage:strokeWidth:strokeTopColor:strokeBottomColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v="::::0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.contour.contourPath.DrawShapeHelper" params="" file="src/justGraphix/contour/contourPath/DrawShapeHelper.hx">
		<extends path="justGraphix.contour.contourPath.DrawContourHelper"/>
		<strokeWidth><x path="Float"/></strokeWidth>
		<strokeColor><x path="Int"/></strokeColor>
		<info><c path="justGraphix.hit.HitQuad"/></info>
		<oldInfo><c path="justGraphix.hit.HitQuad"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="32" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="55" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="74" override="1"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<new public="1" set="method" line="25">
			<f a="pixelImage:strokeWidth:strokeColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v=":::0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.contour.contourPath.DrawThinLineHelper" params="" file="src/justGraphix/contour/contourPath/DrawThinLineHelper.hx">
		<extends path="justGraphix.contour.contourPath.DrawContourHelper"/>
		<strokeColor><x path="Int"/></strokeColor>
		<info><c path="justGraphix.hit.HitThinLine"/></info>
		<oldInfo><c path="justGraphix.hit.HitThinLine"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="30" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="54" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="73" override="1"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<new public="1" set="method" line="23">
			<f a="pixelImage:strokeColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v="::0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.contour.contourPath.DrawTileHelper" params="" file="src/justGraphix/contour/contourPath/DrawTileHelper.hx">
		<extends path="justGraphix.contour.contourPath.DrawContourHelper"/>
		<strokeWidth><x path="Float"/></strokeWidth>
		<tileImageStroke><x path="justGraphix.image.Pixelimage"/></tileImageStroke>
		<info><c path="justGraphix.hit.HitQuad"/></info>
		<oldInfo><c path="justGraphix.hit.HitQuad"/></oldInfo>
		<lineSegmentTo public="1" set="method" line="30" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<lineTo public="1" set="method" line="47" override="1"><f a="x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="63" override="1"><f a="x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<new public="1" set="method" line="23">
			<f a="pixelImage:strokeWidth:tileImageStroke:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v=":::0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.contour.io.Array2DTriGrad" params="" file="src/justGraphix/contour/io/Array2DTriGrad.hx">
		<from><icast><x path="justGraphix.contour.io.Array9"/></icast></from>
		<this><x path="justGraphix.contour.io.Array9"/></this>
		<to><icast><x path="justGraphix.contour.io.Array9"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Array2DTriGrad.Array2DTriGrad_Impl_" params="" file="src/justGraphix/contour/io/Array2DTriGrad.hx" private="1" module="justGraphix.contour.io.Array2DTriGrad" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="justGraphix.contour.io.Array2DTriGrad"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="justGraphix.contour.io.Array2DTriGrad"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="22" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="30" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="38" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="46" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="54" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<colorA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorA>
	<get_colorA set="method" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_colorA>
	<set_colorA set="method" line="65" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorA>
	<colorIntA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntA>
	<get_colorIntA set="method" line="70" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntA>
	<set_colorIntA set="method" line="73" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntA>
	<colorB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorB>
	<get_colorB set="method" line="78" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_colorB>
	<set_colorB set="method" line="81" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorB>
	<colorIntB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntB>
	<get_colorIntB set="method" line="86" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntB>
	<set_colorIntB set="method" line="89" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntB>
	<colorC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorC>
	<get_colorC set="method" line="94" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_colorC>
	<set_colorC set="method" line="97" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorC>
	<colorIntC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntC>
	<get_colorIntC set="method" line="102" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntC>
	<set_colorIntC set="method" line="105" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntC>
	<triangle2DFill public="1" get="inline" set="null" line="113" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
	<triangle2DGrad public="1" get="inline" set="null" line="121" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?colorA_:?colorB_:?colorC_">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
	<triangle public="1" set="method" line="143" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="justGraphix.contour.io.Array9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="161" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="166" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="170" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="179" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="183" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="192" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="197" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_bottom>
	<moveDelta set="method" line="200" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="209" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="213" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="222" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="230" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotate public="1" get="inline" set="null" line="235" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="241" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<prettyString public="1" get="inline" set="null" line="270" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></prettyString>
	<hex public="1" get="inline" set="null" line="277" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="281" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="285" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="289" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></hexC>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Array2DTriGrad.Array2DTriGrad_Impl_" params="" file="src/justGraphix/contour/io/Array2DTriGrad.hx" private="1" module="justGraphix.contour.io.Array2DTriGrad" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="justGraphix.contour.io.Array2DTriGrad"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="justGraphix.contour.io.Array2DTriGrad"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="22" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="30" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="38" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="46" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="54" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<colorA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorA>
		<get_colorA set="method" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_colorA>
		<set_colorA set="method" line="65" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorA>
		<colorIntA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntA>
		<get_colorIntA set="method" line="70" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntA>
		<set_colorIntA set="method" line="73" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntA>
		<colorB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorB>
		<get_colorB set="method" line="78" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_colorB>
		<set_colorB set="method" line="81" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorB>
		<colorIntB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntB>
		<get_colorIntB set="method" line="86" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntB>
		<set_colorIntB set="method" line="89" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntB>
		<colorC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></colorC>
		<get_colorC set="method" line="94" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_colorC>
		<set_colorC set="method" line="97" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_colorC>
		<colorIntC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorIntC>
		<get_colorIntC set="method" line="102" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
</f></get_colorIntC>
		<set_colorIntC set="method" line="105" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorIntC>
		<triangle2DFill public="1" get="inline" set="null" line="113" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle2DGrad public="1" get="inline" set="null" line="121" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?colorA_:?colorB_:?colorC_">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DGrad>
		<triangle public="1" set="method" line="143" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="justGraphix.contour.io.Array9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="161" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="166" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="170" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="179" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="183" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="192" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="197" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
</f></get_bottom>
		<moveDelta set="method" line="200" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="209" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="213" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="222" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="230" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotate public="1" get="inline" set="null" line="235" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="241" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<prettyString public="1" get="inline" set="null" line="270" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></prettyString>
		<hex public="1" get="inline" set="null" line="277" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Array9"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="281" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="285" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="289" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array9"/>
	<c path="String"/>
</f></hexC>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.contour.io.Array2DTriangles" params="" file="src/justGraphix/contour/io/Array2DTriangles.hx">
		<from><icast><x path="justGraphix.contour.io.Array7"/></icast></from>
		<this><x path="justGraphix.contour.io.Array7"/></this>
		<to><icast><x path="justGraphix.contour.io.Array7"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Array2DTriangles.Array2DTriangles_Impl_" params="" file="src/justGraphix/contour/io/Array2DTriangles.hx" private="1" module="justGraphix.contour.io.Array2DTriangles" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="justGraphix.contour.io.Array2DTriangles"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="justGraphix.contour.io.Array2DTriangles"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="22" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="30" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="38" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="46" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="54" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<color public="1" get="accessor" set="accessor" static="1"><x path="Float"/></color>
	<get_color set="method" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_color>
	<set_color set="method" line="65" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_color>
	<colorInt public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorInt>
	<get_colorInt set="method" line="70" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Int"/>
</f></get_colorInt>
	<set_colorInt set="method" line="73" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorInt>
	<triangle2DFill public="1" get="inline" set="null" line="93" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
	<triangle public="1" set="method" line="105" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="justGraphix.contour.io.Array7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="123" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="128" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="132" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="141" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="145" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<wid public="1" get="accessor" set="accessor" static="1"><x path="Float"/></wid>
	<get_wid get="inline" set="null" line="154" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_wid>
	<midX public="1" get="accessor" set="accessor" static="1"><x path="Float"/></midX>
	<get_midX get="inline" set="null" line="159" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_midX>
	<set_midX get="inline" set="null" line="163" static="1"><f a="this:mx">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_midX>
	<midY public="1" get="accessor" set="accessor" static="1"><x path="Float"/></midY>
	<get_midY get="inline" set="null" line="170" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_midY>
	<set_midY get="inline" set="null" line="174" static="1"><f a="this:my">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_midY>
	<set_wid get="inline" set="null" line="180" static="1"><f a="this:w">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_wid>
	<scaleX get="inline" set="null" line="185" static="1"><f a="this:sx">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleX>
	<hi public="1" get="accessor" set="accessor" static="1"><x path="Float"/></hi>
	<get_hi get="inline" set="null" line="210" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_hi>
	<set_hi get="inline" set="null" line="214" static="1"><f a="this:h">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_hi>
	<scaleY get="inline" set="null" line="219" static="1"><f a="this:sy">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleY>
	<getXRange public="1" get="inline" set="null" line="243" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getXRange>
	<getYRange public="1" get="inline" set="null" line="254" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getYRange>
	<getWidRange public="1" get="inline" set="null" line="265" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getWidRange>
	<getHiRange public="1" get="inline" set="null" line="278" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getHiRange>
	<getRangeBounds public="1" get="inline" set="null" line="292" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<a>
		<y><x path="Float"/></y>
		<x><x path="Float"/></x>
		<width><x path="Float"/></width>
		<height><x path="Float"/></height>
	</a>
</f></getRangeBounds>
	<xRange public="1" get="inline" set="null" line="297" static="1"><f a="this:range:px">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xRange>
	<yRange public="1" set="method" line="303" static="1"><f a="this:range:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></yRange>
	<translateRange public="1" set="method" line="323" static="1"><f a="this:range:dx:dy">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="333" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="338" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_bottom>
	<translate public="1" get="inline" set="null" line="342" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
	<sign public="1" get="inline" set="null" line="351" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="355" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="364" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fillaRGBs public="1" set="method" line="373" static="1"><f a="this:rgbs:alphas:width">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fillaRGBs>
	<plotaRGBLine set="method" line="492" static="1"><f a="this:rgbs:alphas:x0:y0:x1:y1:width:a:r:g:b">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></plotaRGBLine>
	<fullHit public="1" set="method" line="527" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<fullHitRange public="1" set="method" line="532" static="1"><f a="this:range:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Int"/></c>
</f></fullHitRange>
	<rotate public="1" get="inline" set="null" line="544" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="550" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<prettyString public="1" get="inline" set="null" line="579" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<c path="String"/>
</f></prettyString>
	<hex public="1" get="inline" set="null" line="586" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<c path="String"/>
</f></hex>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Array2DTriangles.Array2DTriangles_Impl_" params="" file="src/justGraphix/contour/io/Array2DTriangles.hx" private="1" module="justGraphix.contour.io.Array2DTriangles" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="justGraphix.contour.io.Array2DTriangles"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="justGraphix.contour.io.Array2DTriangles"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="22" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="30" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="38" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="46" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="54" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<color public="1" get="accessor" set="accessor" static="1"><x path="Float"/></color>
		<get_color set="method" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_color>
		<set_color set="method" line="65" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_color>
		<colorInt public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorInt>
		<get_colorInt set="method" line="70" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Int"/>
</f></get_colorInt>
		<set_colorInt set="method" line="73" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorInt>
		<triangle2DFill public="1" get="inline" set="null" line="93" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle public="1" set="method" line="105" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="justGraphix.contour.io.Array7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="123" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="128" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="132" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="141" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="145" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<wid public="1" get="accessor" set="accessor" static="1"><x path="Float"/></wid>
		<get_wid get="inline" set="null" line="154" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_wid>
		<midX public="1" get="accessor" set="accessor" static="1"><x path="Float"/></midX>
		<get_midX get="inline" set="null" line="159" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_midX>
		<set_midX get="inline" set="null" line="163" static="1"><f a="this:mx">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_midX>
		<midY public="1" get="accessor" set="accessor" static="1"><x path="Float"/></midY>
		<get_midY get="inline" set="null" line="170" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_midY>
		<set_midY get="inline" set="null" line="174" static="1"><f a="this:my">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_midY>
		<set_wid get="inline" set="null" line="180" static="1"><f a="this:w">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_wid>
		<scaleX get="inline" set="null" line="185" static="1"><f a="this:sx">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleX>
		<hi public="1" get="accessor" set="accessor" static="1"><x path="Float"/></hi>
		<get_hi get="inline" set="null" line="210" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_hi>
		<set_hi get="inline" set="null" line="214" static="1"><f a="this:h">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_hi>
		<scaleY get="inline" set="null" line="219" static="1"><f a="this:sy">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleY>
		<getXRange public="1" get="inline" set="null" line="243" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getXRange>
		<getYRange public="1" get="inline" set="null" line="254" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getYRange>
		<getWidRange public="1" get="inline" set="null" line="265" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getWidRange>
		<getHiRange public="1" get="inline" set="null" line="278" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getHiRange>
		<getRangeBounds public="1" get="inline" set="null" line="292" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<a>
		<y><x path="Float"/></y>
		<x><x path="Float"/></x>
		<width><x path="Float"/></width>
		<height><x path="Float"/></height>
	</a>
</f></getRangeBounds>
		<xRange public="1" get="inline" set="null" line="297" static="1"><f a="this:range:px">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xRange>
		<yRange public="1" set="method" line="303" static="1"><f a="this:range:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></yRange>
		<translateRange public="1" set="method" line="323" static="1"><f a="this:range:dx:dy">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="333" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="338" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
</f></get_bottom>
		<translate public="1" get="inline" set="null" line="342" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<sign public="1" get="inline" set="null" line="351" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="355" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="364" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fillaRGBs public="1" set="method" line="373" static="1"><f a="this:rgbs:alphas:width">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fillaRGBs>
		<plotaRGBLine set="method" line="492" static="1"><f a="this:rgbs:alphas:x0:y0:x1:y1:width:a:r:g:b">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="haxe.io.UInt8Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></plotaRGBLine>
		<fullHit public="1" set="method" line="527" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<fullHitRange public="1" set="method" line="532" static="1"><f a="this:range:px:py">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Int"/></c>
</f></fullHitRange>
		<rotate public="1" get="inline" set="null" line="544" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="550" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<prettyString public="1" get="inline" set="null" line="579" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<c path="String"/>
</f></prettyString>
		<hex public="1" get="inline" set="null" line="586" static="1"><f a="this">
	<x path="justGraphix.contour.io.Array7"/>
	<c path="String"/>
</f></hex>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.contour.io.Array7" params="" file="src/justGraphix/contour/io/Array7.hx">
		<this><x path="justGraphix.contour.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Array7.Array7_Impl_" params="" file="src/justGraphix/contour/io/Array7.hx" private="1" module="justGraphix.contour.io.Array7" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="justGraphix.contour.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="justGraphix.contour.io.Array7"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	<cloneToPos public="1" get="inline" set="null" line="44" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></cloneToPos>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Array7.Array7_Impl_" params="" file="src/justGraphix/contour/io/Array7.hx" private="1" module="justGraphix.contour.io.Array7" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="justGraphix.contour.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="justGraphix.contour.io.Array7"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
		<cloneToPos public="1" get="inline" set="null" line="44" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></cloneToPos>
	</class>
	<abstract path="justGraphix.contour.io.Array9" params="" file="src/justGraphix/contour/io/Array9.hx">
		<this><x path="justGraphix.contour.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Array9.Array9_Impl_" params="" file="src/justGraphix/contour/io/Array9.hx" private="1" module="justGraphix.contour.io.Array9" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="justGraphix.contour.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="justGraphix.contour.io.Array9"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	<cloneToPos public="1" get="inline" set="null" line="44" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></cloneToPos>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Array9.Array9_Impl_" params="" file="src/justGraphix/contour/io/Array9.hx" private="1" module="justGraphix.contour.io.Array9" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="justGraphix.contour.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="justGraphix.contour.io.Array9"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
		<cloneToPos public="1" get="inline" set="null" line="44" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></cloneToPos>
	</class>
	<abstract path="justGraphix.contour.io.ArrayFlat" params="" file="src/justGraphix/contour/io/ArrayFlat.hx">
		<this><c path="Array"><x path="Float"/></c></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._ArrayFlat.ArrayFlat_Impl_" params="" file="src/justGraphix/contour/io/ArrayFlat.hx" private="1" module="justGraphix.contour.io.ArrayFlat" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="justGraphix.contour.io.ArrayFlat"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="24" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="29" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="33" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="39" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="43" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<hasNext public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<setArray public="1" get="inline" set="null" line="59" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
	<clone public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.contour.io.ArrayFlat"/>
</f></clone>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._ArrayFlat.ArrayFlat_Impl_" params="" file="src/justGraphix/contour/io/ArrayFlat.hx" private="1" module="justGraphix.contour.io.ArrayFlat" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="justGraphix.contour.io.ArrayFlat"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="24" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="29" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="33" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="39" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="43" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<hasNext public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<setArray public="1" get="inline" set="null" line="59" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
		<clone public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.contour.io.ArrayFlat"/>
</f></clone>
	</class>
	<abstract path="justGraphix.contour.io.ArrayFlatDepth" params="" file="src/justGraphix/contour/io/ArrayFlatDepth.hx">
		<this><x path="justGraphix.contour.io.ArrayFlat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="src/justGraphix/contour/io/ArrayFlatDepth.hx" private="1" module="justGraphix.contour.io.ArrayFlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a=""><x path="justGraphix.contour.io.ArrayFlatDepth"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<getArray public="1" get="inline" set="null" line="12" static="1"><f a="this">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<t path="justGraphix.contour.io.Float32Array"/>
</f></getArray>
	<rangeToEnd public="1" set="method" line="20" static="1"><f a="this:starting:totalLen:section">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<cloneRangeToPos public="1" set="method" line="44" static="1"><f a="this:starting:totalLen:section">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></cloneRangeToPos>
	<rangeToStart public="1" get="inline" set="null" line="62" static="1"><f a="this:starting:totalLen">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="87" static="1"><f a="this:start0:start1:totalLen">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="src/justGraphix/contour/io/ArrayFlatDepth.hx" private="1" module="justGraphix.contour.io.ArrayFlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a=""><x path="justGraphix.contour.io.ArrayFlatDepth"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<getArray public="1" get="inline" set="null" line="12" static="1"><f a="this">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<t path="justGraphix.contour.io.Float32Array"/>
</f></getArray>
		<rangeToEnd public="1" set="method" line="20" static="1"><f a="this:starting:totalLen:section">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<cloneRangeToPos public="1" set="method" line="44" static="1"><f a="this:starting:totalLen:section">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></cloneRangeToPos>
		<rangeToStart public="1" get="inline" set="null" line="62" static="1"><f a="this:starting:totalLen">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="87" static="1"><f a="this:start0:start1:totalLen">
	<x path="justGraphix.contour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.contour.io.ColorTriangles2D" params="" file="src/justGraphix/contour/io/ColorTriangles2D.hx">
		<this><x path="justGraphix.contour.io.Flat3x6"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._ColorTriangles2D.ColorTriangles2D_Impl_" params="" file="src/justGraphix/contour/io/ColorTriangles2D.hx" private="1" module="justGraphix.contour.io.ColorTriangles2D" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.contour.io.ColorTriangles2D"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="11" static="1"><f a="len">
	<x path="Int"/>
	<x path="justGraphix.contour.io.ColorTriangles2D"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="15" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="18" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="32" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="35" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="42" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="46" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="52" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="56" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="66" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="72" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="75" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="80" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="83" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="89" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="92" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="100" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="104" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="110" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="114" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="120" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="124" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="130" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="133" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="138" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="141" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="147" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="150" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="157" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="161" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="167" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="171" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="177" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="181" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<triangle public="1" set="method" line="188" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="207" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="212" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="216" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="225" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="229" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<getXRange public="1" get="inline" set="null" line="237" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getXRange>
	<getYRange public="1" get="inline" set="null" line="248" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getYRange>
	<xRange public="1" get="inline" set="null" line="259" static="1"><f a="this:range:px">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xRange>
	<yRange public="1" set="method" line="265" static="1"><f a="this:range:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></yRange>
	<translateRange public="1" set="method" line="271" static="1"><f a="this:range:dx:dy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="281" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="286" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bottom>
	<translate public="1" get="inline" set="null" line="290" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
	<alphaRange public="1" get="inline" set="null" line="300" static="1"><f a="this:range:a">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaRange>
	<argbRange public="1" get="inline" set="null" line="309" static="1"><f a="this:range:argb_">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbRange>
	<rgbRange public="1" get="inline" set="null" line="318" static="1"><f a="this:range:rgb_">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rgbRange>
	<sign public="1" get="inline" set="null" line="327" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="331" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="340" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<hitRange public="1" set="method" line="347" static="1"><f a="this:range:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitRange>
	<rangeCollisionRough public="1" get="inline" set="null" line="361" static="1"><f a="this:range1:range2">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Bool"/>
</f></rangeCollisionRough>
	<fullHit public="1" set="method" line="379" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotateRange public="1" get="inline" set="null" line="385" static="1"><f a="this:range:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateRange>
	<rotate public="1" get="inline" set="null" line="394" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="400" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="429" static="1"><f a="this:color:times">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="436" static="1"><f a="this:colorA:colorB:colorC">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<blendColorRange public="1" get="inline" set="null" line="443" static="1">
		<f a="this:color:range:t:?smooth" v="::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColorRange>
	<blendBetweenColorRange public="1" get="inline" set="null" line="454" static="1">
		<f a="this:color:color2:range:t:?smooth" v=":::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColorRange>
	<blendColorsRange public="1" get="inline" set="null" line="465" static="1">
		<f a="this:colorA:colorB:colorC:range:t:?smooth" v="::::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColorsRange>
	<blendBetweenColorsRange public="1" get="inline" set="null" line="477" static="1">
		<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:range:t:?smooth" v=":::::::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColorsRange>
	<boundingRange public="1" get="inline" set="null" line="486" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></boundingRange>
	<scaleRangeXY public="1" get="inline" set="null" line="512" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXY>
	<scaleRangeXB public="1" get="inline" set="null" line="531" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXB>
	<scaleRangeRY public="1" get="inline" set="null" line="550" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRY>
	<scaleRangeRB public="1" get="inline" set="null" line="569" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRB>
	<scaleRangeCentre public="1" get="inline" set="null" line="618" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeCentre>
	<blendBetweenColors public="1" get="inline" set="null" line="645" static="1">
		<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:t:?smooth" v="::::::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColors>
	<blendBetweenColor public="1" get="inline" set="null" line="688" static="1">
		<f a="this:color:color2:t:?smooth" v="::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColor>
	<blendColor public="1" get="inline" set="null" line="714" static="1">
		<f a="this:color:t:?smooth" v=":::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColor>
	<blendColors public="1" get="inline" set="null" line="737" static="1">
		<f a="this:colorA:colorB:colorC:t:?smooth" v=":::::true">
			<x path="justGraphix.contour.io.Flat3x6"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColors>
	<alpha public="1" get="null" set="accessor" static="1"><x path="Float"/></alpha>
	<set_alpha get="inline" set="null" line="768" static="1"><f a="this:a">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="776" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="784" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="792" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="799" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="807" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="814" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="822" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="829" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="837" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="845" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="853" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="861" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="869" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="877" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="884" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="890" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="901" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="905" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="909" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="913" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="917" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexAll>
	<blend get="inline" set="null" line="928" static="1"><f a="this:a:b:t">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></blend>
	<smootherStep get="inline" set="null" line="933" static="1"><f a="this:t">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
	<alphaChannel public="1" get="inline" set="null" line="938" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="941" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="944" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="947" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._ColorTriangles2D.ColorTriangles2D_Impl_" params="" file="src/justGraphix/contour/io/ColorTriangles2D.hx" private="1" module="justGraphix.contour.io.ColorTriangles2D" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.contour.io.ColorTriangles2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="11" static="1"><f a="len">
	<x path="Int"/>
	<x path="justGraphix.contour.io.ColorTriangles2D"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="15" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="18" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="32" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="35" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="42" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="46" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="52" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="56" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="66" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="72" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="75" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="80" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="83" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="89" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="92" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="100" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="104" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="110" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="114" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="120" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="124" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="130" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="133" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="138" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="141" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="147" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="150" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="157" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="161" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="167" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="171" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="177" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="181" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<triangle public="1" set="method" line="188" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="207" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="212" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="216" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="225" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="229" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<getXRange public="1" get="inline" set="null" line="237" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getXRange>
		<getYRange public="1" get="inline" set="null" line="248" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getYRange>
		<xRange public="1" get="inline" set="null" line="259" static="1"><f a="this:range:px">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xRange>
		<yRange public="1" set="method" line="265" static="1"><f a="this:range:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></yRange>
		<translateRange public="1" set="method" line="271" static="1"><f a="this:range:dx:dy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="281" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="286" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
</f></get_bottom>
		<translate public="1" get="inline" set="null" line="290" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<alphaRange public="1" get="inline" set="null" line="300" static="1"><f a="this:range:a">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaRange>
		<argbRange public="1" get="inline" set="null" line="309" static="1"><f a="this:range:argb_">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbRange>
		<rgbRange public="1" get="inline" set="null" line="318" static="1"><f a="this:range:rgb_">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rgbRange>
		<sign public="1" get="inline" set="null" line="327" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="331" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="340" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<hitRange public="1" set="method" line="347" static="1"><f a="this:range:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitRange>
		<rangeCollisionRough public="1" get="inline" set="null" line="361" static="1"><f a="this:range1:range2">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Bool"/>
</f></rangeCollisionRough>
		<fullHit public="1" set="method" line="379" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotateRange public="1" get="inline" set="null" line="385" static="1"><f a="this:range:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateRange>
		<rotate public="1" get="inline" set="null" line="394" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="400" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="429" static="1"><f a="this:color:times">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="436" static="1"><f a="this:colorA:colorB:colorC">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<blendColorRange public="1" get="inline" set="null" line="443" static="1">
			<f a="this:color:range:t:?smooth" v="::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColorRange>
		<blendBetweenColorRange public="1" get="inline" set="null" line="454" static="1">
			<f a="this:color:color2:range:t:?smooth" v=":::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColorRange>
		<blendColorsRange public="1" get="inline" set="null" line="465" static="1">
			<f a="this:colorA:colorB:colorC:range:t:?smooth" v="::::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColorsRange>
		<blendBetweenColorsRange public="1" get="inline" set="null" line="477" static="1">
			<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:range:t:?smooth" v=":::::::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColorsRange>
		<boundingRange public="1" get="inline" set="null" line="486" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></boundingRange>
		<scaleRangeXY public="1" get="inline" set="null" line="512" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXY>
		<scaleRangeXB public="1" get="inline" set="null" line="531" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXB>
		<scaleRangeRY public="1" get="inline" set="null" line="550" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRY>
		<scaleRangeRB public="1" get="inline" set="null" line="569" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRB>
		<scaleRangeCentre public="1" get="inline" set="null" line="618" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeCentre>
		<blendBetweenColors public="1" get="inline" set="null" line="645" static="1">
			<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:t:?smooth" v="::::::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColors>
		<blendBetweenColor public="1" get="inline" set="null" line="688" static="1">
			<f a="this:color:color2:t:?smooth" v="::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColor>
		<blendColor public="1" get="inline" set="null" line="714" static="1">
			<f a="this:color:t:?smooth" v=":::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColor>
		<blendColors public="1" get="inline" set="null" line="737" static="1">
			<f a="this:colorA:colorB:colorC:t:?smooth" v=":::::true">
				<x path="justGraphix.contour.io.Flat3x6"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColors>
		<alpha public="1" get="null" set="accessor" static="1"><x path="Float"/></alpha>
		<set_alpha get="inline" set="null" line="768" static="1"><f a="this:a">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="776" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="784" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="792" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="799" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="807" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="814" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="822" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="829" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="837" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="845" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="853" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="861" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="869" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="877" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="884" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="890" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="901" static="1"><f a="this:v">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="905" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="909" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="913" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="917" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<c path="String"/>
</f></hexAll>
		<blend get="inline" set="null" line="928" static="1"><f a="this:a:b:t">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></blend>
		<smootherStep get="inline" set="null" line="933" static="1"><f a="this:t">
	<x path="justGraphix.contour.io.Flat3x6"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
		<alphaChannel public="1" get="inline" set="null" line="938" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="941" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="944" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="947" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="justGraphix.contour.io.Flat3x6" params="" file="src/justGraphix/contour/io/Flat3x6.hx">
		<from><icast><x path="justGraphix.contour.io.Float32FlatDepth"/></icast></from>
		<this><x path="justGraphix.contour.io.Float32FlatDepth"/></this>
		<to><icast><x path="justGraphix.contour.io.Float32FlatDepth"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Flat3x6.Flat3x6_Impl_" params="" file="src/justGraphix/contour/io/Flat3x6.hx" private="1" module="justGraphix.contour.io.Flat3x6" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<x path="justGraphix.contour.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<x path="justGraphix.contour.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.contour.io.Flat3x6"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getFloat32Array public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<t path="justGraphix.contour.io.Float32Array"/>
</f></getFloat32Array>
	<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Flat3x6.Flat3x6_Impl_" params="" file="src/justGraphix/contour/io/Flat3x6.hx" private="1" module="justGraphix.contour.io.Flat3x6" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<x path="justGraphix.contour.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<x path="justGraphix.contour.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.contour.io.Flat3x6"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getFloat32Array public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<t path="justGraphix.contour.io.Float32Array"/>
</f></getFloat32Array>
		<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="justGraphix.contour.io.Flat3x8" params="" file="src/justGraphix/contour/io/Flat3x8.hx">
		<from><icast><x path="justGraphix.contour.io.Float32FlatDepth"/></icast></from>
		<this><x path="justGraphix.contour.io.Float32FlatDepth"/></this>
		<to><icast><x path="justGraphix.contour.io.Float32FlatDepth"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Flat3x8.Flat3x8_Impl_" params="" file="src/justGraphix/contour/io/Flat3x8.hx" private="1" module="justGraphix.contour.io.Flat3x8" final="1">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<x path="justGraphix.contour.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<x path="justGraphix.contour.io.Float32FlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.contour.io.Flat3x8"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<getFloat32Array public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<t path="justGraphix.contour.io.Float32Array"/>
</f></getFloat32Array>
	<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Flat3x8.Flat3x8_Impl_" params="" file="src/justGraphix/contour/io/Flat3x8.hx" private="1" module="justGraphix.contour.io.Flat3x8" final="1">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<x path="justGraphix.contour.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<x path="justGraphix.contour.io.Float32FlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.contour.io.Flat3x8"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="24" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="28" static="1"><f a="this:id">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<getFloat32Array public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<t path="justGraphix.contour.io.Float32Array"/>
</f></getFloat32Array>
		<toEnd public="1" get="inline" set="null" line="37" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="41" static="1"><f a="this:id:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="45" static="1"><f a="this:id0:id1:len">
	<x path="justGraphix.contour.io.Float32FlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<typedef path="justGraphix.contour.io.Float32Array" params="" file="src/justGraphix/contour/io/Float32Array.hx">
		<x path="haxe.io.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<abstract path="justGraphix.contour.io.Float32Flat" params="" file="src/justGraphix/contour/io/Float32Flat.hx">
		<from><icast field="fromArray"><t path="justGraphix.contour.io.Float32Array"/></icast></from>
		<this><t path="justGraphix.contour.io.Float32Array"/></this>
		<to><icast field="toArray"><x path="haxe.io.Float32Array"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Float32Flat.Float32Flat_Impl_" params="" file="src/justGraphix/contour/io/Float32Flat.hx" private="1" module="justGraphix.contour.io.Float32Flat" final="1">
	<readItem public="1" get="inline" set="null" line="19" static="1">
		<f a="this:k">
			<t path="justGraphix.contour.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k:v">
			<t path="justGraphix.contour.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</writeItem>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.contour.io.Float32Flat"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="44" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
</f></get_size>
	<set_size get="inline" set="null" line="49" static="1"><f a="this:id">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="55" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="59" static="1"><f a="this:id">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="65" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="69" static="1"><f a="this:pos_">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<fits public="1" get="inline" set="null" line="75" static="1"><f a="this:k">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></fits>
	<resize public="1" get="inline" set="null" line="84" static="1"><f a="this:l">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
	<optimiseLength public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
</f></optimiseLength>
	<updateLen get="inline" set="null" line="111" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Void"/>
</f></updateLen>
	<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<t path="justGraphix.contour.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<toArray public="1" get="inline" set="null" line="138" static="1">
		<f a="this">
			<t path="justGraphix.contour.io.Float32Array"/>
			<t path="justGraphix.contour.io.Float32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<fromArray public="1" get="inline" set="null" line="143" static="1">
		<f a="arr">
			<t path="justGraphix.contour.io.Float32Array"/>
			<x path="justGraphix.contour.io.Float32Flat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<clone public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="justGraphix.contour.io.Float32Flat"/>
</f></clone>
	<fill public="1" get="inline" set="null" line="155" static="1"><f a="this:arr">
	<t path="justGraphix.contour.io.Float32Array"/>
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Void"/>
</f></fill>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Float32Flat.Float32Flat_Impl_" params="" file="src/justGraphix/contour/io/Float32Flat.hx" private="1" module="justGraphix.contour.io.Float32Flat" final="1">
		<readItem public="1" get="inline" set="null" line="19" static="1">
			<f a="this:k">
				<t path="justGraphix.contour.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k:v">
				<t path="justGraphix.contour.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var ff = new Float32Flat(2);
     * ... ff[0] = 1.;
     * ... ff[0] == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</writeItem>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.contour.io.Float32Flat"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="accessor" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="44" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
</f></get_size>
		<set_size get="inline" set="null" line="49" static="1"><f a="this:id">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="55" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="59" static="1"><f a="this:id">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="65" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="69" static="1"><f a="this:pos_">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<fits public="1" get="inline" set="null" line="75" static="1"><f a="this:k">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></fits>
		<resize public="1" get="inline" set="null" line="84" static="1"><f a="this:l">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<optimiseLength public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Int"/>
</f></optimiseLength>
		<updateLen get="inline" set="null" line="111" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Void"/>
</f></updateLen>
		<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="119" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<t path="justGraphix.contour.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<toArray public="1" get="inline" set="null" line="138" static="1">
			<f a="this">
				<t path="justGraphix.contour.io.Float32Array"/>
				<t path="justGraphix.contour.io.Float32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<fromArray public="1" get="inline" set="null" line="143" static="1">
			<f a="arr">
				<t path="justGraphix.contour.io.Float32Array"/>
				<x path="justGraphix.contour.io.Float32Flat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<clone public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="justGraphix.contour.io.Float32Flat"/>
</f></clone>
		<fill public="1" get="inline" set="null" line="155" static="1"><f a="this:arr">
	<t path="justGraphix.contour.io.Float32Array"/>
	<t path="justGraphix.contour.io.Float32Array"/>
	<x path="Void"/>
</f></fill>
	</class>
	<abstract path="justGraphix.contour.io.Float32FlatDepth" params="" file="src/justGraphix/contour/io/Float32FlatDepth.hx">
		<this><x path="justGraphix.contour.io.Float32Flat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="src/justGraphix/contour/io/Float32FlatDepth.hx" private="1" module="justGraphix.contour.io.Float32FlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.contour.io.Float32FlatDepth"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rangeToEnd public="1" set="method" line="12" static="1"><f a="this:starting:totalLen:section">
	<x path="justGraphix.contour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="38" static="1"><f a="this:starting:totalLen">
	<x path="justGraphix.contour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="65" static="1"><f a="this:start0:start1:totalLen">
	<x path="justGraphix.contour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._Float32FlatDepth.Float32FlatDepth_Impl_" params="" file="src/justGraphix/contour/io/Float32FlatDepth.hx" private="1" module="justGraphix.contour.io.Float32FlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.contour.io.Float32FlatDepth"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rangeToEnd public="1" set="method" line="12" static="1"><f a="this:starting:totalLen:section">
	<x path="justGraphix.contour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="38" static="1"><f a="this:starting:totalLen">
	<x path="justGraphix.contour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="65" static="1"><f a="this:start0:start1:totalLen">
	<x path="justGraphix.contour.io.Float32Flat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.contour.io.IntIterStart" params="" file="src/justGraphix/contour/io/IteratorRange.hx" module="justGraphix.contour.io.IteratorRange">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<new public="1" set="method" line="7"><f a="min_:max_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.contour.io.IteratorRange" params="" file="src/justGraphix/contour/io/IteratorRange.hx">
		<from>
			<icast><c path="justGraphix.contour.io.IntIterStart"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="justGraphix.contour.io.IntIterStart"/></this>
		<to><icast field="toIterStart"><x path="justGraphix.contour.io.IteratorRange"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._IteratorRange.IteratorRange_Impl_" params="" file="src/justGraphix/contour/io/IteratorRange.hx" private="1" module="justGraphix.contour.io.IteratorRange" final="1">
	<startLength public="1" get="inline" set="null" line="17" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
</f></startLength>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="26" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="30" static="1">
		<f a="this">
			<c path="justGraphix.contour.io.IntIterStart"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<iterator public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
	<adding public="1" get="inline" set="null" line="37" static="1">
		<f a="a:b">
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="41" static="1"><f a="this:b">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
</f></add>
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="49" static="1"><f a="this">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="53" static="1"><f a="this:l">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<contains public="1" get="inline" set="null" line="58" static="1"><f a="this:v">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<isWithin public="1" get="inline" set="null" line="62" static="1"><f a="this:ir">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="66" static="1"><f a="this:v">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<addAssign public="1" get="inline" set="null" line="72" static="1">
		<f a="a:v">
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</addAssign>
	<minusAssign public="1" get="inline" set="null" line="78" static="1">
		<f a="a:v">
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</minusAssign>
	<ifContainMove public="1" get="inline" set="null" line="82" static="1"><f a="this:v:amount">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._IteratorRange.IteratorRange_Impl_" params="" file="src/justGraphix/contour/io/IteratorRange.hx" private="1" module="justGraphix.contour.io.IteratorRange" final="1">
		<startLength public="1" get="inline" set="null" line="17" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
</f></startLength>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="26" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="30" static="1">
			<f a="this">
				<c path="justGraphix.contour.io.IntIterStart"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<iterator public="1" get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
		<adding public="1" get="inline" set="null" line="37" static="1">
			<f a="a:b">
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="41" static="1"><f a="this:b">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
</f></add>
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="49" static="1"><f a="this">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="53" static="1"><f a="this:l">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<contains public="1" get="inline" set="null" line="58" static="1"><f a="this:v">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<isWithin public="1" get="inline" set="null" line="62" static="1"><f a="this:ir">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="66" static="1"><f a="this:v">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<addAssign public="1" get="inline" set="null" line="72" static="1">
			<f a="a:v">
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</addAssign>
		<minusAssign public="1" get="inline" set="null" line="78" static="1">
			<f a="a:v">
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</minusAssign>
		<ifContainMove public="1" get="inline" set="null" line="82" static="1"><f a="this:v:amount">
	<c path="justGraphix.contour.io.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<abstract path="justGraphix.contour.io.TextureTriangles2D" params="" file="src/justGraphix/contour/io/TextureTriangles2D.hx">
		<this><x path="justGraphix.contour.io.Flat3x8"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.contour.io._TextureTriangles2D.TextureTriangles2D_Impl_" params="" file="src/justGraphix/contour/io/TextureTriangles2D.hx" private="1" module="justGraphix.contour.io.TextureTriangles2D" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.contour.io.TextureTriangles2D"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="11" static="1"><f a="len">
	<x path="Int"/>
	<x path="justGraphix.contour.io.TextureTriangles2D"/>
</f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="15" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="18" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="26" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
	<get_redA set="method" line="32" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_redA>
	<set_redA set="method" line="35" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
	<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
	<get_greenA get="inline" set="null" line="42" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_greenA>
	<set_greenA get="inline" set="null" line="46" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
	<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
	<get_blueA get="inline" set="null" line="52" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_blueA>
	<set_blueA get="inline" set="null" line="56" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
	<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
	<get_alphaA get="inline" set="null" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_alphaA>
	<set_alphaA get="inline" set="null" line="66" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
	<au public="1" get="accessor" set="accessor" static="1"><x path="Float"/></au>
	<get_au get="inline" set="null" line="72" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_au>
	<set_au get="inline" set="null" line="76" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_au>
	<av public="1" get="accessor" set="accessor" static="1"><x path="Float"/></av>
	<get_av get="inline" set="null" line="82" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_av>
	<set_av get="inline" set="null" line="86" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_av>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="92" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="95" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="100" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="103" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
	<get_redB set="method" line="109" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_redB>
	<set_redB set="method" line="112" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
	<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
	<get_greenB get="inline" set="null" line="120" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_greenB>
	<set_greenB get="inline" set="null" line="124" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
	<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
	<get_blueB get="inline" set="null" line="130" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_blueB>
	<set_blueB get="inline" set="null" line="134" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
	<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
	<get_alphaB get="inline" set="null" line="140" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_alphaB>
	<set_alphaB get="inline" set="null" line="144" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
	<bu public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bu>
	<get_bu get="inline" set="null" line="150" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bu>
	<set_bu get="inline" set="null" line="154" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bu>
	<bv public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bv>
	<get_bv get="inline" set="null" line="160" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bv>
	<set_bv get="inline" set="null" line="164" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bv>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="170" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="173" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="178" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="181" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
	<get_redC set="method" line="187" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_redC>
	<set_redC set="method" line="190" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
	<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
	<get_greenC get="inline" set="null" line="197" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_greenC>
	<set_greenC get="inline" set="null" line="201" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
	<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
	<get_blueC get="inline" set="null" line="207" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_blueC>
	<set_blueC get="inline" set="null" line="211" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
	<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
	<get_alphaC get="inline" set="null" line="217" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_alphaC>
	<set_alphaC get="inline" set="null" line="221" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
	<cu public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cu>
	<get_cu get="inline" set="null" line="227" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cu>
	<set_cu get="inline" set="null" line="231" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cu>
	<cv public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cv>
	<get_cv get="inline" set="null" line="237" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cv>
	<set_cv get="inline" set="null" line="241" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cv>
	<triangle public="1" set="method" line="249" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<triangleUV public="1" set="method" line="272" static="1">
		<f a="this:au_:av_:bu_:bv_:cu_:cv_:?windAdjust_">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangleUV>
	<adjustWinding public="1" set="method" line="289" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Bool"/>
</f></adjustWinding>
	<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
	<get_u get="inline" set="null" line="295" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_u>
	<set_u get="inline" set="null" line="299" static="1"><f a="this:u_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
	<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
	<get_v get="inline" set="null" line="308" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_v>
	<set_v get="inline" set="null" line="312" static="1"><f a="this:v_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
	<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
	<get_rightU get="inline" set="null" line="322" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_rightU>
	<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
	<get_bottomV get="inline" set="null" line="327" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bottomV>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="334" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="338" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="347" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="351" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<getXRange public="1" get="inline" set="null" line="359" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getXRange>
	<getYRange public="1" get="inline" set="null" line="370" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getYRange>
	<xRange public="1" get="inline" set="null" line="381" static="1"><f a="this:range:px">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xRange>
	<yRange public="1" set="method" line="387" static="1"><f a="this:range:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></yRange>
	<translateRange public="1" set="method" line="393" static="1"><f a="this:range:dx:dy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="403" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="408" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bottom>
	<translate public="1" get="inline" set="null" line="412" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
	<alphaRange public="1" get="inline" set="null" line="422" static="1"><f a="this:range:a">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaRange>
	<argbRange public="1" get="inline" set="null" line="431" static="1"><f a="this:range:argb_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbRange>
	<rgbRange public="1" get="inline" set="null" line="440" static="1"><f a="this:range:rgb_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rgbRange>
	<sign public="1" get="inline" set="null" line="449" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="453" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="462" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<hitRange public="1" set="method" line="469" static="1"><f a="this:range:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitRange>
	<rangeCollisionRough public="1" get="inline" set="null" line="483" static="1"><f a="this:range1:range2">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Bool"/>
</f></rangeCollisionRough>
	<fullHit public="1" set="method" line="501" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotateRange public="1" get="inline" set="null" line="507" static="1"><f a="this:range:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateRange>
	<rotate public="1" get="inline" set="null" line="516" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="522" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<colorTriangles public="1" get="inline" set="null" line="551" static="1"><f a="this:color:times">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="558" static="1"><f a="this:colorA:colorB:colorC">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
	<blendColorRange public="1" get="inline" set="null" line="565" static="1">
		<f a="this:color:range:t:?smooth" v="::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColorRange>
	<blendBetweenColorRange public="1" get="inline" set="null" line="576" static="1">
		<f a="this:color:color2:range:t:?smooth" v=":::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColorRange>
	<blendColorsRange public="1" get="inline" set="null" line="587" static="1">
		<f a="this:colorA:colorB:colorC:range:t:?smooth" v="::::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColorsRange>
	<blendBetweenColorsRange public="1" get="inline" set="null" line="599" static="1">
		<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:range:t:?smooth" v=":::::::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.contour.io.IteratorRange"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColorsRange>
	<boundingRange public="1" get="inline" set="null" line="608" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></boundingRange>
	<scaleRangeXY public="1" get="inline" set="null" line="634" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXY>
	<scaleRangeXB public="1" get="inline" set="null" line="653" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXB>
	<scaleRangeRY public="1" get="inline" set="null" line="672" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRY>
	<scaleRangeRB public="1" get="inline" set="null" line="691" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRB>
	<scaleRangeCentre public="1" get="inline" set="null" line="740" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeCentre>
	<blendBetweenColors public="1" get="inline" set="null" line="767" static="1">
		<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:t:?smooth" v="::::::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColors>
	<blendBetweenColor public="1" get="inline" set="null" line="810" static="1">
		<f a="this:color:color2:t:?smooth" v="::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendBetweenColor>
	<blendColor public="1" get="inline" set="null" line="836" static="1">
		<f a="this:color:t:?smooth" v=":::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColor>
	<blendColors public="1" get="inline" set="null" line="859" static="1">
		<f a="this:colorA:colorB:colorC:t:?smooth" v=":::::true">
			<x path="justGraphix.contour.io.Flat3x8"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
	</blendColors>
	<alpha public="1" get="null" set="accessor" static="1"><x path="Float"/></alpha>
	<set_alpha get="inline" set="null" line="890" static="1"><f a="this:a">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
	<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
	<set_rgb get="inline" set="null" line="898" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
	<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
	<set_rgbA get="inline" set="null" line="906" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
	<get_rgbA get="inline" set="null" line="914" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_rgbA>
	<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
	<set_rgbB get="inline" set="null" line="921" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
	<get_rgbB get="inline" set="null" line="929" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_rgbB>
	<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
	<set_rgbC get="inline" set="null" line="936" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
	<get_rgbC get="inline" set="null" line="944" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_rgbC>
	<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
	<set_argb get="inline" set="null" line="951" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
	<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
	<set_argbA get="inline" set="null" line="959" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
	<get_argbA get="inline" set="null" line="967" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_argbA>
	<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
	<set_argbB get="inline" set="null" line="975" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
	<get_argbB get="inline" set="null" line="983" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_argbB>
	<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
	<set_argbC get="inline" set="null" line="991" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
	<get_argbC get="inline" set="null" line="999" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_argbC>
	<prettyStringVert public="1" get="inline" set="null" line="1006" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></prettyStringVert>
	<prettyAllVert public="1" get="inline" set="null" line="1012" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></prettyAllVert>
	<hex public="1" get="inline" set="null" line="1023" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
	<hexA public="1" get="inline" set="null" line="1027" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexA>
	<hexB public="1" get="inline" set="null" line="1031" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexB>
	<hexC public="1" get="inline" set="null" line="1035" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexC>
	<hexAll public="1" get="inline" set="null" line="1039" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexAll>
	<blend get="inline" set="null" line="1050" static="1"><f a="this:a:b:t">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></blend>
	<smootherStep get="inline" set="null" line="1055" static="1"><f a="this:t">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
	<alphaChannel public="1" get="inline" set="null" line="1060" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="1063" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="1066" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="1069" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="justGraphix.contour.io._TextureTriangles2D.TextureTriangles2D_Impl_" params="" file="src/justGraphix/contour/io/TextureTriangles2D.hx" private="1" module="justGraphix.contour.io.TextureTriangles2D" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.contour.io.TextureTriangles2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="11" static="1"><f a="len">
	<x path="Int"/>
	<x path="justGraphix.contour.io.TextureTriangles2D"/>
</f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="15" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="18" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="23" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="26" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<redA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redA>
		<get_redA set="method" line="32" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_redA>
		<set_redA set="method" line="35" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redA>
		<greenA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenA>
		<get_greenA get="inline" set="null" line="42" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_greenA>
		<set_greenA get="inline" set="null" line="46" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenA>
		<blueA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueA>
		<get_blueA get="inline" set="null" line="52" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_blueA>
		<set_blueA get="inline" set="null" line="56" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueA>
		<alphaA public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaA>
		<get_alphaA get="inline" set="null" line="62" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_alphaA>
		<set_alphaA get="inline" set="null" line="66" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaA>
		<au public="1" get="accessor" set="accessor" static="1"><x path="Float"/></au>
		<get_au get="inline" set="null" line="72" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_au>
		<set_au get="inline" set="null" line="76" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_au>
		<av public="1" get="accessor" set="accessor" static="1"><x path="Float"/></av>
		<get_av get="inline" set="null" line="82" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_av>
		<set_av get="inline" set="null" line="86" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_av>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="92" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="95" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="100" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="103" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<redB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redB>
		<get_redB set="method" line="109" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_redB>
		<set_redB set="method" line="112" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redB>
		<greenB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenB>
		<get_greenB get="inline" set="null" line="120" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_greenB>
		<set_greenB get="inline" set="null" line="124" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenB>
		<blueB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueB>
		<get_blueB get="inline" set="null" line="130" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_blueB>
		<set_blueB get="inline" set="null" line="134" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueB>
		<alphaB public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaB>
		<get_alphaB get="inline" set="null" line="140" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_alphaB>
		<set_alphaB get="inline" set="null" line="144" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaB>
		<bu public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bu>
		<get_bu get="inline" set="null" line="150" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bu>
		<set_bu get="inline" set="null" line="154" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bu>
		<bv public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bv>
		<get_bv get="inline" set="null" line="160" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bv>
		<set_bv get="inline" set="null" line="164" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bv>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="170" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="173" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="178" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="181" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<redC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></redC>
		<get_redC set="method" line="187" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_redC>
		<set_redC set="method" line="190" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_redC>
		<greenC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></greenC>
		<get_greenC get="inline" set="null" line="197" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_greenC>
		<set_greenC get="inline" set="null" line="201" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_greenC>
		<blueC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></blueC>
		<get_blueC get="inline" set="null" line="207" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_blueC>
		<set_blueC get="inline" set="null" line="211" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_blueC>
		<alphaC public="1" get="accessor" set="accessor" static="1"><x path="Float"/></alphaC>
		<get_alphaC get="inline" set="null" line="217" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_alphaC>
		<set_alphaC get="inline" set="null" line="221" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alphaC>
		<cu public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cu>
		<get_cu get="inline" set="null" line="227" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cu>
		<set_cu get="inline" set="null" line="231" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cu>
		<cv public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cv>
		<get_cv get="inline" set="null" line="237" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_cv>
		<set_cv get="inline" set="null" line="241" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cv>
		<triangle public="1" set="method" line="249" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<triangleUV public="1" set="method" line="272" static="1">
			<f a="this:au_:av_:bu_:bv_:cu_:cv_:?windAdjust_">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangleUV>
		<adjustWinding public="1" set="method" line="289" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Bool"/>
</f></adjustWinding>
		<u public="1" get="accessor" set="accessor" static="1"><x path="Float"/></u>
		<get_u get="inline" set="null" line="295" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_u>
		<set_u get="inline" set="null" line="299" static="1"><f a="this:u_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_u>
		<v public="1" get="accessor" set="accessor" static="1"><x path="Float"/></v>
		<get_v get="inline" set="null" line="308" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_v>
		<set_v get="inline" set="null" line="312" static="1"><f a="this:v_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
		<rightU public="1" get="accessor" set="null" static="1"><x path="Float"/></rightU>
		<get_rightU get="inline" set="null" line="322" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_rightU>
		<bottomV public="1" get="accessor" set="null" static="1"><x path="Float"/></bottomV>
		<get_bottomV get="inline" set="null" line="327" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bottomV>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="334" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="338" static="1"><f a="this:x">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="347" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="351" static="1"><f a="this:y">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<getXRange public="1" get="inline" set="null" line="359" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getXRange>
		<getYRange public="1" get="inline" set="null" line="370" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
</f></getYRange>
		<xRange public="1" get="inline" set="null" line="381" static="1"><f a="this:range:px">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xRange>
		<yRange public="1" set="method" line="387" static="1"><f a="this:range:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></yRange>
		<translateRange public="1" set="method" line="393" static="1"><f a="this:range:dx:dy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translateRange>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="403" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="408" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
</f></get_bottom>
		<translate public="1" get="inline" set="null" line="412" static="1"><f a="this:dx:dy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<alphaRange public="1" get="inline" set="null" line="422" static="1"><f a="this:range:a">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Void"/>
</f></alphaRange>
		<argbRange public="1" get="inline" set="null" line="431" static="1"><f a="this:range:argb_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></argbRange>
		<rgbRange public="1" get="inline" set="null" line="440" static="1"><f a="this:range:rgb_">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rgbRange>
		<sign public="1" get="inline" set="null" line="449" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="453" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="462" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<hitRange public="1" set="method" line="469" static="1"><f a="this:range:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitRange>
		<rangeCollisionRough public="1" get="inline" set="null" line="483" static="1"><f a="this:range1:range2">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Bool"/>
</f></rangeCollisionRough>
		<fullHit public="1" set="method" line="501" static="1"><f a="this:px:py">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotateRange public="1" get="inline" set="null" line="507" static="1"><f a="this:range:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateRange>
		<rotate public="1" get="inline" set="null" line="516" static="1"><f a="this:x:y:theta">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="522" static="1"><f a="this:x:y:cos:sin">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<colorTriangles public="1" get="inline" set="null" line="551" static="1"><f a="this:color:times">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="558" static="1"><f a="this:colorA:colorB:colorC">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></cornerColors>
		<blendColorRange public="1" get="inline" set="null" line="565" static="1">
			<f a="this:color:range:t:?smooth" v="::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColorRange>
		<blendBetweenColorRange public="1" get="inline" set="null" line="576" static="1">
			<f a="this:color:color2:range:t:?smooth" v=":::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColorRange>
		<blendColorsRange public="1" get="inline" set="null" line="587" static="1">
			<f a="this:colorA:colorB:colorC:range:t:?smooth" v="::::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColorsRange>
		<blendBetweenColorsRange public="1" get="inline" set="null" line="599" static="1">
			<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:range:t:?smooth" v=":::::::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.contour.io.IteratorRange"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColorsRange>
		<boundingRange public="1" get="inline" set="null" line="608" static="1"><f a="this:range">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></boundingRange>
		<scaleRangeXY public="1" get="inline" set="null" line="634" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXY>
		<scaleRangeXB public="1" get="inline" set="null" line="653" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeXB>
		<scaleRangeRY public="1" get="inline" set="null" line="672" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRY>
		<scaleRangeRB public="1" get="inline" set="null" line="691" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeRB>
		<scaleRangeCentre public="1" get="inline" set="null" line="740" static="1"><f a="this:range:sx:sy">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="justGraphix.contour.io.IteratorRange"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleRangeCentre>
		<blendBetweenColors public="1" get="inline" set="null" line="767" static="1">
			<f a="this:colorA:colorB:colorC:color2A:color2B:color2C:t:?smooth" v="::::::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColors>
		<blendBetweenColor public="1" get="inline" set="null" line="810" static="1">
			<f a="this:color:color2:t:?smooth" v="::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendBetweenColor>
		<blendColor public="1" get="inline" set="null" line="836" static="1">
			<f a="this:color:t:?smooth" v=":::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColor>
		<blendColors public="1" get="inline" set="null" line="859" static="1">
			<f a="this:colorA:colorB:colorC:t:?smooth" v=":::::true">
				<x path="justGraphix.contour.io.Flat3x8"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</blendColors>
		<alpha public="1" get="null" set="accessor" static="1"><x path="Float"/></alpha>
		<set_alpha get="inline" set="null" line="890" static="1"><f a="this:a">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<rgb public="1" get="null" set="accessor" static="1"><x path="Int"/></rgb>
		<set_rgb get="inline" set="null" line="898" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgb>
		<rgbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbA>
		<set_rgbA get="inline" set="null" line="906" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbA>
		<get_rgbA get="inline" set="null" line="914" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_rgbA>
		<rgbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbB>
		<set_rgbB get="inline" set="null" line="921" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbB>
		<get_rgbB get="inline" set="null" line="929" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_rgbB>
		<rgbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></rgbC>
		<set_rgbC get="inline" set="null" line="936" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_rgbC>
		<get_rgbC get="inline" set="null" line="944" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_rgbC>
		<argb public="1" get="null" set="accessor" static="1"><x path="Int"/></argb>
		<set_argb get="inline" set="null" line="951" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argb>
		<argbA public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbA>
		<set_argbA get="inline" set="null" line="959" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbA>
		<get_argbA get="inline" set="null" line="967" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_argbA>
		<argbB public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbB>
		<set_argbB get="inline" set="null" line="975" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbB>
		<get_argbB get="inline" set="null" line="983" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_argbB>
		<argbC public="1" get="accessor" set="accessor" static="1"><x path="Int"/></argbC>
		<set_argbC get="inline" set="null" line="991" static="1"><f a="this:col">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_argbC>
		<get_argbC get="inline" set="null" line="999" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
</f></get_argbC>
		<prettyStringVert public="1" get="inline" set="null" line="1006" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></prettyStringVert>
		<prettyAllVert public="1" get="inline" set="null" line="1012" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></prettyAllVert>
		<hex public="1" get="inline" set="null" line="1023" static="1"><f a="this:val">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<hexA public="1" get="inline" set="null" line="1027" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexA>
		<hexB public="1" get="inline" set="null" line="1031" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexB>
		<hexC public="1" get="inline" set="null" line="1035" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexC>
		<hexAll public="1" get="inline" set="null" line="1039" static="1"><f a="this">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<c path="String"/>
</f></hexAll>
		<blend get="inline" set="null" line="1050" static="1"><f a="this:a:b:t">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></blend>
		<smootherStep get="inline" set="null" line="1055" static="1"><f a="this:t">
	<x path="justGraphix.contour.io.Flat3x8"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
		<alphaChannel public="1" get="inline" set="null" line="1060" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="1063" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="1066" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="1069" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<class path="justGraphix.curve.CirclePixel" params="" file="src/justGraphix/curve/CirclePixel.hx">
		<_circleError public="1" expr="circleError">
			<f a="radius:?targetE:?minN:?maxN">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>circleError</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">circleError</font> module level field
       @param targetE defaults 1.05 adjust to change the quality of the circle
       @param minN defaults 12, minimum sides used
       @param maxN defaults 500, maximum sides used]]></haxe_doc>
		</_circleError>
		<_getSidesDivisible4 public="1" expr="getSidesDivisible4">
			<f a="rx:ry:targetError">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>getSidesDivisible4</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">getSidesDivisible4</font> module level field
       @param targetE defaults 1.05 adjust to change the quality of the circle
       @return uses min dimension for target diameter returns nearest divisble by 4]]></haxe_doc>
		</_getSidesDivisible4>
		<new public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.curve._CirclePixel.CirclePixel_Fields_" params="" file="src/justGraphix/curve/CirclePixel.hx" private="1" module="justGraphix.curve.CirclePixel" final="1">
		<circleError public="1" get="inline" set="null" line="7" static="1">
			<f a="radius:?targetE:?minN:?maxN" v=":1.05:12:500">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ maxN : 500, minN : 12, targetE : 1.05 }</e></m></meta>
		</circleError>
		<getSidesDivisible4 public="1" get="inline" set="null" line="18" static="1">
			<f a="rx:ry:?targetError" v="::1.05">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
		</getSidesDivisible4>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.curve._CurveMath.CurveMath_Fields_" params="" file="src/justGraphix/curve/CurveMath.hx" private="1" module="justGraphix.curve.CurveMath" final="1">
		<distance public="1" get="inline" set="null" line="3" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadStep public="1" expr="0.03" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="11" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="27" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="30" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="46" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="52" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<quadraticThru public="1" get="inline" set="null" line="58" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="63" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<cubic public="1" get="inline" set="null" line="68" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="justGraphix.curve.EllipseArcData" params="" file="src/justGraphix/curve/EllipseArc.hx" module="justGraphix.curve.EllipseArc"><a>
	<ry><x path="Float"/></ry>
	<rx><x path="Float"/></rx>
	<phiSin><x path="Float"/></phiSin>
	<phiCos><x path="Float"/></phiCos>
	<phi><x path="Float"/></phi>
	<omega><x path="Float"/></omega>
	<delta><x path="Float"/></delta>
	<cy><x path="Float"/></cy>
	<cx><x path="Float"/></cx>
	<alpha><x path="Float"/></alpha>
</a></typedef>
	<class path="justGraphix.curve.EllipseArc" params="" file="src/justGraphix/curve/EllipseArc.hx">
		<arc><t path="justGraphix.curve.EllipseArcData"/></arc>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<alphaPoint public="1" set="method" line="26"><f a=""><x path="Void"/></f></alphaPoint>
		<omegaPoint public="1" set="method" line="29"><f a=""><x path="Void"/></f></omegaPoint>
		<lineRender public="1" set="method" line="33">
			<f a="moveTo:lineTo:dA:?renderFirst" v=":::true">
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ renderFirst : true }</e></m></meta>
		</lineRender>
		<calculatePoint public="1" get="inline" set="null" line="51"><f a="theta">
	<x path="Float"/>
	<x path="Void"/>
</f></calculatePoint>
		<new public="1" set="method" line="23"><f a="arc_">
	<t path="justGraphix.curve.EllipseArcData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":forward"/>
		</meta>
	</class>
	<abstract path="justGraphix.curve.ConverterArc" params="" file="src/justGraphix/curve/EllipseArc.hx" module="justGraphix.curve.EllipseArc">
		<from><icast><t path="justGraphix.curve.EllipseArcData"/></icast></from>
		<this><t path="justGraphix.curve.EllipseArcData"/></this>
		<to><icast><t path="justGraphix.curve.EllipseArcData"/></icast></to>
		<impl><class path="justGraphix.curve._EllipseArc.ConverterArc_Impl_" params="" file="src/justGraphix/curve/EllipseArc.hx" private="1" module="justGraphix.curve.EllipseArc" final="1">
	<_new public="1" get="inline" set="null" line="67" static="1">
		<f a="sx:sy:xr:yr:phi:large:sweep:ex:ey">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.curve.ConverterArc"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<zeroto2pi get="inline" set="null" line="139" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
</class></impl>
	</abstract>
	<class path="justGraphix.curve._EllipseArc.ConverterArc_Impl_" params="" file="src/justGraphix/curve/EllipseArc.hx" private="1" module="justGraphix.curve.EllipseArc" final="1">
		<_new public="1" get="inline" set="null" line="67" static="1">
			<f a="sx:sy:xr:yr:phi:large:sweep:ex:ey">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.curve.ConverterArc"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<zeroto2pi get="inline" set="null" line="139" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
	</class>
	<typedef path="justGraphix.fracs.Fractional" params="" file="src/justGraphix/fracs/Fraction.hx" module="justGraphix.fracs.Fraction"><a>
	<value><x path="Null"><x path="Float"/></x></value>
	<positive><x path="Bool"/></positive>
	<numerator><x path="Int"/></numerator>
	<denominator><x path="Int"/></denominator>
</a></typedef>
	<abstract path="justGraphix.fracs.FractionArray" params="" file="src/justGraphix/fracs/Fraction.hx" module="justGraphix.fracs.Fraction">
		<from><icast><c path="Array"><x path="justGraphix.fracs.Fraction"/></c></icast></from>
		<this><c path="Array"><x path="justGraphix.fracs.Fraction"/></c></this>
		<to>
			<icast><c path="Array"><x path="justGraphix.fracs.Fraction"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.fracs._Fraction.FractionArray_Impl_" params="" file="src/justGraphix/fracs/Fraction.hx" private="1" module="justGraphix.fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="?val">
			<c path="Array"><x path="justGraphix.fracs.Fraction"/></c>
			<x path="justGraphix.fracs.FractionArray"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<add public="1" get="inline" set="null" line="21" static="1"><f a="this:val">
	<c path="Array"><x path="justGraphix.fracs.Fraction"/></c>
	<x path="justGraphix.fracs.Fraction"/>
	<x path="Void"/>
</f></add>
	<toString public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<c path="Array"><x path="justGraphix.fracs.Fraction"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="justGraphix.fracs._Fraction.FractionArray_Impl_" params="" file="src/justGraphix/fracs/Fraction.hx" private="1" module="justGraphix.fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="?val">
				<c path="Array"><x path="justGraphix.fracs.Fraction"/></c>
				<x path="justGraphix.fracs.FractionArray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<add public="1" get="inline" set="null" line="21" static="1"><f a="this:val">
	<c path="Array"><x path="justGraphix.fracs.Fraction"/></c>
	<x path="justGraphix.fracs.Fraction"/>
	<x path="Void"/>
</f></add>
		<toString public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<c path="Array"><x path="justGraphix.fracs.Fraction"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="justGraphix.fracs.Fraction" params="" file="src/justGraphix/fracs/Fraction.hx">
		<from>
			<icast><t path="justGraphix.fracs.Fractional"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><t path="justGraphix.fracs.Fractional"/></this>
		<to>
			<icast><t path="justGraphix.fracs.Fractional"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="justGraphix.fracs._Fraction.Fraction_Impl_" params="" file="src/justGraphix/fracs/Fraction.hx" private="1" module="justGraphix.fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="numerator:denominator:?positive:?value" v="::true:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : null, positive : true }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<optimize get="inline" set="null" line="49" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.Fraction"/>
</f></optimize>
	<optimizeFraction get="inline" set="null" line="53" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.Fraction"/>
</f></optimizeFraction>
	<toFloat public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<t path="justGraphix.fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<float public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="Float"/>
</f></float>
	<verbose public="1" get="inline" set="null" line="70" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
	<fromString public="1" get="inline" set="null" line="75" static="1">
		<f a="val">
			<c path="String"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="86" static="1">
		<f a="this">
			<t path="justGraphix.fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<fromFloat public="1" get="inline" set="null" line="102" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<firstFloat public="1" get="inline" set="null" line="123" static="1"><f a="f">
	<x path="Float"/>
	<x path="justGraphix.fracs.Fraction"/>
</f></firstFloat>
	<byDenominator public="1" get="inline" set="null" line="130" static="1"><f a="this:val">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
	<all public="1" get="inline" set="null" line="141" static="1"><f a="f">
	<x path="Float"/>
	<x path="justGraphix.fracs.FractionArray"/>
</f></all>
	<similarToFraction public="1" get="inline" set="null" line="145" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.FractionArray"/>
</f></similarToFraction>
	<similarToValue public="1" get="inline" set="null" line="150" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.FractionArray"/>
</f></similarToValue>
</class></impl>
	</abstract>
	<class path="justGraphix.fracs._Fraction.Fraction_Impl_" params="" file="src/justGraphix/fracs/Fraction.hx" private="1" module="justGraphix.fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="numerator:denominator:?positive:?value" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : null, positive : true }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<optimize get="inline" set="null" line="49" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.Fraction"/>
</f></optimize>
		<optimizeFraction get="inline" set="null" line="53" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.Fraction"/>
</f></optimizeFraction>
		<toFloat public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<t path="justGraphix.fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<float public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="Float"/>
</f></float>
		<verbose public="1" get="inline" set="null" line="70" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
		<fromString public="1" get="inline" set="null" line="75" static="1">
			<f a="val">
				<c path="String"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="86" static="1">
			<f a="this">
				<t path="justGraphix.fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<fromFloat public="1" get="inline" set="null" line="102" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<firstFloat public="1" get="inline" set="null" line="123" static="1"><f a="f">
	<x path="Float"/>
	<x path="justGraphix.fracs.Fraction"/>
</f></firstFloat>
		<byDenominator public="1" get="inline" set="null" line="130" static="1"><f a="this:val">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
		<all public="1" get="inline" set="null" line="141" static="1"><f a="f">
	<x path="Float"/>
	<x path="justGraphix.fracs.FractionArray"/>
</f></all>
		<similarToFraction public="1" get="inline" set="null" line="145" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.FractionArray"/>
</f></similarToFraction>
		<similarToValue public="1" get="inline" set="null" line="150" static="1"><f a="this">
	<t path="justGraphix.fracs.Fractional"/>
	<x path="justGraphix.fracs.FractionArray"/>
</f></similarToValue>
	</class>
	<class path="justGraphix.fracs.Fracs" params="" file="src/justGraphix/fracs/Fraction.hx" module="justGraphix.fracs.Fraction">
		<grabDecimalInput get="inline" set="null" line="158" static="1"><f a="decimalVal">
	<c path="String"/>
	<x path="Float"/>
</f></grabDecimalInput>
		<approximateFractions set="method" line="164" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.fracs.FractionArray"/>
			</f>
			<meta><m n=":allow"><e>justGraphix.fracs.Fraction</e></m></meta>
		</approximateFractions>
		<getMaxNumerator get="inline" set="null" line="190" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></getMaxNumerator>
		<extractDigitStr get="inline" set="null" line="223" static="1"><f a="fStr">
	<c path="String"/>
	<c path="String"/>
</f></extractDigitStr>
		<getMaxNumeratorStr get="inline" set="null" line="244" static="1"><f a="fStr">
	<c path="String"/>
	<x path="Float"/>
</f></getMaxNumeratorStr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.geom.Complex" params="" file="src/justGraphix/geom/Complex.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat1x2"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromRealImaginary"><a>
	<real><x path="Float"/></real>
	<imaginary><x path="Float"/></imaginary>
</a></icast>
			<icast field="fromRi"><a>
	<r><x path="Float"/></r>
	<i><x path="Float"/></i>
</a></icast>
			<icast field="fromRealI"><a>
	<real><x path="Float"/></real>
	<i><x path="Float"/></i>
</a></icast>
			<icast field="fromPolar"><x path="justGraphix.geom.Polar"/></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat1x2"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat1x2"/></icast>
			<icast field="toString"><c path="String"/></icast>
			<icast field="toPolar"><x path="justGraphix.geom.Polar"/></icast>
		</to>
		<haxe_doc>Complex - A Complex Float Type.  
   { x, y }
   
   For Convinence you can declare in several ways eg:  
   var c0: Complex = '1 + 2i';  
   var c1: Complex = { real: 1., imaginary: 2. };  
   var c2: Complex = { r: 1., i: 2. };  
   var c3: Complex = new Complex({ x: 1., y: 2. });  
   
   You can use normal operations  
   var c4 = c0 * c1;  
   var c5 = c0 + c1;  
   
   You can extract either part  
   var real = c0.real;  
   var imaginary = c0.i;  
   
   You can trace it.
   trace( Complex.fromString( c0 ) ); // '1. + 2. i'
   
   Trig functions are contained in geom.curve.ComplexTrig, but do not have tests beyond compile.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.geom._Complex.Complex_Impl_" params="" file="src/justGraphix/geom/Complex.hx" private="1" module="justGraphix.geom.Complex" final="1">
	<fromString public="1" get="inline" set="null" line="45" static="1">
		<f a="s">
			<c path="String"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = '1 + 2i';
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromString>
	<fromRealImaginary public="1" get="inline" set="null" line="63" static="1">
		<f a="c">
			<a>
				<real><x path="Float"/></real>
				<imaginary><x path="Float"/></imaginary>
			</a>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., imaginary: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRealImaginary>
	<fromRi public="1" get="inline" set="null" line="76" static="1">
		<f a="c">
			<a>
				<r><x path="Float"/></r>
				<i><x path="Float"/></i>
			</a>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { r: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRi>
	<fromRealI public="1" get="inline" set="null" line="89" static="1">
		<f a="c">
			<a>
				<real><x path="Float"/></real>
				<i><x path="Float"/></i>
			</a>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRealI>
	<toString public="1" get="inline" set="null" line="103" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c: Complex = { r: 1., i: 2. };
     * ... var s: String = c;
     * ... // js seems to remove the .'s from the numbers not sure on other targets
     * ... s == '1. + 2. i' || s == '1 + 2 i'; }) == true
     * </code></pre>]]></haxe_doc>
	</toString>
	<_new public="1" get="inline" set="null" line="108" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.zero == new Complex({x:0.
     * ...                            , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="120" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_zero>
	<one public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.one == new Complex({x:1.
     * ...                           , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</one>
	<get_one get="inline" set="null" line="133" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minus1 == new Complex({x: -1.
     * ...                              , y: 0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="146" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minus1>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unit == new Complex({x: 1.
     * ...                            , y: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="159" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unit>
	<i1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.i1 == new Complex({x: 0.
     * ...                          , y: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</i1>
	<get_i1 get="inline" set="null" line="172" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_i1>
	<iMinus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinus1 == new Complex({x: 0.
     * ...                               , y: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinus1>
	<get_iMinus1 get="inline" set="null" line="185" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinus1>
	<minusUnit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusUnit == new Complex({x: -1.
     * ...                                 , y: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusUnit>
	<get_minusUnit get="inline" set="null" line="198" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusUnit>
	<unitInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitInfinity == new Complex({x:Math.POSITIVE_INFINITY
     * ...                                    , y:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitInfinity>
	<get_unitInfinity get="inline" set="null" line="211" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitInfinity>
	<unitMinusInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitMinusInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true]]></haxe_doc>
	</unitMinusInfinity>
	<get_unitMinusInfinity get="inline" set="null" line="223" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitMinusInfinity>
	<realInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realInfinity == new Complex({x:Math.POSITIVE_INFINITY
     * ...                                    , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</realInfinity>
	<get_realInfinity get="inline" set="null" line="236" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_realInfinity>
	<minusInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusInfinity>
	<get_minusInfinity get="inline" set="null" line="249" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusInfinity>
	<iInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iInfinity == new Complex({x:0.
     * ...                                 , y:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iInfinity>
	<get_iInfinity get="inline" set="null" line="262" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iInfinity>
	<iMinusInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinusInfinity == new Complex({x:0.
     * ...                                      , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinusInfinity>
	<get_iMinusInfinity get="inline" set="null" line="275" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinusInfinity>
	<posNegInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.posNegInfinity == new Complex({x:Math.POSITIVE_INFINITY
     * ...                                      , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</posNegInfinity>
	<get_posNegInfinity get="inline" set="null" line="288" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_posNegInfinity>
	<negPosInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.negPosInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                      , y:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negPosInfinity>
	<get_negPosInfinity get="inline" set="null" line="301" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_negPosInfinity>
	<realPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realPi == new Complex({x:(Math.PI)
     * ...                               , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</realPi>
	<get_realPi get="inline" set="null" line="314" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_realPi>
	<iPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iPi == new Complex({x:0.
     * ...                            , y:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iPi>
	<get_iPi get="inline" set="null" line="327" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iPi>
	<unitPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitPi == new Complex({x:(Math.PI)
     * ...                               , y:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitPi>
	<get_unitPi get="inline" set="null" line="340" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitPi>
	<unitMinusPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitMinusPi == new Complex({x:(-Math.PI)
     * ...                                    , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitMinusPi>
	<get_unitMinusPi get="inline" set="null" line="353" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitMinusPi>
	<iMinusPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinusPi == new Complex({x:0.
     * ...                                 , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinusPi>
	<get_iMinusPi get="inline" set="null" line="366" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinusPi>
	<minusPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusPi == new Complex({x:(-Math.PI)
     * ...                                , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusPi>
	<get_minusPi get="inline" set="null" line="379" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusPi>
	<posNegPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.posNegPi == new Complex({x:(Math.PI)
     * ...                                , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</posNegPi>
	<get_posNegPi get="inline" set="null" line="392" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_posNegPi>
	<negPosPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.negPosPi == new Complex({x:(-Math.PI)
     * ...                                 , y:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negPosPi>
	<get_negPosPi get="inline" set="null" line="405" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_negPosPi>
	<realTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realTau == new Complex({x:(Math.PI*2)
     * ...                               , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</realTau>
	<get_realTau get="inline" set="null" line="418" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_realTau>
	<iTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iTau == new Complex({x:0.
     * ...                            , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iTau>
	<get_iTau get="inline" set="null" line="431" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iTau>
	<unitTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitTau == new Complex({x:(Math.PI*2)
     * ...                               , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitTau>
	<get_unitTau get="inline" set="null" line="444" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitTau>
	<unitMinusTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitMinusTau == new Complex({x:(-Math.PI*2)
     * ...                                    , y:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitMinusTau>
	<get_unitMinusTau get="inline" set="null" line="457" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitMinusTau>
	<iMinusTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinusTau == new Complex({x:0.
     * ...                                 , y:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinusTau>
	<get_iMinusTau get="inline" set="null" line="470" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinusTau>
	<minusTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusTau == new Complex({x:(-Math.PI*2)
     * ...                                , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusTau>
	<get_minusTau get="inline" set="null" line="483" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusTau>
	<posNegTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.posNegTau == new Complex({x:(Math.PI*2)
     * ...                                 , y:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</posNegTau>
	<get_posNegTau get="inline" set="null" line="496" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_posNegTau>
	<negPosTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Complex"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.negPosTau == new Complex({x:(-Math.PI*2)
     * ...                                 , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negPosTau>
	<get_negPosTau get="inline" set="null" line="509" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_negPosTau>
	<i public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... a.i == 2.; }) == true
     * </code></pre>]]></haxe_doc>
	</i>
	<get_i get="inline" set="null" line="521" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_i>
	<set_i get="inline" set="null" line="525" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_i>
	<real public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... a.real == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</real>
	<get_real get="inline" set="null" line="537" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_real>
	<set_real get="inline" set="null" line="540" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_real>
	<clone public="1" get="inline" set="null" line="552" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... a.clone() == a; }) == true
     * </code></pre>]]></haxe_doc>
	</clone>
	<swap public="1" get="inline" set="null" line="564" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 2., y: 1. });
     * ... a.swap() == b; }) == true
     * </code></pre>]]></haxe_doc>
	</swap>
	<equal public="1" get="inline" set="null" line="576" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="592" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<add public="1" get="inline" set="null" line="604" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit;
     * ... a + a == new Complex({ x: 2., y: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="616" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit;
     * ... a - a == Complex.zero; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scale public="1" get="inline" set="null" line="628" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scale>
	<multiply public="1" get="inline" set="null" line="641" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3., y: 2. });
     * ... var b = new Complex({ x: 1., y: 7. });
     * ... a * b == new Complex({ x: -11., y: 23. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</multiply>
	<addExponents public="1" get="inline" set="null" line="653" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3., y: 2. });
     * ... a.addExponents() == 5;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</addExponents>
	<conjugate public="1" get="inline" set="null" line="665" static="1">
		<f a="a">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = ~a;
     * ... b == new Complex({ x: 1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<divide public="1" get="inline" set="null" line="693" static="1">
		<f a="c1:c2">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: -3. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a / b == new Complex({ x:-1, y: -1 });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</divide>
	<negate public="1" get="inline" set="null" line="709" static="1">
		<f a="a">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = -a;
     * ... b == new Complex({ x: -1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<magnitudeSquared public="1" get="inline" set="null" line="720" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 2., y: 4. });
     * ... a.magnitudeSquared() == 4. + 16.; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3, y: 4});
     * ... a.magnitude == 5.; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="733" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="737" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
	<phase public="1" get="inline" set="null" line="749" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></phase>
	<isReal public="1" get="inline" set="null" line="760" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.one;
     * ... a.isReal() == true; }) == true
     * </code></pre>]]></haxe_doc>
	</isReal>
	<isImaginary public="1" get="inline" set="null" line="771" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.i1;
     * ... a.isImaginary() == true; }) == true
     * </code></pre>]]></haxe_doc>
	</isImaginary>
	<cis public="1" get="inline" set="null" line="785" static="1">
		<f a="angle">
			<x path="Float"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var square = Complex.square;
     * ... square(r*cis( theta )) == r*r*cis( 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
	</cis>
	<fromCircle public="1" get="inline" set="null" line="801" static="1">
		<f a="r:angle">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var square = Complex.square;
     * ... var fromCircle = Complex.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromCircle>
	<square public="1" get="inline" set="null" line="816" static="1">
		<f a="c">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var square = Complex.square;
     * ... var fromCircle = Complex.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
	</square>
	<exp public="1" get="inline" set="null" line="838" static="1">
		<f a="c">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var fromCircle = Complex.fromCircle;
     * ... var exp = Complex.exp;
     * ... fromCircle(r,theta) == r*exp( new Complex({ x: 0, y: theta }) ); }) == true
     * </code></pre>]]></haxe_doc>
	</exp>
	<ln public="1" get="inline" set="null" line="855" static="1">
		<f a="c">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3, y: 4});
     * ... var b = new Complex({ x: 6, y: 8});
     * ... var ln = Complex.ln;
     * ... ln( a*b ) == ln( a ) + ln( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</ln>
	<arg public="1" get="inline" set="null" line="873" static="1">
		<f a="c">
			<x path="justGraphix.geom.Complex"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3, y: 4});
     * ... var b = new Complex({ x: 6, y: 8});
     * ... var arg = Complex.arg;
     * ... arg( a*b ) == arg( a ) + arg( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</arg>
	<reciprocal public="1" get="inline" set="null" line="890" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Complex"/>
</f></reciprocal>
	<pow public="1" get="inline" set="null" line="896" static="1"><f a="c:n">
	<x path="justGraphix.geom.Complex"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Complex"/>
</f></pow>
	<squareRoot public="1" get="inline" set="null" line="907" static="1">
		<f a="c">
			<x path="justGraphix.geom.Complex"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc>* squareRoot see pow</haxe_doc>
	</squareRoot>
	<root2 public="1" get="inline" set="null" line="914" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<haxe_doc>* root2 see pow</haxe_doc>
	</root2>
	<toPolar public="1" get="inline" set="null" line="922" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Polar"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>* to Polar</haxe_doc>
	</toPolar>
	<fromPolar public="1" get="inline" set="null" line="931" static="1">
		<f a="polar">
			<x path="justGraphix.geom.Polar"/>
			<x path="justGraphix.geom.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* from Polar</haxe_doc>
	</fromPolar>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Complex.Complex_Impl_" params="" file="src/justGraphix/geom/Complex.hx" private="1" module="justGraphix.geom.Complex" final="1">
		<fromString public="1" get="inline" set="null" line="45" static="1">
			<f a="s">
				<c path="String"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = '1 + 2i';
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromString>
		<fromRealImaginary public="1" get="inline" set="null" line="63" static="1">
			<f a="c">
				<a>
					<real><x path="Float"/></real>
					<imaginary><x path="Float"/></imaginary>
				</a>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., imaginary: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRealImaginary>
		<fromRi public="1" get="inline" set="null" line="76" static="1">
			<f a="c">
				<a>
					<r><x path="Float"/></r>
					<i><x path="Float"/></i>
				</a>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { r: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRi>
		<fromRealI public="1" get="inline" set="null" line="89" static="1">
			<f a="c">
				<a>
					<real><x path="Float"/></real>
					<i><x path="Float"/></i>
				</a>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRealI>
		<toString public="1" get="inline" set="null" line="103" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c: Complex = { r: 1., i: 2. };
     * ... var s: String = c;
     * ... // js seems to remove the .'s from the numbers not sure on other targets
     * ... s == '1. + 2. i' || s == '1 + 2 i'; }) == true
     * </code></pre>]]></haxe_doc>
		</toString>
		<_new public="1" get="inline" set="null" line="108" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.zero == new Complex({x:0.
     * ...                            , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="120" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_zero>
		<one public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.one == new Complex({x:1.
     * ...                           , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</one>
		<get_one get="inline" set="null" line="133" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minus1 == new Complex({x: -1.
     * ...                              , y: 0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="146" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minus1>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unit == new Complex({x: 1.
     * ...                            , y: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="159" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unit>
		<i1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.i1 == new Complex({x: 0.
     * ...                          , y: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</i1>
		<get_i1 get="inline" set="null" line="172" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_i1>
		<iMinus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinus1 == new Complex({x: 0.
     * ...                               , y: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinus1>
		<get_iMinus1 get="inline" set="null" line="185" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinus1>
		<minusUnit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusUnit == new Complex({x: -1.
     * ...                                 , y: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusUnit>
		<get_minusUnit get="inline" set="null" line="198" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusUnit>
		<unitInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitInfinity == new Complex({x:Math.POSITIVE_INFINITY
     * ...                                    , y:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitInfinity>
		<get_unitInfinity get="inline" set="null" line="211" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitInfinity>
		<unitMinusInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitMinusInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true]]></haxe_doc>
		</unitMinusInfinity>
		<get_unitMinusInfinity get="inline" set="null" line="223" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitMinusInfinity>
		<realInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realInfinity == new Complex({x:Math.POSITIVE_INFINITY
     * ...                                    , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</realInfinity>
		<get_realInfinity get="inline" set="null" line="236" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_realInfinity>
		<minusInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusInfinity>
		<get_minusInfinity get="inline" set="null" line="249" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusInfinity>
		<iInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iInfinity == new Complex({x:0.
     * ...                                 , y:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iInfinity>
		<get_iInfinity get="inline" set="null" line="262" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iInfinity>
		<iMinusInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinusInfinity == new Complex({x:0.
     * ...                                      , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinusInfinity>
		<get_iMinusInfinity get="inline" set="null" line="275" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinusInfinity>
		<posNegInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.posNegInfinity == new Complex({x:Math.POSITIVE_INFINITY
     * ...                                      , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</posNegInfinity>
		<get_posNegInfinity get="inline" set="null" line="288" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_posNegInfinity>
		<negPosInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.negPosInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                      , y:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negPosInfinity>
		<get_negPosInfinity get="inline" set="null" line="301" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_negPosInfinity>
		<realPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realPi == new Complex({x:(Math.PI)
     * ...                               , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</realPi>
		<get_realPi get="inline" set="null" line="314" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_realPi>
		<iPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iPi == new Complex({x:0.
     * ...                            , y:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iPi>
		<get_iPi get="inline" set="null" line="327" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iPi>
		<unitPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitPi == new Complex({x:(Math.PI)
     * ...                               , y:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitPi>
		<get_unitPi get="inline" set="null" line="340" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitPi>
		<unitMinusPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitMinusPi == new Complex({x:(-Math.PI)
     * ...                                    , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitMinusPi>
		<get_unitMinusPi get="inline" set="null" line="353" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitMinusPi>
		<iMinusPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinusPi == new Complex({x:0.
     * ...                                 , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinusPi>
		<get_iMinusPi get="inline" set="null" line="366" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinusPi>
		<minusPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusPi == new Complex({x:(-Math.PI)
     * ...                                , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusPi>
		<get_minusPi get="inline" set="null" line="379" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusPi>
		<posNegPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.posNegPi == new Complex({x:(Math.PI)
     * ...                                , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</posNegPi>
		<get_posNegPi get="inline" set="null" line="392" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_posNegPi>
		<negPosPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.negPosPi == new Complex({x:(-Math.PI)
     * ...                                 , y:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negPosPi>
		<get_negPosPi get="inline" set="null" line="405" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_negPosPi>
		<realTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realTau == new Complex({x:(Math.PI*2)
     * ...                               , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</realTau>
		<get_realTau get="inline" set="null" line="418" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_realTau>
		<iTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iTau == new Complex({x:0.
     * ...                            , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iTau>
		<get_iTau get="inline" set="null" line="431" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iTau>
		<unitTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitTau == new Complex({x:(Math.PI*2)
     * ...                               , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitTau>
		<get_unitTau get="inline" set="null" line="444" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitTau>
		<unitMinusTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.unitMinusTau == new Complex({x:(-Math.PI*2)
     * ...                                    , y:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitMinusTau>
		<get_unitMinusTau get="inline" set="null" line="457" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_unitMinusTau>
		<iMinusTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iMinusTau == new Complex({x:0.
     * ...                                 , y:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinusTau>
		<get_iMinusTau get="inline" set="null" line="470" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_iMinusTau>
		<minusTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusTau == new Complex({x:(-Math.PI*2)
     * ...                                , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusTau>
		<get_minusTau get="inline" set="null" line="483" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_minusTau>
		<posNegTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.posNegTau == new Complex({x:(Math.PI*2)
     * ...                                 , y:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</posNegTau>
		<get_posNegTau get="inline" set="null" line="496" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_posNegTau>
		<negPosTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Complex"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.negPosTau == new Complex({x:(-Math.PI*2)
     * ...                                 , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negPosTau>
		<get_negPosTau get="inline" set="null" line="509" static="1"><f a=""><x path="justGraphix.geom.Complex"/></f></get_negPosTau>
		<i public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... a.i == 2.; }) == true
     * </code></pre>]]></haxe_doc>
		</i>
		<get_i get="inline" set="null" line="521" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_i>
		<set_i get="inline" set="null" line="525" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_i>
		<real public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... a.real == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</real>
		<get_real get="inline" set="null" line="537" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_real>
		<set_real get="inline" set="null" line="540" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_real>
		<clone public="1" get="inline" set="null" line="552" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... a.clone() == a; }) == true
     * </code></pre>]]></haxe_doc>
		</clone>
		<swap public="1" get="inline" set="null" line="564" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 2., y: 1. });
     * ... a.swap() == b; }) == true
     * </code></pre>]]></haxe_doc>
		</swap>
		<equal public="1" get="inline" set="null" line="576" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="592" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<add public="1" get="inline" set="null" line="604" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit;
     * ... a + a == new Complex({ x: 2., y: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="616" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit;
     * ... a - a == Complex.zero; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scale public="1" get="inline" set="null" line="628" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scale>
		<multiply public="1" get="inline" set="null" line="641" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3., y: 2. });
     * ... var b = new Complex({ x: 1., y: 7. });
     * ... a * b == new Complex({ x: -11., y: 23. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</multiply>
		<addExponents public="1" get="inline" set="null" line="653" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3., y: 2. });
     * ... a.addExponents() == 5;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</addExponents>
		<conjugate public="1" get="inline" set="null" line="665" static="1">
			<f a="a">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = ~a;
     * ... b == new Complex({ x: 1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<divide public="1" get="inline" set="null" line="693" static="1">
			<f a="c1:c2">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: -3. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a / b == new Complex({ x:-1, y: -1 });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</divide>
		<negate public="1" get="inline" set="null" line="709" static="1">
			<f a="a">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = -a;
     * ... b == new Complex({ x: -1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<magnitudeSquared public="1" get="inline" set="null" line="720" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 2., y: 4. });
     * ... a.magnitudeSquared() == 4. + 16.; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3, y: 4});
     * ... a.magnitude == 5.; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="733" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="737" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
		<phase public="1" get="inline" set="null" line="749" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></phase>
		<isReal public="1" get="inline" set="null" line="760" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.one;
     * ... a.isReal() == true; }) == true
     * </code></pre>]]></haxe_doc>
		</isReal>
		<isImaginary public="1" get="inline" set="null" line="771" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.i1;
     * ... a.isImaginary() == true; }) == true
     * </code></pre>]]></haxe_doc>
		</isImaginary>
		<cis public="1" get="inline" set="null" line="785" static="1">
			<f a="angle">
				<x path="Float"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var square = Complex.square;
     * ... square(r*cis( theta )) == r*r*cis( 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
		</cis>
		<fromCircle public="1" get="inline" set="null" line="801" static="1">
			<f a="r:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var square = Complex.square;
     * ... var fromCircle = Complex.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromCircle>
		<square public="1" get="inline" set="null" line="816" static="1">
			<f a="c">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var square = Complex.square;
     * ... var fromCircle = Complex.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
		</square>
		<exp public="1" get="inline" set="null" line="838" static="1">
			<f a="c">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = Complex.cis;
     * ... var fromCircle = Complex.fromCircle;
     * ... var exp = Complex.exp;
     * ... fromCircle(r,theta) == r*exp( new Complex({ x: 0, y: theta }) ); }) == true
     * </code></pre>]]></haxe_doc>
		</exp>
		<ln public="1" get="inline" set="null" line="855" static="1">
			<f a="c">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3, y: 4});
     * ... var b = new Complex({ x: 6, y: 8});
     * ... var ln = Complex.ln;
     * ... ln( a*b ) == ln( a ) + ln( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</ln>
		<arg public="1" get="inline" set="null" line="873" static="1">
			<f a="c">
				<x path="justGraphix.geom.Complex"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3, y: 4});
     * ... var b = new Complex({ x: 6, y: 8});
     * ... var arg = Complex.arg;
     * ... arg( a*b ) == arg( a ) + arg( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</arg>
		<reciprocal public="1" get="inline" set="null" line="890" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Complex"/>
</f></reciprocal>
		<pow public="1" get="inline" set="null" line="896" static="1"><f a="c:n">
	<x path="justGraphix.geom.Complex"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Complex"/>
</f></pow>
		<squareRoot public="1" get="inline" set="null" line="907" static="1">
			<f a="c">
				<x path="justGraphix.geom.Complex"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc>* squareRoot see pow</haxe_doc>
		</squareRoot>
		<root2 public="1" get="inline" set="null" line="914" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<haxe_doc>* root2 see pow</haxe_doc>
		</root2>
		<toPolar public="1" get="inline" set="null" line="922" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Polar"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>* to Polar</haxe_doc>
		</toPolar>
		<fromPolar public="1" get="inline" set="null" line="931" static="1">
			<f a="polar">
				<x path="justGraphix.geom.Polar"/>
				<x path="justGraphix.geom.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* from Polar</haxe_doc>
		</fromPolar>
	</class>
	<class path="justGraphix.geom.ComplexTrig" params="" file="src/justGraphix/geom/ComplexTrig.hx">
		<sin public="1" get="inline" set="null" line="9" static="1"><f a="c">
	<x path="justGraphix.geom.Complex"/>
	<x path="justGraphix.geom.Complex"/>
</f></sin>
		<cos public="1" get="inline" set="null" line="18" static="1"><f a="c">
	<x path="justGraphix.geom.Complex"/>
	<x path="justGraphix.geom.Complex"/>
</f></cos>
		<tan public="1" get="inline" set="null" line="27" static="1"><f a="c">
	<x path="justGraphix.geom.Complex"/>
	<x path="justGraphix.geom.Complex"/>
</f></tan>
		<sinh public="1" get="inline" set="null" line="37" static="1"><f a="c">
	<x path="justGraphix.geom.Complex"/>
	<x path="justGraphix.geom.Complex"/>
</f></sinh>
		<cosh public="1" get="inline" set="null" line="46" static="1"><f a="c">
	<x path="justGraphix.geom.Complex"/>
	<x path="justGraphix.geom.Complex"/>
</f></cosh>
		<tanh public="1" get="inline" set="null" line="55" static="1"><f a="c">
	<x path="justGraphix.geom.Complex"/>
	<x path="justGraphix.geom.Complex"/>
</f></tanh>
	</class>
	<class path="justGraphix.geom.Conversion" params="" file="src/justGraphix/geom/Conversion.hx">
		<_1x2toTpoint public="1" get="inline" set="null" line="23" static="1"><f a="m1x2">
	<x path="justGraphix.geom.Matrix1x2"/>
	<t path="justGraphix.geom.structs.Tpoint"/>
</f></_1x2toTpoint>
		<_1x2toVec3 public="1" get="inline" set="null" line="27" static="1"><f a="m1x2">
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></_1x2toVec3>
		<Vectorto1x2 public="1" get="inline" set="null" line="35" static="1"><f a="v">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></Vectorto1x2>
		<Vectorto1x3 public="1" get="inline" set="null" line="40" static="1"><f a="vec">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></Vectorto1x3>
		<_1x3toVector public="1" get="inline" set="null" line="44" static="1"><f a="m1x3">
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></_1x3toVector>
		<Arrayto1x3 public="1" get="inline" set="null" line="52" static="1"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></Arrayto1x3>
		<_1x3toArray public="1" get="inline" set="null" line="56" static="1"><f a="m1x3">
	<x path="justGraphix.geom.Matrix1x3"/>
	<c path="Array"><x path="Float"/></c>
</f></_1x3toArray>
		<Vectorto1x4 public="1" get="inline" set="null" line="61" static="1"><f a="vec">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></Vectorto1x4>
		<_1x4toVector public="1" get="inline" set="null" line="65" static="1"><f a="m1x4">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></_1x4toVector>
		<Arrayto1x4 public="1" get="inline" set="null" line="74" static="1"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></Arrayto1x4>
		<_1x4toArray public="1" get="inline" set="null" line="78" static="1"><f a="m1x4">
	<x path="justGraphix.geom.Matrix1x4"/>
	<c path="Array"><x path="Float"/></c>
</f></_1x4toArray>
		<Arrayto2x2 public="1" get="inline" set="null" line="83" static="1"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Arrayto2x2>
		<_2x2toArray public="1" get="inline" set="null" line="88" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<c path="Array"><x path="Float"/></c>
</f></_2x2toArray>
		<Vectorto2x2 public="1" get="inline" set="null" line="93" static="1"><f a="vec">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Vectorto2x2>
		<_2x2toVector public="1" get="inline" set="null" line="98" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></_2x2toVector>
		<toTmatrix2x2 public="1" get="inline" set="null" line="105" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<t path="justGraphix.geom.structs.Tmatrix2x2"/>
</f></toTmatrix2x2>
		<Tmatrix2x2to2x2 public="1" get="inline" set="null" line="110" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Tmatrix2x2to2x2>
		<_2x2toTmatrix2x2numbered public="1" get="inline" set="null" line="115" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<t path="justGraphix.geom.structs.Tmatrix2x2numbered"/>
</f></_2x2toTmatrix2x2numbered>
		<Tmatrix2x2numberedto2x2 public="1" get="inline" set="null" line="120" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix2x2numbered"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Tmatrix2x2numberedto2x2>
		<_2x2toAlternate2x2numbered public="1" get="inline" set="null" line="124" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<t path="justGraphix.geom.structs.Alternate2x2numbered"/>
</f></_2x2toAlternate2x2numbered>
		<Alternate2x2numberedto2x2 public="1" get="inline" set="null" line="129" static="1"><f a="am">
	<t path="justGraphix.geom.structs.Alternate2x2numbered"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Alternate2x2numberedto2x2>
		<_2x2toFloat32ArrayTranspose_ public="1" get="inline" set="null" line="133" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="haxe.io.Float32Array"/>
</f></_2x2toFloat32ArrayTranspose_>
		<_2x2toFloat32Array_ public="1" get="inline" set="null" line="140" static="1"><f a="m2x2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="haxe.io.Float32Array"/>
</f></_2x2toFloat32Array_>
		<Float32Array_to2x2Transpose public="1" get="inline" set="null" line="148" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Float32Array_to2x2Transpose>
		<Float32Array_2x2 public="1" get="inline" set="null" line="153" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></Float32Array_2x2>
		<Arrayto3x3 public="1" get="inline" set="null" line="159" static="1"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Arrayto3x3>
		<_3x3toArray public="1" get="inline" set="null" line="165" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<c path="Array"><x path="Float"/></c>
</f></_3x3toArray>
		<_2x2to3x3 public="1" get="inline" set="null" line="172" static="1"><f a="m2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></_2x2to3x3>
		<_3x3to2x2 public="1" get="inline" set="null" line="178" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></_3x3to2x2>
		<Vectorto3x3 public="1" get="inline" set="null" line="183" static="1"><f a="vec">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Vectorto3x3>
		<_3x3toVector public="1" get="inline" set="null" line="189" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></_3x3toVector>
		<_3x3toTmatrix3x3 public="1" get="inline" set="null" line="197" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<t path="justGraphix.geom.structs.Tmatrix3x3"/>
</f></_3x3toTmatrix3x3>
		<Tmatrix3x3to3x3 public="1" get="inline" set="null" line="202" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Tmatrix3x3to3x3>
		<_3x3toTmatrix3x3numbered public="1" get="inline" set="null" line="207" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<t path="justGraphix.geom.structs.Tmatrix3x3numbered"/>
</f></_3x3toTmatrix3x3numbered>
		<Tmatrix3x3numberedto3x3 public="1" get="inline" set="null" line="214" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix3x3numbered"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Tmatrix3x3numberedto3x3>
		<_m3x3toAlternate3x3numbered public="1" get="inline" set="null" line="220" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<t path="justGraphix.geom.structs.Alternate3x3numbered"/>
</f></_m3x3toAlternate3x3numbered>
		<Alternate3x3numberedto3x3 public="1" get="inline" set="null" line="227" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Alternate3x3numbered"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Alternate3x3numberedto3x3>
		<_3x3toFloat32ArrayTranspose_ public="1" get="inline" set="null" line="233" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="haxe.io.Float32Array"/>
</f></_3x3toFloat32ArrayTranspose_>
		<_3x3toFloat32Array_ public="1" get="inline" set="null" line="241" static="1"><f a="m3x3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="haxe.io.Float32Array"/>
</f></_3x3toFloat32Array_>
		<Float32Array_to3x3Transpose public="1" get="inline" set="null" line="250" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Float32Array_to3x3Transpose>
		<Float32Array_to3x3 public="1" get="inline" set="null" line="256" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></Float32Array_to3x3>
		<_2x2to4x3 public="1" get="inline" set="null" line="263" static="1"><f a="m2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></_2x2to4x3>
		<_4x3to2x2 public="1" get="inline" set="null" line="269" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></_4x3to2x2>
		<_3x3to4x3 public="1" get="inline" set="null" line="274" static="1"><f a="m3">
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></_3x3to4x3>
		<_4x3to3x3 public="1" get="inline" set="null" line="280" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></_4x3to3x3>
		<ArraytoMatrix4x3 public="1" get="inline" set="null" line="286" static="1"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></ArraytoMatrix4x3>
		<_4x3toArray public="1" get="inline" set="null" line="292" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<c path="Array"><x path="Float"/></c>
</f></_4x3toArray>
		<_4x3toVector public="1" get="inline" set="null" line="298" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></_4x3toVector>
		<Vectorto4x3 public="1" get="inline" set="null" line="306" static="1"><f a="v">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></Vectorto4x3>
		<_4x3toFloat32ArrayTranspose_ public="1" get="inline" set="null" line="313" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x3toFloat32ArrayTranspose_>
		<_4x3toFloat32ArrayTransposeUpdate_ public="1" get="inline" set="null" line="318" static="1"><f a="arr:m4x3">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x3toFloat32ArrayTransposeUpdate_>
		<_4x3toFloat32Array_ public="1" get="inline" set="null" line="326" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x3toFloat32Array_>
		<_4x3toFloat32ArrayUpdate_ public="1" get="inline" set="null" line="331" static="1"><f a="arr:m4x3">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x3toFloat32ArrayUpdate_>
		<Float32Array_to4x3Transpose public="1" get="inline" set="null" line="340" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></Float32Array_to4x3Transpose>
		<Float32Array_to4x3 public="1" get="inline" set="null" line="346" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></Float32Array_to4x3>
		<_4x3toTAffineMatrix public="1" get="inline" set="null" line="355" static="1">
			<f a="m4x3">
				<x path="justGraphix.geom.Matrix4x3"/>
				<t path="justGraphix.geom.structs.TAffineMatrix"/>
			</f>
			<haxe_doc>* check transpose</haxe_doc>
		</_4x3toTAffineMatrix>
		<Tmatrix4x4numberedto4x3 public="1" get="inline" set="null" line="364" static="1">
			<f a="m">
				<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<haxe_doc>* check transpose</haxe_doc>
		</Tmatrix4x4numberedto4x3>
		<_4x3toTmatrix4x4numbered public="1" get="inline" set="null" line="373" static="1">
			<f a="m4x3">
				<x path="justGraphix.geom.Matrix4x3"/>
				<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
			</f>
			<haxe_doc>* check transpose</haxe_doc>
		</_4x3toTmatrix4x4numbered>
		<_4x3toTmatrix4x3 public="1" get="inline" set="null" line="380" static="1"><f a="m4x3">
	<x path="justGraphix.geom.Matrix4x3"/>
	<t path="justGraphix.geom.structs.Tmatrix4x3"/>
</f></_4x3toTmatrix4x3>
		<Tmatrix4x3to4x3 public="1" get="inline" set="null" line="387" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></Tmatrix4x3to4x3>
		<_4x4toFloat32ArrayTranspose_ public="1" get="inline" set="null" line="396" static="1"><f a="m4x4">
	<x path="justGraphix.geom.Matrix4x4"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x4toFloat32ArrayTranspose_>
		<_4x4toFloat32ArrayTransposeUpdate_ public="1" get="inline" set="null" line="401" static="1"><f a="arr:m4x4">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x4"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x4toFloat32ArrayTransposeUpdate_>
		<_4x4toFloat32Array_ public="1" get="inline" set="null" line="409" static="1"><f a="m4x4">
	<x path="justGraphix.geom.Matrix4x4"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x4toFloat32Array_>
		<_4x4toFloat32ArrayUpdate_ public="1" get="inline" set="null" line="414" static="1"><f a="arr:m4x4">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x4"/>
	<x path="haxe.io.Float32Array"/>
</f></_4x4toFloat32ArrayUpdate_>
		<Float32Array_to4x4Transpose public="1" get="inline" set="null" line="423" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></Float32Array_to4x4Transpose>
		<Float32Array_to4x4 public="1" get="inline" set="null" line="430" static="1"><f a="arr">
	<x path="haxe.io.Float32Array"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></Float32Array_to4x4>
		<_4x4toTmatrix4x4 public="1" get="inline" set="null" line="437" static="1"><f a="m4x4">
	<x path="justGraphix.geom.Matrix4x4"/>
	<t path="justGraphix.geom.structs.Tmatrix4x4"/>
</f></_4x4toTmatrix4x4>
		<Tmatrix4x4to4x4 public="1" get="inline" set="null" line="445" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></Tmatrix4x4to4x4>
		<_4x4toTmatrix4x4numbered public="1" get="inline" set="null" line="450" static="1"><f a="m4x4">
	<x path="justGraphix.geom.Matrix4x4"/>
	<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
</f></_4x4toTmatrix4x4numbered>
		<Tmatrix4x4numberedto4x4 public="1" get="inline" set="null" line="458" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></Tmatrix4x4numberedto4x4>
		<_4x4toAlternate4x4numbered public="1" get="inline" set="null" line="465" static="1"><f a="m4x4">
	<x path="justGraphix.geom.Matrix4x4"/>
	<t path="justGraphix.geom.structs.Alternate4x4numbered"/>
</f></_4x4toAlternate4x4numbered>
		<Alternate4x4numberedto4x4 public="1" get="inline" set="null" line="473" static="1"><f a="tm">
	<t path="justGraphix.geom.structs.Alternate4x4numbered"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></Alternate4x4numberedto4x4>
	</class>
	<abstract path="justGraphix.geom.DualQuaternion" params="" file="src/justGraphix/geom/DualQuaternion.hx">
		<from><icast><c path="justGraphix.geom.structs.DualQ"/></icast></from>
		<this><c path="justGraphix.geom.structs.DualQ"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.DualQ"/></icast>
			<icast field="toMatrix4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.geom._DualQuaternion.DualQuaternion_Impl_" params="" file="src/justGraphix/geom/DualQuaternion.hx" private="1" module="justGraphix.geom.DualQuaternion" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="dq">
			<c path="justGraphix.geom.structs.DualQ"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.DualQuaternion"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> DualQuaternion.zero == new DualQuaternion({real:{ x: 0., y: 0., z: 0., w: 1. },dual:{x:0.,y:0.,z:0.,w:1.}})
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="20" static="1"><f a=""><x path="justGraphix.geom.DualQuaternion"/></f></get_zero>
	<clone public="1" get="inline" set="null" line="25" static="1"><f a="this">
	<c path="justGraphix.geom.structs.DualQ"/>
	<x path="justGraphix.geom.DualQuaternion"/>
</f></clone>
	<equal public="1" get="inline" set="null" line="41" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e == f; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e != f; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<scaleMultiply public="1" get="inline" set="null" line="61" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="Float"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="65" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="Float"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<add public="1" get="inline" set="null" line="79" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b = Quaternion.unit;
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c + c == new DualQuaternion( { real:{ x: 2., y: 2., z: 2., w: 2. }, dual: { x: 2., y: 2., z: 2., w: 2. } } ); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="93" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b = Quaternion.unit;
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c - c == new DualQuaternion( { real: Quaternion.zero, dual: Quaternion.zero } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="108" static="1">
		<f a="a">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var c = new DualQuaternion({ real: a, dual: a } );
     * ... var b = -c;
     * ... var e = new Quaternion({ x: -1., y: -2., z: -3., w: -1. });
     * ... var f = new DualQuaternion({ real: e, dual: e });
     * ... b == f; }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<create public="1" get="inline" set="null" line="112" static="1"><f a="r:t">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.DualQuaternion"/>
</f></create>
	<applyScale public="1" get="inline" set="null" line="123" static="1">
		<f a="this:s">
			<c path="justGraphix.geom.structs.DualQ"/>
			<x path="Float"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<haxe_doc>* applyScale</haxe_doc>
	</applyScale>
	<scalar public="1" get="inline" set="null" line="136" static="1">
		<f a="s">
			<x path="Float"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<haxe_doc>* allow scaling a DualQuaternion untested
     * usage:
     * var scaledDualQuaternion = DualQuaternion.scalar( 3 ) * dualQ;
     * source:  *http://roartindon.blogspot.com/2015/04/encoding-uniform-scale-in-quaternions.html</haxe_doc>
	</scalar>
	<dotProduct public="1" get="inline" set="null" line="141" static="1"><f a="a:b">
	<x path="justGraphix.geom.DualQuaternion"/>
	<x path="justGraphix.geom.DualQuaternion"/>
	<x path="Float"/>
</f></dotProduct>
	<normalize public="1" get="inline" set="null" line="145" static="1"><f a="this">
	<c path="justGraphix.geom.structs.DualQ"/>
	<x path="justGraphix.geom.DualQuaternion"/>
</f></normalize>
	<conjugate public="1" get="inline" set="null" line="152" static="1">
		<f a="a">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</conjugate>
	<getTranslation public="1" get="inline" set="null" line="156" static="1"><f a="this">
	<c path="justGraphix.geom.structs.DualQ"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></getTranslation>
	<multiplyQ public="1" get="inline" set="null" line="163" static="1">
		<f a="q1:q2">
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
			<x path="justGraphix.geom.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyQ>
	<toMatrix4x3 public="1" get="inline" set="null" line="169" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.DualQ"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</toMatrix4x3>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._DualQuaternion.DualQuaternion_Impl_" params="" file="src/justGraphix/geom/DualQuaternion.hx" private="1" module="justGraphix.geom.DualQuaternion" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="dq">
				<c path="justGraphix.geom.structs.DualQ"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.DualQuaternion"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> DualQuaternion.zero == new DualQuaternion({real:{ x: 0., y: 0., z: 0., w: 1. },dual:{x:0.,y:0.,z:0.,w:1.}})
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="20" static="1"><f a=""><x path="justGraphix.geom.DualQuaternion"/></f></get_zero>
		<clone public="1" get="inline" set="null" line="25" static="1"><f a="this">
	<c path="justGraphix.geom.structs.DualQ"/>
	<x path="justGraphix.geom.DualQuaternion"/>
</f></clone>
		<equal public="1" get="inline" set="null" line="41" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e == f; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e != f; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<scaleMultiply public="1" get="inline" set="null" line="61" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="Float"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="65" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="Float"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<add public="1" get="inline" set="null" line="79" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b = Quaternion.unit;
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c + c == new DualQuaternion( { real:{ x: 2., y: 2., z: 2., w: 2. }, dual: { x: 2., y: 2., z: 2., w: 2. } } ); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="93" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b = Quaternion.unit;
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c - c == new DualQuaternion( { real: Quaternion.zero, dual: Quaternion.zero } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="108" static="1">
			<f a="a">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var c = new DualQuaternion({ real: a, dual: a } );
     * ... var b = -c;
     * ... var e = new Quaternion({ x: -1., y: -2., z: -3., w: -1. });
     * ... var f = new DualQuaternion({ real: e, dual: e });
     * ... b == f; }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<create public="1" get="inline" set="null" line="112" static="1"><f a="r:t">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.DualQuaternion"/>
</f></create>
		<applyScale public="1" get="inline" set="null" line="123" static="1">
			<f a="this:s">
				<c path="justGraphix.geom.structs.DualQ"/>
				<x path="Float"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<haxe_doc>* applyScale</haxe_doc>
		</applyScale>
		<scalar public="1" get="inline" set="null" line="136" static="1">
			<f a="s">
				<x path="Float"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<haxe_doc>* allow scaling a DualQuaternion untested
     * usage:
     * var scaledDualQuaternion = DualQuaternion.scalar( 3 ) * dualQ;
     * source:  *http://roartindon.blogspot.com/2015/04/encoding-uniform-scale-in-quaternions.html</haxe_doc>
		</scalar>
		<dotProduct public="1" get="inline" set="null" line="141" static="1"><f a="a:b">
	<x path="justGraphix.geom.DualQuaternion"/>
	<x path="justGraphix.geom.DualQuaternion"/>
	<x path="Float"/>
</f></dotProduct>
		<normalize public="1" get="inline" set="null" line="145" static="1"><f a="this">
	<c path="justGraphix.geom.structs.DualQ"/>
	<x path="justGraphix.geom.DualQuaternion"/>
</f></normalize>
		<conjugate public="1" get="inline" set="null" line="152" static="1">
			<f a="a">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</conjugate>
		<getTranslation public="1" get="inline" set="null" line="156" static="1"><f a="this">
	<c path="justGraphix.geom.structs.DualQ"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></getTranslation>
		<multiplyQ public="1" get="inline" set="null" line="163" static="1">
			<f a="q1:q2">
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
				<x path="justGraphix.geom.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyQ>
		<toMatrix4x3 public="1" get="inline" set="null" line="169" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.DualQ"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</toMatrix4x3>
	</class>
	<typedef path="justGraphix.geom.Vec2" params="" file="src/justGraphix/geom/Matrix1x2.hx" module="justGraphix.geom.Matrix1x2"><x path="justGraphix.geom.Matrix1x2"/></typedef>
	<abstract path="justGraphix.geom.Matrix1x2" params="" file="src/justGraphix/geom/Matrix1x2.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat1x2"/></icast>
			<icast field="fromVec3"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat1x2"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat1x2"/></icast>
			<icast field="toTpoint"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></icast>
			<icast field="toVec3"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix1x2.Matrix1x2_Impl_" params="" file="src/justGraphix/geom/Matrix1x2.hx" private="1" module="justGraphix.geom.Matrix1x2" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="1" line="12" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="2" line="14" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</columns>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.counting == Matrix1x2.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<t path="Iterator"><x path="Float"/></t>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix1x2.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></self>
	<get_self get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_self>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="57" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="70" static="1">
		<f a="this:length">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = new Matrix1x2( { x: 9., y: 12. } );
     * ... m.magnitude = 5;
     * ... ( m.x == 3. && m.y == 4. ) == true; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</set_magnitude>
	<normalize public="1" get="inline" set="null" line="87" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"normalize" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</normalize>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.zero == new Matrix1x2({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="101" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></nought>
	<get_nought get="inline" set="null" line="106" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="116" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></one>
	<get_one get="inline" set="null" line="121" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.minus1 == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="131" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.counting == new Matrix1x2({ x: 1., y: 2. })
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="141" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></testCount>
	<get_testCount get="inline" set="null" line="146" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_testCount>
	<negating public="1" get="inline" set="null" line="161" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2({ x: 1., y: 2. });
     * ... var b = -a;
     * ... b == new Matrix1x2({ x: -1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="165" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></negate>
	<adding public="1" get="inline" set="null" line="174" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit + Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
	</adding>
	<add public="1" get="inline" set="null" line="179" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></add>
	<subtracting public="1" get="inline" set="null" line="189" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit - Matrix1x2.unit == new Matrix1x2( { x: 0., y: 0. } )
     * </code></pre>]]></haxe_doc>
	</subtracting>
	<subtract public="1" get="inline" set="null" line="193" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></subtract>
	<isEqualling public="1" get="inline" set="null" line="207" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a == b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</isEqualling>
	<isEqual public="1" get="inline" set="null" line="210" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Bool"/>
</f></isEqual>
	<scaleMultiplying public="1" get="inline" set="null" line="221" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit * 2 == new Matrix1x2( { x: 2., y: 2. } )
     * >>> 2 * Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
	</scaleMultiplying>
	<scaleMultiply public="1" get="inline" set="null" line="225" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></scaleMultiply>
	<lerpClampT public="1" get="inline" set="null" line="232" static="1"><f a="this:p:t">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></lerpClampT>
	<lerp public="1" get="inline" set="null" line="237" static="1"><f a="this:p:t">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></lerp>
	<sumXY public="1" get="inline" set="null" line="245" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></sumXY>
	<topLeft public="1" get="inline" set="null" line="255" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<topRight public="1" get="inline" set="null" line="264" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</topRight>
	<bottomLeft public="1" get="inline" set="null" line="273" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<bottomRight public="1" get="inline" set="null" line="282" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<north public="1" get="inline" set="null" line="291" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })
     * </code></pre>]]></haxe_doc>
	</north>
	<south public="1" get="inline" set="null" line="300" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })
     * </code></pre>]]></haxe_doc>
	</south>
	<west public="1" get="inline" set="null" line="309" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })
     * </code></pre>]]></haxe_doc>
	</west>
	<east public="1" get="inline" set="null" line="318" static="1">
		<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })
     * </code></pre>]]></haxe_doc>
	</east>
	<dotting public="1" get="inline" set="null" line="325" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</dotting>
	<dot public="1" get="inline" set="null" line="329" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></dot>
	<dividing public="1" get="inline" set="null" line="340" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )
     * </code></pre>]]></haxe_doc>
	</dividing>
	<divide public="1" get="inline" set="null" line="344" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></divide>
	<notEqual public="1" get="inline" set="null" line="357" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 5. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a != b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<perp public="1" get="inline" set="null" line="367" static="1">
		<f a="this:b">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"perp" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</perp>
	<mid public="1" get="inline" set="null" line="382" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3.,  y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 4.,  y: 2. } ); 
     * ... var c = new Matrix1x2( { x: 3.5, y: 1.5 } );
     * ... var mid = Matrix1x2.mid( a, b ); 
     * ... mid == c;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</mid>
	<distanceBetweenSquare public="1" get="inline" set="null" line="396" static="1">
		<f a="this:b">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetweenSquare( b ); }) == 25
     * </code></pre>]]></haxe_doc>
	</distanceBetweenSquare>
	<distanceBetweenSquare_ public="1" get="inline" set="null" line="403" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Float"/>
</f></distanceBetweenSquare_>
	<distanceBetween public="1" get="inline" set="null" line="419" static="1">
		<f a="this:b">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetween( b ); }) == 5
     * </code></pre>]]></haxe_doc>
	</distanceBetween>
	<span public="1" get="inline" set="null" line="428" static="1">
		<f a="this:b">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"span" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</span>
	<lenSquare public="1" get="inline" set="null" line="439" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 3. } ); 
     * ... a.lenSquare(); }) == 18
     * </code></pre>]]></haxe_doc>
	</lenSquare>
	<distance public="1" get="inline" set="null" line="450" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 4. } ); 
     * ... a.distance(); }) == 5
     * </code></pre>]]></haxe_doc>
	</distance>
	<isLeft public="1" get="inline" set="null" line="472" static="1">
		<f a="this:a:b">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"isLeft" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</isLeft>
	<triangleArea public="1" get="inline" set="null" line="481" static="1">
		<f a="a:b:c">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"triangleArea" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</triangleArea>
	<sign public="1" get="inline" set="null" line="491" static="1">
		<f a="n">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.sign( -7. ) == -1
     * >>> Matrix1x2.sign( 7. ) == 1
     * </code></pre>]]></haxe_doc>
	</sign>
	<thetaDifference public="1" get="inline" set="null" line="507" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero ) == 0
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero ) == -Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero ) == -Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero ) == -3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero ) == Math.PI
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero ) == 3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero ) == Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero ) == Math.PI/4
     * </code></pre>]]></haxe_doc>
	</thetaDifference>
	<inTri public="1" get="inline" set="null" line="519" static="1">
		<f a="this:a:b:c">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</inTri>
	<inTri2 public="1" get="inline" set="null" line="531" static="1">
		<f a="this:a:b:c">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri2" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</inTri2>
	<inRect public="1" get="inline" set="null" line="574" static="1">
		<f a="this:b:c">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight()/2; 
     * ... var b = Matrix1x2.zero; 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == true
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.zero; 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero; 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomRight()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero; 
     * ... a.inRect( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</inRect>
	<convex public="1" get="inline" set="null" line="601" static="1">
		<f a="a:b:c">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var l = new Matrix1x2( { x: 1., y: 0. });
     * ... var t = new Matrix1x2( { x: 2., y: 1. });
     * ... var r = new Matrix1x2( { x: 4., y: 0. });
     * ... var b = new Matrix1x2( { x: 3., y: -1. });
     * ... (!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</convex>
	<cross public="1" get="inline" set="null" line="610" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"cross" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</cross>
	<theta public="1" get="inline" set="null" line="626" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east().theta()        == 0.
     * >>> Matrix1x2.bottomRight().theta() == -Math.PI/4
     * >>> Matrix1x2.south().theta()       == -Math.PI/2
     * >>> Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4
     * >>> Matrix1x2.west().theta()        == Math.PI
     * >>> Matrix1x2.topLeft().theta()     == 3*Math.PI/4
     * >>> Matrix1x2.north().theta()       == Math.PI/2
     * >>> Matrix1x2.topRight().theta()    == Math.PI/4
     * </code></pre>]]></haxe_doc>
	</theta>
	<close public="1" get="inline" set="null" line="638" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 0.5, y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</close>
	<xClose public="1" get="inline" set="null" line="650" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = new Matrix1x2( { x: 0.5, y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</xClose>
	<yClose public="1" get="inline" set="null" line="663" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</yClose>
	<pivotAround public="1" get="inline" set="null" line="676" static="1">
		<f a="this:omega:pivot">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight(); 
     * ... var b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 ); 
     * ... b.close( Matrix1x2.north() ); }) == true
     * </code></pre>]]></haxe_doc>
	</pivotAround>
	<toTpoint public="1" get="inline" set="null" line="690" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<t path="justGraphix.geom.structs.Tpoint"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"toTPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</toTpoint>
	<toVec3 public="1" get="inline" set="null" line="702" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVec3>
	<fromVec3 public="1" get="inline" set="null" line="714" static="1">
		<f a="v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec3>
	<fromArrayPos public="1" get="inline" set="null" line="721" static="1">
		<f a="arr:pos">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="justGraphix.geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})
     * </code></pre>]]></haxe_doc>
	</fromArrayPos>
	<toArrayPos public="1" get="inline" set="null" line="733" static="1">
		<f a="this:arr:pos">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 5., y: 6. } ); 
     * ... var arr = [ 0., 1., 2. ]; 
     * ... a.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]
     * </code></pre>]]></haxe_doc>
	</toArrayPos>
	<readItem public="1" get="inline" set="null" line="740" static="1">
		<f a="this:k">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="752" static="1">
		<f a="this:k:v">
			<c path="justGraphix.geom.structs.Mat1x2"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix1x2.Matrix1x2_Impl_" params="" file="src/justGraphix/geom/Matrix1x2.hx" private="1" module="justGraphix.geom.Matrix1x2" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="1" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="2" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</columns>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.counting == Matrix1x2.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<t path="Iterator"><x path="Float"/></t>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix1x2.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></self>
		<get_self get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_self>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="57" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="70" static="1">
			<f a="this:length">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = new Matrix1x2( { x: 9., y: 12. } );
     * ... m.magnitude = 5;
     * ... ( m.x == 3. && m.y == 4. ) == true; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</set_magnitude>
		<normalize public="1" get="inline" set="null" line="87" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"normalize" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</normalize>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.zero == new Matrix1x2({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="101" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></nought>
		<get_nought get="inline" set="null" line="106" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="116" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></one>
		<get_one get="inline" set="null" line="121" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.minus1 == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="131" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.counting == new Matrix1x2({ x: 1., y: 2. })
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="141" static="1"><f a=""><x path="justGraphix.geom.Matrix1x2"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x2"/></testCount>
		<get_testCount get="inline" set="null" line="146" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></get_testCount>
		<negating public="1" get="inline" set="null" line="161" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2({ x: 1., y: 2. });
     * ... var b = -a;
     * ... b == new Matrix1x2({ x: -1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="165" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></negate>
		<adding public="1" get="inline" set="null" line="174" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit + Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
		</adding>
		<add public="1" get="inline" set="null" line="179" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></add>
		<subtracting public="1" get="inline" set="null" line="189" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit - Matrix1x2.unit == new Matrix1x2( { x: 0., y: 0. } )
     * </code></pre>]]></haxe_doc>
		</subtracting>
		<subtract public="1" get="inline" set="null" line="193" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></subtract>
		<isEqualling public="1" get="inline" set="null" line="207" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a == b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</isEqualling>
		<isEqual public="1" get="inline" set="null" line="210" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Bool"/>
</f></isEqual>
		<scaleMultiplying public="1" get="inline" set="null" line="221" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit * 2 == new Matrix1x2( { x: 2., y: 2. } )
     * >>> 2 * Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
		</scaleMultiplying>
		<scaleMultiply public="1" get="inline" set="null" line="225" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></scaleMultiply>
		<lerpClampT public="1" get="inline" set="null" line="232" static="1"><f a="this:p:t">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></lerpClampT>
		<lerp public="1" get="inline" set="null" line="237" static="1"><f a="this:p:t">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></lerp>
		<sumXY public="1" get="inline" set="null" line="245" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
</f></sumXY>
		<topLeft public="1" get="inline" set="null" line="255" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<topRight public="1" get="inline" set="null" line="264" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</topRight>
		<bottomLeft public="1" get="inline" set="null" line="273" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<bottomRight public="1" get="inline" set="null" line="282" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<north public="1" get="inline" set="null" line="291" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })
     * </code></pre>]]></haxe_doc>
		</north>
		<south public="1" get="inline" set="null" line="300" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })
     * </code></pre>]]></haxe_doc>
		</south>
		<west public="1" get="inline" set="null" line="309" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })
     * </code></pre>]]></haxe_doc>
		</west>
		<east public="1" get="inline" set="null" line="318" static="1">
			<f a=""><x path="justGraphix.geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })
     * </code></pre>]]></haxe_doc>
		</east>
		<dotting public="1" get="inline" set="null" line="325" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</dotting>
		<dot public="1" get="inline" set="null" line="329" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></dot>
		<dividing public="1" get="inline" set="null" line="340" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )
     * </code></pre>]]></haxe_doc>
		</dividing>
		<divide public="1" get="inline" set="null" line="344" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></divide>
		<notEqual public="1" get="inline" set="null" line="357" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 5. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a != b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<perp public="1" get="inline" set="null" line="367" static="1">
			<f a="this:b">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"perp" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</perp>
		<mid public="1" get="inline" set="null" line="382" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3.,  y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 4.,  y: 2. } ); 
     * ... var c = new Matrix1x2( { x: 3.5, y: 1.5 } );
     * ... var mid = Matrix1x2.mid( a, b ); 
     * ... mid == c;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</mid>
		<distanceBetweenSquare public="1" get="inline" set="null" line="396" static="1">
			<f a="this:b">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetweenSquare( b ); }) == 25
     * </code></pre>]]></haxe_doc>
		</distanceBetweenSquare>
		<distanceBetweenSquare_ public="1" get="inline" set="null" line="403" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="Float"/>
</f></distanceBetweenSquare_>
		<distanceBetween public="1" get="inline" set="null" line="419" static="1">
			<f a="this:b">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetween( b ); }) == 5
     * </code></pre>]]></haxe_doc>
		</distanceBetween>
		<span public="1" get="inline" set="null" line="428" static="1">
			<f a="this:b">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"span" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</span>
		<lenSquare public="1" get="inline" set="null" line="439" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 3. } ); 
     * ... a.lenSquare(); }) == 18
     * </code></pre>]]></haxe_doc>
		</lenSquare>
		<distance public="1" get="inline" set="null" line="450" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 4. } ); 
     * ... a.distance(); }) == 5
     * </code></pre>]]></haxe_doc>
		</distance>
		<isLeft public="1" get="inline" set="null" line="472" static="1">
			<f a="this:a:b">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"isLeft" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</isLeft>
		<triangleArea public="1" get="inline" set="null" line="481" static="1">
			<f a="a:b:c">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"triangleArea" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</triangleArea>
		<sign public="1" get="inline" set="null" line="491" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.sign( -7. ) == -1
     * >>> Matrix1x2.sign( 7. ) == 1
     * </code></pre>]]></haxe_doc>
		</sign>
		<thetaDifference public="1" get="inline" set="null" line="507" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero ) == 0
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero ) == -Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero ) == -Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero ) == -3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero ) == Math.PI
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero ) == 3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero ) == Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero ) == Math.PI/4
     * </code></pre>]]></haxe_doc>
		</thetaDifference>
		<inTri public="1" get="inline" set="null" line="519" static="1">
			<f a="this:a:b:c">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</inTri>
		<inTri2 public="1" get="inline" set="null" line="531" static="1">
			<f a="this:a:b:c">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri2" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</inTri2>
		<inRect public="1" get="inline" set="null" line="574" static="1">
			<f a="this:b:c">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight()/2; 
     * ... var b = Matrix1x2.zero; 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == true
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.zero; 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero; 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomRight()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero; 
     * ... a.inRect( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</inRect>
		<convex public="1" get="inline" set="null" line="601" static="1">
			<f a="a:b:c">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var l = new Matrix1x2( { x: 1., y: 0. });
     * ... var t = new Matrix1x2( { x: 2., y: 1. });
     * ... var r = new Matrix1x2( { x: 4., y: 0. });
     * ... var b = new Matrix1x2( { x: 3., y: -1. });
     * ... (!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</convex>
		<cross public="1" get="inline" set="null" line="610" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"cross" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</cross>
		<theta public="1" get="inline" set="null" line="626" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east().theta()        == 0.
     * >>> Matrix1x2.bottomRight().theta() == -Math.PI/4
     * >>> Matrix1x2.south().theta()       == -Math.PI/2
     * >>> Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4
     * >>> Matrix1x2.west().theta()        == Math.PI
     * >>> Matrix1x2.topLeft().theta()     == 3*Math.PI/4
     * >>> Matrix1x2.north().theta()       == Math.PI/2
     * >>> Matrix1x2.topRight().theta()    == Math.PI/4
     * </code></pre>]]></haxe_doc>
		</theta>
		<close public="1" get="inline" set="null" line="638" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 0.5, y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</close>
		<xClose public="1" get="inline" set="null" line="650" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = new Matrix1x2( { x: 0.5, y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</xClose>
		<yClose public="1" get="inline" set="null" line="663" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0.00001 }</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</yClose>
		<pivotAround public="1" get="inline" set="null" line="676" static="1">
			<f a="this:omega:pivot">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight(); 
     * ... var b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 ); 
     * ... b.close( Matrix1x2.north() ); }) == true
     * </code></pre>]]></haxe_doc>
		</pivotAround>
		<toTpoint public="1" get="inline" set="null" line="690" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<t path="justGraphix.geom.structs.Tpoint"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"toTPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</toTpoint>
		<toVec3 public="1" get="inline" set="null" line="702" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVec3>
		<fromVec3 public="1" get="inline" set="null" line="714" static="1">
			<f a="v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec3>
		<fromArrayPos public="1" get="inline" set="null" line="721" static="1">
			<f a="arr:pos">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="justGraphix.geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})
     * </code></pre>]]></haxe_doc>
		</fromArrayPos>
		<toArrayPos public="1" get="inline" set="null" line="733" static="1">
			<f a="this:arr:pos">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 5., y: 6. } ); 
     * ... var arr = [ 0., 1., 2. ]; 
     * ... a.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]
     * </code></pre>]]></haxe_doc>
		</toArrayPos>
		<readItem public="1" get="inline" set="null" line="740" static="1">
			<f a="this:k">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="752" static="1">
			<f a="this:k:v">
				<c path="justGraphix.geom.structs.Mat1x2"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
	</class>
	<typedef path="justGraphix.geom.Vec3" params="" file="src/justGraphix/geom/Matrix1x3.hx" module="justGraphix.geom.Matrix1x3"><x path="justGraphix.geom.Matrix1x3"/></typedef>
	<abstract path="justGraphix.geom.Matrix1x3" params="" file="src/justGraphix/geom/Matrix1x3.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat1x3"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat1x3"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat1x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
		</to>
		<haxe_doc>{ x, y, z }
   try to use 1x4 for 3D vectors.</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix1x3.Matrix1x3_Impl_" params="" file="src/justGraphix/geom/Matrix1x3.hx" private="1" module="justGraphix.geom.Matrix1x3" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="1" line="13" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="3" line="15" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3</e></m></meta>
	</columns>
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.counting == Matrix1x3.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix1x3.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></self>
	<get_self get="inline" set="null" line="50" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_self>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="61" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="65" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
	<normalize public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></normalize>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.zero == new Matrix1x3({ x: 0., y: 0., z: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="92" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></nought>
	<get_nought get="inline" set="null" line="97" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.unit == new Matrix1x3({ x: 1., y: 1., z: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit public="1" get="inline" set="null" line="107" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></one>
	<get_one get="inline" set="null" line="112" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.minus1 == new Matrix1x3({ x: -1., y: -1., z: -1. })
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="122" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.counting == new Matrix1x3({ x: 1., y: 2., z: 3. })
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="132" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></testCount>
	<get_testCount get="inline" set="null" line="137" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_testCount>
	<identity public="1" get="inline" set="null" line="149" static="1">
		<f a="out">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.identity( Matrix1x3.zero ) == new Matrix1x3({ x: 1., y: 1., z: 1. })
     * </code></pre>]]></haxe_doc>
	</identity>
	<copy public="1" get="inline" set="null" line="165" static="1">
		<f a="pin:pout">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = Matrix1x3.zero;
     * ... var c = Matrix1x3.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<magnitudeSquared public="1" get="inline" set="null" line="177" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<scalarProduct public="1" get="inline" set="null" line="189" static="1"><f a="a:b">
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="Float"/>
</f></scalarProduct>
	<dotProd public="1" get="inline" set="null" line="193" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="Float"/>
</f></dotProd>
	<transformPoint public="1" get="inline" set="null" line="197" static="1"><f a="this:t">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></transformPoint>
	<cross public="1" get="inline" set="null" line="204" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></cross>
	<divide public="1" get="inline" set="null" line="213" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="217" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<notEqual public="1" get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = new Matrix1x3({ x: 1., y: 2., z: 4. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<negating public="1" get="inline" set="null" line="245" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = -a;
     * ... b == new Matrix1x3({ x: -1., y: -2., z: -3. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="249" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></negate>
	<subtracting public="1" get="inline" set="null" line="264" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... a - a == Matrix1x3.zero;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtracting>
	<subtract public="1" get="inline" set="null" line="268" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></subtract>
	<adding public="1" get="inline" set="null" line="282" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... a + a == new Matrix1x3({ x: 2., y: 2., z: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</adding>
	<add public="1" get="inline" set="null" line="286" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></add>
	<scaleMultiplying public="1" get="inline" set="null" line="302" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = a * 2;
     * ... b == new Matrix1x3({ x: 2., y: 4., z: 6. }); }) == true
     * </code></pre>]]></haxe_doc>
	</scaleMultiplying>
	<scaleMultiply public="1" get="inline" set="null" line="306" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></scaleMultiply>
	<isEqualling public="1" get="inline" set="null" line="321" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="justGraphix.geom.Matrix1x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</isEqualling>
	<isEqual public="1" get="inline" set="null" line="325" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="Bool"/>
</f></isEqual>
	<fromVec public="1" get="inline" set="null" line="347" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x3 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<staticFromVec public="1" get="inline" set="null" line="349" static="1"><f a="this:vec">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></staticFromVec>
	<toVector public="1" get="inline" set="null" line="362" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="373" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.geom.Matrix1x3"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b: Matrix1x3 = [ 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<staticFromArray public="1" get="inline" set="null" line="375" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></staticFromArray>
	<toArray public="1" get="inline" set="null" line="386" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
	<readItem public="1" get="inline" set="null" line="389" static="1">
		<f a="this:k">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="403" static="1">
		<f a="this:k:v">
			<c path="justGraphix.geom.structs.Mat1x3"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix1x3.Matrix1x3_Impl_" params="" file="src/justGraphix/geom/Matrix1x3.hx" private="1" module="justGraphix.geom.Matrix1x3" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="1" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="3" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</columns>
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.counting == Matrix1x3.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix1x3.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></self>
		<get_self get="inline" set="null" line="50" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_self>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="61" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="65" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
		<normalize public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></normalize>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.zero == new Matrix1x3({ x: 0., y: 0., z: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="92" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></nought>
		<get_nought get="inline" set="null" line="97" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.unit == new Matrix1x3({ x: 1., y: 1., z: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit public="1" get="inline" set="null" line="107" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></one>
		<get_one get="inline" set="null" line="112" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.minus1 == new Matrix1x3({ x: -1., y: -1., z: -1. })
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="122" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.counting == new Matrix1x3({ x: 1., y: 2., z: 3. })
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="132" static="1"><f a=""><x path="justGraphix.geom.Matrix1x3"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x3"/></testCount>
		<get_testCount get="inline" set="null" line="137" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></get_testCount>
		<identity public="1" get="inline" set="null" line="149" static="1">
			<f a="out">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x3.identity( Matrix1x3.zero ) == new Matrix1x3({ x: 1., y: 1., z: 1. })
     * </code></pre>]]></haxe_doc>
		</identity>
		<copy public="1" get="inline" set="null" line="165" static="1">
			<f a="pin:pout">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = Matrix1x3.zero;
     * ... var c = Matrix1x3.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<magnitudeSquared public="1" get="inline" set="null" line="177" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<scalarProduct public="1" get="inline" set="null" line="189" static="1"><f a="a:b">
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="Float"/>
</f></scalarProduct>
		<dotProd public="1" get="inline" set="null" line="193" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="Float"/>
</f></dotProd>
		<transformPoint public="1" get="inline" set="null" line="197" static="1"><f a="this:t">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></transformPoint>
		<cross public="1" get="inline" set="null" line="204" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></cross>
		<divide public="1" get="inline" set="null" line="213" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="217" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<notEqual public="1" get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = new Matrix1x3({ x: 1., y: 2., z: 4. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<negating public="1" get="inline" set="null" line="245" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = -a;
     * ... b == new Matrix1x3({ x: -1., y: -2., z: -3. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="249" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></negate>
		<subtracting public="1" get="inline" set="null" line="264" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... a - a == Matrix1x3.zero;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtracting>
		<subtract public="1" get="inline" set="null" line="268" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></subtract>
		<adding public="1" get="inline" set="null" line="282" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... a + a == new Matrix1x3({ x: 2., y: 2., z: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</adding>
		<add public="1" get="inline" set="null" line="286" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></add>
		<scaleMultiplying public="1" get="inline" set="null" line="302" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = a * 2;
     * ... b == new Matrix1x3({ x: 2., y: 4., z: 6. }); }) == true
     * </code></pre>]]></haxe_doc>
		</scaleMultiplying>
		<scaleMultiply public="1" get="inline" set="null" line="306" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></scaleMultiply>
		<isEqualling public="1" get="inline" set="null" line="321" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="justGraphix.geom.Matrix1x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... var b = new Matrix1x3({ x: 1., y: 2., z: 3. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</isEqualling>
		<isEqual public="1" get="inline" set="null" line="325" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="justGraphix.geom.Matrix1x3"/>
	<x path="Bool"/>
</f></isEqual>
		<fromVec public="1" get="inline" set="null" line="347" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x3 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<staticFromVec public="1" get="inline" set="null" line="349" static="1"><f a="this:vec">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></staticFromVec>
		<toVector public="1" get="inline" set="null" line="362" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="373" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.geom.Matrix1x3"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b: Matrix1x3 = [ 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<staticFromArray public="1" get="inline" set="null" line="375" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.geom.Matrix1x3"/>
</f></staticFromArray>
		<toArray public="1" get="inline" set="null" line="386" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x3.unit;
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
		<readItem public="1" get="inline" set="null" line="389" static="1">
			<f a="this:k">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="403" static="1">
			<f a="this:k:v">
				<c path="justGraphix.geom.structs.Mat1x3"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
	</class>
	<typedef path="justGraphix.geom.Vec4" params="" file="src/justGraphix/geom/Matrix1x4.hx" module="justGraphix.geom.Matrix1x4"><x path="justGraphix.geom.Matrix1x4"/></typedef>
	<abstract path="justGraphix.geom.Matrix1x4" params="" file="src/justGraphix/geom/Matrix1x4.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat1x4"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat1x4"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat1x4"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
		</to>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix1x4.Matrix1x4_Impl_" params="" file="src/justGraphix/geom/Matrix1x4.hx" private="1" module="justGraphix.geom.Matrix1x4" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="1" line="12" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="4" line="14" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</columns>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.counting == Matrix1x4.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix1x4.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></self>
	<get_self get="inline" set="null" line="47" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_self>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="62" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
	<normalize public="1" get="inline" set="null" line="76" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></normalize>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.zero == new Matrix1x4( { x: 0., y: 0., z: 0., w: 0. } )
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="90" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></nought>
	<get_nought get="inline" set="null" line="95" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.unit == new Matrix1x4( { x: 1., y: 1., z: 1., w: 1. } )
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="105" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></one>
	<get_one get="inline" set="null" line="110" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.minus1 == new Matrix1x4( { x: -1., y: -1., z: -1., w: -1. } )
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="120" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix1x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.counting == new Matrix1x4( { x: 1., y: 2., z: 3., w: 4. } )
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="130" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></testCount>
	<get_testCount get="inline" set="null" line="135" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_testCount>
	<negating public="1" get="inline" set="null" line="150" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="154" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></negate>
	<subtracting public="1" get="inline" set="null" line="170" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... a - a == Matrix1x4.zero;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtracting>
	<subtract public="1" get="inline" set="null" line="174" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></subtract>
	<adding public="1" get="inline" set="null" line="189" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... a + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</adding>
	<add public="1" get="inline" set="null" line="193" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></add>
	<scaleMultiplying public="1" get="inline" set="null" line="201" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiplying>
	<scaleMultiply public="1" get="inline" set="null" line="205" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></scaleMultiply>
	<isEqualling public="1" get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</isEqualling>
	<isEqual public="1" get="inline" set="null" line="225" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Bool"/>
</f></isEqual>
	<identity public="1" get="inline" set="null" line="242" static="1">
		<f a="out">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.identity( Matrix1x4.zero ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</identity>
	<copy public="1" get="inline" set="null" line="259" static="1">
		<f a="pin:pout">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Matrix1x4.zero;
     * ... var c = Matrix1x4.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<projectPoint public="1" get="inline" set="null" line="272" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"projectPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</projectPoint>
	<notEqual public="1" get="inline" set="null" line="290" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<magnitudeSquared public="1" get="inline" set="null" line="299" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<scalarProduct public="1" get="inline" set="null" line="312" static="1"><f a="a:b">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Float"/>
</f></scalarProduct>
	<dotProd public="1" get="inline" set="null" line="316" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Float"/>
</f></dotProd>
	<rotateX public="1" get="inline" set="null" line="320" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></rotateX>
	<rotateY public="1" get="inline" set="null" line="324" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></rotateY>
	<rotateZ public="1" get="inline" set="null" line="328" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></rotateZ>
	<translateXY public="1" get="inline" set="null" line="332" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></translateXY>
	<translateXYZ public="1" get="inline" set="null" line="336" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></translateXYZ>
	<transformPoint public="1" get="inline" set="null" line="347" static="1"><f a="this:t">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></transformPoint>
	<divide public="1" get="inline" set="null" line="354" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="358" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<conjugate public="1" get="inline" set="null" line="370" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<multiplyV public="1" get="inline" set="null" line="378" static="1"><f a="a:b:out">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></multiplyV>
	<multiplyQ public="1" get="inline" set="null" line="394" static="1"><f a="q:v:out">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></multiplyQ>
	<cross public="1" get="inline" set="null" line="409" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></cross>
	<constrainDistance public="1" get="inline" set="null" line="492" static="1"><f a="this:anchor:distance">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></constrainDistance>
	<fromVec public="1" get="inline" set="null" line="506" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Matrix1x4 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="518" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="528" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b: Matrix1x4 = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="538" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
	<readItem public="1" get="inline" set="null" line="541" static="1">
		<f a="this:k">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="557" static="1">
		<f a="this:k:v">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix1x4.Matrix1x4_Impl_" params="" file="src/justGraphix/geom/Matrix1x4.hx" private="1" module="justGraphix.geom.Matrix1x4" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="1" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="4" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</columns>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.counting == Matrix1x4.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix1x4.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></self>
		<get_self get="inline" set="null" line="47" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_self>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="62" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
		<normalize public="1" get="inline" set="null" line="76" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></normalize>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.zero == new Matrix1x4( { x: 0., y: 0., z: 0., w: 0. } )
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="90" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></nought>
		<get_nought get="inline" set="null" line="95" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.unit == new Matrix1x4( { x: 1., y: 1., z: 1., w: 1. } )
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="105" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></one>
		<get_one get="inline" set="null" line="110" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.minus1 == new Matrix1x4( { x: -1., y: -1., z: -1., w: -1. } )
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="120" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix1x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.counting == new Matrix1x4( { x: 1., y: 2., z: 3., w: 4. } )
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="130" static="1"><f a=""><x path="justGraphix.geom.Matrix1x4"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix1x4"/></testCount>
		<get_testCount get="inline" set="null" line="135" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></get_testCount>
		<negating public="1" get="inline" set="null" line="150" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="154" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></negate>
		<subtracting public="1" get="inline" set="null" line="170" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... a - a == Matrix1x4.zero;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtracting>
		<subtract public="1" get="inline" set="null" line="174" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></subtract>
		<adding public="1" get="inline" set="null" line="189" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... a + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</adding>
		<add public="1" get="inline" set="null" line="193" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></add>
		<scaleMultiplying public="1" get="inline" set="null" line="201" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiplying>
		<scaleMultiply public="1" get="inline" set="null" line="205" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></scaleMultiply>
		<isEqualling public="1" get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</isEqualling>
		<isEqual public="1" get="inline" set="null" line="225" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Bool"/>
</f></isEqual>
		<identity public="1" get="inline" set="null" line="242" static="1">
			<f a="out">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.identity( Matrix1x4.zero ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</identity>
		<copy public="1" get="inline" set="null" line="259" static="1">
			<f a="pin:pout">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Matrix1x4.zero;
     * ... var c = Matrix1x4.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<projectPoint public="1" get="inline" set="null" line="272" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"projectPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</projectPoint>
		<notEqual public="1" get="inline" set="null" line="290" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<magnitudeSquared public="1" get="inline" set="null" line="299" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<scalarProduct public="1" get="inline" set="null" line="312" static="1"><f a="a:b">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Float"/>
</f></scalarProduct>
		<dotProd public="1" get="inline" set="null" line="316" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Float"/>
</f></dotProd>
		<rotateX public="1" get="inline" set="null" line="320" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></rotateX>
		<rotateY public="1" get="inline" set="null" line="324" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></rotateY>
		<rotateZ public="1" get="inline" set="null" line="328" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></rotateZ>
		<translateXY public="1" get="inline" set="null" line="332" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></translateXY>
		<translateXYZ public="1" get="inline" set="null" line="336" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></translateXYZ>
		<transformPoint public="1" get="inline" set="null" line="347" static="1"><f a="this:t">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix4x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></transformPoint>
		<divide public="1" get="inline" set="null" line="354" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="358" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<conjugate public="1" get="inline" set="null" line="370" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<multiplyV public="1" get="inline" set="null" line="378" static="1"><f a="a:b:out">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></multiplyV>
		<multiplyQ public="1" get="inline" set="null" line="394" static="1"><f a="q:v:out">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></multiplyQ>
		<cross public="1" get="inline" set="null" line="409" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></cross>
		<constrainDistance public="1" get="inline" set="null" line="492" static="1"><f a="this:anchor:distance">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
</f></constrainDistance>
		<fromVec public="1" get="inline" set="null" line="506" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Matrix1x4 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="518" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="528" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b: Matrix1x4 = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="538" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit;
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
		<readItem public="1" get="inline" set="null" line="541" static="1">
			<f a="this:k">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="557" static="1">
			<f a="this:k:v">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
	</class>
	<abstract path="justGraphix.geom.Matrix2x2" params="" file="src/justGraphix/geom/Matrix2x2.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat2x2"/></icast>
			<icast field="from3x3"><x path="justGraphix.geom.Matrix3x3"/></icast>
			<icast field="from4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat2x2"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat2x2"/></icast>
			<icast field="to3x3"><x path="justGraphix.geom.Matrix3x3"/></icast>
			<icast field="to4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>![2x2](../../bootstrap/img/matrix2x2.png)</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix2x2.Matrix2x2_Impl_" params="" file="src/justGraphix/geom/Matrix2x2.hx" private="1" module="justGraphix.geom.Matrix2x2" final="1">
	<row final="1" public="1" get="inline" set="null" expr="2" line="10" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</row>
	<col final="1" public="1" get="inline" set="null" expr="2" line="12" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</col>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="24" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.counting == Matrix2x2.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix2x2.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></self>
	<get_self get="inline" set="null" line="45" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_self>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.zero == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="56" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></nought>
	<get_nought get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.unit == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="72" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></one>
	<get_one get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.minus1 == new Matrix2x2({ a: -1., b: 0., c: 0., d: -1. })
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="88" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.counting == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } )
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="98" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></testCount>
	<get_testCount get="inline" set="null" line="104" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_testCount>
	<_1234 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* Used for testing
     * <pre><code>
     * >>> Matrix2x2._1234 == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } )
     * </code></pre>]]></haxe_doc>
	</_1234>
	<get__1234 get="inline" set="null" line="115" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get__1234>
	<topLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topLeft == new Matrix2x2( { a: 1., b: 0.
     * ...                                       , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<get_topLeft get="inline" set="null" line="129" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_topLeft>
	<topRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topRight == new Matrix2x2( { a: 1., b: 0.
     * ...                                        , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topRight>
	<get_topRight get="inline" set="null" line="143" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_topRight>
	<bottomLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomLeft == new Matrix2x2( { a: -1., b: 0.
     * ...                                          , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<get_bottomLeft get="inline" set="null" line="157" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_bottomLeft>
	<bottomRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomRight == new Matrix2x2( { a: 1., b: 0.
     * ...                                           , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<get_bottomRight get="inline" set="null" line="171" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_bottomRight>
	<north public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.north == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</north>
	<get_north get="inline" set="null" line="185" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_north>
	<south public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.south == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</south>
	<get_south get="inline" set="null" line="199" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_south>
	<west public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.west == new Matrix2x2( { a: -1., b: 0.
     * ...                                    , c: 0.,  d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</west>
	<get_west get="inline" set="null" line="213" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_west>
	<east public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix2x2"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.east == new Matrix2x2( { a: 1., b: 0.
     * ...                                    , c: 0., d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</east>
	<get_east get="inline" set="null" line="227" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_east>
	<create public="1" get="inline" set="null" line="232" static="1"><f a="this:a:b:c:d">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></create>
	<scale public="1" get="inline" set="null" line="243" static="1">
		<f a="p">
			<x path="justGraphix.geom.Matrix1x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )
     * </code></pre>]]></haxe_doc>
	</scale>
	<rotation public="1" get="inline" set="null" line="253" static="1">
		<f a="alpha">
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
	</rotation>
	<transpose public="1" get="inline" set="null" line="263" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
	</transpose>
	<negating public="1" get="inline" set="null" line="279" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.counting;
     * ... var b = -a;
     * ... b == new Matrix2x2({ a: -1., b: -2., c: -3., d: -4. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="283" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></negate>
	<adding public="1" get="inline" set="null" line="295" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit;
     * ... a + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</adding>
	<add public="1" get="inline" set="null" line="299" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></add>
	<equal public="1" get="inline" set="null" line="313" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="331" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<subtracting public="1" get="inline" set="null" line="343" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit;
     * ... a - a == Matrix2x2.zero;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtracting>
	<subtract public="1" get="inline" set="null" line="348" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></subtract>
	<multiplyValue public="1" get="inline" set="null" line="353" static="1">
		<f a="v:m">
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyValue>
	<scaleByVector2 public="1" get="inline" set="null" line="358" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></scaleByVector2>
	<multiply public="1" get="inline" set="null" line="363" static="1">
		<f a="a2:b2">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<multiplyPoint public="1" get="inline" set="null" line="368" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></multiplyPoint>
	<det public="1" get="inline" set="null" line="374" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="Float"/>
</f></det>
	<inverse public="1" get="inline" set="null" line="378" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></inverse>
	<to3x3 public="1" get="inline" set="null" line="389" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</to3x3>
	<to4x3 public="1" get="inline" set="null" line="391" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</to4x3>
	<from3x3 public="1" get="inline" set="null" line="393" static="1">
		<f a="m3">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</from3x3>
	<from4x3 public="1" get="inline" set="null" line="395" static="1">
		<f a="m4">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</from4x3>
	<fromArr public="1" get="inline" set="null" line="397" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="399" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<fromVec public="1" get="inline" set="null" line="411" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... var c: Matrix2x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="422" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<setXY public="1" get="inline" set="null" line="437" static="1">
		<f a="this:x:y:v">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit;
     * ... a.setXY( 0, 0, 1. );
     * ... a.setXY( 1, 0, 2. );
     * ... a.setXY( 0, 1, 3. );
     * ... a.setXY( 1, 1, 4. );
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</setXY>
	<getXY public="1" get="inline" set="null" line="452" static="1">
		<f a="this:x:y">
			<c path="justGraphix.geom.structs.Mat2x2"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a.getXY( 0, 0 ) == 1 && a.getXY( 1, 0 ) == 2 && a.getXY( 0, 1 ) == 3 && a.getXY( 1, 1 ) == 4;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</getXY>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix2x2.Matrix2x2_Impl_" params="" file="src/justGraphix/geom/Matrix2x2.hx" private="1" module="justGraphix.geom.Matrix2x2" final="1">
		<row final="1" public="1" get="inline" set="null" expr="2" line="10" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</row>
		<col final="1" public="1" get="inline" set="null" expr="2" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</col>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="24" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.counting == Matrix2x2.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix2x2.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></self>
		<get_self get="inline" set="null" line="45" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_self>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.zero == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="56" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></nought>
		<get_nought get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.unit == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="72" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></one>
		<get_one get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.minus1 == new Matrix2x2({ a: -1., b: 0., c: 0., d: -1. })
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="88" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.counting == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } )
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="98" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix2x2"/></testCount>
		<get_testCount get="inline" set="null" line="104" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></get_testCount>
		<_1234 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* Used for testing
     * <pre><code>
     * >>> Matrix2x2._1234 == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } )
     * </code></pre>]]></haxe_doc>
		</_1234>
		<get__1234 get="inline" set="null" line="115" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get__1234>
		<topLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topLeft == new Matrix2x2( { a: 1., b: 0.
     * ...                                       , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<get_topLeft get="inline" set="null" line="129" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_topLeft>
		<topRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topRight == new Matrix2x2( { a: 1., b: 0.
     * ...                                        , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topRight>
		<get_topRight get="inline" set="null" line="143" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_topRight>
		<bottomLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomLeft == new Matrix2x2( { a: -1., b: 0.
     * ...                                          , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<get_bottomLeft get="inline" set="null" line="157" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_bottomLeft>
		<bottomRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomRight == new Matrix2x2( { a: 1., b: 0.
     * ...                                           , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<get_bottomRight get="inline" set="null" line="171" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_bottomRight>
		<north public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.north == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</north>
		<get_north get="inline" set="null" line="185" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_north>
		<south public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.south == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</south>
		<get_south get="inline" set="null" line="199" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_south>
		<west public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.west == new Matrix2x2( { a: -1., b: 0.
     * ...                                    , c: 0.,  d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</west>
		<get_west get="inline" set="null" line="213" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_west>
		<east public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix2x2"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.east == new Matrix2x2( { a: 1., b: 0.
     * ...                                    , c: 0., d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</east>
		<get_east get="inline" set="null" line="227" static="1"><f a=""><x path="justGraphix.geom.Matrix2x2"/></f></get_east>
		<create public="1" get="inline" set="null" line="232" static="1"><f a="this:a:b:c:d">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></create>
		<scale public="1" get="inline" set="null" line="243" static="1">
			<f a="p">
				<x path="justGraphix.geom.Matrix1x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )
     * </code></pre>]]></haxe_doc>
		</scale>
		<rotation public="1" get="inline" set="null" line="253" static="1">
			<f a="alpha">
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
		</rotation>
		<transpose public="1" get="inline" set="null" line="263" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
		</transpose>
		<negating public="1" get="inline" set="null" line="279" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.counting;
     * ... var b = -a;
     * ... b == new Matrix2x2({ a: -1., b: -2., c: -3., d: -4. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="283" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></negate>
		<adding public="1" get="inline" set="null" line="295" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit;
     * ... a + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</adding>
		<add public="1" get="inline" set="null" line="299" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></add>
		<equal public="1" get="inline" set="null" line="313" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="331" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<subtracting public="1" get="inline" set="null" line="343" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit;
     * ... a - a == Matrix2x2.zero;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtracting>
		<subtract public="1" get="inline" set="null" line="348" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></subtract>
		<multiplyValue public="1" get="inline" set="null" line="353" static="1">
			<f a="v:m">
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyValue>
		<scaleByVector2 public="1" get="inline" set="null" line="358" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></scaleByVector2>
		<multiply public="1" get="inline" set="null" line="363" static="1">
			<f a="a2:b2">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<multiplyPoint public="1" get="inline" set="null" line="368" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix1x2"/>
</f></multiplyPoint>
		<det public="1" get="inline" set="null" line="374" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="Float"/>
</f></det>
		<inverse public="1" get="inline" set="null" line="378" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<x path="justGraphix.geom.Matrix2x2"/>
</f></inverse>
		<to3x3 public="1" get="inline" set="null" line="389" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</to3x3>
		<to4x3 public="1" get="inline" set="null" line="391" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</to4x3>
		<from3x3 public="1" get="inline" set="null" line="393" static="1">
			<f a="m3">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</from3x3>
		<from4x3 public="1" get="inline" set="null" line="395" static="1">
			<f a="m4">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</from4x3>
		<fromArr public="1" get="inline" set="null" line="397" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="399" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<fromVec public="1" get="inline" set="null" line="411" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... var c: Matrix2x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="422" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<setXY public="1" get="inline" set="null" line="437" static="1">
			<f a="this:x:y:v">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit;
     * ... a.setXY( 0, 0, 1. );
     * ... a.setXY( 1, 0, 2. );
     * ... a.setXY( 0, 1, 3. );
     * ... a.setXY( 1, 1, 4. );
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</setXY>
		<getXY public="1" get="inline" set="null" line="452" static="1">
			<f a="this:x:y">
				<c path="justGraphix.geom.structs.Mat2x2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a.getXY( 0, 0 ) == 1 && a.getXY( 1, 0 ) == 2 && a.getXY( 0, 1 ) == 3 && a.getXY( 1, 1 ) == 4;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</getXY>
	</class>
	<abstract path="justGraphix.geom.Matrix3x3" params="" file="src/justGraphix/geom/Matrix3x3.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat3x3"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="from2x2"><x path="justGraphix.geom.Matrix2x2"/></icast>
			<icast field="from4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat3x3"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat3x3"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="to2x2"><x path="justGraphix.geom.Matrix2x2"/></icast>
			<icast field="to4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>![3x3](../../bootstrap/img/matrix3x3.png)</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix3x3.Matrix3x3_Impl_" params="" file="src/justGraphix/geom/Matrix3x3.hx" private="1" module="justGraphix.geom.Matrix3x3" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="3" line="12" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="3" line="14" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3</e></m></meta>
	</columns>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix3x3.counting == Matrix3x3.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix3x3.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></self>
	<get_self get="inline" set="null" line="49" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_self>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix3x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.zero == new Matrix3x3( { a: 0., b: 0., c: 0.
     * ...                                    , d: 0., e: 0., f: 0.
     * ...                                    , g: 0., h: 0., i: 0. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="64" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></nought>
	<get_nought get="inline" set="null" line="71" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix3x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix3x3.unit == new Matrix3x3({ a: 1., b: 0., c: 0.
     * ...                                  , d: 0., e: 1., f: 0.
     * ...                                  , g: 0., h: 0., i: 1. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit public="1" get="inline" set="null" line="85" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></one>
	<get_one get="inline" set="null" line="92" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix3x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix3x3.minus1 == new Matrix3x3({ a: -1., b: 0., c: 0.
     * ...                                   , d: 0.,  e: -1., f: 0.
     * ...                                   , g: 0.,  h: 0., i: -1. })
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="104" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix3x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.counting == new Matrix3x3( { a: 1., b: 2., c: 3.
     * ...                                      , d: 4., e: 5., f: 6.
     * ...                                      , g: 7., h: 8., i: 9. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="118" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></testCount>
	<get_testCount get="inline" set="null" line="125" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_testCount>
	<_123456789 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix3x3"/>
		<haxe_doc><![CDATA[* Used for testing
     * <pre><code>
     * >>> ({
     * ... Matrix3x3._123456789 == new Matrix3x3({ a: 1., b: 2., c: 3.
     * ...                                         , d: 4., e: 5., f: 6.
     * ...                                         , g: 7., h: 8., i: 9. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</_123456789>
	<get__123456789 get="inline" set="null" line="140" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get__123456789>
	<radianX public="1" get="inline" set="null" line="146" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></radianX>
	<rotateX public="1" get="inline" set="null" line="154" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotateX>
	<radianY public="1" get="inline" set="null" line="156" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></radianY>
	<rotateY public="1" get="inline" set="null" line="164" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotateY>
	<radianZ public="1" get="inline" set="null" line="166" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></radianZ>
	<rotateZ public="1" get="inline" set="null" line="174" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotateZ>
	<rotate public="1" get="inline" set="null" line="176" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotate>
	<xShear public="1" get="inline" set="null" line="178" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></xShear>
	<shearX public="1" get="inline" set="null" line="185" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></shearX>
	<yShear public="1" get="inline" set="null" line="187" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></yShear>
	<shearY public="1" get="inline" set="null" line="193" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></shearY>
	<xFlip public="1" get="inline" set="null" line="195" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></xFlip>
	<flipX public="1" get="inline" set="null" line="201" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></flipX>
	<yFlip public="1" get="inline" set="null" line="203" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></yFlip>
	<flipY public="1" get="inline" set="null" line="209" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></flipY>
	<xyFlip public="1" get="inline" set="null" line="211" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></xyFlip>
	<flipXY public="1" get="inline" set="null" line="217" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></flipXY>
	<sxyz public="1" get="inline" set="null" line="219" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sxyz>
	<scaleXYZ public="1" get="inline" set="null" line="225" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleXYZ>
	<sx public="1" get="inline" set="null" line="227" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sx>
	<scaleX public="1" get="inline" set="null" line="233" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleX>
	<sy public="1" get="inline" set="null" line="235" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sy>
	<scaleY public="1" get="inline" set="null" line="241" static="1"><f a="this:y">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleY>
	<sz public="1" get="inline" set="null" line="243" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sz>
	<scaleZ public="1" get="inline" set="null" line="249" static="1"><f a="this:z">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleZ>
	<scale public="1" get="inline" set="null" line="253" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scale>
	<scale2D public="1" get="inline" set="null" line="257" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scale2D>
	<tx public="1" get="inline" set="null" line="263" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></tx>
	<translateX public="1" get="inline" set="null" line="269" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></translateX>
	<ty public="1" get="inline" set="null" line="273" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></ty>
	<txy public="1" get="inline" set="null" line="279" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></txy>
	<translateXY public="1" get="inline" set="null" line="285" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></translateXY>
	<transpose public="1" get="inline" set="null" line="289" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></transpose>
	<negating public="1" get="inline" set="null" line="306" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix3x3.counting;
     * ... var b = -a;
     * ... b == new Matrix3x3({ a: -1., b: -2., c: -3., d: -4., e: -5., f: -6., g: -7., h: -8., i: -9. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="310" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></negate>
	<adding public="1" get="inline" set="null" line="325" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix3x3.unit;
     * ... a + a == new Matrix3x3( { a: 2., b: 0., c: 0.
     * ...                         , d: 0., e: 2., f: 0.
     * ...                         , g: 0., h: 0., i: 2. } ); }) == true
     * </code></pre>]]></haxe_doc>
	</adding>
	<add public="1" get="inline" set="null" line="329" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></add>
	<subtracting public="1" get="inline" set="null" line="342" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix3x3.unit;
     * ... a - a == Matrix3x3.zero; }) == true
     * </code></pre>]]></haxe_doc>
	</subtracting>
	<subtract public="1" get="inline" set="null" line="346" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></subtract>
	<scaleVector4 public="1" get="inline" set="null" line="352" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleVector4>
	<scaleVector2 public="1" get="inline" set="null" line="358" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleVector2>
	<scaleVectorT3 public="1" get="inline" set="null" line="364" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<t path="justGraphix.geom.structs.Tmatrix1x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleVectorT3>
	<multiplyV public="1" get="inline" set="null" line="370" static="1">
		<f a="v:m">
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyV>
	<multiply public="1" get="inline" set="null" line="376" static="1">
		<f a="p:q">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<equal public="1" get="inline" set="null" line="392" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<isEqual public="1" get="inline" set="null" line="396" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="Bool"/>
</f></isEqual>
	<notEqual public="1" get="inline" set="null" line="419" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<cofactor public="1" get="inline" set="null" line="423" static="1"><f a="this:a:b:c:d">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cofactor>
	<det public="1" get="inline" set="null" line="427" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
</f></det>
	<inverse public="1" get="inline" set="null" line="433" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></inverse>
	<fromArr public="1" get="inline" set="null" line="446" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="448" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<to2x2 public="1" get="inline" set="null" line="450" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":to"/></meta>
	</to2x2>
	<to3D public="1" get="inline" set="null" line="453" static="1"><f a="m2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></to3D>
	<from2x2 public="1" get="inline" set="null" line="460" static="1">
		<f a="m2">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2x2>
	<to4x3 public="1" get="inline" set="null" line="462" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</to4x3>
	<from4x3 public="1" get="inline" set="null" line="464" static="1">
		<f a="m4">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from4x3>
	<fromVec public="1" get="inline" set="null" line="466" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="468" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat3x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="470" static="1"><f a="this:x:y:v">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
	<getXY public="1" get="inline" set="null" line="478" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix3x3.Matrix3x3_Impl_" params="" file="src/justGraphix/geom/Matrix3x3.hx" private="1" module="justGraphix.geom.Matrix3x3" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="3" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="3" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</columns>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix3x3.counting == Matrix3x3.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix3x3.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></self>
		<get_self get="inline" set="null" line="49" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_self>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix3x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.zero == new Matrix3x3( { a: 0., b: 0., c: 0.
     * ...                                    , d: 0., e: 0., f: 0.
     * ...                                    , g: 0., h: 0., i: 0. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="64" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></nought>
		<get_nought get="inline" set="null" line="71" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix3x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix3x3.unit == new Matrix3x3({ a: 1., b: 0., c: 0.
     * ...                                  , d: 0., e: 1., f: 0.
     * ...                                  , g: 0., h: 0., i: 1. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit public="1" get="inline" set="null" line="85" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></one>
		<get_one get="inline" set="null" line="92" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix3x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix3x3.minus1 == new Matrix3x3({ a: -1., b: 0., c: 0.
     * ...                                   , d: 0.,  e: -1., f: 0.
     * ...                                   , g: 0.,  h: 0., i: -1. })
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="104" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix3x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.counting == new Matrix3x3( { a: 1., b: 2., c: 3.
     * ...                                      , d: 4., e: 5., f: 6.
     * ...                                      , g: 7., h: 8., i: 9. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="118" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix3x3"/></testCount>
		<get_testCount get="inline" set="null" line="125" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></get_testCount>
		<_123456789 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix3x3"/>
			<haxe_doc><![CDATA[* Used for testing
     * <pre><code>
     * >>> ({
     * ... Matrix3x3._123456789 == new Matrix3x3({ a: 1., b: 2., c: 3.
     * ...                                         , d: 4., e: 5., f: 6.
     * ...                                         , g: 7., h: 8., i: 9. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</_123456789>
		<get__123456789 get="inline" set="null" line="140" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></get__123456789>
		<radianX public="1" get="inline" set="null" line="146" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></radianX>
		<rotateX public="1" get="inline" set="null" line="154" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotateX>
		<radianY public="1" get="inline" set="null" line="156" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></radianY>
		<rotateY public="1" get="inline" set="null" line="164" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotateY>
		<radianZ public="1" get="inline" set="null" line="166" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></radianZ>
		<rotateZ public="1" get="inline" set="null" line="174" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotateZ>
		<rotate public="1" get="inline" set="null" line="176" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></rotate>
		<xShear public="1" get="inline" set="null" line="178" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></xShear>
		<shearX public="1" get="inline" set="null" line="185" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></shearX>
		<yShear public="1" get="inline" set="null" line="187" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></yShear>
		<shearY public="1" get="inline" set="null" line="193" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></shearY>
		<xFlip public="1" get="inline" set="null" line="195" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></xFlip>
		<flipX public="1" get="inline" set="null" line="201" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></flipX>
		<yFlip public="1" get="inline" set="null" line="203" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></yFlip>
		<flipY public="1" get="inline" set="null" line="209" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></flipY>
		<xyFlip public="1" get="inline" set="null" line="211" static="1"><f a=""><x path="justGraphix.geom.Matrix3x3"/></f></xyFlip>
		<flipXY public="1" get="inline" set="null" line="217" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></flipXY>
		<sxyz public="1" get="inline" set="null" line="219" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sxyz>
		<scaleXYZ public="1" get="inline" set="null" line="225" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleXYZ>
		<sx public="1" get="inline" set="null" line="227" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sx>
		<scaleX public="1" get="inline" set="null" line="233" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleX>
		<sy public="1" get="inline" set="null" line="235" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sy>
		<scaleY public="1" get="inline" set="null" line="241" static="1"><f a="this:y">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleY>
		<sz public="1" get="inline" set="null" line="243" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></sz>
		<scaleZ public="1" get="inline" set="null" line="249" static="1"><f a="this:z">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleZ>
		<scale public="1" get="inline" set="null" line="253" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scale>
		<scale2D public="1" get="inline" set="null" line="257" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scale2D>
		<tx public="1" get="inline" set="null" line="263" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></tx>
		<translateX public="1" get="inline" set="null" line="269" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></translateX>
		<ty public="1" get="inline" set="null" line="273" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></ty>
		<txy public="1" get="inline" set="null" line="279" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></txy>
		<translateXY public="1" get="inline" set="null" line="285" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></translateXY>
		<transpose public="1" get="inline" set="null" line="289" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></transpose>
		<negating public="1" get="inline" set="null" line="306" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix3x3.counting;
     * ... var b = -a;
     * ... b == new Matrix3x3({ a: -1., b: -2., c: -3., d: -4., e: -5., f: -6., g: -7., h: -8., i: -9. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="310" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></negate>
		<adding public="1" get="inline" set="null" line="325" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix3x3.unit;
     * ... a + a == new Matrix3x3( { a: 2., b: 0., c: 0.
     * ...                         , d: 0., e: 2., f: 0.
     * ...                         , g: 0., h: 0., i: 2. } ); }) == true
     * </code></pre>]]></haxe_doc>
		</adding>
		<add public="1" get="inline" set="null" line="329" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></add>
		<subtracting public="1" get="inline" set="null" line="342" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix3x3.unit;
     * ... a - a == Matrix3x3.zero; }) == true
     * </code></pre>]]></haxe_doc>
		</subtracting>
		<subtract public="1" get="inline" set="null" line="346" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></subtract>
		<scaleVector4 public="1" get="inline" set="null" line="352" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleVector4>
		<scaleVector2 public="1" get="inline" set="null" line="358" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix1x2"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleVector2>
		<scaleVectorT3 public="1" get="inline" set="null" line="364" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<t path="justGraphix.geom.structs.Tmatrix1x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></scaleVectorT3>
		<multiplyV public="1" get="inline" set="null" line="370" static="1">
			<f a="v:m">
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyV>
		<multiply public="1" get="inline" set="null" line="376" static="1">
			<f a="p:q">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<equal public="1" get="inline" set="null" line="392" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<isEqual public="1" get="inline" set="null" line="396" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
	<x path="Bool"/>
</f></isEqual>
		<notEqual public="1" get="inline" set="null" line="419" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<cofactor public="1" get="inline" set="null" line="423" static="1"><f a="this:a:b:c:d">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cofactor>
		<det public="1" get="inline" set="null" line="427" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Float"/>
</f></det>
		<inverse public="1" get="inline" set="null" line="433" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></inverse>
		<fromArr public="1" get="inline" set="null" line="446" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="448" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<to2x2 public="1" get="inline" set="null" line="450" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":to"/></meta>
		</to2x2>
		<to3D public="1" get="inline" set="null" line="453" static="1"><f a="m2">
	<x path="justGraphix.geom.Matrix2x2"/>
	<x path="justGraphix.geom.Matrix3x3"/>
</f></to3D>
		<from2x2 public="1" get="inline" set="null" line="460" static="1">
			<f a="m2">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2x2>
		<to4x3 public="1" get="inline" set="null" line="462" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</to4x3>
		<from4x3 public="1" get="inline" set="null" line="464" static="1">
			<f a="m4">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from4x3>
		<fromVec public="1" get="inline" set="null" line="466" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="468" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat3x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="470" static="1"><f a="this:x:y:v">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
		<getXY public="1" get="inline" set="null" line="478" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
	</class>
	<abstract path="justGraphix.geom.Matrix4x3" params="" file="src/justGraphix/geom/Matrix4x3.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat4x3"/></icast>
			<icast field="fromNumbered"><t path="justGraphix.geom.structs.Tmatrix4x4numbered"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="from2x2"><x path="justGraphix.geom.Matrix2x2"/></icast>
			<icast field="from3x3"><x path="justGraphix.geom.Matrix3x3"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat4x3"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat4x3"/></icast>
			<icast field="toAffineMatrix"><a>
	<e9><x path="Float"/></e9>
	<e8><x path="Float"/></e8>
	<e6><x path="Float"/></e6>
	<e5><x path="Float"/></e5>
	<e4><x path="Float"/></e4>
	<e2><x path="Float"/></e2>
	<e14><x path="Float"/></e14>
	<e13><x path="Float"/></e13>
	<e12><x path="Float"/></e12>
	<e10><x path="Float"/></e10>
	<e1><x path="Float"/></e1>
	<e0><x path="Float"/></e0>
</a></icast>
			<icast field="toNumbered"><a>
	<_33><x path="Float"/></_33>
	<_32><x path="Float"/></_32>
	<_31><x path="Float"/></_31>
	<_30><x path="Float"/></_30>
	<_23><x path="Float"/></_23>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_13><x path="Float"/></_13>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_03><x path="Float"/></_03>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="to2x2"><x path="justGraphix.geom.Matrix2x2"/></icast>
			<icast field="to3x3"><x path="justGraphix.geom.Matrix3x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>![4x3](../../bootstrap/img/matrix4x3.png)</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix4x3.Matrix4x3_Impl_" params="" file="src/justGraphix/geom/Matrix4x3.hx" private="1" module="justGraphix.geom.Matrix4x3" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="4" line="14" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="3" line="16" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>3</e></m></meta>
	</columns>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix4x3.counting == Matrix4x3.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix4x3.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></self>
	<get_self get="inline" set="null" line="50" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_self>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.zero == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="65" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></nought>
	<get_nought get="inline" set="null" line="72" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.unit == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="86" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></one>
	<get_one get="inline" set="null" line="93" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.minus1 == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: -1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="107" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.counting == new Matrix4x3({ a: 1., b: 2.,  c: 3.,  d: 4.
     * ...                                     , e: 5., f: 6.,  g: 7.,  h: 8.
     * ...                                     , i: 9., j: 10., k: 11., l: 12. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="121" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></testCount>
	<get_testCount get="inline" set="null" line="128" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_testCount>
	<topLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                      , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<get_topLeft get="inline" set="null" line="145" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_topLeft>
	<topRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                       , e: 0., f: 1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topRight>
	<get_topRight get="inline" set="null" line="161" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_topRight>
	<bottomLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                         , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                         , i: 0.,  j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<get_bottomLeft get="inline" set="null" line="177" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_bottomLeft>
	<bottomRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                          , e: 0., f: -1., g: 0., h: 0.
     * ...                                          , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<get_bottomRight get="inline" set="null" line="193" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_bottomRight>
	<north public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.north == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                    , e: 0., f: 1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</north>
	<get_north get="inline" set="null" line="209" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_north>
	<south public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.south == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                    , e: 0., f: -1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</south>
	<get_south get="inline" set="null" line="225" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_south>
	<west public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.west == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                   , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</west>
	<get_west get="inline" set="null" line="241" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_west>
	<east public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.east == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</east>
	<get_east get="inline" set="null" line="257" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_east>
	<front public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.front == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                  , e: 0., f: 0., g: 0., h: 0.
     * ...                                  , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</front>
	<get_front get="inline" set="null" line="273" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_front>
	<frontNorth public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontNorth == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                       , e: 0., f: 1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontNorth>
	<get_frontNorth get="inline" set="null" line="289" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontNorth>
	<frontTopLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                         , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                         , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontTopLeft>
	<get_frontTopLeft get="inline" set="null" line="305" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontTopLeft>
	<frontTopRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                          , e: 0., f: 1., g: 0., h: 0.
     * ...                                          , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontTopRight>
	<get_frontTopRight get="inline" set="null" line="321" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontTopRight>
	<frontBottomLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                            , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                            , i: 0.,  j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontBottomLeft>
	<get_frontBottomLeft get="inline" set="null" line="337" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontBottomLeft>
	<frontBottomRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                             , e: 0., f: -1., g: 0., h: 0.
     * ...                                             , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontBottomRight>
	<get_frontBottomRight get="inline" set="null" line="353" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontBottomRight>
	<frontSouth public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                       , e: 0., f: -1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontSouth>
	<get_frontSouth get="inline" set="null" line="369" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontSouth>
	<frontWest public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontWest == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                      , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontWest>
	<get_frontWest get="inline" set="null" line="385" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontWest>
	<frontEast public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontEast == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0., f: 0., g: 0., h: 0.
     * ...                                      , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontEast>
	<get_frontEast get="inline" set="null" line="401" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontEast>
	<back public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.back == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                   , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</back>
	<get_back get="inline" set="null" line="417" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_back>
	<backTopLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                        , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                        , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backTopLeft>
	<get_backTopLeft get="inline" set="null" line="433" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backTopLeft>
	<backTopRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopRight == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                         , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                         , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backTopRight>
	<get_backTopRight get="inline" set="null" line="449" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backTopRight>
	<backBottomLeft public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0.,  d: 0.
     * ...                                           , e: 0.,  f: -1., g: 0.,  h: 0.
     * ...                                           , i: 0.,  j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backBottomLeft>
	<get_backBottomLeft get="inline" set="null" line="465" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backBottomLeft>
	<backBottomRight public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0.,  d: 0.
     * ...                                            , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                            , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backBottomRight>
	<get_backBottomRight get="inline" set="null" line="481" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backBottomRight>
	<backNorth public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backNorth == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                      , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                      , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backNorth>
	<get_backNorth get="inline" set="null" line="497" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backNorth>
	<backSouth public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0.,  d: 0.
     * ...                                      , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                      , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backSouth>
	<get_backSouth get="inline" set="null" line="513" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backSouth>
	<backWest public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backWest == new Matrix4x3({ a: -1., b: 0., c: 0.,  d: 0.
     * ...                                     , e: 0.,  f: 0., g: 0.,  h: 0.
     * ...                                     , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backWest>
	<get_backWest get="inline" set="null" line="529" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backWest>
	<backEast public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x3"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backEast == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                     , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                     , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backEast>
	<get_backEast get="inline" set="null" line="545" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backEast>
	<radianX public="1" get="inline" set="null" line="554" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></radianX>
	<rotateX public="1" get="inline" set="null" line="561" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotateX>
	<rotationX public="1" get="inline" set="null" line="563" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotationX>
	<radianY public="1" get="inline" set="null" line="565" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></radianY>
	<rotateY public="1" get="inline" set="null" line="572" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotateY>
	<rotationY public="1" get="inline" set="null" line="574" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotationY>
	<radianZ public="1" get="inline" set="null" line="576" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></radianZ>
	<rotateZ public="1" get="inline" set="null" line="583" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotateZ>
	<rotationZ public="1" get="inline" set="null" line="585" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotationZ>
	<sxy public="1" get="inline" set="null" line="587" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sxy>
	<scaleXY public="1" get="inline" set="null" line="593" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleXY>
	<scalarXY public="1" get="inline" set="null" line="595" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarXY>
	<sxyz public="1" get="inline" set="null" line="597" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sxyz>
	<scaleXYZ public="1" get="inline" set="null" line="603" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleXYZ>
	<scalarXYZ public="1" get="inline" set="null" line="605" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarXYZ>
	<sx public="1" get="inline" set="null" line="607" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sx>
	<scaleX public="1" get="inline" set="null" line="613" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleX>
	<scalarX public="1" get="inline" set="null" line="615" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarX>
	<sy public="1" get="inline" set="null" line="617" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sy>
	<scaleY public="1" get="inline" set="null" line="623" static="1"><f a="this:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleY>
	<scalarY public="1" get="inline" set="null" line="625" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarY>
	<sz public="1" get="inline" set="null" line="627" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sz>
	<scaleZ public="1" get="inline" set="null" line="633" static="1"><f a="this:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleZ>
	<scalarZ public="1" get="inline" set="null" line="635" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarZ>
	<scale public="1" get="inline" set="null" line="637" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scale>
	<scalar public="1" get="inline" set="null" line="639" static="1"><f a="s">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalar>
	<txyz public="1" get="inline" set="null" line="641" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></txyz>
	<translateXYZ public="1" get="inline" set="null" line="647" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateXYZ>
	<translationXYZ public="1" get="inline" set="null" line="649" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationXYZ>
	<tx public="1" get="inline" set="null" line="651" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></tx>
	<translateX public="1" get="inline" set="null" line="657" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateX>
	<translationX public="1" get="inline" set="null" line="659" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationX>
	<ty public="1" get="inline" set="null" line="661" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></ty>
	<translateY public="1" get="inline" set="null" line="667" static="1"><f a="this:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateY>
	<translationY public="1" get="inline" set="null" line="669" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationY>
	<tz public="1" get="inline" set="null" line="671" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></tz>
	<translateZ public="1" get="inline" set="null" line="677" static="1"><f a="this:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateZ>
	<translationZ public="1" get="inline" set="null" line="679" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationZ>
	<txy public="1" get="inline" set="null" line="681" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></txy>
	<translateXY public="1" get="inline" set="null" line="687" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateXY>
	<translationXY public="1" get="inline" set="null" line="689" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationXY>
	<reflection public="1" get="inline" set="null" line="691" static="1"><f a="a:b:c">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflection>
	<reflectionX public="1" get="inline" set="null" line="697" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></reflectionX>
	<reflectionY public="1" get="inline" set="null" line="701" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></reflectionY>
	<reflectionZ public="1" get="inline" set="null" line="705" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></reflectionZ>
	<reflectX public="1" get="inline" set="null" line="709" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflectX>
	<reflectY public="1" get="inline" set="null" line="711" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflectY>
	<reflectZ public="1" get="inline" set="null" line="713" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflectZ>
	<reflectionNonOrigin public="1" get="inline" set="null" line="721" static="1">
		<f a="this:a:b:c:d">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<haxe_doc>* A reflection about a line or plane that does not go through the origin is not a linear transformation 
     * — it is an affine transformation — as a 4x4 affine transformation matrix, 
     * it can be expressed as follows (assuming the normal is a unit vector)</haxe_doc>
	</reflectionNonOrigin>
	<equal public="1" get="inline" set="null" line="743" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.
     * ...                       , e: 5., f: 6., g: 7., h: 8.
     * ...                       , i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.
     * ...                       , e: 5., f: 6., g: 7., h: 8.
     * ...                       , i: 9., j:10., k:11., l:12. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="769" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<negating public="1" get="inline" set="null" line="786" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.counting;
     * ... var b = -a;
     * ... b == new Matrix4x3({ a: -1., b: -2., c: -3., d: -4.
     * ...                    , e: -5., f: -6., g: -7., h: -8
     * ...                    , i: -9., j: -10., k: -11., l: -12. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="790" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></negate>
	<add public="1" get="inline" set="null" line="805" static="1">
		<f a="m0:m1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit;
     * ... a + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. } ); }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<sub public="1" get="inline" set="null" line="818" static="1">
		<f a="m0:m1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit;
     * ... a - a == Matrix4x3.zero; }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<scaleDownByVector public="1" get="inline" set="null" line="824" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleDownByVector>
	<scaleByVector public="1" get="inline" set="null" line="831" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleByVector>
	<multiply public="1" get="inline" set="null" line="837" static="1">
		<f a="r:s">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<cofactor public="1" get="inline" set="null" line="851" static="1"><f a="this:a:b:c:d:e:f:g:h:i">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cofactor>
	<det public="1" get="inline" set="null" line="855" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
</f></det>
	<inverse public="1" get="inline" set="null" line="872" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></inverse>
	<orientation public="1" get="inline" set="null" line="906" static="1">
		<f a="pos:dir:up">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
	</orientation>
	<applyRotation public="1" get="inline" set="null" line="916" static="1">
		<f a="this:p">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
	</applyRotation>
	<applyInverseRotation public="1" get="inline" set="null" line="926" static="1">
		<f a="this:p">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
	</applyInverseRotation>
	<orthonormalizeRotation public="1" get="inline" set="null" line="936" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<c path="justGraphix.geom.structs.Mat4x3"/>
		</f>
		<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
	</orthonormalizeRotation>
	<makeViewFromOrientation public="1" get="inline" set="null" line="949" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
	</makeViewFromOrientation>
	<invertNormalizedRotation public="1" get="inline" set="null" line="959" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
	</invertNormalizedRotation>
	<invertNormalized public="1" get="inline" set="null" line="965" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></invertNormalized>
	<toAffineMatrix public="1" get="inline" set="null" line="973" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<t path="justGraphix.geom.structs.TAffineMatrix"/>
		</f>
		<meta><m n=":to"/></meta>
	</toAffineMatrix>
	<fromNumbered public="1" get="inline" set="null" line="976" static="1">
		<f a="m">
			<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromNumbered>
	<toNumbered public="1" get="inline" set="null" line="979" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
		</f>
		<meta><m n=":to"/></meta>
	</toNumbered>
	<fromArr public="1" get="inline" set="null" line="982" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="985" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<from2x2 public="1" get="inline" set="null" line="988" static="1">
		<f a="m2">
			<x path="justGraphix.geom.Matrix2x2"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2x2>
	<to2x2 public="1" get="inline" set="null" line="991" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix2x2"/>
		</f>
		<meta><m n=":to"/></meta>
	</to2x2>
	<from3x3 public="1" get="inline" set="null" line="994" static="1">
		<f a="m3">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from3x3>
	<to3x3 public="1" get="inline" set="null" line="997" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</to3x3>
	<fromVec public="1" get="inline" set="null" line="1000" static="1">
		<f a="v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="1003" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="1007" static="1">
		<f a="this:x:y:v">
			<c path="justGraphix.geom.structs.Mat4x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<haxe_doc>*</haxe_doc>
	</setXY>
	<getXY public="1" get="inline" set="null" line="1014" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
	<updateWebGL public="1" get="inline" set="null" line="1022" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL>
	<updateWebGL_ public="1" get="inline" set="null" line="1029" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL_>
	<pretty public="1" get="inline" set="null" line="1037" static="1"><f a="this:prec">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Int"/>
	<c path="String"/>
</f></pretty>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix4x3.Matrix4x3_Impl_" params="" file="src/justGraphix/geom/Matrix4x3.hx" private="1" module="justGraphix.geom.Matrix4x3" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="4" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="3" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</columns>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix4x3.counting == Matrix4x3.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix4x3.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></self>
		<get_self get="inline" set="null" line="50" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_self>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.zero == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="65" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></nought>
		<get_nought get="inline" set="null" line="72" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.unit == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="86" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></one>
		<get_one get="inline" set="null" line="93" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.minus1 == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: -1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="107" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.counting == new Matrix4x3({ a: 1., b: 2.,  c: 3.,  d: 4.
     * ...                                     , e: 5., f: 6.,  g: 7.,  h: 8.
     * ...                                     , i: 9., j: 10., k: 11., l: 12. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="121" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x3"/></testCount>
		<get_testCount get="inline" set="null" line="128" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></get_testCount>
		<topLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                      , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<get_topLeft get="inline" set="null" line="145" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_topLeft>
		<topRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                       , e: 0., f: 1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topRight>
		<get_topRight get="inline" set="null" line="161" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_topRight>
		<bottomLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                         , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                         , i: 0.,  j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<get_bottomLeft get="inline" set="null" line="177" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_bottomLeft>
		<bottomRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                          , e: 0., f: -1., g: 0., h: 0.
     * ...                                          , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<get_bottomRight get="inline" set="null" line="193" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_bottomRight>
		<north public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.north == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                    , e: 0., f: 1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</north>
		<get_north get="inline" set="null" line="209" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_north>
		<south public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.south == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                    , e: 0., f: -1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</south>
		<get_south get="inline" set="null" line="225" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_south>
		<west public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.west == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                   , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</west>
		<get_west get="inline" set="null" line="241" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_west>
		<east public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.east == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</east>
		<get_east get="inline" set="null" line="257" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_east>
		<front public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.front == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                  , e: 0., f: 0., g: 0., h: 0.
     * ...                                  , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</front>
		<get_front get="inline" set="null" line="273" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_front>
		<frontNorth public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontNorth == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                       , e: 0., f: 1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontNorth>
		<get_frontNorth get="inline" set="null" line="289" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontNorth>
		<frontTopLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                         , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                         , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontTopLeft>
		<get_frontTopLeft get="inline" set="null" line="305" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontTopLeft>
		<frontTopRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                          , e: 0., f: 1., g: 0., h: 0.
     * ...                                          , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontTopRight>
		<get_frontTopRight get="inline" set="null" line="321" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontTopRight>
		<frontBottomLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                            , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                            , i: 0.,  j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontBottomLeft>
		<get_frontBottomLeft get="inline" set="null" line="337" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontBottomLeft>
		<frontBottomRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                             , e: 0., f: -1., g: 0., h: 0.
     * ...                                             , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontBottomRight>
		<get_frontBottomRight get="inline" set="null" line="353" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontBottomRight>
		<frontSouth public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                       , e: 0., f: -1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontSouth>
		<get_frontSouth get="inline" set="null" line="369" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontSouth>
		<frontWest public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontWest == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                      , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontWest>
		<get_frontWest get="inline" set="null" line="385" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontWest>
		<frontEast public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontEast == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0., f: 0., g: 0., h: 0.
     * ...                                      , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontEast>
		<get_frontEast get="inline" set="null" line="401" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_frontEast>
		<back public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.back == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                   , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</back>
		<get_back get="inline" set="null" line="417" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_back>
		<backTopLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                        , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                        , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backTopLeft>
		<get_backTopLeft get="inline" set="null" line="433" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backTopLeft>
		<backTopRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopRight == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                         , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                         , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backTopRight>
		<get_backTopRight get="inline" set="null" line="449" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backTopRight>
		<backBottomLeft public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0.,  d: 0.
     * ...                                           , e: 0.,  f: -1., g: 0.,  h: 0.
     * ...                                           , i: 0.,  j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backBottomLeft>
		<get_backBottomLeft get="inline" set="null" line="465" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backBottomLeft>
		<backBottomRight public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0.,  d: 0.
     * ...                                            , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                            , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backBottomRight>
		<get_backBottomRight get="inline" set="null" line="481" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backBottomRight>
		<backNorth public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backNorth == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                      , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                      , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backNorth>
		<get_backNorth get="inline" set="null" line="497" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backNorth>
		<backSouth public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0.,  d: 0.
     * ...                                      , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                      , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backSouth>
		<get_backSouth get="inline" set="null" line="513" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backSouth>
		<backWest public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backWest == new Matrix4x3({ a: -1., b: 0., c: 0.,  d: 0.
     * ...                                     , e: 0.,  f: 0., g: 0.,  h: 0.
     * ...                                     , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backWest>
		<get_backWest get="inline" set="null" line="529" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backWest>
		<backEast public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x3"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backEast == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                     , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                     , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backEast>
		<get_backEast get="inline" set="null" line="545" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></get_backEast>
		<radianX public="1" get="inline" set="null" line="554" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></radianX>
		<rotateX public="1" get="inline" set="null" line="561" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotateX>
		<rotationX public="1" get="inline" set="null" line="563" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotationX>
		<radianY public="1" get="inline" set="null" line="565" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></radianY>
		<rotateY public="1" get="inline" set="null" line="572" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotateY>
		<rotationY public="1" get="inline" set="null" line="574" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotationY>
		<radianZ public="1" get="inline" set="null" line="576" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></radianZ>
		<rotateZ public="1" get="inline" set="null" line="583" static="1"><f a="this:theta">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotateZ>
		<rotationZ public="1" get="inline" set="null" line="585" static="1"><f a="theta">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></rotationZ>
		<sxy public="1" get="inline" set="null" line="587" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sxy>
		<scaleXY public="1" get="inline" set="null" line="593" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleXY>
		<scalarXY public="1" get="inline" set="null" line="595" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarXY>
		<sxyz public="1" get="inline" set="null" line="597" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sxyz>
		<scaleXYZ public="1" get="inline" set="null" line="603" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleXYZ>
		<scalarXYZ public="1" get="inline" set="null" line="605" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarXYZ>
		<sx public="1" get="inline" set="null" line="607" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sx>
		<scaleX public="1" get="inline" set="null" line="613" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleX>
		<scalarX public="1" get="inline" set="null" line="615" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarX>
		<sy public="1" get="inline" set="null" line="617" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sy>
		<scaleY public="1" get="inline" set="null" line="623" static="1"><f a="this:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleY>
		<scalarY public="1" get="inline" set="null" line="625" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarY>
		<sz public="1" get="inline" set="null" line="627" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></sz>
		<scaleZ public="1" get="inline" set="null" line="633" static="1"><f a="this:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleZ>
		<scalarZ public="1" get="inline" set="null" line="635" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalarZ>
		<scale public="1" get="inline" set="null" line="637" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scale>
		<scalar public="1" get="inline" set="null" line="639" static="1"><f a="s">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scalar>
		<txyz public="1" get="inline" set="null" line="641" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></txyz>
		<translateXYZ public="1" get="inline" set="null" line="647" static="1"><f a="this:x:y:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateXYZ>
		<translationXYZ public="1" get="inline" set="null" line="649" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationXYZ>
		<tx public="1" get="inline" set="null" line="651" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></tx>
		<translateX public="1" get="inline" set="null" line="657" static="1"><f a="this:x">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateX>
		<translationX public="1" get="inline" set="null" line="659" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationX>
		<ty public="1" get="inline" set="null" line="661" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></ty>
		<translateY public="1" get="inline" set="null" line="667" static="1"><f a="this:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateY>
		<translationY public="1" get="inline" set="null" line="669" static="1"><f a="y">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationY>
		<tz public="1" get="inline" set="null" line="671" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></tz>
		<translateZ public="1" get="inline" set="null" line="677" static="1"><f a="this:z">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateZ>
		<translationZ public="1" get="inline" set="null" line="679" static="1"><f a="z">
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationZ>
		<txy public="1" get="inline" set="null" line="681" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></txy>
		<translateXY public="1" get="inline" set="null" line="687" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translateXY>
		<translationXY public="1" get="inline" set="null" line="689" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></translationXY>
		<reflection public="1" get="inline" set="null" line="691" static="1"><f a="a:b:c">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflection>
		<reflectionX public="1" get="inline" set="null" line="697" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></reflectionX>
		<reflectionY public="1" get="inline" set="null" line="701" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></reflectionY>
		<reflectionZ public="1" get="inline" set="null" line="705" static="1"><f a=""><x path="justGraphix.geom.Matrix4x3"/></f></reflectionZ>
		<reflectX public="1" get="inline" set="null" line="709" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflectX>
		<reflectY public="1" get="inline" set="null" line="711" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflectY>
		<reflectZ public="1" get="inline" set="null" line="713" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></reflectZ>
		<reflectionNonOrigin public="1" get="inline" set="null" line="721" static="1">
			<f a="this:a:b:c:d">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<haxe_doc>* A reflection about a line or plane that does not go through the origin is not a linear transformation 
     * — it is an affine transformation — as a 4x4 affine transformation matrix, 
     * it can be expressed as follows (assuming the normal is a unit vector)</haxe_doc>
		</reflectionNonOrigin>
		<equal public="1" get="inline" set="null" line="743" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.
     * ...                       , e: 5., f: 6., g: 7., h: 8.
     * ...                       , i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.
     * ...                       , e: 5., f: 6., g: 7., h: 8.
     * ...                       , i: 9., j:10., k:11., l:12. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="769" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<negating public="1" get="inline" set="null" line="786" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.counting;
     * ... var b = -a;
     * ... b == new Matrix4x3({ a: -1., b: -2., c: -3., d: -4.
     * ...                    , e: -5., f: -6., g: -7., h: -8
     * ...                    , i: -9., j: -10., k: -11., l: -12. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="790" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></negate>
		<add public="1" get="inline" set="null" line="805" static="1">
			<f a="m0:m1">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit;
     * ... a + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. } ); }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="818" static="1">
			<f a="m0:m1">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit;
     * ... a - a == Matrix4x3.zero; }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<scaleDownByVector public="1" get="inline" set="null" line="824" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleDownByVector>
		<scaleByVector public="1" get="inline" set="null" line="831" static="1"><f a="this:p">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></scaleByVector>
		<multiply public="1" get="inline" set="null" line="837" static="1">
			<f a="r:s">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<cofactor public="1" get="inline" set="null" line="851" static="1"><f a="this:a:b:c:d:e:f:g:h:i">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cofactor>
		<det public="1" get="inline" set="null" line="855" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Float"/>
</f></det>
		<inverse public="1" get="inline" set="null" line="872" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></inverse>
		<orientation public="1" get="inline" set="null" line="906" static="1">
			<f a="pos:dir:up">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
		</orientation>
		<applyRotation public="1" get="inline" set="null" line="916" static="1">
			<f a="this:p">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
		</applyRotation>
		<applyInverseRotation public="1" get="inline" set="null" line="926" static="1">
			<f a="this:p">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
		</applyInverseRotation>
		<orthonormalizeRotation public="1" get="inline" set="null" line="936" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<c path="justGraphix.geom.structs.Mat4x3"/>
			</f>
			<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
		</orthonormalizeRotation>
		<makeViewFromOrientation public="1" get="inline" set="null" line="949" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
		</makeViewFromOrientation>
		<invertNormalizedRotation public="1" get="inline" set="null" line="959" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<haxe_doc>* Untested - check that this matrix is not transposed</haxe_doc>
		</invertNormalizedRotation>
		<invertNormalized public="1" get="inline" set="null" line="965" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></invertNormalized>
		<toAffineMatrix public="1" get="inline" set="null" line="973" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<t path="justGraphix.geom.structs.TAffineMatrix"/>
			</f>
			<meta><m n=":to"/></meta>
		</toAffineMatrix>
		<fromNumbered public="1" get="inline" set="null" line="976" static="1">
			<f a="m">
				<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromNumbered>
		<toNumbered public="1" get="inline" set="null" line="979" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
			</f>
			<meta><m n=":to"/></meta>
		</toNumbered>
		<fromArr public="1" get="inline" set="null" line="982" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="985" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<from2x2 public="1" get="inline" set="null" line="988" static="1">
			<f a="m2">
				<x path="justGraphix.geom.Matrix2x2"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2x2>
		<to2x2 public="1" get="inline" set="null" line="991" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix2x2"/>
			</f>
			<meta><m n=":to"/></meta>
		</to2x2>
		<from3x3 public="1" get="inline" set="null" line="994" static="1">
			<f a="m3">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from3x3>
		<to3x3 public="1" get="inline" set="null" line="997" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</to3x3>
		<fromVec public="1" get="inline" set="null" line="1000" static="1">
			<f a="v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="1003" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="1007" static="1">
			<f a="this:x:y:v">
				<c path="justGraphix.geom.structs.Mat4x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>*</haxe_doc>
		</setXY>
		<getXY public="1" get="inline" set="null" line="1014" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
		<updateWebGL public="1" get="inline" set="null" line="1022" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL>
		<updateWebGL_ public="1" get="inline" set="null" line="1029" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL_>
		<pretty public="1" get="inline" set="null" line="1037" static="1"><f a="this:prec">
	<c path="justGraphix.geom.structs.Mat4x3"/>
	<x path="Int"/>
	<c path="String"/>
</f></pretty>
	</class>
	<abstract path="justGraphix.geom.Matrix4x4" params="" file="src/justGraphix/geom/Matrix4x4.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat4x4"/></icast>
			<icast field="matrix4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat4x4"/></this>
		<to><icast><c path="justGraphix.geom.structs.Mat4x4"/></icast></to>
		<haxe_doc>![4x4](../../bootstrap/img/matrix4x4.png)</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix4x4.Matrix4x4_Impl_" params="" file="src/justGraphix/geom/Matrix4x4.hx" private="1" module="justGraphix.geom.Matrix4x4" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="4" line="14" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="4" line="16" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</columns>
	<_new public="1" set="method" line="17" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix4x4.counting == Matrix4x4.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="46" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat4x4"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix4x4.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></self>
	<get_self get="inline" set="null" line="53" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_self>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.zero == new Matrix4x4({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="66" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></nought>
	<get_nought get="inline" set="null" line="74" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x4.unit == new Matrix4x4({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="89" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></one>
	<get_one get="inline" set="null" line="97" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.minus1 == new Matrix4x4({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: -1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. 
     * ...                                   , m: 0., n: 0., o: 0., p: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="112" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x4"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.counting == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.
     * ...                                     , e: 5., f: 6., g: 7., h: 8.
     * ...                                     , i: 9., j: 10., k: 11., l: 12.
     * ...                                     , m: 13., n: 14., o: 15., p: 16. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="127" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></testCount>
	<get_testCount get="inline" set="null" line="135" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_testCount>
	<_1_16 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix4x4"/>
		<haxe_doc><![CDATA[* Used for testing
     * <pre><code>
     * >>> ({ 
     * ... Matrix4x4._1_16 == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.
     * ...                                    , e: 5., f: 6., g: 7., h: 8.
     * ...                                    , i: 9., j: 10., k: 11., l: 12.
     * ...                                    , m: 13., n: 14., o: 15., p: 16. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</_1_16>
	<get__1_16 get="inline" set="null" line="151" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get__1_16>
	<equal public="1" get="inline" set="null" line="162" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. , m:13.,n:14.,o:15.,p:16.});
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:15. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<negating public="1" get="inline" set="null" line="211" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x4.counting;
     * ... var b = -a;
     * ... b == new Matrix4x4({ a: -1., b: -2., c: -3., d: -4.
     * ...                    , e: -5., f: -6., g: -7., h: -8
     * ...                    , i: -9., j: -10., k: -11., l: -12.
     * ...                    , m: -13., n: -14., o:-15., p: -16. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="215" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></negate>
	<add public="1" get="inline" set="null" line="232" static="1">
		<f a="m0:m1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x4.unit;
     * ... a + a == new Matrix4x4( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. 
     * ...                         , m: 0., n: 0., o: 0., p: 2. } ); }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<sub public="1" get="inline" set="null" line="246" static="1">
		<f a="m0:m1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x4.unit;
     * ... a - a == Matrix4x4.zero; }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<multiply public="1" get="inline" set="null" line="254" static="1">
		<f a="r:s">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<scaleDivide public="1" get="inline" set="null" line="274" static="1">
		<f a="m:p">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>a b c d   a b c d
           e f g h   e f g h
           i j k l   i j k l
           m n o p   m n o p</haxe_doc>
	</scaleDivide>
	<scaleMultiply1 public="1" get="inline" set="null" line="282" static="1">
		<f a="p:m">
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply1>
	<scaleMultiply2 public="1" get="inline" set="null" line="289" static="1">
		<f a="m:p">
			<x path="justGraphix.geom.Matrix4x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply2>
	<delta public="1" get="inline" set="null" line="296" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></delta>
	<matrix4x3 public="1" get="inline" set="null" line="305" static="1">
		<f a="m">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Matrix4x4"/>
		</f>
		<meta><m n=":from"/></meta>
	</matrix4x3>
	<transpose public="1" get="inline" set="null" line="313" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></transpose>
	<updateWebGL public="1" get="inline" set="null" line="321" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL>
	<updateWebGL_ public="1" get="inline" set="null" line="328" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL_>
	<setXY public="1" get="inline" set="null" line="333" static="1"><f a="this:x:y:v">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
	<getXY public="1" get="inline" set="null" line="341" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
	<pretty public="1" get="inline" set="null" line="352" static="1"><f a="this:prec">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Int"/>
	<c path="String"/>
</f></pretty>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix4x4.Matrix4x4_Impl_" params="" file="src/justGraphix/geom/Matrix4x4.hx" private="1" module="justGraphix.geom.Matrix4x4" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="4" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="4" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</columns>
		<_new public="1" set="method" line="17" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix4x4.counting == Matrix4x4.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="46" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat4x4"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix4x4.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... }
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></self>
		<get_self get="inline" set="null" line="53" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_self>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.zero == new Matrix4x4({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="66" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></nought>
		<get_nought get="inline" set="null" line="74" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x4.unit == new Matrix4x4({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="89" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></one>
		<get_one get="inline" set="null" line="97" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.minus1 == new Matrix4x4({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: -1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. 
     * ...                                   , m: 0., n: 0., o: 0., p: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="112" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.counting == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.
     * ...                                     , e: 5., f: 6., g: 7., h: 8.
     * ...                                     , i: 9., j: 10., k: 11., l: 12.
     * ...                                     , m: 13., n: 14., o: 15., p: 16. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="127" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix4x4"/></testCount>
		<get_testCount get="inline" set="null" line="135" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></get_testCount>
		<_1_16 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix4x4"/>
			<haxe_doc><![CDATA[* Used for testing
     * <pre><code>
     * >>> ({ 
     * ... Matrix4x4._1_16 == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.
     * ...                                    , e: 5., f: 6., g: 7., h: 8.
     * ...                                    , i: 9., j: 10., k: 11., l: 12.
     * ...                                    , m: 13., n: 14., o: 15., p: 16. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</_1_16>
		<get__1_16 get="inline" set="null" line="151" static="1"><f a=""><x path="justGraphix.geom.Matrix4x4"/></f></get__1_16>
		<equal public="1" get="inline" set="null" line="162" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. , m:13.,n:14.,o:15.,p:16.});
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:15. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<negating public="1" get="inline" set="null" line="211" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x4.counting;
     * ... var b = -a;
     * ... b == new Matrix4x4({ a: -1., b: -2., c: -3., d: -4.
     * ...                    , e: -5., f: -6., g: -7., h: -8
     * ...                    , i: -9., j: -10., k: -11., l: -12.
     * ...                    , m: -13., n: -14., o:-15., p: -16. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="215" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></negate>
		<add public="1" get="inline" set="null" line="232" static="1">
			<f a="m0:m1">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x4.unit;
     * ... a + a == new Matrix4x4( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. 
     * ...                         , m: 0., n: 0., o: 0., p: 2. } ); }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="246" static="1">
			<f a="m0:m1">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x4.unit;
     * ... a - a == Matrix4x4.zero; }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<multiply public="1" get="inline" set="null" line="254" static="1">
			<f a="r:s">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<scaleDivide public="1" get="inline" set="null" line="274" static="1">
			<f a="m:p">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>a b c d   a b c d
           e f g h   e f g h
           i j k l   i j k l
           m n o p   m n o p</haxe_doc>
		</scaleDivide>
		<scaleMultiply1 public="1" get="inline" set="null" line="282" static="1">
			<f a="p:m">
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply1>
		<scaleMultiply2 public="1" get="inline" set="null" line="289" static="1">
			<f a="m:p">
				<x path="justGraphix.geom.Matrix4x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply2>
		<delta public="1" get="inline" set="null" line="296" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></delta>
		<matrix4x3 public="1" get="inline" set="null" line="305" static="1">
			<f a="m">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":from"/></meta>
		</matrix4x3>
		<transpose public="1" get="inline" set="null" line="313" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></transpose>
		<updateWebGL public="1" get="inline" set="null" line="321" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL>
		<updateWebGL_ public="1" get="inline" set="null" line="328" static="1"><f a="this:arr">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="haxe.io.Float32Array"/>
	<x path="haxe.io.Float32Array"/>
</f></updateWebGL_>
		<setXY public="1" get="inline" set="null" line="333" static="1"><f a="this:x:y:v">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
		<getXY public="1" get="inline" set="null" line="341" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
		<pretty public="1" get="inline" set="null" line="352" static="1"><f a="this:prec">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<x path="Int"/>
	<c path="String"/>
</f></pretty>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.geom.Matrix5x5" params="" file="src/justGraphix/geom/Matrix5x5.hx">
		<from><icast><c path="justGraphix.geom.structs.Mat5x5"/></icast></from>
		<this><c path="justGraphix.geom.structs.Mat5x5"/></this>
		<to><icast><c path="justGraphix.geom.structs.Mat5x5"/></icast></to>
		<haxe_doc>![4x4](../../bootstrap/img/matrix5x5.png)</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.geom._Matrix5x5.Matrix5x5_Impl_" params="" file="src/justGraphix/geom/Matrix5x5.hx" private="1" module="justGraphix.geom.Matrix5x5" final="1">
	<rows final="1" public="1" get="inline" set="null" expr="5" line="12" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>5</e></m></meta>
	</rows>
	<columns final="1" public="1" get="inline" set="null" expr="5" line="14" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>5</e></m></meta>
	</columns>
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix5x5.counting == Matrix5x5.counting.clone() 
     * </code></pre>]]></haxe_doc>
	</clone>
	<iterator public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat5x5"/>
			<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix5x5.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... } 
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,17.,18.,19.,20.,21.,22.,23.,24.,25.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
	</iterator>
	<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></self>
	<get_self get="inline" set="null" line="53" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_self>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix5x5"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix5x5.zero == new Matrix5x5({ a: 0., b: 0., c: 0., d: 0., e: 0.
     * ...                                 , f: 0., g: 0., h: 0., i: 0., j: 0.
     * ...                                 , k: 0., l: 0., m: 0., n: 0., o: 0.
     * ...                                 , p: 0., q: 0., r: 0., s: 0., t: 0.
     * ...                                 , u: 0., v: 0., w: 0., x: 0., y: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="70" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_zero>
	<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></nought>
	<get_nought get="inline" set="null" line="79" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_nought>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix5x5"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix5x5.unit == new Matrix5x5({ a: 1., b: 0., c: 0., d: 0., e: 0.
     * ...                                 , f: 0., g: 1., h: 0., i: 0., j: 0.
     * ...                                 , k: 0., l: 0., m: 1., n: 0., o: 0.
     * ...                                 , p: 0., q: 0., r: 0., s: 1., t: 0.
     * ...                                 , u: 0., v: 0., w: 0., x: 0., y: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="95" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_unit>
	<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></one>
	<get_one get="inline" set="null" line="104" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix5x5"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix5x5.minus1 == new Matrix5x5({ a: -1., b: 0., c: 0., d: 0., e: 0.
     * ...                                   , f: 0., g: -1., h: 0., i: 0., j: 0.
     * ...                                   , k: 0., l: 0., m: -1., n: 0., o: 0.
     * ...                                   , p: 0., q: 0., r: 0., s: -1., t: 0.
     * ...                                   , u: 0., v: 0., w: 0., x: 0., y: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="120" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_minus1>
	<counting public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Matrix5x5"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix5x5.counting == new Matrix5x5({ a: 1.,  b: 2.,  c: 3.,  d: 4.,  e: 5.
     * ...                                     , f: 6.,  g: 7.,  h: 8.,  i: 9.,  j: 10.
     * ...                                     , k: 11., l: 12., m: 13., n: 14., o: 15.
     * ...                                     , p: 16., q: 17., r: 18., s: 19., t: 20.
     * ...                                     , u: 21., v: 22., w: 23., x: 24., y: 25. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</counting>
	<get_counting get="inline" set="null" line="136" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_counting>
	<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></testCount>
	<get_testCount get="inline" set="null" line="145" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_testCount>
	<equal public="1" get="inline" set="null" line="158" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.counting;
     * ... var b = Matrix5x5.counting;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.counting;
     * ... var b = a + a;
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<negating public="1" get="inline" set="null" line="217" static="1">
		<f a="a">
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.counting;
     * ... var b = -a;
     * ... b == new Matrix5x5({ a: -1., b: -2., c: -3., d: -4., e: -5.
     * ...                    , f: -6., g: -7., h: -8, i: -9., j: -10.
     * ...                    , k: -11., l: -12., m: -13., n: -14., o:-15.
     * ...                    , p: -16., q: -17., r: -18., s: -19., t: -20.
     * ...                    , u: -21., v: -22., w: -23., x: -24., y: -25. } ); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negating>
	<negate public="1" get="inline" set="null" line="221" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></negate>
	<multiply public="1" get="inline" set="null" line="230" static="1">
		<f a="r:s">
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<add public="1" get="inline" set="null" line="377" static="1">
		<f a="m0:m1">
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.unit;
     * ... a + a == new Matrix5x5( { a: 2., b: 0., c: 0., d: 0., e: 0.
     * ...                         , f: 0., g: 2., h: 0., i: 0., j: 0.
     * ...                         , k: 0., l: 0., m: 2., n: 0., o: 0.
     * ...                         , p: 0., q: 0., r: 0., s: 2., t: 0.
     * ...                         , u: 0., v: 0., w: 0., x: 0., y: 2. } ); }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<sub public="1" get="inline" set="null" line="393" static="1">
		<f a="m0:m1">
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
			<x path="justGraphix.geom.Matrix5x5"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.unit;
     * ... a - a == Matrix5x5.zero; }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<transpose public="1" get="inline" set="null" line="402" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></transpose>
	<setXY public="1" get="inline" set="null" line="410" static="1"><f a="this:x:y:v">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
	<getXY public="1" get="inline" set="null" line="419" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
	<pretty public="1" get="inline" set="null" line="429" static="1"><f a="this:prec">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="Int"/>
	<c path="String"/>
</f></pretty>
	<max5 public="1" get="inline" set="null" line="528" static="1"><f a="f0:f1:f2:f3:f4">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></max5>
	<floatToStringPrecision public="1" set="method" line="534" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Matrix5x5.Matrix5x5_Impl_" params="" file="src/justGraphix/geom/Matrix5x5.hx" private="1" module="justGraphix.geom.Matrix5x5" final="1">
		<rows final="1" public="1" get="inline" set="null" expr="5" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</rows>
		<columns final="1" public="1" get="inline" set="null" expr="5" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</columns>
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix5x5.counting == Matrix5x5.counting.clone() 
     * </code></pre>]]></haxe_doc>
		</clone>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat5x5"/>
				<c path="haxe.iterators.ArrayIterator"><x path="Float"/></c>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = Matrix5x5.counting;
     * ... var arr = new Array<Float>();
     * ... for( i in m ){
     * ...   arr.push(i); 
     * ... } 
     * ... [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,17.,18.,19.,20.,21.,22.,23.,24.,25.].toString() == arr.toString(); }) == true
     * </code></pre>]]></haxe_doc>
		</iterator>
		<self public="1" get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></self>
		<get_self get="inline" set="null" line="53" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_self>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix5x5"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix5x5.zero == new Matrix5x5({ a: 0., b: 0., c: 0., d: 0., e: 0.
     * ...                                 , f: 0., g: 0., h: 0., i: 0., j: 0.
     * ...                                 , k: 0., l: 0., m: 0., n: 0., o: 0.
     * ...                                 , p: 0., q: 0., r: 0., s: 0., t: 0.
     * ...                                 , u: 0., v: 0., w: 0., x: 0., y: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="70" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_zero>
		<nought get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></nought>
		<get_nought get="inline" set="null" line="79" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_nought>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix5x5"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix5x5.unit == new Matrix5x5({ a: 1., b: 0., c: 0., d: 0., e: 0.
     * ...                                 , f: 0., g: 1., h: 0., i: 0., j: 0.
     * ...                                 , k: 0., l: 0., m: 1., n: 0., o: 0.
     * ...                                 , p: 0., q: 0., r: 0., s: 1., t: 0.
     * ...                                 , u: 0., v: 0., w: 0., x: 0., y: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="95" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_unit>
		<one get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></one>
		<get_one get="inline" set="null" line="104" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix5x5"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix5x5.minus1 == new Matrix5x5({ a: -1., b: 0., c: 0., d: 0., e: 0.
     * ...                                   , f: 0., g: -1., h: 0., i: 0., j: 0.
     * ...                                   , k: 0., l: 0., m: -1., n: 0., o: 0.
     * ...                                   , p: 0., q: 0., r: 0., s: -1., t: 0.
     * ...                                   , u: 0., v: 0., w: 0., x: 0., y: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="120" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_minus1>
		<counting public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Matrix5x5"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix5x5.counting == new Matrix5x5({ a: 1.,  b: 2.,  c: 3.,  d: 4.,  e: 5.
     * ...                                     , f: 6.,  g: 7.,  h: 8.,  i: 9.,  j: 10.
     * ...                                     , k: 11., l: 12., m: 13., n: 14., o: 15.
     * ...                                     , p: 16., q: 17., r: 18., s: 19., t: 20.
     * ...                                     , u: 21., v: 22., w: 23., x: 24., y: 25. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</counting>
		<get_counting get="inline" set="null" line="136" static="1"><f a=""><x path="justGraphix.geom.Matrix5x5"/></f></get_counting>
		<testCount get="accessor" set="null" static="1"><x path="justGraphix.geom.Matrix5x5"/></testCount>
		<get_testCount get="inline" set="null" line="145" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></get_testCount>
		<equal public="1" get="inline" set="null" line="158" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.counting;
     * ... var b = Matrix5x5.counting;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.counting;
     * ... var b = a + a;
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<negating public="1" get="inline" set="null" line="217" static="1">
			<f a="a">
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.counting;
     * ... var b = -a;
     * ... b == new Matrix5x5({ a: -1., b: -2., c: -3., d: -4., e: -5.
     * ...                    , f: -6., g: -7., h: -8, i: -9., j: -10.
     * ...                    , k: -11., l: -12., m: -13., n: -14., o:-15.
     * ...                    , p: -16., q: -17., r: -18., s: -19., t: -20.
     * ...                    , u: -21., v: -22., w: -23., x: -24., y: -25. } ); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negating>
		<negate public="1" get="inline" set="null" line="221" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></negate>
		<multiply public="1" get="inline" set="null" line="230" static="1">
			<f a="r:s">
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<add public="1" get="inline" set="null" line="377" static="1">
			<f a="m0:m1">
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.unit;
     * ... a + a == new Matrix5x5( { a: 2., b: 0., c: 0., d: 0., e: 0.
     * ...                         , f: 0., g: 2., h: 0., i: 0., j: 0.
     * ...                         , k: 0., l: 0., m: 2., n: 0., o: 0.
     * ...                         , p: 0., q: 0., r: 0., s: 2., t: 0.
     * ...                         , u: 0., v: 0., w: 0., x: 0., y: 2. } ); }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="393" static="1">
			<f a="m0:m1">
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
				<x path="justGraphix.geom.Matrix5x5"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix5x5.unit;
     * ... a - a == Matrix5x5.zero; }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<transpose public="1" get="inline" set="null" line="402" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="justGraphix.geom.Matrix5x5"/>
</f></transpose>
		<setXY public="1" get="inline" set="null" line="410" static="1"><f a="this:x:y:v">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
		<getXY public="1" get="inline" set="null" line="419" static="1"><f a="this:x:y">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
		<pretty public="1" get="inline" set="null" line="429" static="1"><f a="this:prec">
	<c path="justGraphix.geom.structs.Mat5x5"/>
	<x path="Int"/>
	<c path="String"/>
</f></pretty>
		<max5 public="1" get="inline" set="null" line="528" static="1"><f a="f0:f1:f2:f3:f4">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></max5>
		<floatToStringPrecision public="1" set="method" line="534" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
	</class>
	<typedef path="justGraphix.geom.MatrixType" params="T" file="src/justGraphix/geom/MatrixType.hx"><a>
	<toVector set="method"><f a=""><x path="haxe.ds.Vector"><x path="Float"/></x></f></toVector>
	<toArray set="method"><f a=""><c path="Array"><x path="Float"/></c></f></toArray>
	<testCount get="accessor" set="null"><c path="justGraphix.geom.MatrixType.T"/></testCount>
	<subtract set="method"><f a="b">
	<c path="justGraphix.geom.MatrixType.T"/>
	<c path="justGraphix.geom.MatrixType.T"/>
</f></subtract>
	<staticFromVec set="method"><f a="vec">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<c path="justGraphix.geom.MatrixType.T"/>
</f></staticFromVec>
	<staticFromArray set="method"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<c path="justGraphix.geom.MatrixType.T"/>
</f></staticFromArray>
	<setXY set="method"><f a="x:y:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></setXY>
	<self get="accessor" set="null"><c path="justGraphix.geom.MatrixType.T"/></self>
	<p>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</p>
	<one get="accessor" set="null"><c path="justGraphix.geom.MatrixType.T"/></one>
	<o>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</o>
	<nought get="accessor" set="null"><c path="justGraphix.geom.MatrixType.T"/></nought>
	<negate set="method"><f a=""><c path="justGraphix.geom.MatrixType.T"/></f></negate>
	<n>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</n>
	<multiplyScale set="method"><f a="b">
	<c path="justGraphix.geom.MatrixType.T"/>
	<c path="justGraphix.geom.MatrixType.T"/>
</f></multiplyScale>
	<multiply set="method"><f a="b">
	<c path="justGraphix.geom.MatrixType.T"/>
	<c path="justGraphix.geom.MatrixType.T"/>
</f></multiply>
	<m>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</m>
	<l>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</l>
	<k>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</k>
	<j>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</j>
	<iterator set="method"><f a=""><t path="Iterator"><x path="Float"/></t></f></iterator>
	<isEqual set="method"><f a="b">
	<c path="justGraphix.geom.MatrixType.T"/>
	<x path="Bool"/>
</f></isEqual>
	<i>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</i>
	<h>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</h>
	<getXY set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getXY>
	<g>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</g>
	<f>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</f>
	<e>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</e>
	<d>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</d>
	<clone set="method"><f a=""><c path="justGraphix.geom.MatrixType.T"/></f></clone>
	<c>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</c>
	<b><x path="Float"/></b>
	<add set="method"><f a="b">
	<c path="justGraphix.geom.MatrixType.T"/>
	<c path="justGraphix.geom.MatrixType.T"/>
</f></add>
	<a><x path="Float"/></a>
</a></typedef>
	<abstract path="justGraphix.geom.Polar" params="" file="src/justGraphix/geom/Polar.hx">
		<from><icast><c path="justGraphix.geom.structs.PolarStruct"/></icast></from>
		<this><c path="justGraphix.geom.structs.PolarStruct"/></this>
		<to><icast><c path="justGraphix.geom.structs.PolarStruct"/></icast></to>
		<haxe_doc>{ phase, magnitude }</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>justGraphix.geom.structs.PolarStruct</e></m>
		</meta>
		<impl><class path="justGraphix.geom._Polar.Polar_Impl_" params="" file="src/justGraphix/geom/Polar.hx" private="1" module="justGraphix.geom.Polar" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="polar">
			<c path="justGraphix.geom.structs.PolarStruct"/>
			<x path="justGraphix.geom.Polar"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<meta><m n=":access"><e>justGraphix.geom.structs.PolarStruct</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Polar.Polar_Impl_" params="" file="src/justGraphix/geom/Polar.hx" private="1" module="justGraphix.geom.Polar" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="polar">
				<c path="justGraphix.geom.structs.PolarStruct"/>
				<x path="justGraphix.geom.Polar"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<meta><m n=":access"><e>justGraphix.geom.structs.PolarStruct</e></m></meta>
	</class>
	<class path="justGraphix.geom.Projection" params="" file="src/justGraphix/geom/Projection.hx">
		<perspective public="1" get="inline" set="null" line="7" static="1">
			<f a="?angleOfView:?near:?far" v="1.57079632679:0.1:100.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Matrix4x4"/>
			</f>
			<meta><m n=":value"><e>{ far : 100., near : 0.1, angleOfView : 1.57079632679 }</e></m></meta>
			<haxe_doc>@:angleOfView preset to Math.PI/2;</haxe_doc>
		</perspective>
		<perspectiveAspect public="1" get="inline" set="null" line="18" static="1"><f a="fov:aspectRatio:near:far">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x4"/>
</f></perspectiveAspect>
		<projectionWindow public="1" get="inline" set="null" line="35" static="1"><f a="wid:hi:fov">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix4x3"/>
</f></projectionWindow>
	</class>
	<abstract path="justGraphix.geom.Quad2D" params="" file="src/justGraphix/geom/Quad2D.hx">
		<from><icast><c path="justGraphix.geom.structs.Quad2DStruct"/></icast></from>
		<this><c path="justGraphix.geom.structs.Quad2DStruct"/></this>
		<to><icast><c path="justGraphix.geom.structs.Quad2DStruct"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>justGraphix.geom.structs.Quad2DStruct</e></m>
		</meta>
		<impl><class path="justGraphix.geom._Quad2D.Quad2D_Impl_" params="" file="src/justGraphix/geom/Quad2D.hx" private="1" module="justGraphix.geom.Quad2D" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="quad">
			<c path="justGraphix.geom.structs.Quad2DStruct"/>
			<x path="justGraphix.geom.Quad2D"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="11" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="24" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="34" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="47" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<scaleXcentre public="1" get="inline" set="null" line="58" static="1"><f a="this:sx:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleXcentre>
	<scaleYcentre public="1" get="inline" set="null" line="68" static="1"><f a="this:sy:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleYcentre>
	<scaleX_leftAlign public="1" get="inline" set="null" line="78" static="1"><f a="this:sx:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleX_leftAlign>
	<scaleX_rightAlign public="1" get="inline" set="null" line="90" static="1"><f a="this:sx:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleX_rightAlign>
	<scaleY_topAlign public="1" get="inline" set="null" line="102" static="1"><f a="this:sy:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleY_topAlign>
	<scaleY_bottomAlign public="1" get="inline" set="null" line="114" static="1"><f a="this:sy:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleY_bottomAlign>
	<scaleXY_alignTopLeft public="1" get="inline" set="null" line="126" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopLeft>
	<scaleXY_alignTopRight public="1" get="inline" set="null" line="133" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopRight>
	<scaleXY_alignBottomRight public="1" get="inline" set="null" line="140" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomRight>
	<scaleXY_alignBottomLeft public="1" get="inline" set="null" line="147" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomLeft>
	<width public="1" get="accessor" set="accessor" static="1"><x path="Float"/></width>
	<get_width get="inline" set="null" line="154" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_width>
	<set_width get="inline" set="null" line="157" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
	<height public="1" get="accessor" set="accessor" static="1"><x path="Float"/></height>
	<get_height get="inline" set="null" line="165" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_height>
	<set_height get="inline" set="null" line="168" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
	<scale public="1" get="null" set="accessor" static="1"><x path="Float"/></scale>
	<set_scale get="inline" set="null" line="176" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_scale>
	<scaleCentre public="1" get="inline" set="null" line="182" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleCentre>
	<scaleDimension get="inline" set="null" line="188" static="1"><f a="this:dim:s:centre">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleDimension>
	<bounds public="1" get="inline" set="null" line="193" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></bounds>
	<rotateTrig public="1" get="inline" set="null" line="238" static="1"><f a="this:x:y:cos:sin">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quad2D"/>
</f></rotateTrig>
	<meta><m n=":access"><e>justGraphix.geom.structs.Quad2DStruct</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Quad2D.Quad2D_Impl_" params="" file="src/justGraphix/geom/Quad2D.hx" private="1" module="justGraphix.geom.Quad2D" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="quad">
				<c path="justGraphix.geom.structs.Quad2DStruct"/>
				<x path="justGraphix.geom.Quad2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="11" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="24" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="34" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="47" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<scaleXcentre public="1" get="inline" set="null" line="58" static="1"><f a="this:sx:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleXcentre>
		<scaleYcentre public="1" get="inline" set="null" line="68" static="1"><f a="this:sy:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleYcentre>
		<scaleX_leftAlign public="1" get="inline" set="null" line="78" static="1"><f a="this:sx:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleX_leftAlign>
		<scaleX_rightAlign public="1" get="inline" set="null" line="90" static="1"><f a="this:sx:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleX_rightAlign>
		<scaleY_topAlign public="1" get="inline" set="null" line="102" static="1"><f a="this:sy:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleY_topAlign>
		<scaleY_bottomAlign public="1" get="inline" set="null" line="114" static="1"><f a="this:sy:?rect">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
	<x path="Void"/>
</f></scaleY_bottomAlign>
		<scaleXY_alignTopLeft public="1" get="inline" set="null" line="126" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopLeft>
		<scaleXY_alignTopRight public="1" get="inline" set="null" line="133" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignTopRight>
		<scaleXY_alignBottomRight public="1" get="inline" set="null" line="140" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomRight>
		<scaleXY_alignBottomLeft public="1" get="inline" set="null" line="147" static="1"><f a="this:sx:sy">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleXY_alignBottomLeft>
		<width public="1" get="accessor" set="accessor" static="1"><x path="Float"/></width>
		<get_width get="inline" set="null" line="154" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_width>
		<set_width get="inline" set="null" line="157" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<height public="1" get="accessor" set="accessor" static="1"><x path="Float"/></height>
		<get_height get="inline" set="null" line="165" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
</f></get_height>
		<set_height get="inline" set="null" line="168" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<scale public="1" get="null" set="accessor" static="1"><x path="Float"/></scale>
		<set_scale get="inline" set="null" line="176" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_scale>
		<scaleCentre public="1" get="inline" set="null" line="182" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scaleCentre>
		<scaleDimension get="inline" set="null" line="188" static="1"><f a="this:dim:s:centre">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scaleDimension>
		<bounds public="1" get="inline" set="null" line="193" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></bounds>
		<rotateTrig public="1" get="inline" set="null" line="238" static="1"><f a="this:x:y:cos:sin">
	<c path="justGraphix.geom.structs.Quad2DStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quad2D"/>
</f></rotateTrig>
		<meta><m n=":access"><e>justGraphix.geom.structs.Quad2DStruct</e></m></meta>
	</class>
	<abstract path="justGraphix.geom.Quaternion" params="" file="src/justGraphix/geom/Quaternion.hx">
		<from>
			<icast><c path="justGraphix.geom.structs.Mat1x4"/></icast>
			<icast field="from_xyzw"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
</a></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromMatrix4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
			<icast field="fromMatrix3x3"><x path="justGraphix.geom.Matrix3x3"/></icast>
		</from>
		<this><c path="justGraphix.geom.structs.Mat1x4"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.Mat1x4"/></icast>
			<icast field="toMatrix4x1"><x path="justGraphix.geom.Matrix1x4"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="toMatrix4x3"><x path="justGraphix.geom.Matrix4x3"/></icast>
			<icast field="toMatrix3x3"><x path="justGraphix.geom.Matrix3x3"/></icast>
		</to>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
			<m n=":access"><e>justGraphix.geom.structs.Mat1x4</e></m>
		</meta>
		<impl><class path="justGraphix.geom._Quaternion.Quaternion_Impl_" params="" file="src/justGraphix/geom/Quaternion.hx" private="1" module="justGraphix.geom.Quaternion" final="1">
	<_new public="1" get="inline" set="null" line="27" static="1">
		<f a="m">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<from_xyzw public="1" get="inline" set="null" line="31" static="1">
		<f a="v">
			<a>
				<z><x path="Float"/></z>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
				<w><x path="Float"/></w>
			</a>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
	</from_xyzw>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Quaternion"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zero == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="42" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_zero>
	<zeroNormal public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Quaternion"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zeroNormal == new Quaternion({ x: 0., y: 0., z: 0., w: 1. })
     * </code></pre>]]></haxe_doc>
	</zeroNormal>
	<get_zeroNormal get="inline" set="null" line="52" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_zeroNormal>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Quaternion"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.unit == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="62" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_unit>
	<unitNormal public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.geom.Quaternion"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var q = new Quaternion( { x: 1., y: 1., z: 1., w: 1. } );
     * ... Quaternion.unitNormal == q.normalize();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitNormal>
	<get_unitNormal get="inline" set="null" line="75" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_unitNormal>
	<clone public="1" get="inline" set="null" line="79" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></clone>
	<xRotate public="1" get="inline" set="null" line="84" static="1"><f a="angle">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></xRotate>
	<yRotate public="1" get="inline" set="null" line="89" static="1"><f a="angle">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></yRotate>
	<zRotate public="1" get="inline" set="null" line="94" static="1"><f a="angle">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></zRotate>
	<xPIhalf public="1" get="inline" set="null" line="99" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></xPIhalf>
	<yPIhalf public="1" get="inline" set="null" line="104" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></yPIhalf>
	<zPIhalf public="1" get="inline" set="null" line="109" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></zPIhalf>
	<xPI public="1" get="inline" set="null" line="115" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></xPI>
	<yPI public="1" get="inline" set="null" line="119" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></yPI>
	<zPI public="1" get="inline" set="null" line="123" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></zPI>
	<xPIhalfMinus public="1" get="inline" set="null" line="128" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></xPIhalfMinus>
	<yPIhalfMinus public="1" get="inline" set="null" line="133" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></yPIhalfMinus>
	<zPIhalfMinus public="1" get="inline" set="null" line="138" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></zPIhalfMinus>
	<createFromAxisAngle public="1" get="inline" set="null" line="144" static="1"><f a="x:y:z:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></createFromAxisAngle>
	<getAngleAxis public="1" get="inline" set="null" line="159" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<a>
		<axis><x path="justGraphix.geom.Matrix1x3"/></axis>
		<angle><x path="Float"/></angle>
	</a>
</f></getAngleAxis>
	<identity public="1" get="inline" set="null" line="186" static="1">
		<f a="out">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.identity( Quaternion.zero );
     * ... var b = Quaternion.zeroNormal;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</identity>
	<toMatrix4x1 public="1" get="inline" set="null" line="194" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Matrix1x4"/>
		</f>
		<meta><m n=":to"/></meta>
	</toMatrix4x1>
	<copy public="1" get="inline" set="null" line="207" static="1">
		<f a="pin:pout">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Quaternion.zero;
     * ... var c = Quaternion.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<magnitude public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magnitude>
	<get_magnitude get="inline" set="null" line="216" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="220" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
	<dot public="1" get="inline" set="null" line="234" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></dot>
	<dotProd public="1" get="inline" set="null" line="238" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
</f></dotProd>
	<dotProduct public="1" get="inline" set="null" line="242" static="1"><f a="a:b">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
</f></dotProduct>
	<equal public="1" get="inline" set="null" line="254" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<distanceZeroOne public="1" get="inline" set="null" line="267" static="1">
		<f a="this:q">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="Float"/>
		</f>
		<haxe_doc>* provides a distance measure between Quaternions between 1 ( Math.PI ) and 0 ( 0 );</haxe_doc>
	</distanceZeroOne>
	<theta public="1" get="inline" set="null" line="275" static="1">
		<f a="this:q">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="Float"/>
		</f>
		<haxe_doc>* angle in radians between to quaternions</haxe_doc>
	</theta>
	<notEqual public="1" get="inline" set="null" line="288" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<magnitudeSquared public="1" get="inline" set="null" line="293" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></magnitudeSquared>
	<add public="1" get="inline" set="null" line="305" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... a + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="317" static="1">
		<f a="a:b">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... a - a == Quaternion.zero; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scaleMultiply public="1" get="inline" set="null" line="321" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="325" static="1">
		<f a="a:v">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="329" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<conjugate public="1" get="inline" set="null" line="341" static="1">
		<f a="a">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<negate public="1" get="inline" set="null" line="357" static="1">
		<f a="a">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<invert public="1" get="inline" set="null" line="365" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></invert>
	<inversion public="1" get="inline" set="null" line="369" static="1"><f a="q1">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></inversion>
	<multiplyQ public="1" get="inline" set="null" line="374" static="1">
		<f a="q1:q2">
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyQ>
	<cross public="1" get="inline" set="null" line="381" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></cross>
	<fromYawPitchRoll public="1" get="inline" set="null" line="394" static="1">
		<f a="yaw:pitch:roll">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<haxe_doc>* used to set yaw pitch and roll ( very similar to set euler ) but static.
     *     x:  Pitch
     *     y:  Yaw
     *     z:  Roll</haxe_doc>
	</fromYawPitchRoll>
	<fromAxisAngle public="1" get="inline" set="null" line="412" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></fromAxisAngle>
	<lerp public="1" get="inline" set="null" line="419" static="1"><f a="a:b:t">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></lerp>
	<euler public="1" get="accessor" set="accessor" static="1">
		<x path="justGraphix.geom.Quaternion"/>
		<haxe_doc>* input/output euler as rotation angles around x, y, z axis ( as faux Quaternion ), 
     * but set /gets internally as the Quaternion value</haxe_doc>
	</euler>
	<set_euler get="inline" set="null" line="430" static="1"><f a="this:a">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></set_euler>
	<get_euler get="inline" set="null" line="447" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></get_euler>
	<slerp public="1" set="method" line="456" static="1"><f a="this:v1:t">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></slerp>
	<scalarReal public="1" get="inline" set="null" line="500" static="1"><f a="s">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></scalarReal>
	<scaled public="1" get="inline" set="null" line="505" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></scaled>
	<normalize public="1" get="inline" set="null" line="510" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></normalize>
	<lookAt public="1" set="method" line="521" static="1"><f a="this:target:current:eye:up">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></lookAt>
	<fromVec public="1" get="inline" set="null" line="568" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Quaternion = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="582" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="599" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b: Quaternion = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="611" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
	<toMatrix4x3 public="1" get="inline" set="null" line="617" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Matrix4x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</toMatrix4x3>
	<toMatrix3x3 public="1" get="inline" set="null" line="637" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.Mat1x4"/>
			<x path="justGraphix.geom.Matrix3x3"/>
		</f>
		<meta><m n=":to"/></meta>
	</toMatrix3x3>
	<fromMatrix4x3 public="1" get="inline" set="null" line="656" static="1">
		<f a="m4x3">
			<x path="justGraphix.geom.Matrix4x3"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>*</haxe_doc>
	</fromMatrix4x3>
	<fromMatrix3x3 public="1" get="inline" set="null" line="665" static="1">
		<f a="m">
			<x path="justGraphix.geom.Matrix3x3"/>
			<x path="justGraphix.geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>*</haxe_doc>
	</fromMatrix3x3>
	<meta><m n=":access"><e>justGraphix.geom.structs.Mat1x4</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Quaternion.Quaternion_Impl_" params="" file="src/justGraphix/geom/Quaternion.hx" private="1" module="justGraphix.geom.Quaternion" final="1">
		<_new public="1" get="inline" set="null" line="27" static="1">
			<f a="m">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<from_xyzw public="1" get="inline" set="null" line="31" static="1">
			<f a="v">
				<a>
					<z><x path="Float"/></z>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
					<w><x path="Float"/></w>
				</a>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
		</from_xyzw>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Quaternion"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zero == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="42" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_zero>
		<zeroNormal public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Quaternion"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zeroNormal == new Quaternion({ x: 0., y: 0., z: 0., w: 1. })
     * </code></pre>]]></haxe_doc>
		</zeroNormal>
		<get_zeroNormal get="inline" set="null" line="52" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_zeroNormal>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Quaternion"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.unit == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="62" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_unit>
		<unitNormal public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.geom.Quaternion"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var q = new Quaternion( { x: 1., y: 1., z: 1., w: 1. } );
     * ... Quaternion.unitNormal == q.normalize();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitNormal>
		<get_unitNormal get="inline" set="null" line="75" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></get_unitNormal>
		<clone public="1" get="inline" set="null" line="79" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></clone>
		<xRotate public="1" get="inline" set="null" line="84" static="1"><f a="angle">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></xRotate>
		<yRotate public="1" get="inline" set="null" line="89" static="1"><f a="angle">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></yRotate>
		<zRotate public="1" get="inline" set="null" line="94" static="1"><f a="angle">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></zRotate>
		<xPIhalf public="1" get="inline" set="null" line="99" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></xPIhalf>
		<yPIhalf public="1" get="inline" set="null" line="104" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></yPIhalf>
		<zPIhalf public="1" get="inline" set="null" line="109" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></zPIhalf>
		<xPI public="1" get="inline" set="null" line="115" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></xPI>
		<yPI public="1" get="inline" set="null" line="119" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></yPI>
		<zPI public="1" get="inline" set="null" line="123" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></zPI>
		<xPIhalfMinus public="1" get="inline" set="null" line="128" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></xPIhalfMinus>
		<yPIhalfMinus public="1" get="inline" set="null" line="133" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></yPIhalfMinus>
		<zPIhalfMinus public="1" get="inline" set="null" line="138" static="1"><f a=""><x path="justGraphix.geom.Quaternion"/></f></zPIhalfMinus>
		<createFromAxisAngle public="1" get="inline" set="null" line="144" static="1"><f a="x:y:z:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></createFromAxisAngle>
		<getAngleAxis public="1" get="inline" set="null" line="159" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<a>
		<axis><x path="justGraphix.geom.Matrix1x3"/></axis>
		<angle><x path="Float"/></angle>
	</a>
</f></getAngleAxis>
		<identity public="1" get="inline" set="null" line="186" static="1">
			<f a="out">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.identity( Quaternion.zero );
     * ... var b = Quaternion.zeroNormal;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</identity>
		<toMatrix4x1 public="1" get="inline" set="null" line="194" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Matrix1x4"/>
			</f>
			<meta><m n=":to"/></meta>
		</toMatrix4x1>
		<copy public="1" get="inline" set="null" line="207" static="1">
			<f a="pin:pout">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Quaternion.zero;
     * ... var c = Quaternion.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<magnitude public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magnitude>
		<get_magnitude get="inline" set="null" line="216" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="220" static="1"><f a="this:length">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
		<dot public="1" get="inline" set="null" line="234" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></dot>
		<dotProd public="1" get="inline" set="null" line="238" static="1"><f a="this:b">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
</f></dotProd>
		<dotProduct public="1" get="inline" set="null" line="242" static="1"><f a="a:b">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
</f></dotProduct>
		<equal public="1" get="inline" set="null" line="254" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<distanceZeroOne public="1" get="inline" set="null" line="267" static="1">
			<f a="this:q">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* provides a distance measure between Quaternions between 1 ( Math.PI ) and 0 ( 0 );</haxe_doc>
		</distanceZeroOne>
		<theta public="1" get="inline" set="null" line="275" static="1">
			<f a="this:q">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* angle in radians between to quaternions</haxe_doc>
		</theta>
		<notEqual public="1" get="inline" set="null" line="288" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<magnitudeSquared public="1" get="inline" set="null" line="293" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
</f></magnitudeSquared>
		<add public="1" get="inline" set="null" line="305" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... a + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="317" static="1">
			<f a="a:b">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... a - a == Quaternion.zero; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scaleMultiply public="1" get="inline" set="null" line="321" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="325" static="1">
			<f a="a:v">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="329" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<conjugate public="1" get="inline" set="null" line="341" static="1">
			<f a="a">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<negate public="1" get="inline" set="null" line="357" static="1">
			<f a="a">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<invert public="1" get="inline" set="null" line="365" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></invert>
		<inversion public="1" get="inline" set="null" line="369" static="1"><f a="q1">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></inversion>
		<multiplyQ public="1" get="inline" set="null" line="374" static="1">
			<f a="q1:q2">
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyQ>
		<cross public="1" get="inline" set="null" line="381" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></cross>
		<fromYawPitchRoll public="1" get="inline" set="null" line="394" static="1">
			<f a="yaw:pitch:roll">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<haxe_doc>* used to set yaw pitch and roll ( very similar to set euler ) but static.
     *     x:  Pitch
     *     y:  Yaw
     *     z:  Roll</haxe_doc>
		</fromYawPitchRoll>
		<fromAxisAngle public="1" get="inline" set="null" line="412" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></fromAxisAngle>
		<lerp public="1" get="inline" set="null" line="419" static="1"><f a="a:b:t">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></lerp>
		<euler public="1" get="accessor" set="accessor" static="1">
			<x path="justGraphix.geom.Quaternion"/>
			<haxe_doc>* input/output euler as rotation angles around x, y, z axis ( as faux Quaternion ), 
     * but set /gets internally as the Quaternion value</haxe_doc>
		</euler>
		<set_euler get="inline" set="null" line="430" static="1"><f a="this:a">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></set_euler>
		<get_euler get="inline" set="null" line="447" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></get_euler>
		<slerp public="1" set="method" line="456" static="1"><f a="this:v1:t">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></slerp>
		<scalarReal public="1" get="inline" set="null" line="500" static="1"><f a="s">
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></scalarReal>
		<scaled public="1" get="inline" set="null" line="505" static="1"><f a="this:s">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></scaled>
		<normalize public="1" get="inline" set="null" line="510" static="1"><f a="this">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></normalize>
		<lookAt public="1" set="method" line="521" static="1"><f a="this:target:current:eye:up">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Quaternion"/>
</f></lookAt>
		<fromVec public="1" get="inline" set="null" line="568" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Quaternion = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="582" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="599" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b: Quaternion = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="611" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit;
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
		<toMatrix4x3 public="1" get="inline" set="null" line="617" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Matrix4x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</toMatrix4x3>
		<toMatrix3x3 public="1" get="inline" set="null" line="637" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.Mat1x4"/>
				<x path="justGraphix.geom.Matrix3x3"/>
			</f>
			<meta><m n=":to"/></meta>
		</toMatrix3x3>
		<fromMatrix4x3 public="1" get="inline" set="null" line="656" static="1">
			<f a="m4x3">
				<x path="justGraphix.geom.Matrix4x3"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>*</haxe_doc>
		</fromMatrix4x3>
		<fromMatrix3x3 public="1" get="inline" set="null" line="665" static="1">
			<f a="m">
				<x path="justGraphix.geom.Matrix3x3"/>
				<x path="justGraphix.geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>*</haxe_doc>
		</fromMatrix3x3>
		<meta><m n=":access"><e>justGraphix.geom.structs.Mat1x4</e></m></meta>
	</class>
	<abstract path="justGraphix.geom.Ray" params="" file="src/justGraphix/geom/Ray.hx">
		<from><icast><c path="justGraphix.geom.structs.RayStruct"/></icast></from>
		<this><c path="justGraphix.geom.structs.RayStruct"/></this>
		<to><icast><c path="justGraphix.geom.structs.RayStruct"/></icast></to>
		<haxe_doc>{ dist, edge, norm, refl }</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>justGraphix.geom.structs.RayStruct</e></m>
		</meta>
		<impl><class path="justGraphix.geom._Ray.Ray_Impl_" params="" file="src/justGraphix/geom/Ray.hx" private="1" module="justGraphix.geom.Ray" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="ray">
			<c path="justGraphix.geom.structs.RayStruct"/>
			<x path="justGraphix.geom.Ray"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<meta><m n=":access"><e>justGraphix.geom.structs.RayStruct</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Ray.Ray_Impl_" params="" file="src/justGraphix/geom/Ray.hx" private="1" module="justGraphix.geom.Ray" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="ray">
				<c path="justGraphix.geom.structs.RayStruct"/>
				<x path="justGraphix.geom.Ray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<meta><m n=":access"><e>justGraphix.geom.structs.RayStruct</e></m></meta>
	</class>
	<abstract path="justGraphix.geom.Rectangle" params="" file="src/justGraphix/geom/Rectangle.hx">
		<from><icast><c path="justGraphix.geom.structs.RectangleStruct"/></icast></from>
		<this><c path="justGraphix.geom.structs.RectangleStruct"/></this>
		<to>
			<icast><c path="justGraphix.geom.structs.RectangleStruct"/></icast>
			<icast field="toQuad2D"><x path="justGraphix.geom.Quad2D"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>justGraphix.geom.structs.RectangleStruct</e></m>
		</meta>
		<impl><class path="justGraphix.geom._Rectangle.Rectangle_Impl_" params="" file="src/justGraphix/geom/Rectangle.hx" private="1" module="justGraphix.geom.Rectangle" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="rectangle">
			<c path="justGraphix.geom.structs.RectangleStruct"/>
			<x path="justGraphix.geom.Rectangle"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<right public="1" get="accessor" set="accessor" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="13" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_right>
	<set_right get="inline" set="null" line="17" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
	<bottom public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="23" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_bottom>
	<set_bottom get="inline" set="null" line="27" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
	<bottomRight public="1" get="accessor" set="accessor" static="1"><c path="justGraphix.geom.structs.XY"/></bottomRight>
	<get_bottomRight get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></get_bottomRight>
	<set_bottomRight get="inline" set="null" line="37" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></set_bottomRight>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx get="inline" set="null" line="44" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx get="inline" set="null" line="48" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy get="inline" set="null" line="54" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy get="inline" set="null" line="58" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<centre public="1" get="accessor" set="accessor" static="1"><c path="justGraphix.geom.structs.XY"/></centre>
	<get_centre get="inline" set="null" line="64" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></get_centre>
	<set_centre get="inline" set="null" line="68" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></set_centre>
	<rotatedQuad public="1" get="inline" set="null" line="76" static="1"><f a="this:x:y:theta">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quad2D"/>
</f></rotatedQuad>
	<rotatedBounds public="1" get="inline" set="null" line="83" static="1"><f a="this:x:y:theta">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></rotatedBounds>
	<toQuad2D public="1" get="inline" set="null" line="88" static="1">
		<f a="this">
			<c path="justGraphix.geom.structs.RectangleStruct"/>
			<x path="justGraphix.geom.Quad2D"/>
		</f>
		<meta><m n=":to"/></meta>
	</toQuad2D>
	<hit public="1" get="inline" set="null" line="95" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
	<x path="Bool"/>
</f></hit>
	<meta><m n=":access"><e>justGraphix.geom.structs.RectangleStruct</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.geom._Rectangle.Rectangle_Impl_" params="" file="src/justGraphix/geom/Rectangle.hx" private="1" module="justGraphix.geom.Rectangle" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="rectangle">
				<c path="justGraphix.geom.structs.RectangleStruct"/>
				<x path="justGraphix.geom.Rectangle"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<right public="1" get="accessor" set="accessor" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="13" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_right>
		<set_right get="inline" set="null" line="17" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<bottom public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="23" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_bottom>
		<set_bottom get="inline" set="null" line="27" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<bottomRight public="1" get="accessor" set="accessor" static="1"><c path="justGraphix.geom.structs.XY"/></bottomRight>
		<get_bottomRight get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></get_bottomRight>
		<set_bottomRight get="inline" set="null" line="37" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></set_bottomRight>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx get="inline" set="null" line="44" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx get="inline" set="null" line="48" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy get="inline" set="null" line="54" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy get="inline" set="null" line="58" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<centre public="1" get="accessor" set="accessor" static="1"><c path="justGraphix.geom.structs.XY"/></centre>
		<get_centre get="inline" set="null" line="64" static="1"><f a="this">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></get_centre>
		<set_centre get="inline" set="null" line="68" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
</f></set_centre>
		<rotatedQuad public="1" get="inline" set="null" line="76" static="1"><f a="this:x:y:theta">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Quad2D"/>
</f></rotatedQuad>
		<rotatedBounds public="1" get="inline" set="null" line="83" static="1"><f a="this:x:y:theta">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Rectangle"/>
</f></rotatedBounds>
		<toQuad2D public="1" get="inline" set="null" line="88" static="1">
			<f a="this">
				<c path="justGraphix.geom.structs.RectangleStruct"/>
				<x path="justGraphix.geom.Quad2D"/>
			</f>
			<meta><m n=":to"/></meta>
		</toQuad2D>
		<hit public="1" get="inline" set="null" line="95" static="1"><f a="this:v">
	<c path="justGraphix.geom.structs.RectangleStruct"/>
	<c path="justGraphix.geom.structs.XY"/>
	<x path="Bool"/>
</f></hit>
		<meta><m n=":access"><e>justGraphix.geom.structs.RectangleStruct</e></m></meta>
	</class>
	<typedef path="justGraphix.geom.VectorType" params="T" file="src/justGraphix/geom/VectorType.hx"><a>
	<z>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<writeItem set="method"><f a="k:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<w>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</w>
	<toVector set="method"><f a=""><x path="haxe.ds.Vector"><x path="Float"/></x></f></toVector>
	<toArray set="method"><f a=""><c path="Array"><x path="Float"/></c></f></toArray>
	<testCount get="accessor" set="null"><c path="justGraphix.geom.VectorType.T"/></testCount>
	<subtract set="method"><f a="b">
	<c path="justGraphix.geom.VectorType.T"/>
	<c path="justGraphix.geom.VectorType.T"/>
</f></subtract>
	<staticFromVec set="method"><f a="vec">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<c path="justGraphix.geom.VectorType.T"/>
</f></staticFromVec>
	<staticFromArray set="method"><f a="arr">
	<c path="Array"><x path="Float"/></c>
	<c path="justGraphix.geom.VectorType.T"/>
</f></staticFromArray>
	<self get="accessor" set="null"><c path="justGraphix.geom.VectorType.T"/></self>
	<readItem set="method"><f a="k">
	<x path="Int"/>
	<x path="Float"/>
</f></readItem>
	<one get="accessor" set="null"><c path="justGraphix.geom.VectorType.T"/></one>
	<nought get="accessor" set="null"><c path="justGraphix.geom.VectorType.T"/></nought>
	<normalize set="method"><f a=""><c path="justGraphix.geom.VectorType.T"/></f></normalize>
	<negate set="method"><f a=""><c path="justGraphix.geom.VectorType.T"/></f></negate>
	<multiplyScale set="method"><f a="b">
	<c path="justGraphix.geom.VectorType.T"/>
	<c path="justGraphix.geom.VectorType.T"/>
</f></multiplyScale>
	<magnitude get="accessor" set="accessor"><x path="Float"/></magnitude>
	<iterator set="method"><f a=""><t path="Iterator"><x path="Float"/></t></f></iterator>
	<isEqual set="method"><f a="b">
	<c path="justGraphix.geom.VectorType.T"/>
	<x path="Bool"/>
</f></isEqual>
	<clone set="method"><f a=""><c path="justGraphix.geom.VectorType.T"/></f></clone>
	<add set="method"><f a="b">
	<c path="justGraphix.geom.VectorType.T"/>
	<c path="justGraphix.geom.VectorType.T"/>
</f></add>
</a></typedef>
	<class path="justGraphix.geom.structs.DualQ" params="" file="src/justGraphix/geom/structs/DualQ.hx">
		<real public="1"><x path="justGraphix.geom.Quaternion"/></real>
		<dual public="1"><x path="justGraphix.geom.Quaternion"/></dual>
		<new set="method" line="8"><f a="real:dual">
	<x path="justGraphix.geom.Quaternion"/>
	<x path="justGraphix.geom.Quaternion"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.Edge" params="" file="src/justGraphix/geom/structs/Edge.hx">
		<dist public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</dist>
		<edge public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</edge>
		<point public="1"><x path="justGraphix.geom.Matrix1x4"/></point>
		<norm public="1"><x path="justGraphix.geom.Matrix1x4"/></norm>
		<new set="method" line="12"><f a="dist:edge:point:norm">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ dist, edge, point, norm }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.geom.structs.MVec2" params="" file="src/justGraphix/geom/structs/MVec2.hx">
		<s public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</s>
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<xy public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</xy>
		<new public="1" set="method" line="11"><f a="s:x:y:xy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ s, x, y, xy }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.geom.structs.MVec3" params="" file="src/justGraphix/geom/structs/MVec3.hx">
		<s public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</s>
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<xy public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</xy>
		<zx public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</zx>
		<yz public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</yz>
		<xyz public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</xyz>
		<new public="1" set="method" line="15"><f a="s:x:y:z:xy:zx:yz:xyz">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ s, x, y, z, xy, zx, yz, xyz }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.geom.structs.MVec4" params="" file="src/justGraphix/geom/structs/MVec4.hx">
		<s public="1"><x path="Float"/></s>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<w public="1"><x path="Float"/></w>
		<xy public="1"><x path="Float"/></xy>
		<xz public="1"><x path="Float"/></xz>
		<xw public="1"><x path="Float"/></xw>
		<yz public="1"><x path="Float"/></yz>
		<wy public="1"><x path="Float"/></wy>
		<zw public="1"><x path="Float"/></zw>
		<zyx public="1"><x path="Float"/></zyx>
		<xyw public="1"><x path="Float"/></xyw>
		<wzx public="1"><x path="Float"/></wzx>
		<yzw public="1"><x path="Float"/></yzw>
		<xyzw public="1"><x path="Float"/></xyzw>
		<new public="1" set="method" line="24"><f a="s:x:y:z:w:xy:xz:xw:yz:wy:zw:zyx:xyw:wzx:yzw:xyzw">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ s, x, y, z, w, xy, xz, xw, yz, wy, zw, zyx, xyw, wzx, yzw, xyzw }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<typedef path="justGraphix.geom.structs.Tpoint" params="" file="src/justGraphix/geom/structs/Mat1x2.hx" module="justGraphix.geom.structs.Mat1x2">
		<a>
			<y><x path="Float"/></y>
			<x><x path="Float"/></x>
		</a>
		<haxe_doc>{ x, y }</haxe_doc>
	</typedef>
	<class path="justGraphix.geom.structs.Mat1x2" params="" file="src/justGraphix/geom/structs/Mat1x2.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<values public="1" set="method" line="25"><f a=""><c path="String"/></f></values>
		<clone public="1" set="method" line="28"><f a=""><c path="justGraphix.geom.structs.Mat1x2"/></f></clone>
		<new public="1" set="method" line="19"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.ConvertMat1x2" params="" file="src/justGraphix/geom/structs/Mat1x2.hx" module="justGraphix.geom.structs.Mat1x2">
		<tpoint public="1" get="inline" set="null" line="35" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat1x2"/>
	<t path="justGraphix.geom.structs.Tpoint"/>
</f></tpoint>
		<fromTpoint public="1" get="inline" set="null" line="40" static="1"><f a="tPoint">
	<t path="justGraphix.geom.structs.Tpoint"/>
	<c path="justGraphix.geom.structs.Mat1x2"/>
</f></fromTpoint>
		<meta><m n=":access"><e>justGraphix.geom.structs.Mat1x2</e></m></meta>
	</class>
	<class path="justGraphix.geom.structs.Mat1x3" params="" file="src/justGraphix/geom/structs/Mat1x3.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<values public="1" set="method" line="19"><f a=""><c path="String"/></f></values>
		<clone public="1" set="method" line="22"><f a=""><c path="justGraphix.geom.structs.Mat1x3"/></f></clone>
		<new public="1" set="method" line="12"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y, z }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.ConvertMat1x3" params="" file="src/justGraphix/geom/structs/Mat1x3.hx" module="justGraphix.geom.structs.Mat1x3">
		<toTypedef public="1" get="inline" set="null" line="29" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat1x3"/>
	<t path="justGraphix.geom.structs.Tmatrix1x3"/>
</f></toTypedef>
		<fromTypedef public="1" get="inline" set="null" line="34" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix1x3"/>
	<c path="justGraphix.geom.structs.Mat1x3"/>
</f></fromTypedef>
		<meta><m n=":access"><e>justGraphix.geom.structs.Mat1x3</e></m></meta>
	</class>
	<typedef path="justGraphix.geom.structs.Tmatrix1x3" params="" file="src/justGraphix/geom/structs/Mat1x3.hx" module="justGraphix.geom.structs.Mat1x3">
		<a>
			<z><x path="Float"/></z>
			<y><x path="Float"/></y>
			<x><x path="Float"/></x>
		</a>
		<haxe_doc>{ x, y, z }</haxe_doc>
	</typedef>
	<class path="justGraphix.geom.structs.Mat1x4" params="" file="src/justGraphix/geom/structs/Mat1x4.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<values public="1" set="method" line="21"><f a=""><c path="String"/></f></values>
		<clone public="1" set="method" line="24"><f a=""><c path="justGraphix.geom.structs.Mat1x4"/></f></clone>
		<new public="1" set="method" line="13">
			<f a="x:y:z:?w" v=":::1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.ConvertMat1x4" params="" file="src/justGraphix/geom/structs/Mat1x4.hx" module="justGraphix.geom.structs.Mat1x4">
		<toTypedef public="1" get="inline" set="null" line="31" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat1x4"/>
	<t path="justGraphix.geom.structs.Tmatrix1x4"/>
</f></toTypedef>
		<fromTypedef public="1" get="inline" set="null" line="36" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix1x4"/>
	<c path="justGraphix.geom.structs.Mat1x4"/>
</f></fromTypedef>
		<meta><m n=":access"><e>justGraphix.geom.structs.Mat1x4</e></m></meta>
	</class>
	<typedef path="justGraphix.geom.structs.Tmatrix1x4" params="" file="src/justGraphix/geom/structs/Mat1x4.hx" module="justGraphix.geom.structs.Mat1x4">
		<a>
			<z><x path="Float"/></z>
			<y><x path="Float"/></y>
			<x><x path="Float"/></x>
			<w><x path="Float"/></w>
		</a>
		<haxe_doc>{ x, y, z }</haxe_doc>
	</typedef>
	<class path="justGraphix.geom.structs.Mat2x2" params="" file="src/justGraphix/geom/structs/Mat2x2.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<new public="1" set="method" line="10"><f a="a:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![2x2](../../bootstrap/img/matrix2x2.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.ConvertMat2x2" params="" file="src/justGraphix/geom/structs/Mat2x2.hx" module="justGraphix.geom.structs.Mat2x2">
		<toTypedef public="1" get="inline" set="null" line="19" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<t path="justGraphix.geom.structs.Tmatrix2x2"/>
</f></toTypedef>
		<fromTypedef public="1" get="inline" set="null" line="25" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix2x2"/>
	<c path="justGraphix.geom.structs.Mat2x2"/>
</f></fromTypedef>
		<toNumdef public="1" get="inline" set="null" line="30" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<t path="justGraphix.geom.structs.Alternate2x2numbered"/>
</f></toNumdef>
		<fromNumdef public="1" get="inline" set="null" line="36" static="1"><f a="n">
	<t path="justGraphix.geom.structs.Alternate2x2numbered"/>
	<c path="justGraphix.geom.structs.Mat2x2"/>
</f></fromNumdef>
		<toAltNumdef public="1" get="inline" set="null" line="41" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat2x2"/>
	<t path="justGraphix.geom.structs.Alternate2x2numbered"/>
</f></toAltNumdef>
		<fromAltNumdef public="1" get="inline" set="null" line="47" static="1"><f a="n">
	<t path="justGraphix.geom.structs.Alternate2x2numbered"/>
	<c path="justGraphix.geom.structs.Mat2x2"/>
</f></fromAltNumdef>
	</class>
	<typedef path="justGraphix.geom.structs.Tmatrix2x2" params="" file="src/justGraphix/geom/structs/Mat2x2.hx" module="justGraphix.geom.structs.Mat2x2"><a>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="justGraphix.geom.structs.Tmatrix2x2numbered" params="" file="src/justGraphix/geom/structs/Mat2x2.hx" module="justGraphix.geom.structs.Mat2x2"><a>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<typedef path="justGraphix.geom.structs.Alternate2x2numbered" params="" file="src/justGraphix/geom/structs/Mat2x2.hx" module="justGraphix.geom.structs.Mat2x2"><a>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<class path="justGraphix.geom.structs.Mat3x3" params="" file="src/justGraphix/geom/structs/Mat3x3.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<new public="1" set="method" line="12"><f a="a:b:c:d:e:f:g:h:i">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![3x3](../../bootstrap/img/matrix3x3.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.ConvertM3x3" params="" file="src/justGraphix/geom/structs/Mat3x3.hx" module="justGraphix.geom.structs.Mat3x3">
		<toTypedef public="1" get="inline" set="null" line="24" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<t path="justGraphix.geom.structs.Tmatrix3x3"/>
</f></toTypedef>
		<fromTypedef public="1" get="inline" set="null" line="31" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix3x3"/>
	<c path="justGraphix.geom.structs.Mat3x3"/>
</f></fromTypedef>
		<toNumdef public="1" get="inline" set="null" line="37" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<t path="justGraphix.geom.structs.Tmatrix3x3numbered"/>
</f></toNumdef>
		<fromNumdef public="1" get="inline" set="null" line="44" static="1"><f a="n">
	<t path="justGraphix.geom.structs.Tmatrix3x3numbered"/>
	<c path="justGraphix.geom.structs.Mat3x3"/>
</f></fromNumdef>
		<toAltNumdef public="1" get="inline" set="null" line="50" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat3x3"/>
	<t path="justGraphix.geom.structs.Alternate3x3numbered"/>
</f></toAltNumdef>
		<fromAltNumdef public="1" get="inline" set="null" line="57" static="1"><f a="n">
	<t path="justGraphix.geom.structs.Alternate3x3numbered"/>
	<c path="justGraphix.geom.structs.Mat3x3"/>
</f></fromAltNumdef>
		<meta><m n=":access"><e>justGraphix.geom.stucts.Mat3x3</e></m></meta>
	</class>
	<typedef path="justGraphix.geom.structs.Tmatrix3x3" params="" file="src/justGraphix/geom/structs/Mat3x3.hx" module="justGraphix.geom.structs.Mat3x3"><a>
	<i><x path="Float"/></i>
	<h><x path="Float"/></h>
	<g><x path="Float"/></g>
	<f><x path="Float"/></f>
	<e><x path="Float"/></e>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="justGraphix.geom.structs.Tmatrix3x3numbered" params="" file="src/justGraphix/geom/structs/Mat3x3.hx" module="justGraphix.geom.structs.Mat3x3"><a>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<typedef path="justGraphix.geom.structs.Alternate3x3numbered" params="" file="src/justGraphix/geom/structs/Mat3x3.hx" module="justGraphix.geom.structs.Mat3x3"><a>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<class path="justGraphix.geom.structs.Mat4x3" params="" file="src/justGraphix/geom/structs/Mat4x3.hx">
		<fromTypedef public="1" get="inline" set="null" line="26" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix4x3"/>
	<c path="justGraphix.geom.structs.Mat4x3"/>
</f></fromTypedef>
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<toTypedef public="1" get="inline" set="null" line="19"><f a=""><t path="justGraphix.geom.structs.Tmatrix4x3"/></f></toTypedef>
		<new public="1" set="method" line="10"><f a="a:b:c:d:e:f:g:h:i:j:k:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![4x3](../../bootstrap/img/matrix4x3.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<typedef path="justGraphix.geom.structs.Tmatrix4x3" params="" file="src/justGraphix/geom/structs/Mat4x3.hx" module="justGraphix.geom.structs.Mat4x3"><a>
	<l><x path="Float"/></l>
	<k><x path="Float"/></k>
	<j><x path="Float"/></j>
	<i><x path="Float"/></i>
	<h><x path="Float"/></h>
	<g><x path="Float"/></g>
	<f><x path="Float"/></f>
	<e><x path="Float"/></e>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="justGraphix.geom.structs.TAffineMatrix" params="" file="src/justGraphix/geom/structs/Mat4x3.hx" module="justGraphix.geom.structs.Mat4x3"><a>
	<e9><x path="Float"/></e9>
	<e8><x path="Float"/></e8>
	<e6><x path="Float"/></e6>
	<e5><x path="Float"/></e5>
	<e4><x path="Float"/></e4>
	<e2><x path="Float"/></e2>
	<e14><x path="Float"/></e14>
	<e13><x path="Float"/></e13>
	<e12><x path="Float"/></e12>
	<e10><x path="Float"/></e10>
	<e1><x path="Float"/></e1>
	<e0><x path="Float"/></e0>
</a></typedef>
	<class path="justGraphix.geom.structs.Mat4x4" params="" file="src/justGraphix/geom/structs/Mat4x4.hx">
		<fromTypedef public="1" get="inline" set="null" line="31" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix4x4"/>
	<c path="justGraphix.geom.structs.Mat4x4"/>
</f></fromTypedef>
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<n public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</n>
		<o public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</o>
		<p public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</p>
		<toTypedef public="1" get="inline" set="null" line="23"><f a=""><t path="justGraphix.geom.structs.Tmatrix4x4"/></f></toTypedef>
		<new public="1" set="method" line="12"><f a="a:b:c:d:e:f:g:h:i:j:k:l:m:n:o:p">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![4x4](../../bootstrap/img/matrix4x4.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.ConvertMat4x4" params="" file="src/justGraphix/geom/structs/Mat4x4.hx" module="justGraphix.geom.structs.Mat4x4">
		<fromTypedef public="1" get="inline" set="null" line="48" static="1"><f a="t">
	<t path="justGraphix.geom.structs.Tmatrix4x4"/>
	<c path="justGraphix.geom.structs.Mat4x4"/>
</f></fromTypedef>
		<toNumdef public="1" get="inline" set="null" line="55" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
</f></toNumdef>
		<fromNumdef public="1" get="inline" set="null" line="63" static="1"><f a="n">
	<t path="justGraphix.geom.structs.Tmatrix4x4numbered"/>
	<c path="justGraphix.geom.structs.Mat4x4"/>
</f></fromNumdef>
		<toAltNumdef public="1" get="inline" set="null" line="70" static="1"><f a="m">
	<c path="justGraphix.geom.structs.Mat4x4"/>
	<t path="justGraphix.geom.structs.Alternate4x4numbered"/>
</f></toAltNumdef>
		<fromAltNumdef public="1" get="inline" set="null" line="78" static="1"><f a="n">
	<t path="justGraphix.geom.structs.Alternate4x4numbered"/>
	<c path="justGraphix.geom.structs.Mat4x4"/>
</f></fromAltNumdef>
		<toTypedef public="1" get="inline" set="null" line="40"><f a="m">
	<x path="justGraphix.geom.Matrix4x4"/>
	<t path="justGraphix.geom.structs.Tmatrix4x4"/>
</f></toTypedef>
	</class>
	<typedef path="justGraphix.geom.structs.Tmatrix4x4" params="" file="src/justGraphix/geom/structs/Mat4x4.hx" module="justGraphix.geom.structs.Mat4x4"><a>
	<p><x path="Float"/></p>
	<o><x path="Float"/></o>
	<n><x path="Float"/></n>
	<m><x path="Float"/></m>
	<l><x path="Float"/></l>
	<k><x path="Float"/></k>
	<j><x path="Float"/></j>
	<i><x path="Float"/></i>
	<h><x path="Float"/></h>
	<g><x path="Float"/></g>
	<f><x path="Float"/></f>
	<e><x path="Float"/></e>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="justGraphix.geom.structs.Tmatrix4x4numbered" params="" file="src/justGraphix/geom/structs/Mat4x4.hx" module="justGraphix.geom.structs.Mat4x4"><a>
	<_33><x path="Float"/></_33>
	<_32><x path="Float"/></_32>
	<_31><x path="Float"/></_31>
	<_30><x path="Float"/></_30>
	<_23><x path="Float"/></_23>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_13><x path="Float"/></_13>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_03><x path="Float"/></_03>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<typedef path="justGraphix.geom.structs.Alternate4x4numbered" params="" file="src/justGraphix/geom/structs/Mat4x4.hx" module="justGraphix.geom.structs.Mat4x4"><a>
	<_33><x path="Float"/></_33>
	<_32><x path="Float"/></_32>
	<_31><x path="Float"/></_31>
	<_30><x path="Float"/></_30>
	<_23><x path="Float"/></_23>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_13><x path="Float"/></_13>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_03><x path="Float"/></_03>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<class path="justGraphix.geom.structs.Mat5x5" params="" file="src/justGraphix/geom/structs/Mat5x5.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<n public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</n>
		<o public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</o>
		<p public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</p>
		<q public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</q>
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<s public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</s>
		<t public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</t>
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<v public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</v>
		<w public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</w>
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<new public="1" set="method" line="12"><f a="a:b:c:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.PolarStruct" params="" file="src/justGraphix/geom/structs/PolarStruct.hx">
		<phase public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</phase>
		<magnitude public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</magnitude>
		<values public="1" set="method" line="15"><f a=""><c path="String"/></f></values>
		<clone public="1" set="method" line="18"><f a=""><c path="justGraphix.geom.structs.PolarStruct"/></f></clone>
		<new public="1" set="method" line="9"><f a="phase:magnitude">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ phase, magnitude }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.Quad2DStruct" params="" file="src/justGraphix/geom/structs/Quad2DStruct.hx">
		<a public="1"><c path="justGraphix.geom.structs.XY"/></a>
		<b public="1"><c path="justGraphix.geom.structs.XY"/></b>
		<c public="1"><c path="justGraphix.geom.structs.XY"/></c>
		<d public="1"><c path="justGraphix.geom.structs.XY"/></d>
		<clone public="1" set="method" line="17"><f a=""><c path="justGraphix.geom.structs.Quad2DStruct"/></f></clone>
		<new public="1" set="method" line="11"><f a="a:b:c:d">
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
	<c path="justGraphix.geom.structs.XY"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.Range" params="" file="src/justGraphix/geom/structs/Range.hx">
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<new public="1" set="method" line="9"><f a="u:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ u, l }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.RayStruct" params="" file="src/justGraphix/geom/structs/RayStruct.hx">
		<dist public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</dist>
		<edge public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</edge>
		<norm public="1"><x path="justGraphix.geom.Matrix1x4"/></norm>
		<refl public="1"><x path="justGraphix.geom.Matrix1x4"/></refl>
		<clone public="1" set="method" line="19"><f a=""><c path="justGraphix.geom.structs.RayStruct"/></f></clone>
		<new public="1" set="method" line="12"><f a="dist:edge:norm:refl">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ dist, edge, norm, refl }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.geom.structs.RectangleStruct" params="" file="src/justGraphix/geom/structs/RectangleStruct.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<clone public="1" set="method" line="14"><f a=""><c path="justGraphix.geom.structs.RectangleStruct"/></f></clone>
		<new set="method" line="8"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.geom.structs.TriInt" params="" file="src/justGraphix/geom/structs/TriInt.hx">
		<a public="1"><x path="Int"/></a>
		<b public="1"><x path="Int"/></b>
		<c public="1"><x path="Int"/></c>
		<new set="method" line="8"><f a="a:b:c">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.geom.structs.TriVec" params="" file="src/justGraphix/geom/structs/TriVec.hx">
		<a public="1"><x path="justGraphix.geom.Matrix1x4"/></a>
		<b public="1"><x path="justGraphix.geom.Matrix1x4"/></b>
		<c public="1"><x path="justGraphix.geom.Matrix1x4"/></c>
		<new set="method" line="11"><f a="a:b:c">
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="justGraphix.geom.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![triVec](../../bootstrap/img/tri3D.png)</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<typedef path="justGraphix.geom.structs.TTriVec" params="" file="src/justGraphix/geom/structs/TriVec.hx" module="justGraphix.geom.structs.TriVec"><a>
	<c><x path="justGraphix.geom.Matrix1x4"/></c>
	<b><x path="justGraphix.geom.Matrix1x4"/></b>
	<a><x path="justGraphix.geom.Matrix1x4"/></a>
</a></typedef>
	<class path="justGraphix.geom.structs.Vertex" params="" file="src/justGraphix/geom/structs/Vertex.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<v public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</v>
		<new set="method" line="13">
			<f a="x:y:z:?w:u:v" v=":::1.::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w, u, v }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.geom.structs.XY" params="" file="src/justGraphix/geom/structs/XY.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<clone public="1" set="method" line="15"><f a=""><c path="justGraphix.geom.structs.XY"/></f></clone>
		<new public="1" set="method" line="11"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.hit.IhitObj" params="" file="src/justGraphix/hit/IhitObj.hx" interface="1">
		<rectBoundsHit public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<hit public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
	</class>
	<class path="justGraphix.hit.HitEllipse" params="" file="src/justGraphix/hit/HitEllipse.hx">
		<implements path="justGraphix.hit.IhitObj"/>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<rx public="1"><x path="Float"/></rx>
		<ry public="1"><x path="Float"/></ry>
		<phi public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</phi>
		<x_phi_rx><x path="Float"/></x_phi_rx>
		<x_phi_ry><x path="Float"/></x_phi_ry>
		<y_phi_rx><x path="Float"/></y_phi_rx>
		<y_phi_ry><x path="Float"/></y_phi_ry>
		<minX><x path="Float"/></minX>
		<maxX><x path="Float"/></maxX>
		<minY><x path="Float"/></minY>
		<maxY><x path="Float"/></maxY>
		<setMinMax get="inline" set="null" line="38"><f a=""><x path="Void"/></f></setMinMax>
		<rectBoundsHit public="1" get="inline" set="null" line="45"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<hit public="1" get="inline" set="null" line="49"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new get="inline" set="null" line="18">
			<f a="cx:cy:rx:ry:?phi" v="::::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.hit.HitObjArray" params="" file="src/justGraphix/hit/HitObjArray.hx">
		<implements path="justGraphix.hit.IhitObj"/>
		<arr public="1"><c path="Array"><c path="justGraphix.hit.IhitObj"/></c></arr>
		<xRange><x path="justGraphix.iterMagix.IteratorRange"/></xRange>
		<yRange><x path="justGraphix.iterMagix.IteratorRange"/></yRange>
		<boundsCalculated public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</boundsCalculated>
		<push public="1" set="method" line="17"><f a="v">
	<c path="justGraphix.hit.IhitObj"/>
	<x path="Int"/>
</f></push>
		<rectBoundsHit public="1" get="inline" set="null" line="21"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<hit public="1" get="inline" set="null" line="30"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new public="1" get="inline" set="null" line="13"><f a="arr">
	<c path="Array"><c path="justGraphix.hit.IhitObj"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.image.algo.QuadPoints_" params="" file="src/justGraphix/image/algo/QuadPoints.hx" module="justGraphix.image.algo.QuadPoints">
		<ax public="1"><x path="Float"/></ax>
		<ay public="1"><x path="Float"/></ay>
		<bx public="1"><x path="Float"/></bx>
		<by public="1"><x path="Float"/></by>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<new public="1" get="inline" set="null" line="58"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.hit.HitQuad" params="" file="src/justGraphix/hit/HitQuad.hx">
		<extends path="justGraphix.image.algo.QuadPoints_"/>
		<implements path="justGraphix.hit.IhitObj"/>
		<preCalculated public="1"><x path="Bool"/></preCalculated>
		<triABD public="1"><c path="justGraphix.hit.HitTri"/></triABD>
		<triBCD public="1"><c path="justGraphix.hit.HitTri"/></triBCD>
		<xIter4 public="1"><x path="justGraphix.iterMagix.IteratorRange"/></xIter4>
		<yIter4 public="1"><x path="justGraphix.iterMagix.IteratorRange"/></yIter4>
		<preCalculateValues public="1" get="inline" set="null" line="27"><f a=""><x path="Void"/></f></preCalculateValues>
		<rectBoundsHit public="1" get="inline" set="null" line="34"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<hit public="1" get="inline" set="null" line="38"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<pushTriangles public="1" get="inline" set="null" line="52"><f a="arrTri">
	<c path="Array"><c path="justGraphix.hit.HitTri"/></c>
	<c path="Array"><c path="justGraphix.hit.HitTri"/></c>
</f></pushTriangles>
		<new public="1" get="inline" set="null" line="19">
			<f a="ax:ay:bx:by:cx:cy:dx:dy:?preCalculated" v="::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.hit.HitThinLine" params="" file="src/justGraphix/hit/HitThinLine.hx">
		<implements path="justGraphix.hit.IhitObj"/>
		<epsilon expr="0.05">
			<x path="Float"/>
			<meta><m n=":value"><e>0.05</e></m></meta>
		</epsilon>
		<ax public="1"><x path="Float"/></ax>
		<bx public="1"><x path="Float"/></bx>
		<ay public="1"><x path="Float"/></ay>
		<by public="1"><x path="Float"/></by>
		<minX><x path="Float"/></minX>
		<maxX><x path="Float"/></maxX>
		<minY><x path="Float"/></minY>
		<maxY><x path="Float"/></maxY>
		<hit public="1" get="inline" set="null" line="26"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<setMinMax get="inline" set="null" line="36"><f a=""><x path="Void"/></f></setMinMax>
		<equal get="inline" set="null" line="53"><f a="p:q">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></equal>
		<isClose get="inline" set="null" line="59"><f a="min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClose>
		<rectBoundsHit public="1" get="inline" set="null" line="63"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<mean get="inline" set="null" line="67"><f a="p:q">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></mean>
		<onDiagonal get="inline" set="null" line="71"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></onDiagonal>
		<new public="1" get="inline" set="null" line="16"><f a="ax:ay:bx:by">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.image.algo.TriPoints_" params="" file="src/justGraphix/image/algo/TriPoints.hx" module="justGraphix.image.algo.TriPoints">
		<ax public="1"><x path="Float"/></ax>
		<ay public="1"><x path="Float"/></ay>
		<bx public="1"><x path="Float"/></bx>
		<by public="1"><x path="Float"/></by>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<new public="1" get="inline" set="null" line="19"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.hit.HitTri" params="" file="src/justGraphix/hit/HitTri.hx">
		<extends path="justGraphix.image.algo.TriPoints_"/>
		<implements path="justGraphix.hit.IhitObj"/>
		<preCalculated public="1"><x path="Bool"/></preCalculated>
		<s0><x path="Float"/></s0>
		<sx><x path="Float"/></sx>
		<sy><x path="Float"/></sy>
		<t0><x path="Float"/></t0>
		<tx><x path="Float"/></tx>
		<ty><x path="Float"/></ty>
		<A><x path="Float"/></A>
		<xIter3 public="1"><x path="justGraphix.iterMagix.IteratorRange"/></xIter3>
		<yIter3 public="1"><x path="justGraphix.iterMagix.IteratorRange"/></yIter3>
		<preCalculateValues public="1" get="inline" set="null" line="30"><f a=""><x path="Void"/></f></preCalculateValues>
		<rectBoundsHit public="1" get="inline" set="null" line="42"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<hit public="1" get="inline" set="null" line="46"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new public="1" get="inline" set="null" line="22">
			<f a="ax:ay:bx:by:cx:cy:?preCalculated" v="::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.hit.HitTriArray" params="" file="src/justGraphix/hit/HitTriArray.hx">
		<implements path="justGraphix.hit.IhitObj"/>
		<triArr public="1"><c path="Array"><c path="justGraphix.hit.HitTri"/></c></triArr>
		<xRange><x path="justGraphix.iterMagix.IteratorRange"/></xRange>
		<yRange><x path="justGraphix.iterMagix.IteratorRange"/></yRange>
		<boundsCalculated public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</boundsCalculated>
		<calculateBounds get="inline" set="null" line="17"><f a=""><x path="Void"/></f></calculateBounds>
		<rectBoundsHit public="1" get="inline" set="null" line="38"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></rectBoundsHit>
		<hit public="1" get="inline" set="null" line="43"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hit>
		<new public="1" get="inline" set="null" line="13"><f a="triArr">
	<c path="Array"><c path="justGraphix.hit.HitTri"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.hit.SampleData" params="" file="src/justGraphix/hit/HitTriScalar.hx" module="justGraphix.hit.HitTriScalar">
		<fractionTotal public="1"><x path="Float"/></fractionTotal>
		<averageX public="1"><x path="Float"/></averageX>
		<averageY public="1"><x path="Float"/></averageY>
		<notHit public="1"><x path="Bool"/></notHit>
		<new public="1" get="inline" set="null" line="17"><f a="fractionTotal:averageX:averageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.hit.HitTriScalar" params="" file="src/justGraphix/hit/HitTriScalar.hx">
		<from><icast><c path="justGraphix.hit.HitTri"/></icast></from>
		<this><c path="justGraphix.hit.HitTri"/></this>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.hit._HitTriScalar.HitTriScalar_Impl_" params="" file="src/justGraphix/hit/HitTriScalar.hx" private="1" module="justGraphix.hit.HitTriScalar" final="1">
	<centroidX public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidX>
	<get_centroidX get="inline" set="null" line="29" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></get_centroidX>
	<centroidY public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidY>
	<get_centroidY get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></get_centroidY>
	<medianABx public="1" set="method" line="36" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianABx>
	<medianBCx public="1" set="method" line="39" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianBCx>
	<medianCAx public="1" set="method" line="42" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianCAx>
	<medianABy public="1" set="method" line="45" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianABy>
	<medianBCy public="1" set="method" line="48" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianBCy>
	<medianCAy public="1" set="method" line="51" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianCAy>
	<scaled public="1" get="inline" set="null" line="55" static="1"><f a="this:scaleA:scaleB:scaleC">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.hit.HitTriScalar"/>
</f></scaled>
	<scalePoint get="inline" set="null" line="100" static="1"><f a="this:point:scale:centre">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scalePoint>
	<triangleSample public="1" get="inline" set="null" line="107" static="1"><f a="this:x:y">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.hit.SampleData"/>
</f></triangleSample>
	<squareSample public="1" get="inline" set="null" line="150" static="1"><f a="this:x:y">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.hit.SampleData"/>
</f></squareSample>
	<pentagonSample public="1" get="inline" set="null" line="200" static="1"><f a="this:x:y">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.hit.SampleData"/>
</f></pentagonSample>
	<barycentric public="1" get="accessor" set="null" static="1"><c path="justGraphix.image.algo.Barycentric"/></barycentric>
	<get_barycentric get="inline" set="null" line="259" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<c path="justGraphix.image.algo.Barycentric"/>
</f></get_barycentric>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.hit._HitTriScalar.HitTriScalar_Impl_" params="" file="src/justGraphix/hit/HitTriScalar.hx" private="1" module="justGraphix.hit.HitTriScalar" final="1">
		<centroidX public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidX>
		<get_centroidX get="inline" set="null" line="29" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></get_centroidX>
		<centroidY public="1" get="accessor" set="null" static="1"><x path="Float"/></centroidY>
		<get_centroidY get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></get_centroidY>
		<medianABx public="1" set="method" line="36" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianABx>
		<medianBCx public="1" set="method" line="39" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianBCx>
		<medianCAx public="1" set="method" line="42" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianCAx>
		<medianABy public="1" set="method" line="45" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianABy>
		<medianBCy public="1" set="method" line="48" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianBCy>
		<medianCAy public="1" set="method" line="51" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
</f></medianCAy>
		<scaled public="1" get="inline" set="null" line="55" static="1"><f a="this:scaleA:scaleB:scaleC">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.hit.HitTriScalar"/>
</f></scaled>
		<scalePoint get="inline" set="null" line="100" static="1"><f a="this:point:scale:centre">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scalePoint>
		<triangleSample public="1" get="inline" set="null" line="107" static="1"><f a="this:x:y">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.hit.SampleData"/>
</f></triangleSample>
		<squareSample public="1" get="inline" set="null" line="150" static="1"><f a="this:x:y">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.hit.SampleData"/>
</f></squareSample>
		<pentagonSample public="1" get="inline" set="null" line="200" static="1"><f a="this:x:y">
	<c path="justGraphix.hit.HitTri"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.hit.SampleData"/>
</f></pentagonSample>
		<barycentric public="1" get="accessor" set="null" static="1"><c path="justGraphix.image.algo.Barycentric"/></barycentric>
		<get_barycentric get="inline" set="null" line="259" static="1"><f a="this">
	<c path="justGraphix.hit.HitTri"/>
	<c path="justGraphix.image.algo.Barycentric"/>
</f></get_barycentric>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image._Endian.Endian_Fields_" params="" file="src/justGraphix/image/Endian.hx" private="1" module="justGraphix.image.Endian" final="1">
		<isLittleEndian final="1" public="1" set="null" expr="(function() -&gt;  @:implicitReturn return {
	var a8 = new js.lib.Uint8Array(4);
	var a32 = (new js.lib.Uint32Array(a8.buffer)[0] = 0xFFcc0011);
	return !(a8[0] == 0xff);
})()" line="5" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e><![CDATA[(function() ->  @:implicitReturn return {
	var a8 = new js.lib.Uint8Array(4);
	var a32 = (new js.lib.Uint32Array(a8.buffer)[0] = 0xFFcc0011);
	return !(a8[0] == 0xff);
})()]]></e></m></meta>
			<haxe_doc>little endian most desktops and laptops, seems that canvas context is ABGR so this is used to detect conversion</haxe_doc>
		</isLittleEndian>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.ImageStruct" params="" file="src/justGraphix/image/ImageStruct.hx">
		<defaultType public="1" expr="U32_ARR" line="22" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta><m n=":value"><e>U32_ARR</e></m></meta>
		</defaultType>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<image public="1"><x path="justGraphix.image.ImgMulti"><d/></x></image>
		<imageType public="1"><x path="justGraphix.image.ImageType"/></imageType>
		<transparent public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</transparent>
		<isLittle public="1"><x path="Bool"/></isLittle>
		<virtualX public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</virtualX>
		<virtualY public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</virtualY>
		<useVirtualPos public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useVirtualPos>
		<mask public="1"><x path="justGraphix.image.Pixelimage"/></mask>
		<useMask public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</useMask>
		<new public="1" set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This struct is the base of Pixelimage and Pixelshape abstracts</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="justGraphix.image.BytesInt" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img"><c path="haxe.io.Bytes"/></typedef>
	<typedef path="justGraphix.image.ArrInt" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img"><c path="Array"><x path="Int"/></c></typedef>
	<typedef path="justGraphix.image.U32Arr" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img"><x path="haxe.io.UInt32Array"/></typedef>
	<typedef path="justGraphix.image.U8Arr" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img"><x path="haxe.io.UInt8Array"/></typedef>
	<typedef path="justGraphix.image.VecInt" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img"><x path="haxe.ds.Vector"><x path="Int"/></x></typedef>
	<typedef path="justGraphix.image.StackInt" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img"><c path="haxe.ds.GenericStack"><x path="Int"/></c></typedef>
	<abstract path="justGraphix.image.ImageType" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.image._Img.ImageType_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
	<BYTES_INT public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="justGraphix.image.ImageType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BYTES_INT>
	<ARRAY_INT public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="justGraphix.image.ImageType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ARRAY_INT>
	<U32_ARR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="justGraphix.image.ImageType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</U32_ARR>
	<U8_ARR public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="justGraphix.image.ImageType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</U8_ARR>
	<VECTOR_INT public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="justGraphix.image.ImageType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VECTOR_INT>
	<STACK_INT public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="justGraphix.image.ImageType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</STACK_INT>
	<toString set="method" line="22" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.image._Img.ImageType_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
		<BYTES_INT public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BYTES_INT>
		<ARRAY_INT public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ARRAY_INT>
		<U32_ARR public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</U32_ARR>
		<U8_ARR public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</U8_ARR>
		<VECTOR_INT public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VECTOR_INT>
		<STACK_INT public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="justGraphix.image.ImageType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</STACK_INT>
		<toString set="method" line="22" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="justGraphix.image.RawImageData" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<RawBytesImg a="b"><t path="justGraphix.image.BytesInt"/></RawBytesImg>
		<RawArrImg a="a"><t path="justGraphix.image.ArrInt"/></RawArrImg>
		<RawU32Img a="u"><t path="justGraphix.image.U32Arr"/></RawU32Img>
		<RawU8Img a="u8"><t path="justGraphix.image.U8Arr"/></RawU8Img>
		<RawVecImg a="v"><t path="justGraphix.image.VecInt"/></RawVecImg>
		<RawStackImg a="s"><t path="justGraphix.image.StackInt"/></RawStackImg>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="justGraphix.image.Iimg" params="T" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img" interface="1">
		<count public="1"><x path="Int"/></count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<zero public="1" set="method"><f a="len">
	<x path="Int"/>
	<c path="justGraphix.image.Iimg.T"/>
</f></zero>
		<size public="1" set="method"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<c path="justGraphix.image.Iimg.T"/>
</f></size>
		<setRaw public="1" set="method"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
	</class>
	<class path="justGraphix.image.ArrIntImg" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<implements path="justGraphix.image.Iimg"><t path="justGraphix.image.ArrInt"/></implements>
		<data><t path="justGraphix.image.ArrInt"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="126"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<get public="1" get="inline" set="null" line="131"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<zero public="1" get="inline" set="null" line="135"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.image.ArrInt"/>
</f></zero>
		<size public="1" get="inline" set="null" line="140"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.image.ArrInt"/>
</f></size>
		<setRaw public="1" set="method" line="147"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method" line="169"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
		<new public="1" set="method" line="124"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.VecIntImg" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<implements path="justGraphix.image.Iimg"><t path="justGraphix.image.VecInt"/></implements>
		<data><t path="justGraphix.image.VecInt"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="182"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<get public="1" get="inline" set="null" line="187"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<zero public="1" get="inline" set="null" line="191"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.image.VecInt"/>
</f></zero>
		<size public="1" get="inline" set="null" line="196"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.image.VecInt"/>
</f></size>
		<setRaw public="1" set="method" line="203"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method" line="225"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
		<new public="1" set="method" line="180"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.BytesImg" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<implements path="justGraphix.image.Iimg"><t path="justGraphix.image.BytesInt"/></implements>
		<data><t path="justGraphix.image.BytesInt"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="237"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<get public="1" get="inline" set="null" line="242"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<zero public="1" get="inline" set="null" line="246"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.image.BytesInt"/>
</f></zero>
		<size public="1" get="inline" set="null" line="259"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.image.BytesInt"/>
</f></size>
		<setRaw public="1" set="method" line="266"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method" line="288"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
		<new public="1" set="method" line="235"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.U32ArrImg" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<implements path="justGraphix.image.Iimg"><t path="justGraphix.image.U32Arr"/></implements>
		<data><t path="justGraphix.image.U32Arr"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="300"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<get public="1" get="inline" set="null" line="305"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<zero public="1" get="inline" set="null" line="309"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.image.U32Arr"/>
</f></zero>
		<size public="1" get="inline" set="null" line="314"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.image.U32Arr"/>
</f></size>
		<setRaw public="1" set="method" line="321"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method" line="343"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
		<new public="1" set="method" line="298"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.U8ArrImg" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<implements path="justGraphix.image.Iimg"><t path="justGraphix.image.U8Arr"/></implements>
		<data><t path="justGraphix.image.U8Arr"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="355"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<get public="1" get="inline" set="null" line="364"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<zero public="1" get="inline" set="null" line="369"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.image.U8Arr"/>
</f></zero>
		<size public="1" get="inline" set="null" line="374"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.image.U8Arr"/>
</f></size>
		<setRaw public="1" set="method" line="381"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method" line="403"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
		<new public="1" set="method" line="353"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.StackIntImg" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<implements path="justGraphix.image.Iimg"><t path="justGraphix.image.StackInt"/></implements>
		<data><t path="justGraphix.image.StackInt"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="414"><f a="index:value">
	<x path="Int"/>
	<x path="UInt"/>
	<x path="UInt"/>
</f></set>
		<get public="1" get="inline" set="null" line="431"><f a="index">
	<x path="Int"/>
	<x path="UInt"/>
</f></get>
		<zero public="1" get="inline" set="null" line="442"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.image.StackInt"/>
</f></zero>
		<size public="1" get="inline" set="null" line="452"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.image.StackInt"/>
</f></size>
		<setRaw public="1" set="method" line="459"><f a="d">
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" set="method" line="483"><f a=""><e path="justGraphix.image.RawImageData"/></f></getRaw>
		<new public="1" set="method" line="413"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.Pic" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<img public="1"><x path="justGraphix.image.ImgMulti"><d/></x></img>
		<new public="1" get="inline" set="null" line="489"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.image.Picture" params="" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<from><icast><c path="justGraphix.image.Pic"/></icast></from>
		<this><c path="justGraphix.image.Pic"/></this>
		<to><icast><c path="justGraphix.image.Pic"/></icast></to>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.image._Img.Picture_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
	<_new public="1" get="inline" set="null" line="494" static="1">
		<f a="width:height:?imageType" v="::U32_ARR">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.ImageType"/>
			<x path="justGraphix.image.Picture"/>
		</f>
		<meta>
			<m n=":value"><e>{ imageType : U32_ARR }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<set public="1" get="inline" set="null" line="500" static="1">
		<f a="this:index:value">
			<c path="justGraphix.image.Pic"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="505" static="1">
		<f a="this:index">
			<c path="justGraphix.image.Pic"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<fromTo public="1" get="inline" set="null" line="509" static="1"><f a="a:b">
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
</f></fromTo>
	<toFrom public="1" get="inline" set="null" line="514" static="1"><f a="a:b">
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
</f></toFrom>
	<raw public="1" get="accessor" set="accessor" static="1"><e path="justGraphix.image.RawImageData"/></raw>
	<get_raw get="inline" set="null" line="520" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<e path="justGraphix.image.RawImageData"/>
</f></get_raw>
	<set_raw get="inline" set="null" line="524" static="1"><f a="this:d">
	<c path="justGraphix.image.Pic"/>
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></set_raw>
	<traceGrid public="1" get="inline" set="null" line="527" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<x path="Void"/>
</f></traceGrid>
	<imgToString public="1" get="inline" set="null" line="530" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<c path="String"/>
</f></imgToString>
	<imageTypeString public="1" get="inline" set="null" line="533" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<x path="Null"><x path="justGraphix.image.ImageType"/></x>
</f></imageTypeString>
	<position public="1" get="inline" set="null" line="537" static="1"><f a="this:px:py">
	<c path="justGraphix.image.Pic"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></position>
</class></impl>
	</abstract>
	<class path="justGraphix.image._Img.Picture_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
		<_new public="1" get="inline" set="null" line="494" static="1">
			<f a="width:height:?imageType" v="::U32_ARR">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.ImageType"/>
				<x path="justGraphix.image.Picture"/>
			</f>
			<meta>
				<m n=":value"><e>{ imageType : U32_ARR }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<set public="1" get="inline" set="null" line="500" static="1">
			<f a="this:index:value">
				<c path="justGraphix.image.Pic"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="505" static="1">
			<f a="this:index">
				<c path="justGraphix.image.Pic"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<fromTo public="1" get="inline" set="null" line="509" static="1"><f a="a:b">
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
</f></fromTo>
		<toFrom public="1" get="inline" set="null" line="514" static="1"><f a="a:b">
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
	<x path="justGraphix.image.Picture"/>
</f></toFrom>
		<raw public="1" get="accessor" set="accessor" static="1"><e path="justGraphix.image.RawImageData"/></raw>
		<get_raw get="inline" set="null" line="520" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<e path="justGraphix.image.RawImageData"/>
</f></get_raw>
		<set_raw get="inline" set="null" line="524" static="1"><f a="this:d">
	<c path="justGraphix.image.Pic"/>
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></set_raw>
		<traceGrid public="1" get="inline" set="null" line="527" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<x path="Void"/>
</f></traceGrid>
		<imgToString public="1" get="inline" set="null" line="530" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<c path="String"/>
</f></imgToString>
		<imageTypeString public="1" get="inline" set="null" line="533" static="1"><f a="this">
	<c path="justGraphix.image.Pic"/>
	<x path="Null"><x path="justGraphix.image.ImageType"/></x>
</f></imageTypeString>
		<position public="1" get="inline" set="null" line="537" static="1"><f a="this:px:py">
	<c path="justGraphix.image.Pic"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></position>
	</class>
	<abstract path="justGraphix.image.Img" params="T" file="src/justGraphix/image/Img.hx">
		<from><icast><x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.Img.T"/></x></icast></from>
		<this><x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.Img.T"/></x></this>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.image._Img.Img_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
	<_new public="1" get="inline" set="null" line="544" static="1">
		<f a="width:height:imageType">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.ImageType"/>
			<x path="justGraphix.image.Img"><c path="justGraphix.image.Img.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="549" static="1">
		<f a="this:index:value">
			<x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.Img.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="554" static="1">
		<f a="this:index">
			<x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.Img.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<fromTo public="1" params="T:S" get="inline" set="null" line="558" static="1"><f a="a:b">
	<x path="justGraphix.image.Img"><c path="fromTo.T"/></x>
	<x path="justGraphix.image.Img"><c path="fromTo.S"/></x>
	<x path="justGraphix.image.Img"><c path="fromTo.S"/></x>
</f></fromTo>
	<toFrom public="1" params="T:S" get="inline" set="null" line="563" static="1"><f a="a:b">
	<x path="justGraphix.image.Img"><c path="toFrom.T"/></x>
	<x path="justGraphix.image.Img"><c path="toFrom.S"/></x>
	<x path="justGraphix.image.Img"><c path="toFrom.T"/></x>
</f></toFrom>
</class></impl>
	</abstract>
	<class path="justGraphix.image._Img.Img_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
		<_new public="1" get="inline" set="null" line="544" static="1">
			<f a="width:height:imageType">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.ImageType"/>
				<x path="justGraphix.image.Img"><c path="justGraphix.image.Img.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="549" static="1">
			<f a="this:index:value">
				<x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.Img.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="554" static="1">
			<f a="this:index">
				<x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.Img.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<fromTo public="1" params="T:S" get="inline" set="null" line="558" static="1"><f a="a:b">
	<x path="justGraphix.image.Img"><c path="fromTo.T"/></x>
	<x path="justGraphix.image.Img"><c path="fromTo.S"/></x>
	<x path="justGraphix.image.Img"><c path="fromTo.S"/></x>
</f></fromTo>
		<toFrom public="1" params="T:S" get="inline" set="null" line="563" static="1"><f a="a:b">
	<x path="justGraphix.image.Img"><c path="toFrom.T"/></x>
	<x path="justGraphix.image.Img"><c path="toFrom.S"/></x>
	<x path="justGraphix.image.Img"><c path="toFrom.T"/></x>
</f></toFrom>
	</class>
	<abstract path="justGraphix.image.ImgMulti" params="T" file="src/justGraphix/image/Img.hx" module="justGraphix.image.Img">
		<this><c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c></this>
		<to>
			<icast field="toArrIntImg"><c path="justGraphix.image.ArrIntImg"/></icast>
			<icast field="toVecIntImg"><c path="justGraphix.image.VecIntImg"/></icast>
			<icast field="toBytesImg"><c path="justGraphix.image.BytesImg"/></icast>
			<icast field="toU32ArrImg"><c path="justGraphix.image.U32ArrImg"/></icast>
			<icast field="toU8ArrImg"><c path="justGraphix.image.U8ArrImg"/></icast>
			<icast field="toStackIntImg"><c path="justGraphix.image.StackIntImg"/></icast>
		</to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
			<m n=":multiType"/>
		</meta>
		<impl><class path="justGraphix.image._Img.ImgMulti_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
	<create public="1" get="inline" set="null" line="573" static="1">
		<f a="width:height:?imageType" v="::U32_ARR">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.ImageType"/>
			<x path="justGraphix.image.ImgMulti"><d/></x>
		</f>
		<meta><m n=":value"><e>{ imageType : U32_ARR }</e></m></meta>
	</create>
	<check public="1" get="inline" set="null" line="590" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Null"><x path="justGraphix.image.ImageType"/></x>
</f></check>
	<_new public="1" set="method" static="1">
		<f a="a">
			<c path="justGraphix.image.ImgMulti.T"/>
			<x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.ImgMulti.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toArrIntImg get="inline" set="null" line="611" static="1">
		<f a="t:?s" v=":null">
			<c path="justGraphix.image.Iimg"><t path="justGraphix.image.ArrInt"/></c>
			<t path="justGraphix.image.ArrInt"/>
			<c path="justGraphix.image.ArrIntImg"/>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":value"><e>{ s : null }</e></m>
			<m n=":to"/>
		</meta>
	</toArrIntImg>
	<toVecIntImg get="inline" set="null" line="617" static="1">
		<f a="t:?s" v=":null">
			<c path="justGraphix.image.Iimg"><t path="justGraphix.image.VecInt"/></c>
			<t path="justGraphix.image.VecInt"/>
			<c path="justGraphix.image.VecIntImg"/>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":value"><e>{ s : null }</e></m>
			<m n=":to"/>
		</meta>
	</toVecIntImg>
	<toBytesImg get="inline" set="null" line="623" static="1">
		<f a="t:?s" v=":null">
			<c path="justGraphix.image.Iimg"><t path="justGraphix.image.BytesInt"/></c>
			<t path="justGraphix.image.BytesInt"/>
			<c path="justGraphix.image.BytesImg"/>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":value"><e>{ s : null }</e></m>
			<m n=":to"/>
		</meta>
	</toBytesImg>
	<toU32ArrImg get="inline" set="null" line="629" static="1">
		<f a="t:?s" v=":null">
			<c path="justGraphix.image.Iimg"><t path="justGraphix.image.U32Arr"/></c>
			<t path="justGraphix.image.U32Arr"/>
			<c path="justGraphix.image.U32ArrImg"/>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":value"><e>{ s : null }</e></m>
			<m n=":to"/>
		</meta>
	</toU32ArrImg>
	<toU8ArrImg get="inline" set="null" line="635" static="1">
		<f a="t:?s" v=":null">
			<c path="justGraphix.image.Iimg"><t path="justGraphix.image.U8Arr"/></c>
			<t path="justGraphix.image.U8Arr"/>
			<c path="justGraphix.image.U8ArrImg"/>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":value"><e>{ s : null }</e></m>
			<m n=":to"/>
		</meta>
	</toU8ArrImg>
	<toStackIntImg get="inline" set="null" line="641" static="1">
		<f a="t:?s" v=":null">
			<c path="justGraphix.image.Iimg"><t path="justGraphix.image.StackInt"/></c>
			<t path="justGraphix.image.StackInt"/>
			<c path="justGraphix.image.StackIntImg"/>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":value"><e>{ s : null }</e></m>
			<m n=":to"/>
		</meta>
	</toStackIntImg>
	<arrInt public="1" get="inline" set="null" line="646" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.ArrInt"/></x>
</f></arrInt>
	<vecInt public="1" get="inline" set="null" line="652" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.VecInt"/></x>
</f></vecInt>
	<bytes public="1" get="inline" set="null" line="658" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.BytesInt"/></x>
</f></bytes>
	<u32arr public="1" get="inline" set="null" line="664" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.U32Arr"/></x>
</f></u32arr>
	<u8arr public="1" get="inline" set="null" line="670" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.U8Arr"/></x>
</f></u8arr>
	<stackInt public="1" get="inline" set="null" line="676" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.StackInt"/></x>
</f></stackInt>
	<set public="1" get="inline" set="null" line="683" static="1">
		<f a="this:index:value">
			<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="688" static="1">
		<f a="this:index">
			<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<setRaw public="1" get="inline" set="null" line="692" static="1"><f a="this:d">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
	<getRaw public="1" get="inline" set="null" line="696" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<e path="justGraphix.image.RawImageData"/>
</f></getRaw>
	<position public="1" get="inline" set="null" line="700" static="1"><f a="this:px:py">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></position>
	<toString public="1" get="inline" set="null" line="704" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<c path="String"/>
</f></toString>
	<hasNext public="1" get="inline" set="null" line="710" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="714" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Int"/>
</f></next>
	<resetCount public="1" get="inline" set="null" line="718" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Void"/>
</f></resetCount>
	<traceGrid public="1" get="inline" set="null" line="722" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Void"/>
</f></traceGrid>
	<fromTo public="1" params="T:S" get="inline" set="null" line="735" static="1"><f a="a:b">
	<x path="justGraphix.image.ImgMulti"><c path="fromTo.T"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="fromTo.S"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="fromTo.S"/></x>
</f></fromTo>
	<toFrom public="1" params="T:S" get="inline" set="null" line="740" static="1"><f a="a:b">
	<x path="justGraphix.image.ImgMulti"><c path="toFrom.T"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="toFrom.S"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="toFrom.T"/></x>
</f></toFrom>
</class></impl>
	</abstract>
	<class path="justGraphix.image._Img.ImgMulti_Impl_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1">
		<create public="1" get="inline" set="null" line="573" static="1">
			<f a="width:height:?imageType" v="::U32_ARR">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.ImageType"/>
				<x path="justGraphix.image.ImgMulti"><d/></x>
			</f>
			<meta><m n=":value"><e>{ imageType : U32_ARR }</e></m></meta>
		</create>
		<check public="1" get="inline" set="null" line="590" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Null"><x path="justGraphix.image.ImageType"/></x>
</f></check>
		<_new public="1" set="method" static="1">
			<f a="a">
				<c path="justGraphix.image.ImgMulti.T"/>
				<x path="justGraphix.image.ImgMulti"><c path="justGraphix.image.ImgMulti.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toArrIntImg get="inline" set="null" line="611" static="1">
			<f a="t:?s" v=":null">
				<c path="justGraphix.image.Iimg"><t path="justGraphix.image.ArrInt"/></c>
				<t path="justGraphix.image.ArrInt"/>
				<c path="justGraphix.image.ArrIntImg"/>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":value"><e>{ s : null }</e></m>
				<m n=":to"/>
			</meta>
		</toArrIntImg>
		<toVecIntImg get="inline" set="null" line="617" static="1">
			<f a="t:?s" v=":null">
				<c path="justGraphix.image.Iimg"><t path="justGraphix.image.VecInt"/></c>
				<t path="justGraphix.image.VecInt"/>
				<c path="justGraphix.image.VecIntImg"/>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":value"><e>{ s : null }</e></m>
				<m n=":to"/>
			</meta>
		</toVecIntImg>
		<toBytesImg get="inline" set="null" line="623" static="1">
			<f a="t:?s" v=":null">
				<c path="justGraphix.image.Iimg"><t path="justGraphix.image.BytesInt"/></c>
				<t path="justGraphix.image.BytesInt"/>
				<c path="justGraphix.image.BytesImg"/>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":value"><e>{ s : null }</e></m>
				<m n=":to"/>
			</meta>
		</toBytesImg>
		<toU32ArrImg get="inline" set="null" line="629" static="1">
			<f a="t:?s" v=":null">
				<c path="justGraphix.image.Iimg"><t path="justGraphix.image.U32Arr"/></c>
				<t path="justGraphix.image.U32Arr"/>
				<c path="justGraphix.image.U32ArrImg"/>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":value"><e>{ s : null }</e></m>
				<m n=":to"/>
			</meta>
		</toU32ArrImg>
		<toU8ArrImg get="inline" set="null" line="635" static="1">
			<f a="t:?s" v=":null">
				<c path="justGraphix.image.Iimg"><t path="justGraphix.image.U8Arr"/></c>
				<t path="justGraphix.image.U8Arr"/>
				<c path="justGraphix.image.U8ArrImg"/>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":value"><e>{ s : null }</e></m>
				<m n=":to"/>
			</meta>
		</toU8ArrImg>
		<toStackIntImg get="inline" set="null" line="641" static="1">
			<f a="t:?s" v=":null">
				<c path="justGraphix.image.Iimg"><t path="justGraphix.image.StackInt"/></c>
				<t path="justGraphix.image.StackInt"/>
				<c path="justGraphix.image.StackIntImg"/>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":value"><e>{ s : null }</e></m>
				<m n=":to"/>
			</meta>
		</toStackIntImg>
		<arrInt public="1" get="inline" set="null" line="646" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.ArrInt"/></x>
</f></arrInt>
		<vecInt public="1" get="inline" set="null" line="652" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.VecInt"/></x>
</f></vecInt>
		<bytes public="1" get="inline" set="null" line="658" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.BytesInt"/></x>
</f></bytes>
		<u32arr public="1" get="inline" set="null" line="664" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.U32Arr"/></x>
</f></u32arr>
		<u8arr public="1" get="inline" set="null" line="670" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.U8Arr"/></x>
</f></u8arr>
		<stackInt public="1" get="inline" set="null" line="676" static="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.ImgMulti"><t path="justGraphix.image.StackInt"/></x>
</f></stackInt>
		<set public="1" get="inline" set="null" line="683" static="1">
			<f a="this:index:value">
				<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="688" static="1">
			<f a="this:index">
				<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<setRaw public="1" get="inline" set="null" line="692" static="1"><f a="this:d">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></setRaw>
		<getRaw public="1" get="inline" set="null" line="696" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<e path="justGraphix.image.RawImageData"/>
</f></getRaw>
		<position public="1" get="inline" set="null" line="700" static="1"><f a="this:px:py">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></position>
		<toString public="1" get="inline" set="null" line="704" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<c path="String"/>
</f></toString>
		<hasNext public="1" get="inline" set="null" line="710" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="714" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Int"/>
</f></next>
		<resetCount public="1" get="inline" set="null" line="718" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Void"/>
</f></resetCount>
		<traceGrid public="1" get="inline" set="null" line="722" static="1"><f a="this">
	<c path="justGraphix.image.Iimg"><c path="justGraphix.image.ImgMulti.T"/></c>
	<x path="Void"/>
</f></traceGrid>
		<fromTo public="1" params="T:S" get="inline" set="null" line="735" static="1"><f a="a:b">
	<x path="justGraphix.image.ImgMulti"><c path="fromTo.T"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="fromTo.S"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="fromTo.S"/></x>
</f></fromTo>
		<toFrom public="1" params="T:S" get="inline" set="null" line="740" static="1"><f a="a:b">
	<x path="justGraphix.image.ImgMulti"><c path="toFrom.T"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="toFrom.S"/></x>
	<x path="justGraphix.image.ImgMulti"><c path="toFrom.T"/></x>
</f></toFrom>
	</class>
	<class path="justGraphix.image._Img.Img_Fields_" params="" file="src/justGraphix/image/Img.hx" private="1" module="justGraphix.image.Img" final="1"><rawTrace public="1" set="method" line="89" static="1"><f a="p">
	<x path="justGraphix.image.Picture"/>
	<x path="Void"/>
</f></rawTrace></class>
	<abstract path="justGraphix.image.Pixelimage" params="" file="src/justGraphix/image/Pixelimage.hx">
		<from><icast><c path="justGraphix.image.ImageStruct"/></icast></from>
		<this><c path="justGraphix.image.ImageStruct"/></this>
		<to><icast><c path="justGraphix.image.ImageStruct"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image._Pixelimage.Pixelimage_Impl_" params="" file="src/justGraphix/image/Pixelimage.hx" private="1" module="justGraphix.image.Pixelimage" final="1">
	<defaultType public="1" get="accessor" set="accessor" static="1">
		<x path="justGraphix.image.ImageType"/>
		<haxe_doc><![CDATA[defines the data type used for storing images

        BYTES_INT  - Bytes 
        ARRAY_INT  - Array<Int>
        U32_ARR    - UInt32Array
        VECTOR_INT - Vector<Int>

        saves to a static variable on ImageStruct 
        if not set it defaults to U32_ARR]]></haxe_doc>
	</defaultType>
	<get_defaultType public="1" get="inline" set="null" line="59" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.ImageType"/>
</f></get_defaultType>
	<set_defaultType public="1" get="inline" set="null" line="63" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.ImageType"/>
	<x path="justGraphix.image.ImageType"/>
</f></set_defaultType>
	<_new public="1" set="method" line="68" static="1">
		<f a="width:height:?imageType" v="::null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.ImageType"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta>
			<m n=":value"><e>{ imageType : null }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<image public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.image.ImgMulti"><d/></x>
		<haxe_doc>provides the internal image structure used
        unfortunately this is Dynamic but usually resolved at compile 
        the dynamic nature makes it not viable to set without compiler complaints
        but direct setting is a bad idea.</haxe_doc>
	</image>
	<get_image get="inline" set="null" line="88" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.ImgMulti"><d/></x>
</f></get_image>
	<imageTypeString public="1" get="inline" set="null" line="101" static="1">
		<f a="this">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Null"><x path="justGraphix.image.ImageType"/></x>
		</f>
		<haxe_doc>provides the ImageType being used</haxe_doc>
	</imageTypeString>
	<width public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>provides the image width</haxe_doc>
	</width>
	<get_width get="inline" set="null" line="111" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Int"/>
</f></get_width>
	<height public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>provides the image height</haxe_doc>
	</height>
	<get_height get="inline" set="null" line="119" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Int"/>
</f></get_height>
	<setRelativePosition public="1" set="method" line="125" static="1">
		<f a="this:x:y:?update" v=":::false">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ update : false }</e></m></meta>
		<haxe_doc>setting relative position provide a drawing offset, it must be positive
        update is no currentl use yet</haxe_doc>
	</setRelativePosition>
	<transparent public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<haxe_doc>transparent to false will allow setARGB to overwrite pixels, true will alpha blend them when new pixel is semi transparent</haxe_doc>
	</transparent>
	<get_transparent get="inline" set="null" line="142" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
</f></get_transparent>
	<set_transparent get="inline" set="null" line="144" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_transparent>
	<mask public="1" get="accessor" set="accessor" static="1">
		<x path="justGraphix.image.Pixelimage"/>
		<haxe_doc>used as a mask</haxe_doc>
	</mask>
	<get_mask get="inline" set="null" line="155" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></get_mask>
	<set_mask get="inline" set="null" line="157" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></set_mask>
	<hasMask public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<haxe_doc>if an image has a mask</haxe_doc>
	</hasMask>
	<set_hasMask get="inline" set="null" line="168" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_hasMask>
	<get_hasMask get="inline" set="null" line="180" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
</f></get_hasMask>
	<rectWindow public="1" get="accessor" set="accessor" static="1">
		<c path="justGraphix.image.algo.RectangleWindow"/>
		<haxe_doc>provides a RectangleWindow defining the current image from 0, 0.
        setting it can resize the window, currently x and y are assumed 0.</haxe_doc>
	</rectWindow>
	<get_rectWindow get="inline" set="null" line="188" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<c path="justGraphix.image.algo.RectangleWindow"/>
</f></get_rectWindow>
	<set_rectWindow get="inline" set="null" line="198" static="1">
		<f a="this:r">
			<c path="justGraphix.image.ImageStruct"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
		</f>
		<meta><m n=":access"><e>pixelImage.ImageStruct</e></m></meta>
	</set_rectWindow>
	<pos4 get="inline" set="null" line="222" static="1">
		<f a="this:x:y:?off" v=":::0">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":value"><e>{ off : 0 }</e></m></meta>
		<haxe_doc>this provides a location for a UIn8 access of a color channel</haxe_doc>
	</pos4>
	<position public="1" get="inline" set="null" line="227" static="1">
		<f a="this:x:y">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>provides the location of the pixel after considering any relative internal x,y offset</haxe_doc>
	</position>
	<view8 get="inline" set="null" line="237" static="1">
		<f a="this">
			<c path="justGraphix.image.ImageStruct"/>
			<c path="js.lib.Uint8Array"/>
		</f>
		<haxe_doc>Provides a view for single color channel access, not usually used</haxe_doc>
	</view8>
	<setPixel public="1" get="inline" set="null" line="281" static="1">
		<f a="this:x:y:color">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>setPixel is equivalent to setARGB, setting the colour of a pixel
        internal color order may differ.</haxe_doc>
	</setPixel>
	<zeroPixel public="1" get="inline" set="null" line="288" static="1">
		<f a="this:x:y">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>sets the pixel to 0 without any blend or mask applied</haxe_doc>
	</zeroPixel>
	<setARGB public="1" get="inline" set="null" line="296" static="1">
		<f a="this:x:y:color">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>The main way is set the pixel color at x, y
        applies an alpha blend if pixel is semi-transparent and if the pixelimage is transparent true</haxe_doc>
	</setARGB>
	<getPixel public="1" get="inline" set="null" line="306" static="1"><f a="this:x:y">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
	<getARGB public="1" get="inline" set="null" line="314" static="1">
		<f a="this:x:y">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.pixel.Pixel32"/>
		</f>
		<haxe_doc>returns the current pixel colour, since canvas context is ABGR on little endian this will correct
        from the internal value</haxe_doc>
	</getARGB>
	<set_argbPixel public="1" get="inline" set="null" line="323" static="1">
		<f a="this:a:r:g:b:location">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>allows setting all 4 colour channels with a location
        @:see position   to obtain the location</haxe_doc>
	</set_argbPixel>
	<argbToPixel public="1" get="inline" set="null" line="330" static="1">
		<f a="this:a:r:g:b:location">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>used more internally to set colours from algorithms does not apply alpha blend</haxe_doc>
	</argbToPixel>
	<channelBlend public="1" get="inline" set="null" line="338" static="1">
		<f a="this:a:r:g:b:location">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="justGraphix.pixel.PixelChannel"/>
			<x path="justGraphix.pixel.PixelChannel"/>
			<x path="justGraphix.pixel.PixelChannel"/>
			<x path="justGraphix.pixel.PixelChannel"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>used internally is set colours from algorithms only applies alpha blend
        @see setARGB</haxe_doc>
	</channelBlend>
	<colorBlend public="1" get="inline" set="null" line="348" static="1">
		<f a="this:color:location">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>used internally to set colours from algorithms only applies 
        @see setARGB</haxe_doc>
	</colorBlend>
	<getPixelString public="1" get="inline" set="null" line="357" static="1">
		<f a="this:x:y">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>mainly used for color debugging provides getARGB in hex string format</haxe_doc>
	</getPixelString>
	<simpleRect public="1" get="inline" set="null" line="362" static="1">
		<f a="this:x:y:w:h:color">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>provides a simple filled Rectangle</haxe_doc>
	</simpleRect>
	<clearRectWindow public="1" get="inline" set="null" line="391" static="1">
		<f a="this:rectangle">
			<c path="justGraphix.image.ImageStruct"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Void"/>
		</f>
		<haxe_doc>clears a rectangular section of the image ( setting to 0 )</haxe_doc>
	</clearRectWindow>
	<clearRect public="1" get="inline" set="null" line="398" static="1">
		<f a="this:x:y:w:h">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<haxe_doc>clears a rectangular section of the image.</haxe_doc>
	</clearRect>
	<putPixelImage public="1" get="inline" set="null" line="431" static="1">
		<f a="this:pixelImage:x:y:?useAvaliableMask:?forceClear" v="::::true:false">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
		<haxe_doc>used to draw one pixelimage on part of another, essentially it is a copy
        black transparent pixels are ignored.
        this is used also internally so that shapes can be composed with transparent false 
        useful for adding over and taking away parts of shapes before drawing on the main Pixelimage.</haxe_doc>
	</putPixelImage>
	<putPixelImageRect public="1" get="inline" set="null" line="452" static="1">
		<f a="this:pixelImage:x:y:rectLeft:rectTop:rectRight:rectBottom:?useAvaliableMask:?forceClear" v="::::::::true:false">
			<c path="justGraphix.image.ImageStruct"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
	</putPixelImageRect>
	<transferClone public="1" get="inline" set="null" line="470" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></transferClone>
	<transferIn public="1" get="inline" set="null" line="478" static="1"><f a="this:p">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Void"/>
</f></transferIn>
	<getBytes public="1" get="inline" set="null" line="485" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
	<fromBytes public="1" get="inline" set="null" line="501" static="1">
		<f a="this:bytes">
			<c path="justGraphix.image.ImageStruct"/>
			<c path="haxe.io.Bytes"/>
			<c path="justGraphix.image.ImageStruct"/>
		</f>
		<meta><m n=":access"><e>iterMagix.Img.BytesImg</e></m></meta>
	</fromBytes>
	<raw public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.RawImage"/></raw>
	<get_raw get="inline" set="null" line="516" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.RawImage"/>
</f></get_raw>
	<transform public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.TransformImage"/></transform>
	<get_transform get="inline" set="null" line="522" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.TransformImage"/>
</f></get_transform>
	<fillShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.FillShape"/></fillShape>
	<get_fillShape get="inline" set="null" line="528" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.FillShape"/>
</f></get_fillShape>
	<softShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.SoftShape"/></softShape>
	<get_softShape get="inline" set="null" line="534" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.SoftShape"/>
</f></get_softShape>
	<lineShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.LineShape"/></lineShape>
	<get_lineShape get="inline" set="null" line="540" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.LineShape"/>
</f></get_lineShape>
	<tileShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.TileShape"/></tileShape>
	<get_tileShape get="inline" set="null" line="546" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.TileShape"/>
</f></get_tileShape>
	<imageShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.ImageShape"/></imageShape>
	<get_imageShape get="inline" set="null" line="552" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.ImageShape"/>
</f></get_imageShape>
	<gradientShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.GradientShape"/></gradientShape>
	<get_gradientShape get="inline" set="null" line="558" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.GradientShape"/>
</f></get_gradientShape>
	<pattern public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.PatternShape"/></pattern>
	<get_pattern get="inline" set="null" line="564" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.PatternShape"/>
</f></get_pattern>
	<convolution public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.Convolution"/></convolution>
	<get_convolution get="inline" set="null" line="570" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.Convolution"/>
</f></get_convolution>
	<colorform public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.ColorformImage"/></colorform>
	<get_colorform get="inline" set="null" line="576" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.ColorformImage"/>
</f></get_colorform>
	<rectanglePad public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.RectanglePad"/></rectanglePad>
	<get_rectanglePad get="inline" set="null" line="582" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.RectanglePad"/>
</f></get_rectanglePad>
	<jsCanvas public="1" get="accessor" set="null" static="1"><x path="justGraphix.target.canvas_.JsCanvasContext"/></jsCanvas>
	<get_jsCanvas get="inline" set="null" line="589" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.target.canvas_.JsCanvasContext"/>
</f></get_jsCanvas>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.image._Pixelimage.Pixelimage_Impl_" params="" file="src/justGraphix/image/Pixelimage.hx" private="1" module="justGraphix.image.Pixelimage" final="1">
		<defaultType public="1" get="accessor" set="accessor" static="1">
			<x path="justGraphix.image.ImageType"/>
			<haxe_doc><![CDATA[defines the data type used for storing images

        BYTES_INT  - Bytes 
        ARRAY_INT  - Array<Int>
        U32_ARR    - UInt32Array
        VECTOR_INT - Vector<Int>

        saves to a static variable on ImageStruct 
        if not set it defaults to U32_ARR]]></haxe_doc>
		</defaultType>
		<get_defaultType public="1" get="inline" set="null" line="59" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.ImageType"/>
</f></get_defaultType>
		<set_defaultType public="1" get="inline" set="null" line="63" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.ImageType"/>
	<x path="justGraphix.image.ImageType"/>
</f></set_defaultType>
		<_new public="1" set="method" line="68" static="1">
			<f a="width:height:?imageType" v="::null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.ImageType"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":value"><e>{ imageType : null }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<image public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.image.ImgMulti"><d/></x>
			<haxe_doc>provides the internal image structure used
        unfortunately this is Dynamic but usually resolved at compile 
        the dynamic nature makes it not viable to set without compiler complaints
        but direct setting is a bad idea.</haxe_doc>
		</image>
		<get_image get="inline" set="null" line="88" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.ImgMulti"><d/></x>
</f></get_image>
		<imageTypeString public="1" get="inline" set="null" line="101" static="1">
			<f a="this">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Null"><x path="justGraphix.image.ImageType"/></x>
			</f>
			<haxe_doc>provides the ImageType being used</haxe_doc>
		</imageTypeString>
		<width public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>provides the image width</haxe_doc>
		</width>
		<get_width get="inline" set="null" line="111" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Int"/>
</f></get_width>
		<height public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>provides the image height</haxe_doc>
		</height>
		<get_height get="inline" set="null" line="119" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Int"/>
</f></get_height>
		<setRelativePosition public="1" set="method" line="125" static="1">
			<f a="this:x:y:?update" v=":::false">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ update : false }</e></m></meta>
			<haxe_doc>setting relative position provide a drawing offset, it must be positive
        update is no currentl use yet</haxe_doc>
		</setRelativePosition>
		<transparent public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<haxe_doc>transparent to false will allow setARGB to overwrite pixels, true will alpha blend them when new pixel is semi transparent</haxe_doc>
		</transparent>
		<get_transparent get="inline" set="null" line="142" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
</f></get_transparent>
		<set_transparent get="inline" set="null" line="144" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_transparent>
		<mask public="1" get="accessor" set="accessor" static="1">
			<x path="justGraphix.image.Pixelimage"/>
			<haxe_doc>used as a mask</haxe_doc>
		</mask>
		<get_mask get="inline" set="null" line="155" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></get_mask>
		<set_mask get="inline" set="null" line="157" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></set_mask>
		<hasMask public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<haxe_doc>if an image has a mask</haxe_doc>
		</hasMask>
		<set_hasMask get="inline" set="null" line="168" static="1"><f a="this:v">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_hasMask>
		<get_hasMask get="inline" set="null" line="180" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Bool"/>
</f></get_hasMask>
		<rectWindow public="1" get="accessor" set="accessor" static="1">
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<haxe_doc>provides a RectangleWindow defining the current image from 0, 0.
        setting it can resize the window, currently x and y are assumed 0.</haxe_doc>
		</rectWindow>
		<get_rectWindow get="inline" set="null" line="188" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<c path="justGraphix.image.algo.RectangleWindow"/>
</f></get_rectWindow>
		<set_rectWindow get="inline" set="null" line="198" static="1">
			<f a="this:r">
				<c path="justGraphix.image.ImageStruct"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
			</f>
			<meta><m n=":access"><e>pixelImage.ImageStruct</e></m></meta>
		</set_rectWindow>
		<pos4 get="inline" set="null" line="222" static="1">
			<f a="this:x:y:?off" v=":::0">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ off : 0 }</e></m></meta>
			<haxe_doc>this provides a location for a UIn8 access of a color channel</haxe_doc>
		</pos4>
		<position public="1" get="inline" set="null" line="227" static="1">
			<f a="this:x:y">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>provides the location of the pixel after considering any relative internal x,y offset</haxe_doc>
		</position>
		<view8 get="inline" set="null" line="237" static="1">
			<f a="this">
				<c path="justGraphix.image.ImageStruct"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Provides a view for single color channel access, not usually used</haxe_doc>
		</view8>
		<setPixel public="1" get="inline" set="null" line="281" static="1">
			<f a="this:x:y:color">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>setPixel is equivalent to setARGB, setting the colour of a pixel
        internal color order may differ.</haxe_doc>
		</setPixel>
		<zeroPixel public="1" get="inline" set="null" line="288" static="1">
			<f a="this:x:y">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>sets the pixel to 0 without any blend or mask applied</haxe_doc>
		</zeroPixel>
		<setARGB public="1" get="inline" set="null" line="296" static="1">
			<f a="this:x:y:color">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>The main way is set the pixel color at x, y
        applies an alpha blend if pixel is semi-transparent and if the pixelimage is transparent true</haxe_doc>
		</setARGB>
		<getPixel public="1" get="inline" set="null" line="306" static="1"><f a="this:x:y">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
		<getARGB public="1" get="inline" set="null" line="314" static="1">
			<f a="this:x:y">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.pixel.Pixel32"/>
			</f>
			<haxe_doc>returns the current pixel colour, since canvas context is ABGR on little endian this will correct
        from the internal value</haxe_doc>
		</getARGB>
		<set_argbPixel public="1" get="inline" set="null" line="323" static="1">
			<f a="this:a:r:g:b:location">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>allows setting all 4 colour channels with a location
        @:see position   to obtain the location</haxe_doc>
		</set_argbPixel>
		<argbToPixel public="1" get="inline" set="null" line="330" static="1">
			<f a="this:a:r:g:b:location">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>used more internally to set colours from algorithms does not apply alpha blend</haxe_doc>
		</argbToPixel>
		<channelBlend public="1" get="inline" set="null" line="338" static="1">
			<f a="this:a:r:g:b:location">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="justGraphix.pixel.PixelChannel"/>
				<x path="justGraphix.pixel.PixelChannel"/>
				<x path="justGraphix.pixel.PixelChannel"/>
				<x path="justGraphix.pixel.PixelChannel"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>used internally is set colours from algorithms only applies alpha blend
        @see setARGB</haxe_doc>
		</channelBlend>
		<colorBlend public="1" get="inline" set="null" line="348" static="1">
			<f a="this:color:location">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>used internally to set colours from algorithms only applies 
        @see setARGB</haxe_doc>
		</colorBlend>
		<getPixelString public="1" get="inline" set="null" line="357" static="1">
			<f a="this:x:y">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>mainly used for color debugging provides getARGB in hex string format</haxe_doc>
		</getPixelString>
		<simpleRect public="1" get="inline" set="null" line="362" static="1">
			<f a="this:x:y:w:h:color">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>provides a simple filled Rectangle</haxe_doc>
		</simpleRect>
		<clearRectWindow public="1" get="inline" set="null" line="391" static="1">
			<f a="this:rectangle">
				<c path="justGraphix.image.ImageStruct"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Void"/>
			</f>
			<haxe_doc>clears a rectangular section of the image ( setting to 0 )</haxe_doc>
		</clearRectWindow>
		<clearRect public="1" get="inline" set="null" line="398" static="1">
			<f a="this:x:y:w:h">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>clears a rectangular section of the image.</haxe_doc>
		</clearRect>
		<putPixelImage public="1" get="inline" set="null" line="431" static="1">
			<f a="this:pixelImage:x:y:?useAvaliableMask:?forceClear" v="::::true:false">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
			<haxe_doc>used to draw one pixelimage on part of another, essentially it is a copy
        black transparent pixels are ignored.
        this is used also internally so that shapes can be composed with transparent false 
        useful for adding over and taking away parts of shapes before drawing on the main Pixelimage.</haxe_doc>
		</putPixelImage>
		<putPixelImageRect public="1" get="inline" set="null" line="452" static="1">
			<f a="this:pixelImage:x:y:rectLeft:rectTop:rectRight:rectBottom:?useAvaliableMask:?forceClear" v="::::::::true:false">
				<c path="justGraphix.image.ImageStruct"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceClear : false, useAvaliableMask : true }</e></m></meta>
		</putPixelImageRect>
		<transferClone public="1" get="inline" set="null" line="470" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></transferClone>
		<transferIn public="1" get="inline" set="null" line="478" static="1"><f a="this:p">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Void"/>
</f></transferIn>
		<getBytes public="1" get="inline" set="null" line="485" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<fromBytes public="1" get="inline" set="null" line="501" static="1">
			<f a="this:bytes">
				<c path="justGraphix.image.ImageStruct"/>
				<c path="haxe.io.Bytes"/>
				<c path="justGraphix.image.ImageStruct"/>
			</f>
			<meta><m n=":access"><e>iterMagix.Img.BytesImg</e></m></meta>
		</fromBytes>
		<raw public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.RawImage"/></raw>
		<get_raw get="inline" set="null" line="516" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.RawImage"/>
</f></get_raw>
		<transform public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.TransformImage"/></transform>
		<get_transform get="inline" set="null" line="522" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.TransformImage"/>
</f></get_transform>
		<fillShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.FillShape"/></fillShape>
		<get_fillShape get="inline" set="null" line="528" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.FillShape"/>
</f></get_fillShape>
		<softShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.SoftShape"/></softShape>
		<get_softShape get="inline" set="null" line="534" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.SoftShape"/>
</f></get_softShape>
		<lineShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.LineShape"/></lineShape>
		<get_lineShape get="inline" set="null" line="540" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.LineShape"/>
</f></get_lineShape>
		<tileShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.TileShape"/></tileShape>
		<get_tileShape get="inline" set="null" line="546" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.TileShape"/>
</f></get_tileShape>
		<imageShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.ImageShape"/></imageShape>
		<get_imageShape get="inline" set="null" line="552" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.ImageShape"/>
</f></get_imageShape>
		<gradientShape public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.GradientShape"/></gradientShape>
		<get_gradientShape get="inline" set="null" line="558" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.GradientShape"/>
</f></get_gradientShape>
		<pattern public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.PatternShape"/></pattern>
		<get_pattern get="inline" set="null" line="564" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.PatternShape"/>
</f></get_pattern>
		<convolution public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.Convolution"/></convolution>
		<get_convolution get="inline" set="null" line="570" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.Convolution"/>
</f></get_convolution>
		<colorform public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.ColorformImage"/></colorform>
		<get_colorform get="inline" set="null" line="576" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.ColorformImage"/>
</f></get_colorform>
		<rectanglePad public="1" get="accessor" set="null" static="1"><x path="justGraphix.image.imageAbstracts.RectanglePad"/></rectanglePad>
		<get_rectanglePad get="inline" set="null" line="582" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.image.imageAbstracts.RectanglePad"/>
</f></get_rectanglePad>
		<jsCanvas public="1" get="accessor" set="null" static="1"><x path="justGraphix.target.canvas_.JsCanvasContext"/></jsCanvas>
		<get_jsCanvas get="inline" set="null" line="589" static="1"><f a="this">
	<c path="justGraphix.image.ImageStruct"/>
	<x path="justGraphix.target.canvas_.JsCanvasContext"/>
</f></get_jsCanvas>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.ByteAccessor" params="" file="src/justGraphix/image/Pixelimage.hx" module="justGraphix.image.Pixelimage" interface="1"><data public="1"><c path="haxe.io.Bytes"/></data></class>
	<class path="justGraphix.image.PixelsTransform" params="" file="src/justGraphix/image/PixelsTransform.hx">
		<_pixelsTransform public="1" expr="pixelsTransform">
			<f a="imageTarget:imageSource:transformFunc:xTarget:yTarget:xSource:ySource:w:h">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<f a="colorTarget:colorSource">
					<x path="justGraphix.pixel.Pixel32"/>
					<x path="justGraphix.pixel.Pixel32"/>
					<x path="justGraphix.pixel.Pixel28"/>
				</f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>pixelsTransform</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">pixelsTransform</font> module level field]]></haxe_doc>
		</_pixelsTransform>
		<new public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image._PixelsTransform.PixelsTransform_Fields_" params="" file="src/justGraphix/image/PixelsTransform.hx" private="1" module="justGraphix.image.PixelsTransform" final="1">
		<pixelsTransform public="1" set="method" line="10" static="1"><f a="imageTarget:imageSource:transformFunc:xTarget:yTarget:xSource:ySource:w:h">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
	<f a="colorTarget:colorSource">
		<x path="justGraphix.pixel.Pixel32"/>
		<x path="justGraphix.pixel.Pixel32"/>
		<x path="justGraphix.pixel.Pixel28"/>
	</f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></pixelsTransform>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo._ArrowPixel.ArrowPixel_Fields_" params="" file="src/justGraphix/image/algo/ArrowPixel.hx" private="1" module="justGraphix.image.algo.ArrowPixel" final="1">
		<fillLineArrow public="1" get="inline" set="null" line="14" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</fillLineArrow>
		<fillSoftLineArrow public="1" get="inline" set="null" line="65" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::false:false:40.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fillSoftLineArrow>
		<gradThickLineArrow public="1" get="inline" set="null" line="120" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</gradThickLineArrow>
		<fillLineArrowBoth public="1" get="inline" set="null" line="170" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?hasHit" v=":::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillLineArrowBoth>
		<fillSoftLineArrowBoth public="1" get="inline" set="null" line="236" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color:?soft:?hasHit" v=":::::::40.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40. }</e></m></meta>
		</fillSoftLineArrowBoth>
		<gradThickLineArrowBoth public="1" get="inline" set="null" line="302" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:color1:color2:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</gradThickLineArrowBoth>
		<fillLineFixedArrow public="1" get="inline" set="null" line="372" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</fillLineFixedArrow>
		<fillSoftLineFixedArrow public="1" get="inline" set="null" line="434" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::::false:false:40.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fillSoftLineFixedArrow>
		<gradThickLineFixedArrow public="1" get="inline" set="null" line="491" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, reverseFlare : false, flare : false }</e></m></meta>
		</gradThickLineFixedArrow>
		<fillLineFixedArrowBoth public="1" get="inline" set="null" line="551" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?hasHit" v=":::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillLineFixedArrowBoth>
		<fillSoftLineFixedArrowBoth public="1" get="inline" set="null" line="628" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?soft:?hasHit" v=":::::::::40.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, soft : 40. }</e></m></meta>
		</fillSoftLineFixedArrowBoth>
		<gradThickLineFixedArrowBoth public="1" get="inline" set="null" line="703" static="1">
			<f a="pixelImage:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</gradThickLineFixedArrowBoth>
	</class>
	<class path="justGraphix.image.algo.BarycentricCoordinates" params="" file="src/justGraphix/image/algo/Barycentric.hx" module="justGraphix.image.algo.Barycentric">
		<ratioA public="1"><x path="Float"/></ratioA>
		<ratioB public="1"><x path="Float"/></ratioB>
		<ratioC public="1"><x path="Float"/></ratioC>
		<new public="1" get="inline" set="null" line="13"><f a="ratioA:ratioB:ratioC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.image.algo.BaryCoordinates" params="" file="src/justGraphix/image/algo/Barycentric.hx" module="justGraphix.image.algo.Barycentric">
		<from><icast><c path="justGraphix.image.algo.BarycentricCoordinates"/></icast></from>
		<this><c path="justGraphix.image.algo.BarycentricCoordinates"/></this>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.image.algo._Barycentric.BaryCoordinates_Impl_" params="" file="src/justGraphix/image/algo/Barycentric.hx" private="1" module="justGraphix.image.algo.Barycentric" final="1">
	<_new public="1" get="inline" set="null" line="22" static="1">
		<f a="bary">
			<c path="justGraphix.image.algo.BarycentricCoordinates"/>
			<x path="justGraphix.image.algo.BaryCoordinates"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<inTriangle public="1" get="inline" set="null" line="27" static="1"><f a="this">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
</f></inTriangle>
	<min public="1" get="accessor" set="null" static="1"><x path="Float"/></min>
	<get_min get="inline" set="null" line="32" static="1"><f a="this">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_min>
	<max public="1" get="accessor" set="null" static="1"><x path="Float"/></max>
	<get_max get="inline" set="null" line="38" static="1"><f a="this">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_max>
	<isSoft public="1" get="inline" set="null" line="43" static="1"><f a="this:softAB:softBC:softCA">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></isSoft>
</class></impl>
	</abstract>
	<class path="justGraphix.image.algo._Barycentric.BaryCoordinates_Impl_" params="" file="src/justGraphix/image/algo/Barycentric.hx" private="1" module="justGraphix.image.algo.Barycentric" final="1">
		<_new public="1" get="inline" set="null" line="22" static="1">
			<f a="bary">
				<c path="justGraphix.image.algo.BarycentricCoordinates"/>
				<x path="justGraphix.image.algo.BaryCoordinates"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<inTriangle public="1" get="inline" set="null" line="27" static="1"><f a="this">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
</f></inTriangle>
		<min public="1" get="accessor" set="null" static="1"><x path="Float"/></min>
		<get_min get="inline" set="null" line="32" static="1"><f a="this">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_min>
		<max public="1" get="accessor" set="null" static="1"><x path="Float"/></max>
		<get_max get="inline" set="null" line="38" static="1"><f a="this">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Float"/>
</f></get_max>
		<isSoft public="1" get="inline" set="null" line="43" static="1"><f a="this:softAB:softBC:softCA">
	<c path="justGraphix.image.algo.BarycentricCoordinates"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></isSoft>
	</class>
	<class path="justGraphix.image.algo.Barycentric" params="" file="src/justGraphix/image/algo/Barycentric.hx">
		<ax public="1"><x path="Float"/></ax>
		<ay public="1"><x path="Float"/></ay>
		<bx public="1"><x path="Float"/></bx>
		<by public="1"><x path="Float"/></by>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<preCalculated public="1"><x path="Bool"/></preCalculated>
		<xIter3 public="1"><x path="justGraphix.iterMagix.IteratorRange"/></xIter3>
		<yIter3 public="1"><x path="justGraphix.iterMagix.IteratorRange"/></yIter3>
		<bcx><x path="Float"/></bcx>
		<bcy><x path="Float"/></bcy>
		<acx><x path="Float"/></acx>
		<acy><x path="Float"/></acy>
		<dot11><x path="Float"/></dot11>
		<dot12><x path="Float"/></dot12>
		<dot22><x path="Float"/></dot22>
		<denom1><x path="Float"/></denom1>
		<preCalculateValues public="1" get="inline" set="null" line="101"><f a=""><x path="Void"/></f></preCalculateValues>
		<getInsideRatios public="1" get="inline" set="null" line="115"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.image.algo.BaryCoordinates"/>
</f></getInsideRatios>
		<getRatios public="1" get="inline" set="null" line="128"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.image.algo.BaryCoordinates"/>
</f></getRatios>
		<centroidX public="1" get="accessor" set="null"><x path="Float"/></centroidX>
		<get_centroidX get="inline" set="null" line="139"><f a=""><x path="Float"/></f></get_centroidX>
		<centroidY public="1" get="accessor" set="null"><x path="Float"/></centroidY>
		<get_centroidY get="inline" set="null" line="143"><f a=""><x path="Float"/></f></get_centroidY>
		<medianABx public="1" get="inline" set="null" line="147"><f a=""><x path="Float"/></f></medianABx>
		<medianBCx public="1" get="inline" set="null" line="151"><f a=""><x path="Float"/></f></medianBCx>
		<medianCAx public="1" get="inline" set="null" line="155"><f a=""><x path="Float"/></f></medianCAx>
		<medianABy public="1" get="inline" set="null" line="159"><f a=""><x path="Float"/></f></medianABy>
		<medianBCy public="1" get="inline" set="null" line="163"><f a=""><x path="Float"/></f></medianBCy>
		<medianCAy public="1" get="inline" set="null" line="167"><f a=""><x path="Float"/></f></medianCAy>
		<scaled public="1" get="inline" set="null" line="171"><f a="scaleA:scaleB:scaleC">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.image.algo.Barycentric"/>
</f></scaled>
		<scalePoint get="inline" set="null" line="216"><f a="point:scale:centre">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></scalePoint>
		<new public="1" get="inline" set="null" line="88">
			<f a="ax:ay:bx:by:cx:cy:?preCalculated" v="::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.image.algo.RectangleWindow" params="" file="src/justGraphix/image/algo/GeomPix.hx" module="justGraphix.image.algo.GeomPix">
		<minMax public="1" get="inline" set="null" line="21" static="1"><f a="x:y:maxX:maxY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="justGraphix.image.algo.RectangleWindow"/>
</f></minMax>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<new public="1" get="inline" set="null" line="14"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.image.algo.GeomPix" params="" file="src/justGraphix/image/algo/GeomPix.hx">
		<_smootherStep public="1" expr="smootherStep">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>smootherStep</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">smoothStep</font> module level field]]></haxe_doc>
		</_smootherStep>
		<_lerp public="1" expr="lerp">
			<f a="a:b:t">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>lerp</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">lerp</font> module level field]]></haxe_doc>
		</_lerp>
		<_lerp4Colors public="1" expr="lerp4Colors">
			<f a="colorhiA:colorhiB:colorloC:colorloD:u:v:smooth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>lerp4Colors</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">lerp4Colors</font> module level field
       @param smooth defaults to true]]></haxe_doc>
		</_lerp4Colors>
		<_cross2d public="1" expr="cross2d">
			<f a="ax:ay:bx:by">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>cross2d</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">cross2d</font> module level field]]></haxe_doc>
		</_cross2d>
		<_dot public="1" expr="dot">
			<f a="ax:ay:bx:by">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>dot</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">dot</font> module level field]]></haxe_doc>
		</_dot>
		<_dotSame public="1" expr="dotSame">
			<f a="ax:ay">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>dotSame</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">dotSame</font> module level field]]></haxe_doc>
		</_dotSame>
		<_distanceSquarePointToSegment public="1" expr="distanceSquarePointToSegment">
			<f a="x:y:x1:y1:x2:y2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>distanceSquarePointToSegment</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">distanceSquarePointToSegment</font> module level field]]></haxe_doc>
		</_distanceSquarePointToSegment>
		<_rotX public="1" expr="rotX">
			<f a="x:y:sin:cos">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rotX</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotX</font> module level field]]></haxe_doc>
		</_rotX>
		<_rotY public="1" expr="rotY">
			<f a="x:y:sin:cos">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>rotY</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotY</font> module level field]]></haxe_doc>
		</_rotY>
		<new public="1" set="method" line="97">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._GeomPix.GeomPix_Fields_" params="" file="src/justGraphix/image/algo/GeomPix.hx" private="1" module="justGraphix.image.algo.GeomPix" final="1">
		<smootherStep public="1" get="inline" set="null" line="27" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></smootherStep>
		<lerp public="1" get="inline" set="null" line="32" static="1"><f a="a:b:t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></lerp>
		<lerp4Colors public="1" get="inline" set="null" line="37" static="1">
			<f a="colorhiA:colorhiB:colorloC:colorloD:u:v:?smooth" v="::::::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</lerp4Colors>
		<lerp2Colors public="1" get="inline" set="null" line="44" static="1">
			<f a="colA:colB:t:?smooth" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</lerp2Colors>
		<cross2d public="1" get="inline" set="null" line="64" static="1"><f a="ax:ay:bx:by">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cross2d>
		<dot public="1" get="inline" set="null" line="67" static="1"><f a="ax:ay:bx:by">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dot>
		<dotSame public="1" get="inline" set="null" line="70" static="1"><f a="ax:ay">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dotSame>
		<distanceSquarePointToSegment public="1" get="inline" set="null" line="76" static="1"><f a="x:y:x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distanceSquarePointToSegment>
		<rotX public="1" get="inline" set="null" line="89" static="1"><f a="x:y:sin:cos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rotX>
		<rotY public="1" get="inline" set="null" line="93" static="1"><f a="x:y:sin:cos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></rotY>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo.LinePixel" params="" file="src/justGraphix/image/algo/LinePixel.hx">
		<_rotateLine public="1" expr="rotateLine">
			<f a="pixelImage:px:py:thick:h:theta:color:hasHit:debugCorners">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>rotateLine</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_rotateLine>
		<_rotateTileLine public="1" expr="rotateTileLine">
			<f a="pixelImage:px:py:thick:h:theta:tileImage:hasHit:?debugCorners">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>rotateTileLine</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateTileLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_rotateTileLine>
		<_rotateGradLine public="1" expr="rotateGradLine">
			<f a="pixelImage:px:py:thick:h:theta:colorA:colorB:colorC:colorD:hasHit:?debugCorners">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>rotateGradLine</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_rotateGradLine>
		<new public="1" set="method" line="545">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._LinePixel.LinePixel_Fields_" params="" file="src/justGraphix/image/algo/LinePixel.hx" private="1" module="justGraphix.image.algo.LinePixel" final="1">
		<rotateLine public="1" get="inline" set="null" line="16" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?hasHit:?debugCorners" v=":::::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		</rotateLine>
		<rotateSoftLine public="1" get="inline" set="null" line="70" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40.:true:true:true:true:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40. }</e></m></meta>
		</rotateSoftLine>
		<rotateSoftLineLuxury public="1" get="inline" set="null" line="124" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40.:true:true:true:true:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40. }</e></m></meta>
		</rotateSoftLineLuxury>
		<rotateSoftLinePartial public="1" get="inline" set="null" line="178" static="1">
			<f a="pixelImage:px:py:thick:h:theta:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit:?debugCorners" v=":::::::10.:true:true:true:true:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10. }</e></m></meta>
		</rotateSoftLinePartial>
		<rotateLineFlare public="1" get="inline" set="null" line="227" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rotateLineFlare>
		<rotateSoftLineFlare public="1" get="inline" set="null" line="275" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit" v="::::::::10.:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10. }</e></m></meta>
		</rotateSoftLineFlare>
		<rotateSoftLineFlarePartial public="1" get="inline" set="null" line="323" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit" v="::::::::10.:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10. }</e></m></meta>
		</rotateSoftLineFlarePartial>
		<rotateTileLine public="1" get="inline" set="null" line="368" static="1">
			<f a="pixelImage:px:py:thick:h:theta:tileImage:?hasHit:?debugCorners" v=":::::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		</rotateTileLine>
		<rotateTileLineFlare public="1" get="inline" set="null" line="417" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:tileImage:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rotateTileLineFlare>
		<rotateGradLine public="1" get="inline" set="null" line="462" static="1">
			<f a="pixelImage:px:py:thick:h:theta:colorA:colorB:colorC:colorD:?hasHit:?debugCorners" v="::::::::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		</rotateGradLine>
		<rotateGradLineFlare public="1" get="inline" set="null" line="512" static="1">
			<f a="pixelImage:px:py:thick1:thick2:h:theta:colorA:colorB:colorC:colorD:?hasHit" v=":::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rotateGradLineFlare>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo.PentagonSampler" params="" file="src/justGraphix/image/algo/PentagonSampler.hx">
		<x0 public="1" get="accessor" set="null" static="1"><x path="Float"/></x0>
		<get_x0 public="1" get="inline" set="null" line="5" static="1"><f a=""><x path="Float"/></f></get_x0>
		<x1 public="1" get="accessor" set="null" static="1"><x path="Float"/></x1>
		<get_x1 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_x1>
		<x2 public="1" get="accessor" set="null" static="1"><x path="Float"/></x2>
		<get_x2 public="1" get="inline" set="null" line="13" static="1"><f a=""><x path="Float"/></f></get_x2>
		<x3 public="1" get="accessor" set="null" static="1"><x path="Float"/></x3>
		<get_x3 public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_x3>
		<x4 public="1" get="accessor" set="null" static="1"><x path="Float"/></x4>
		<get_x4 public="1" get="inline" set="null" line="21" static="1"><f a=""><x path="Float"/></f></get_x4>
		<y0 public="1" get="accessor" set="null" static="1"><x path="Float"/></y0>
		<get_y0 public="1" get="inline" set="null" line="25" static="1"><f a=""><x path="Float"/></f></get_y0>
		<y1 public="1" get="accessor" set="null" static="1"><x path="Float"/></y1>
		<get_y1 public="1" get="inline" set="null" line="29" static="1"><f a=""><x path="Float"/></f></get_y1>
		<y2 public="1" get="accessor" set="null" static="1"><x path="Float"/></y2>
		<get_y2 public="1" get="inline" set="null" line="33" static="1"><f a=""><x path="Float"/></f></get_y2>
		<y3 public="1" get="accessor" set="null" static="1"><x path="Float"/></y3>
		<get_y3 public="1" get="inline" set="null" line="37" static="1"><f a=""><x path="Float"/></f></get_y3>
		<y4 public="1" get="accessor" set="null" static="1"><x path="Float"/></y4>
		<get_y4 public="1" get="inline" set="null" line="41" static="1"><f a=""><x path="Float"/></f></get_y4>
		<getXs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getXs>
		<getYs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getYs>
	</class>
	<class path="justGraphix.image.algo.PolyPixel" params="" file="src/justGraphix/image/algo/PolyPixel.hx">
		<_fillPolygonBuild public="1" expr="fillPolygonBuild">
			<f a="pixelimage:cx:cy:rx:ry:color:?phi:?sides:cornerUp">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillPolygonBuild</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillPolygonBuild</font> module level field]]></haxe_doc>
		</_fillPolygonBuild>
		<_tilePolygonBuild public="1" expr="tilePolygonBuild">
			<f a="pixelimage:cx:cy:rx:ry:tileImage:?phi:?sides:cornerUp">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>tilePolygonBuild</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">tilePolygonBuild</font> module level field]]></haxe_doc>
		</_tilePolygonBuild>
		<_fillRadialPolyBuild public="1" expr="fillRadialPolyBuild">
			<f a="pixelimage:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:cornerUp">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillRadialPolyBuild</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillRadialPolyBuild</font> module level field]]></haxe_doc>
		</_fillRadialPolyBuild>
		<new public="1" set="method" line="250">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._PolyPixel.PolyPixel_Fields_" params="" file="src/justGraphix/image/algo/PolyPixel.hx" private="1" module="justGraphix.image.algo.PolyPixel" final="1">
		<fillPolygonBuild public="1" get="inline" set="null" line="13" static="1">
			<f a="pixelimage:cx:cy:rx:ry:color:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		</fillPolygonBuild>
		<softFillPolygonBuild public="1" get="inline" set="null" line="73" static="1">
			<f a="pixelimage:cx:cy:rx:ry:color:?phi:?sides:?softC:?cornerUp" v="::::::0.:36:10:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, softC : 10, sides : 36, phi : 0. }</e></m></meta>
		</softFillPolygonBuild>
		<tilePolygonBuild public="1" get="inline" set="null" line="132" static="1">
			<f a="pixelimage:cx:cy:rx:ry:tileImage:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		</tilePolygonBuild>
		<fillRadialPolyBuild public="1" get="inline" set="null" line="192" static="1">
			<f a="pixelimage:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:?cornerUp" v=":::::::0:0:0.:36:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0., gy : 0, gx : 0 }</e></m></meta>
		</fillRadialPolyBuild>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo.QuadPixel" params="" file="src/justGraphix/image/algo/QuadPixel.hx">
		<_fillQuadrilateral public="1" expr="fillQuadrilateral">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:hasHit">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>fillQuadrilateral</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillQuadrilateral>
		<_tileQuadrilateral public="1" expr="tileQuadrilateral">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:tileImage:hasHit">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>tileQuadrilateral</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_tileQuadrilateral>
		<_fillGradQuadrilateral public="1" expr="fillGradQuadrilateral">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:hasHit">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>fillGradQuadrilateral</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">rotateGradLine</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillGradQuadrilateral>
		<new public="1" set="method" line="312">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._QuadPixel.QuadPixel_Fields_" params="" file="src/justGraphix/image/algo/QuadPixel.hx" private="1" module="justGraphix.image.algo.QuadPixel" final="1">
		<fillQuadrilateral public="1" get="inline" set="null" line="19" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillQuadrilateral>
		<fillSoftQuadrilateral public="1" get="inline" set="null" line="49" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadrilateral>
		<fillSoftQuadrilateralFudge public="1" get="inline" set="null" line="73" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadrilateralFudge>
		<fillSoftQuadrilateralQuarter public="1" get="inline" set="null" line="98" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</fillSoftQuadrilateralQuarter>
		<tileQuadrilateral public="1" get="inline" set="null" line="123" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:tileImage:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileQuadrilateral>
		<fillGradQuadrilateral public="1" get="inline" set="null" line="142" static="1">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:?hasHit" v=":::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillGradQuadrilateral>
		<imgQuadrilateralFudge public="1" get="inline" set="null" line="162" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</imgQuadrilateralFudge>
		<imgQuadrilateral public="1" get="inline" set="null" line="184" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?au:?av:?bu:?bv:?cu:?cv:?du:?dv:?hasHit" v=":::::::::::0.:0.:1.:0.:1.:1.:0.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, dv : 1., du : 0., cv : 1., cu : 1., bv : 0., bu : 1., av : 0., au : 0. }</e></m></meta>
		</imgQuadrilateral>
		<imageNineSlice public="1" get="inline" set="null" line="207" static="1">
			<f a="pixelImage:texture:win:x:y:wid:hi:left:top:fat:tall:widNew:hiNew:leftNew:topNew:fatNew:tallNew:?hasHit" v=":::::::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</imageNineSlice>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo.LineInfo" params="" file="src/justGraphix/image/algo/QuadPoints.hx" module="justGraphix.image.algo.QuadPoints">
		<px public="1"><x path="Float"/></px>
		<py public="1"><x path="Float"/></py>
		<thick public="1"><x path="Float"/></thick>
		<long public="1"><x path="Float"/></long>
		<theta public="1"><x path="Float"/></theta>
		<new public="1" get="inline" set="null" line="15"><f a="px:py:thick:long:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="justGraphix.image.algo.LineXYinfo" params="" file="src/justGraphix/image/algo/QuadPoints.hx" module="justGraphix.image.algo.QuadPoints">
		<px public="1"><x path="Float"/></px>
		<py public="1"><x path="Float"/></py>
		<qx public="1"><x path="Float"/></qx>
		<qy public="1"><x path="Float"/></qy>
		<thick public="1"><x path="Float"/></thick>
		<new public="1" get="inline" set="null" line="31"><f a="px:py:qx:qy:thick">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<abstract path="justGraphix.image.algo.QuadPoints" params="" file="src/justGraphix/image/algo/QuadPoints.hx">
		<from>
			<icast><c path="justGraphix.image.algo.QuadPoints_"/></icast>
			<icast field="fromLineXYinfo"><c path="justGraphix.image.algo.LineXYinfo"/></icast>
			<icast field="fromLineInfo"><c path="justGraphix.image.algo.LineInfo"/></icast>
		</from>
		<this><c path="justGraphix.image.algo.QuadPoints_"/></this>
		<to><icast><c path="justGraphix.image.algo.QuadPoints_"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="justGraphix.image.algo._QuadPoints.QuadPoints_Impl_" params="" file="src/justGraphix/image/algo/QuadPoints.hx" private="1" module="justGraphix.image.algo.QuadPoints" final="1">
	<_new public="1" get="inline" set="null" line="72" static="1">
		<f a="qp">
			<c path="justGraphix.image.algo.QuadPoints_"/>
			<x path="justGraphix.image.algo.QuadPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromLineXYinfo public="1" get="inline" set="null" line="78" static="1">
		<f a="lineXYinfo">
			<c path="justGraphix.image.algo.LineXYinfo"/>
			<x path="justGraphix.image.algo.QuadPoints"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromLineXYinfo>
	<fromLineInfo public="1" get="inline" set="null" line="88" static="1">
		<f a="lineInfo">
			<c path="justGraphix.image.algo.LineInfo"/>
			<x path="justGraphix.image.algo.QuadPoints"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromLineInfo>
	<rotate public="1" get="inline" set="null" line="126" static="1"><f a="this:theta:centreX:centreY">
	<c path="justGraphix.image.algo.QuadPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<getHit public="1" get="inline" set="null" line="157" static="1">
		<f a="this:?preCalculated" v=":true">
			<c path="justGraphix.image.algo.QuadPoints_"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
	</getHit>
</class></impl>
	</abstract>
	<class path="justGraphix.image.algo._QuadPoints.QuadPoints_Impl_" params="" file="src/justGraphix/image/algo/QuadPoints.hx" private="1" module="justGraphix.image.algo.QuadPoints" final="1">
		<_new public="1" get="inline" set="null" line="72" static="1">
			<f a="qp">
				<c path="justGraphix.image.algo.QuadPoints_"/>
				<x path="justGraphix.image.algo.QuadPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromLineXYinfo public="1" get="inline" set="null" line="78" static="1">
			<f a="lineXYinfo">
				<c path="justGraphix.image.algo.LineXYinfo"/>
				<x path="justGraphix.image.algo.QuadPoints"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromLineXYinfo>
		<fromLineInfo public="1" get="inline" set="null" line="88" static="1">
			<f a="lineInfo">
				<c path="justGraphix.image.algo.LineInfo"/>
				<x path="justGraphix.image.algo.QuadPoints"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromLineInfo>
		<rotate public="1" get="inline" set="null" line="126" static="1"><f a="this:theta:centreX:centreY">
	<c path="justGraphix.image.algo.QuadPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<getHit public="1" get="inline" set="null" line="157" static="1">
			<f a="this:?preCalculated" v=":true">
				<c path="justGraphix.image.algo.QuadPoints_"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</getHit>
	</class>
	<class path="justGraphix.image.algo._QuadrantPixel.QuadrantPixel_Fields_" params="" file="src/justGraphix/image/algo/QuadrantPixel.hx" private="1" module="justGraphix.image.algo.QuadrantPixel" final="1">
		<solidQuadrant public="1" get="inline" set="null" line="15" static="1">
			<f a="pixelimage:cx:cy:rx:ry:startAngle:color:?phi:?targetError" v="::::::::1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>* fillQuadrant draws a quarter arc.
     *</haxe_doc>
		</solidQuadrant>
		<tileSolidQuadrant public="1" get="inline" set="null" line="62" static="1">
			<f a="pixelimage:cx:cy:rx:ry:startAngle:tileImage:?phi:?targetError" v="::::::::1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>* fillQuadrant draws a quarter arc.
     *</haxe_doc>
		</tileSolidQuadrant>
	</class>
	<class path="justGraphix.image.algo._QuintPixel.QuintPixel_Fields_" params="" file="src/justGraphix/image/algo/QuintPixel.hx" private="1" module="justGraphix.image.algo.QuintPixel" final="1">
		<softFillQuintilateral public="1" get="inline" set="null" line="21" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?softC:?hasHit" v="::::::::::10:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softC : 10 }</e></m></meta>
		</softFillQuintilateral>
		<softFillQuintilateralPartial public="1" get="inline" set="null" line="64" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?softC:?softTop:?softRight:?softBottom:?softLeft:?hasHit" v="::::::::::10:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softLeft : true, softBottom : true, softRight : true, softTop : true, softC : 10 }</e></m></meta>
		</softFillQuintilateralPartial>
	</class>
	<class path="justGraphix.image.algo.RectanglePixel" params="" file="src/justGraphix/image/algo/RectanglePixel.hx">
		<_fillRadialRect public="1" expr="fillRadialRect">
			<f a="pixelimage:x:y:wid:hi:colorIn:colorOut:?gx:?gy:?edgePoints">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillRadialRect</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillRadialRect</font> module level field]]></haxe_doc>
		</_fillRadialRect>
		<new public="1" set="method" line="82">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._RectanglePixel.RectanglePixel_Fields_" params="" file="src/justGraphix/image/algo/RectanglePixel.hx" private="1" module="justGraphix.image.algo.RectanglePixel" final="1">
		<fillRadialRect public="1" get="inline" set="null" line="14" static="1">
			<f a="pixelimage:x:y:wid:hi:colorIn:colorOut:?gx:?gy:?edgePoints" v=":::::::0:0:4">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ edgePoints : 4, gy : 0, gx : 0 }</e></m></meta>
		</fillRadialRect>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo.RoundRecPixel" params="" file="src/justGraphix/image/algo/RoundRecPixel.hx">
		<_fillRoundRectangle public="1" expr="fillRoundRectangle">
			<f a="pixelimage:x:y:wid:hi:color:?dx:?dy:?fat:?tall">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillRoundRectangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillRoundRectangle</font> module level field]]></haxe_doc>
		</_fillRoundRectangle>
		<_tileRoundRectangle public="1" expr="tileRoundRectangle">
			<f a="pixelimage:x:y:wid:hi:tileImage:?dx:?dy:?fat:?tall">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>tileRoundRectangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">tileRoundRectangle</font> module level field]]></haxe_doc>
		</_tileRoundRectangle>
		<_fillGrad4RoundRectangle public="1" expr="fillGrad4RoundRectangle">
			<f a="pixelimage:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>fillGrad4RoundRectangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillGrad4RoundRectangle</font> module level field]]></haxe_doc>
		</_fillGrad4RoundRectangle>
		<new public="1" set="method" line="129">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._RoundRecPixel.RoundRecPixel_Fields_" params="" file="src/justGraphix/image/algo/RoundRecPixel.hx" private="1" module="justGraphix.image.algo.RoundRecPixel" final="1">
		<fillRoundRectangle public="1" get="inline" set="null" line="19" static="1">
			<f a="pixelimage:x:y:wid:hi:color:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</fillRoundRectangle>
		<tileRoundRectangle public="1" get="inline" set="null" line="59" static="1">
			<f a="pixelimage:x:y:wid:hi:tileImage:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</tileRoundRectangle>
		<fillGrad4RoundRectangle public="1" get="inline" set="null" line="99" static="1">
			<f a="pixelimage:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v=":::::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</fillGrad4RoundRectangle>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo.SquareSampler" params="" file="src/justGraphix/image/algo/SquareSampler.hx">
		<x0 public="1" get="accessor" set="null" static="1"><x path="Float"/></x0>
		<get_x0 public="1" get="inline" set="null" line="5" static="1"><f a=""><x path="Float"/></f></get_x0>
		<x1 public="1" get="accessor" set="null" static="1"><x path="Float"/></x1>
		<get_x1 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_x1>
		<x2 public="1" get="accessor" set="null" static="1"><x path="Float"/></x2>
		<get_x2 public="1" get="inline" set="null" line="13" static="1"><f a=""><x path="Float"/></f></get_x2>
		<x3 public="1" get="accessor" set="null" static="1"><x path="Float"/></x3>
		<get_x3 public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_x3>
		<y0 public="1" get="accessor" set="null" static="1"><x path="Float"/></y0>
		<get_y0 public="1" get="inline" set="null" line="22" static="1"><f a=""><x path="Float"/></f></get_y0>
		<y1 public="1" get="accessor" set="null" static="1"><x path="Float"/></y1>
		<get_y1 public="1" get="inline" set="null" line="26" static="1"><f a=""><x path="Float"/></f></get_y1>
		<y2 public="1" get="accessor" set="null" static="1"><x path="Float"/></y2>
		<get_y2 public="1" get="inline" set="null" line="30" static="1"><f a=""><x path="Float"/></f></get_y2>
		<y3 public="1" get="accessor" set="null" static="1"><x path="Float"/></y3>
		<get_y3 public="1" get="inline" set="null" line="34" static="1"><f a=""><x path="Float"/></f></get_y3>
		<getXs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getXs>
		<getYs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getYs>
	</class>
	<class path="justGraphix.image.algo.TriPixel" params="" file="src/justGraphix/image/algo/TriPixel.hx">
		<_fillTriUnsafe public="1" expr="fillTriUnsafe">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:hasHit">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>fillTriUnsafe</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillTriUnsafe</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillTriUnsafe>
		<_tileTriUnsafe public="1" expr="tileTriUnsafe">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:tileImage:hasHit">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>tileTriUnsafe</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">tileTriUnsafe</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_tileTriUnsafe>
		<_fillGradTriangle public="1" expr="fillGradTriangle">
			<f a="pixelImage:ax:ay:colA:bx:by:colB:cx:cy:colC:hasHit">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>fillGradTriangle</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillGradTriangle</font> module level field
       @param hasHit defaults false, since a HitTri has runtime overhead.]]></haxe_doc>
		</_fillGradTriangle>
		<new public="1" set="method" line="973">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.image.algo._TriPixel.TriPixel_Fields_" params="" file="src/justGraphix/image/algo/TriPixel.hx" private="1" module="justGraphix.image.algo.TriPixel" final="1">
		<fillTriangle public="1" get="inline" set="null" line="18" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
			<haxe_doc>provides a filled triangle give a,b,c coordinates
        automagically rearranges coordinates so it always renders</haxe_doc>
		</fillTriangle>
		<fillTriUnsafe public="1" get="inline" set="null" line="39" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriUnsafe>
		<fillTriangle2 public="1" get="inline" set="null" line="88" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriangle2>
		<fillTriUnsafe2 public="1" get="inline" set="null" line="109" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriUnsafe2>
		<tileTriangle public="1" get="inline" set="null" line="160" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileTriangle>
		<tileTriUnsafe public="1" get="inline" set="null" line="181" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</tileTriUnsafe>
		<fillGradTriangle public="1" get="inline" set="null" line="232" static="1">
			<f a="pixelImage:ax:ay:colA:bx:by:colB:cx:cy:colC:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillGradTriangle>
		<topRightImgTriFudge public="1" get="inline" set="null" line="286" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:cx:cy:?hasHit" v=":::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</topRightImgTriFudge>
		<bottomLeftImgTriFudge public="1" get="inline" set="null" line="294" static="1">
			<f a="pixelImage:texture:win:dx:dy:cx:cy:ax:ay:?hasHit" v=":::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</bottomLeftImgTriFudge>
		<uvTriangleFudge public="1" get="inline" set="null" line="306" static="1">
			<f a="pixelImage:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
			<haxe_doc>This is the first attempt at UV mapping it does not swap A B and so does not work properly, but can be used with fudged triangles above.
        Likely will remove in future but keeping incase it is useful for edge cases.</haxe_doc>
		</uvTriangleFudge>
		<topLeftImgTri public="1" get="inline" set="null" line="349" static="1">
			<f a="pixelImage:texture:win:ax:ay:bx:by:dx:dy:?hasHit" v=":::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</topLeftImgTri>
		<bottomRightImgTri public="1" get="inline" set="null" line="359" static="1">
			<f a="pixelImage:texture:win:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</bottomRightImgTri>
		<uvTriangle public="1" get="inline" set="null" line="369" static="1">
			<f a="pixelImage:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</uvTriangle>
		<uvTriangleSoft3 public="1" get="inline" set="null" line="422" static="1">
			<f a="pixelImage:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:soft3:?hasHit" v="::::::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</uvTriangleSoft3>
		<fillTriTwoSoft public="1" get="inline" set="null" line="498" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?softC:?hasHit" v="::::::::10:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softC : 10 }</e></m></meta>
		</fillTriTwoSoft>
		<fillTriSoftC public="1" get="inline" set="null" line="521" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?softC:?hasHit" v="::::::::10:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softC : 10 }</e></m></meta>
		</fillTriSoftC>
		<fillTriSoft3 public="1" get="inline" set="null" line="585" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?soft3:?softAB:?softBC:?softCA:?hasHit" v="::::::::40:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true, soft3 : 40 }</e></m></meta>
		</fillTriSoft3>
		<fillQuarterSoft public="1" get="inline" set="null" line="692" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?soft3:?softAB:?softBC:?softCA:?hasHit" v="::::::::40:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true, soft3 : 40 }</e></m></meta>
		</fillQuarterSoft>
		<fillTriExtra0 public="1" get="inline" set="null" line="778" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriExtra0>
		<fillTriExtra1 public="1" get="inline" set="null" line="839" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriExtra1>
		<uvTriangleTexture3 public="1" get="inline" set="null" line="890" static="1">
			<f a="pixelImage:textureA:winA:textureB:winB:textureC:winC:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</uvTriangleTexture3>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.algo._TriPixelOld.TriPixelOld_Fields_" params="" file="src/justGraphix/image/algo/TriPixelOld.hx" private="1" module="justGraphix.image.algo.TriPixelOld" final="1">
		<fillTriUnsafe5 public="1" set="method" line="15" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriUnsafe5>
		<fillTriUnsafe6 public="1" set="method" line="162" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</fillTriUnsafe6>
	</class>
	<class path="justGraphix.image.algo._TriPixelSmooth.TriPixelSmooth_Fields_" params="" file="src/justGraphix/image/algo/TriPixelSmooth.hx" private="1" module="justGraphix.image.algo.TriPixelSmooth" final="1">
		<quadPentagonBarycentric public="1" get="inline" set="null" line="55" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</quadPentagonBarycentric>
		<triPentagonBarycentricBottom public="1" get="inline" set="null" line="69" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</triPentagonBarycentricBottom>
		<triPentagonBarycentricTop public="1" get="inline" set="null" line="97" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</triPentagonBarycentricTop>
		<triPentagonBarycentic public="1" get="inline" set="null" line="129" static="1">
			<f a="pixelImage:ax:ay:bx:by:cx:cy:color:?softAB:?softBC:?softCA:?hasHit" v="::::::::true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
		</triPentagonBarycentic>
	</class>
	<class path="justGraphix.image.algo._TriPixelSmoothGrad.TriPixelSmoothGrad_Fields_" params="" file="src/justGraphix/image/algo/TriPixelSmoothGrad.hx" private="1" module="justGraphix.image.algo.TriPixelSmoothGrad" final="1">
		<lineXYGradPentBary public="1" get="inline" set="null" line="20" static="1">
			<f a="pixelImage:px:py:qx:qy:thick:colorA:colorB:colorC:colorD:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</lineXYGradPentBary>
		<lineGradPentBary public="1" get="inline" set="null" line="32" static="1">
			<f a="pixelImage:px:py:thick:h:theta:colorA:colorB:colorC:colorD:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</lineGradPentBary>
		<quadGradPentBary public="1" get="inline" set="null" line="41" static="1">
			<f a="pixelImage:q:colorA:colorB:colorC:colorD:?hasHit" v="::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.algo.QuadPoints"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</quadGradPentBary>
		<triGradPentBaryBottom public="1" get="inline" set="null" line="53" static="1">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</triGradPentBaryBottom>
		<triGradPentBaryTop public="1" get="inline" set="null" line="78" static="1">
			<f a="pixelImage:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</triGradPentBaryTop>
		<triGradPentBary public="1" get="inline" set="null" line="106" static="1">
			<f a="pixelImage:ax:ay:colA:bx:by:colB:cx:cy:colC:?softAB:?softBC:?softCA:?hasHit" v="::::::::::true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
		</triGradPentBary>
	</class>
	<abstract path="justGraphix.image.algo.TriPoints" params="" file="src/justGraphix/image/algo/TriPoints.hx">
		<from><icast><c path="justGraphix.image.algo.TriPoints_"/></icast></from>
		<this><c path="justGraphix.image.algo.TriPoints_"/></this>
		<to><icast><c path="justGraphix.image.algo.TriPoints_"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="justGraphix.image.algo._TriPoints.TriPoints_Impl_" params="" file="src/justGraphix/image/algo/TriPoints.hx" private="1" module="justGraphix.image.algo.TriPoints" final="1">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a="tp">
			<c path="justGraphix.image.algo.TriPoints_"/>
			<x path="justGraphix.image.algo.TriPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rotate public="1" get="inline" set="null" line="45" static="1"><f a="this:theta:centreX:centreY">
	<c path="justGraphix.image.algo.TriPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<getHit public="1" get="inline" set="null" line="70" static="1">
		<f a="this:?preCalculated" v=":true">
			<c path="justGraphix.image.algo.TriPoints_"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitTri"/>
		</f>
		<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
	</getHit>
</class></impl>
	</abstract>
	<class path="justGraphix.image.algo._TriPoints.TriPoints_Impl_" params="" file="src/justGraphix/image/algo/TriPoints.hx" private="1" module="justGraphix.image.algo.TriPoints" final="1">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a="tp">
				<c path="justGraphix.image.algo.TriPoints_"/>
				<x path="justGraphix.image.algo.TriPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rotate public="1" get="inline" set="null" line="45" static="1"><f a="this:theta:centreX:centreY">
	<c path="justGraphix.image.algo.TriPoints_"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<getHit public="1" get="inline" set="null" line="70" static="1">
			<f a="this:?preCalculated" v=":true">
				<c path="justGraphix.image.algo.TriPoints_"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitTri"/>
			</f>
			<meta><m n=":value"><e>{ preCalculated : true }</e></m></meta>
		</getHit>
	</class>
	<class path="justGraphix.image.algo.TriangleSampler" params="" file="src/justGraphix/image/algo/TriangleSampler.hx">
		<x0 public="1" get="accessor" set="null" static="1"><x path="Float"/></x0>
		<get_x0 public="1" get="inline" set="null" line="5" static="1"><f a=""><x path="Float"/></f></get_x0>
		<x1 public="1" get="accessor" set="null" static="1"><x path="Float"/></x1>
		<get_x1 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_x1>
		<x2 public="1" get="accessor" set="null" static="1"><x path="Float"/></x2>
		<get_x2 public="1" get="inline" set="null" line="13" static="1"><f a=""><x path="Float"/></f></get_x2>
		<y0 public="1" get="accessor" set="null" static="1"><x path="Float"/></y0>
		<get_y0 public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_y0>
		<y1 public="1" get="accessor" set="null" static="1"><x path="Float"/></y1>
		<get_y1 public="1" get="inline" set="null" line="21" static="1"><f a=""><x path="Float"/></f></get_y1>
		<y2 public="1" get="accessor" set="null" static="1"><x path="Float"/></y2>
		<get_y2 public="1" get="inline" set="null" line="25" static="1"><f a=""><x path="Float"/></f></get_y2>
		<getXs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getXs>
		<getYs public="1" set="method" static="1"><f a="times">
	<d/>
	<x path="Float"/>
</f></getYs>
	</class>
	<class path="justGraphix.image.algo.Xiolin_Wu_Line" params="" file="src/justGraphix/image/algo/Xiolin_Wu_Line.hx"><xWuLineNoEnd_ public="1" get="inline" set="null" line="246" static="1">
	<f a="pixelImage:x0:y0:x1:y1:color:?brightRange" v="::::::0.25">
		<x path="justGraphix.image.Pixelimage"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="justGraphix.pixel.Pixel32"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ brightRange : 0.25 }</e></m></meta>
</xWuLineNoEnd_></class>
	<class path="justGraphix.image.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_" params="" file="src/justGraphix/image/algo/Xiolin_Wu_Line.hx" private="1" module="justGraphix.image.algo.Xiolin_Wu_Line" final="1">
		<xWuLineNoEnd public="1" get="inline" set="null" line="33" static="1">
			<f a="pixelImage:x0:y0:x1:y1:color:?brightRange" v="::::::0.25">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ brightRange : 0.25 }</e></m></meta>
		</xWuLineNoEnd>
		<xWuLine public="1" get="inline" set="null" line="132" static="1">
			<f a="pixelImage:x0:y0:x1:y1:color:?brightRange" v="::::::0.25">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ brightRange : 0.25 }</e></m></meta>
		</xWuLine>
		<roundFloor public="1" get="inline" set="null" line="227" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></roundFloor>
		<fPart public="1" get="inline" set="null" line="232" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fPart>
		<rfPart public="1" get="inline" set="null" line="237" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></rfPart>
	</class>
	<abstract path="justGraphix.image.formats.BytesCameleon" params="" file="src/justGraphix/image/formats/BytesCameleon.hx">
		<from><icast><c path="haxe.io.Bytes"/></icast></from>
		<this><c path="haxe.io.Bytes"/></this>
		<to><icast><c path="haxe.io.Bytes"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.image.formats._BytesCameleon.BytesCameleon_Impl_" params="" file="src/justGraphix/image/formats/BytesCameleon.hx" private="1" module="justGraphix.image.formats.BytesCameleon" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="bytes">
			<c path="haxe.io.Bytes"/>
			<x path="justGraphix.image.formats.BytesCameleon"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<ARGB_RGBA public="1" get="inline" set="null" line="10" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_RGBA>
	<RGBA_ARGB public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></RGBA_ARGB>
	<ARGB_BGRA public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_BGRA>
	<ARGB_ABGR public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_ABGR>
	<ABGR_ARGB public="1" get="inline" set="null" line="82" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_ARGB>
	<ABGR_RGBA public="1" get="inline" set="null" line="100" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_RGBA>
	<BGRA_ARGB public="1" get="inline" set="null" line="118" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_ARGB>
	<BGRA_RGBA public="1" get="inline" set="null" line="136" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_RGBA>
</class></impl>
	</abstract>
	<class path="justGraphix.image.formats._BytesCameleon.BytesCameleon_Impl_" params="" file="src/justGraphix/image/formats/BytesCameleon.hx" private="1" module="justGraphix.image.formats.BytesCameleon" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="justGraphix.image.formats.BytesCameleon"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<ARGB_RGBA public="1" get="inline" set="null" line="10" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_RGBA>
		<RGBA_ARGB public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></RGBA_ARGB>
		<ARGB_BGRA public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_BGRA>
		<ARGB_ABGR public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ARGB_ABGR>
		<ABGR_ARGB public="1" get="inline" set="null" line="82" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_ARGB>
		<ABGR_RGBA public="1" get="inline" set="null" line="100" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></ABGR_RGBA>
		<BGRA_ARGB public="1" get="inline" set="null" line="118" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_ARGB>
		<BGRA_RGBA public="1" get="inline" set="null" line="136" static="1"><f a="this">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></BGRA_RGBA>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.ColorformImage" params="" file="src/justGraphix/image/imageAbstracts/ColorformImage.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._ColorformImage.ColorformImage_Impl_" params="" file="src/justGraphix/image/imageAbstracts/ColorformImage.hx" private="1" module="justGraphix.image.imageAbstracts.ColorformImage" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.ColorformImage"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<greyScale public="1" get="inline" set="null" line="15" static="1">
		<f a="this:?useAlpha" v=":true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ useAlpha : true }</e></m></meta>
	</greyScale>
	<towardsColor public="1" get="inline" set="null" line="37" static="1"><f a="this:color:t">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></towardsColor>
	<towardsImage public="1" get="inline" set="null" line="58" static="1"><f a="this:img:t">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></towardsImage>
	<sepia public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></sepia>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._ColorformImage.ColorformImage_Impl_" params="" file="src/justGraphix/image/imageAbstracts/ColorformImage.hx" private="1" module="justGraphix.image.imageAbstracts.ColorformImage" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.ColorformImage"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<greyScale public="1" get="inline" set="null" line="15" static="1">
			<f a="this:?useAlpha" v=":true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ useAlpha : true }</e></m></meta>
		</greyScale>
		<towardsColor public="1" get="inline" set="null" line="37" static="1"><f a="this:color:t">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></towardsColor>
		<towardsImage public="1" get="inline" set="null" line="58" static="1"><f a="this:img:t">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></towardsImage>
		<sepia public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></sepia>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.BorderMode" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" module="justGraphix.image.imageAbstracts.Convolution">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._Convolution.BorderMode_Impl_" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" private="1" module="justGraphix.image.imageAbstracts.Convolution" extern="1" final="1">
	<EXTEND public="1" get="inline" set="null" expr="cast 0" line="8" static="1">
		<x path="justGraphix.image.imageAbstracts.BorderMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXTEND>
	<CROP public="1" get="inline" set="null" expr="cast 1" line="9" static="1">
		<x path="justGraphix.image.imageAbstracts.BorderMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CROP>
	<WRAP public="1" get="inline" set="null" expr="cast 2" line="10" static="1">
		<x path="justGraphix.image.imageAbstracts.BorderMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WRAP>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._Convolution.BorderMode_Impl_" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" private="1" module="justGraphix.image.imageAbstracts.Convolution" extern="1" final="1">
		<EXTEND public="1" get="inline" set="null" expr="cast 0" line="8" static="1">
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXTEND>
		<CROP public="1" get="inline" set="null" expr="cast 1" line="9" static="1">
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CROP>
		<WRAP public="1" get="inline" set="null" expr="cast 2" line="10" static="1">
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WRAP>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.image.imageAbstracts.Mat5x5data" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" module="justGraphix.image.imageAbstracts.Convolution">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<e public="1"><x path="Float"/></e>
		<f public="1"><x path="Float"/></f>
		<g public="1"><x path="Float"/></g>
		<h public="1"><x path="Float"/></h>
		<i public="1"><x path="Float"/></i>
		<j public="1"><x path="Float"/></j>
		<k public="1"><x path="Float"/></k>
		<l public="1"><x path="Float"/></l>
		<m public="1"><x path="Float"/></m>
		<n public="1"><x path="Float"/></n>
		<o public="1"><x path="Float"/></o>
		<p public="1"><x path="Float"/></p>
		<q public="1"><x path="Float"/></q>
		<r public="1"><x path="Float"/></r>
		<s public="1"><x path="Float"/></s>
		<t public="1"><x path="Float"/></t>
		<u public="1"><x path="Float"/></u>
		<v public="1"><x path="Float"/></v>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<new public="1" get="inline" set="null" line="50"><f a="a:b:c:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="justGraphix.image.imageAbstracts.Mat3x3data" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" module="justGraphix.image.imageAbstracts.Convolution">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<e public="1"><x path="Float"/></e>
		<f public="1"><x path="Float"/></f>
		<g public="1"><x path="Float"/></g>
		<h public="1"><x path="Float"/></h>
		<i public="1"><x path="Float"/></i>
		<new public="1" get="inline" set="null" line="96"><f a="a:b:c:d:e:f:g:h:i">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.Convolution" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._Convolution.Convolution_Impl_" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" private="1" module="justGraphix.image.imageAbstracts.Convolution" final="1">
	<_new public="1" get="inline" set="null" line="114" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.Convolution"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<convolute3x3 public="1" get="inline" set="null" line="126" static="1">
		<f a="this:m33:borderMode:?adjustAlpha:?adjustRed:?adjustGreen:?adjustBlue" v=":::false:true:true:true">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.imageAbstracts.Mat3x3data"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustBlue : true, adjustGreen : true, adjustRed : true, adjustAlpha : false }</e></m></meta>
	</convolute3x3>
	<convolute5x5 public="1" get="inline" set="null" line="270" static="1">
		<f a="this:m55:borderMode:?adjustAlpha:?adjustRed:?adjustGreen:?adjustBlue" v=":::false:true:true:true">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.imageAbstracts.Mat5x5data"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustBlue : true, adjustGreen : true, adjustRed : true, adjustAlpha : false }</e></m></meta>
	</convolute5x5>
	<sharpen0_3x3 public="1" get="inline" set="null" line="553" static="1">
		<f a="this:?strength:?borderMode:?adjustAlpha" v=":4:EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND, strength : 4 }</e></m></meta>
	</sharpen0_3x3>
	<boxBlur0_3x3 public="1" get="inline" set="null" line="562" static="1">
		<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
	</boxBlur0_3x3>
	<gussianBlur_3x3 public="1" get="inline" set="null" line="570" static="1">
		<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
	</gussianBlur_3x3>
	<gussianBlur55data get="inline" set="null" line="578" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<c path="justGraphix.image.imageAbstracts.Mat5x5data"/>
</f></gussianBlur55data>
	<gussianBlur_5x5 public="1" get="inline" set="null" line="587" static="1">
		<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
	</gussianBlur_5x5>
	<unsharpenMask055data get="inline" set="null" line="592" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<c path="justGraphix.image.imageAbstracts.Mat5x5data"/>
</f></unsharpenMask055data>
	<unsharpenMask0_5x5 public="1" get="inline" set="null" line="601" static="1">
		<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
	</unsharpenMask0_5x5>
	<edgeEnhance0_3x3 public="1" get="inline" set="null" line="607" static="1">
		<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
	</edgeEnhance0_3x3>
	<edgeDetect0_3x3 public="1" get="inline" set="null" line="614" static="1">
		<f a="this:?strength:?borderMode:?adjustAlpha" v=":4:EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND, strength : 4 }</e></m></meta>
	</edgeDetect0_3x3>
	<emboss0_3x3 public="1" get="inline" set="null" line="622" static="1">
		<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.imageAbstracts.BorderMode"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
	</emboss0_3x3>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._Convolution.Convolution_Impl_" params="" file="src/justGraphix/image/imageAbstracts/Convolution.hx" private="1" module="justGraphix.image.imageAbstracts.Convolution" final="1">
		<_new public="1" get="inline" set="null" line="114" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.Convolution"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<convolute3x3 public="1" get="inline" set="null" line="126" static="1">
			<f a="this:m33:borderMode:?adjustAlpha:?adjustRed:?adjustGreen:?adjustBlue" v=":::false:true:true:true">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.imageAbstracts.Mat3x3data"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustBlue : true, adjustGreen : true, adjustRed : true, adjustAlpha : false }</e></m></meta>
		</convolute3x3>
		<convolute5x5 public="1" get="inline" set="null" line="270" static="1">
			<f a="this:m55:borderMode:?adjustAlpha:?adjustRed:?adjustGreen:?adjustBlue" v=":::false:true:true:true">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.imageAbstracts.Mat5x5data"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustBlue : true, adjustGreen : true, adjustRed : true, adjustAlpha : false }</e></m></meta>
		</convolute5x5>
		<sharpen0_3x3 public="1" get="inline" set="null" line="553" static="1">
			<f a="this:?strength:?borderMode:?adjustAlpha" v=":4:EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND, strength : 4 }</e></m></meta>
		</sharpen0_3x3>
		<boxBlur0_3x3 public="1" get="inline" set="null" line="562" static="1">
			<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
		</boxBlur0_3x3>
		<gussianBlur_3x3 public="1" get="inline" set="null" line="570" static="1">
			<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
		</gussianBlur_3x3>
		<gussianBlur55data get="inline" set="null" line="578" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<c path="justGraphix.image.imageAbstracts.Mat5x5data"/>
</f></gussianBlur55data>
		<gussianBlur_5x5 public="1" get="inline" set="null" line="587" static="1">
			<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
		</gussianBlur_5x5>
		<unsharpenMask055data get="inline" set="null" line="592" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<c path="justGraphix.image.imageAbstracts.Mat5x5data"/>
</f></unsharpenMask055data>
		<unsharpenMask0_5x5 public="1" get="inline" set="null" line="601" static="1">
			<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
		</unsharpenMask0_5x5>
		<edgeEnhance0_3x3 public="1" get="inline" set="null" line="607" static="1">
			<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
		</edgeEnhance0_3x3>
		<edgeDetect0_3x3 public="1" get="inline" set="null" line="614" static="1">
			<f a="this:?strength:?borderMode:?adjustAlpha" v=":4:EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND, strength : 4 }</e></m></meta>
		</edgeDetect0_3x3>
		<emboss0_3x3 public="1" get="inline" set="null" line="622" static="1">
			<f a="this:?borderMode:?adjustAlpha" v=":EXTEND:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.imageAbstracts.BorderMode"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ adjustAlpha : false, borderMode : EXTEND }</e></m></meta>
		</emboss0_3x3>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.FillShape" params="" file="src/justGraphix/image/imageAbstracts/FillShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._FillShape.FillShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/FillShape.hx" private="1" module="justGraphix.image.imageAbstracts.FillShape" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.FillShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<square public="1" get="inline" set="null" line="28" static="1">
		<f a="this:x:y:d:color">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>provides a simple filled square a short cut 
        @see simpleRect</haxe_doc>
	</square>
	<triangle public="1" get="inline" set="null" line="40" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		<haxe_doc>provides a filled triangle give a,b,c coordinates
        automagically rearranges coordinates so it always renders</haxe_doc>
	</triangle>
	<quad public="1" get="inline" set="null" line="54" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		<haxe_doc>uses two triangles to create a filled quad using four coordinates a,b,c,d arranged clockwise</haxe_doc>
	</quad>
	<line public="1" get="inline" set="null" line="67" static="1">
		<f a="this:px:py:qx:qy:thick:color:?hasHit:?debugCorners" v=":::::::true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : true }</e></m></meta>
		<haxe_doc>provides a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
	</line>
	<roundRectangle public="1" get="inline" set="null" line="87" static="1">
		<f a="this:x:y:hi:wid:color:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
	</roundRectangle>
	<quadrant public="1" get="inline" set="null" line="105" static="1">
		<f a="this:cx:cy:rx:ry:startAngle:color:?phi:?targetError" v="::::::::1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
		<haxe_doc>fill Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
	</quadrant>
	<quadrantI public="1" get="inline" set="null" line="117" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantI>
	<quadrantII public="1" get="inline" set="null" line="128" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantII>
	<quadrantIII public="1" get="inline" set="null" line="140" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantIII>
	<quadrantIV public="1" get="inline" set="null" line="153" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantIV>
	<simonSays public="1" get="inline" set="null" line="163" static="1"><f a="this:cx:cy:radius">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></simonSays>
	<circle public="1" get="inline" set="null" line="174" static="1">
		<f a="this:cx:cy:r:color:?phi" v=":::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</circle>
	<ellipse public="1" get="inline" set="null" line="185" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</ellipse>
	<polyBuild public="1" get="inline" set="null" line="205" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?sides:?cornerUp" v="::::::0.:36:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		<haxe_doc>this provides building block for regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
	</polyBuild>
	<arrowHead public="1" get="inline" set="null" line="220" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":value"><e>{ phi : 0. }</e></m>
			<m n=":access"><e>pixelimage.Pixelimage.fillEllipseTri</e></m>
		</meta>
	</arrowHead>
	<pentagon public="1" get="inline" set="null" line="233" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</pentagon>
	<hexagon public="1" get="inline" set="null" line="246" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</hexagon>
	<heptagon public="1" get="inline" set="null" line="259" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</heptagon>
	<septagon public="1" get="inline" set="null" line="272" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</septagon>
	<octagon public="1" get="inline" set="null" line="285" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</octagon>
	<nonagon public="1" get="inline" set="null" line="298" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</nonagon>
	<enneagon public="1" get="inline" set="null" line="311" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</enneagon>
	<decagon public="1" get="inline" set="null" line="324" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</decagon>
	<hendecagon public="1" get="inline" set="null" line="337" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</hendecagon>
	<undecagon public="1" get="inline" set="null" line="350" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</undecagon>
	<dodecagon public="1" get="inline" set="null" line="363" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</dodecagon>
	<pie public="1" get="inline" set="null" line="378" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit:?targetError" v="::::::::false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
	</pie>
	<sweepTri public="1" get="inline" set="null" line="418" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit" v="::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</sweepTri>
	<lineGrid public="1" get="inline" set="null" line="433" static="1"><f a="this:x:y:w:h:delta:thick:color">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGrid>
	<lineGridWH public="1" get="inline" set="null" line="448" static="1"><f a="this:x:y:w:h:deltaW:deltaH:thick:color">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGridWH>
	<arrow public="1" get="inline" set="null" line="467" static="1">
		<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::false:false:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		<haxe_doc>provides a thick arrow using two triangles vector p, q</haxe_doc>
	</arrow>
	<arrowBoth public="1" get="inline" set="null" line="480" static="1">
		<f a="this:px:py:qx:qy:thick:color:?hasHit" v=":::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</arrowBoth>
	<fixArrow public="1" get="inline" set="null" line="494" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::::false:false:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
	</fixArrow>
	<fixArrowBoth public="1" get="inline" set="null" line="511" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?hasHit" v=":::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</fixArrowBoth>
	<ellipseTri public="1" get="inline" set="null" line="531" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?printSides:?targetError" v="::::::0:false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
		<haxe_doc>this is used for drawing a filled ellipse or circle ( using triangles ), it uses more sides when larger and can be tweaked with targetError
        drawn from the circles/ellipses centre, with rx and ry the radius, phi allows rotatation of ellipses
        setup so large ellipses automatically use more sides.</haxe_doc>
	</ellipseTri>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._FillShape.FillShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/FillShape.hx" private="1" module="justGraphix.image.imageAbstracts.FillShape" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.FillShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<square public="1" get="inline" set="null" line="28" static="1">
			<f a="this:x:y:d:color">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>provides a simple filled square a short cut 
        @see simpleRect</haxe_doc>
		</square>
		<triangle public="1" get="inline" set="null" line="40" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
			<haxe_doc>provides a filled triangle give a,b,c coordinates
        automagically rearranges coordinates so it always renders</haxe_doc>
		</triangle>
		<quad public="1" get="inline" set="null" line="54" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
			<haxe_doc>uses two triangles to create a filled quad using four coordinates a,b,c,d arranged clockwise</haxe_doc>
		</quad>
		<line public="1" get="inline" set="null" line="67" static="1">
			<f a="this:px:py:qx:qy:thick:color:?hasHit:?debugCorners" v=":::::::true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : true }</e></m></meta>
			<haxe_doc>provides a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
		</line>
		<roundRectangle public="1" get="inline" set="null" line="87" static="1">
			<f a="this:x:y:hi:wid:color:?dx:?dy:?fat:?tall" v="::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</roundRectangle>
		<quadrant public="1" get="inline" set="null" line="105" static="1">
			<f a="this:cx:cy:rx:ry:startAngle:color:?phi:?targetError" v="::::::::1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>fill Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
		</quadrant>
		<quadrantI public="1" get="inline" set="null" line="117" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantI>
		<quadrantII public="1" get="inline" set="null" line="128" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantII>
		<quadrantIII public="1" get="inline" set="null" line="140" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantIII>
		<quadrantIV public="1" get="inline" set="null" line="153" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantIV>
		<simonSays public="1" get="inline" set="null" line="163" static="1"><f a="this:cx:cy:radius">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></simonSays>
		<circle public="1" get="inline" set="null" line="174" static="1">
			<f a="this:cx:cy:r:color:?phi" v=":::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</circle>
		<ellipse public="1" get="inline" set="null" line="185" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</ellipse>
		<polyBuild public="1" get="inline" set="null" line="205" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
			<haxe_doc>this provides building block for regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
		</polyBuild>
		<arrowHead public="1" get="inline" set="null" line="220" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ phi : 0. }</e></m>
				<m n=":access"><e>pixelimage.Pixelimage.fillEllipseTri</e></m>
			</meta>
		</arrowHead>
		<pentagon public="1" get="inline" set="null" line="233" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</pentagon>
		<hexagon public="1" get="inline" set="null" line="246" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</hexagon>
		<heptagon public="1" get="inline" set="null" line="259" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</heptagon>
		<septagon public="1" get="inline" set="null" line="272" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</septagon>
		<octagon public="1" get="inline" set="null" line="285" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</octagon>
		<nonagon public="1" get="inline" set="null" line="298" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</nonagon>
		<enneagon public="1" get="inline" set="null" line="311" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</enneagon>
		<decagon public="1" get="inline" set="null" line="324" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</decagon>
		<hendecagon public="1" get="inline" set="null" line="337" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</hendecagon>
		<undecagon public="1" get="inline" set="null" line="350" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</undecagon>
		<dodecagon public="1" get="inline" set="null" line="363" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</dodecagon>
		<pie public="1" get="inline" set="null" line="378" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit:?targetError" v="::::::::false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
		</pie>
		<sweepTri public="1" get="inline" set="null" line="418" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:color:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</sweepTri>
		<lineGrid public="1" get="inline" set="null" line="433" static="1"><f a="this:x:y:w:h:delta:thick:color">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGrid>
		<lineGridWH public="1" get="inline" set="null" line="448" static="1"><f a="this:x:y:w:h:deltaW:deltaH:thick:color">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></lineGridWH>
		<arrow public="1" get="inline" set="null" line="467" static="1">
			<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::false:false:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
			<haxe_doc>provides a thick arrow using two triangles vector p, q</haxe_doc>
		</arrow>
		<arrowBoth public="1" get="inline" set="null" line="480" static="1">
			<f a="this:px:py:qx:qy:thick:color:?hasHit" v=":::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</arrowBoth>
		<fixArrow public="1" get="inline" set="null" line="494" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?hasHit" v=":::::::::false:false:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		</fixArrow>
		<fixArrowBoth public="1" get="inline" set="null" line="511" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?hasHit" v=":::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</fixArrowBoth>
		<ellipseTri public="1" get="inline" set="null" line="531" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?printSides:?targetError" v="::::::0:false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
			<haxe_doc>this is used for drawing a filled ellipse or circle ( using triangles ), it uses more sides when larger and can be tweaked with targetError
        drawn from the circles/ellipses centre, with rx and ry the radius, phi allows rotatation of ellipses
        setup so large ellipses automatically use more sides.</haxe_doc>
		</ellipseTri>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.GradientShape" params="" file="src/justGraphix/image/imageAbstracts/GradientShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._GradientShape.GradientShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/GradientShape.hx" private="1" module="justGraphix.image.imageAbstracts.GradientShape" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.GradientShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<triangle public="1" get="inline" set="null" line="29" static="1">
		<f a="this:ax:ay:colA:bx:by:colB:cx:cy:colC:?hasHit" v="::::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		<haxe_doc>creates a filled gradient triangle in OpenGL 3 color style for coordinates a,b,c
        with respective colors after coordinate pairs</haxe_doc>
	</triangle>
	<rectangle public="1" get="inline" set="null" line="39" static="1">
		<f a="this:x:y:wid:hi:colorA:colorB:colorC:colorD">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<a>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
				<dy><x path="Float"/></dy>
				<cy><x path="Float"/></cy>
				<cx><x path="Float"/></cx>
				<bx><x path="Float"/></bx>
				<ay><x path="Float"/></ay>
				<ax><x path="Float"/></ax>
			</a>
		</f>
		<haxe_doc>uses two triangles to form rectangle x,y,width,height with a,b,c,d clockwise gradient colours</haxe_doc>
	</rectangle>
	<quad public="1" get="inline" set="null" line="60" static="1">
		<f a="this:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:?hasHit" v=":::::::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		<haxe_doc>uses two triangle to form a quad with clockwise coordinates a,b,c,d
        with respective colours after each coordinate pair

        a better render maybe possible see commented out code in algo.QuadPixel and lerp code in algo.GeomPixel
        ( better render approach compiles but does not yet work, maybe easy? ).</haxe_doc>
	</quad>
	<line public="1" get="inline" set="null" line="76" static="1">
		<f a="this:px:py:qx:qy:thick:colorA:colorB:colorC:colorD:?hasHit:?debugCorners" v="::::::::::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		<haxe_doc>provides a thick line using two gradient triangle vector p,q
        the four colors are arranged clockwise a,b,c,d
        debug corners draws coloured squares on the corners for development</haxe_doc>
	</line>
	<radialPolyon public="1" get="inline" set="null" line="93" static="1">
		<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:?cornerUp" v=":::::::0.:0.:0.:36:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0., gy : 0., gx : 0. }</e></m></meta>
		<haxe_doc>@see fillPolyBuild
        this is a version with radial gradient applied so the centre is one color, but only used gradient triangles so limited</haxe_doc>
	</radialPolyon>
	<radialEllipseTri public="1" get="inline" set="null" line="113" static="1">
		<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::0.:0.:0.:false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0., gy : 0., gx : 0. }</e></m></meta>
		<haxe_doc>provides a filled ellipse/circle using triangles and more sides for large with a radial color gradient from the centre 
        colorIn is the internal colour and colorOut the external one, gx and gy -1 to 1 provide offset centre
        there are lots of limitations, gx and gy max and min obviously look bad and may need to scale them to 0.7 for rotated ellipse</haxe_doc>
	</radialEllipseTri>
	<sweepTri public="1" get="inline" set="null" line="131" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:colA:colB:colC:?hasHit" v="::::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</sweepTri>
	<pie public="1" get="inline" set="null" line="149" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:centreColor:outerColor:?hasHit:?targetError" v=":::::::::false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
	</pie>
	<radialRectangle public="1" get="inline" set="null" line="193" static="1">
		<f a="this:x:y:wid:hi:colorIn:colorOut:?gx:?gy" v=":::::::0:0">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ gy : 0, gx : 0 }</e></m></meta>
		<haxe_doc>provides a radial colour gradient, it uses a temp pixelimage to draw a rectangle and then radial ellipse within.
        @:see fillRadialEllipseTri</haxe_doc>
	</radialRectangle>
	<thickArrow public="1" get="inline" set="null" line="218" static="1">
		<f a="this:px:py:qx:qy:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::false:false:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
	</thickArrow>
	<thickArrowBoth public="1" get="inline" set="null" line="235" static="1">
		<f a="this:px:py:qx:qy:thick:color1:color2:?hasHit" v="::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</thickArrowBoth>
	<thickFixArrow public="1" get="inline" set="null" line="251" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::::false:false:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
	</thickFixArrow>
	<thickFixArrowBoth public="1" get="inline" set="null" line="268" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?hasHit" v="::::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</thickFixArrowBoth>
	<RoundRectangle public="1" get="inline" set="null" line="289" static="1">
		<f a="this:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v=":::::::::-1.:-1.:-1.:-1.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
	</RoundRectangle>
	<lineRoundRectangle public="1" get="inline" set="null" line="304" static="1">
		<f a="this:x:y:hi:wid:thick:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v="::::::::::-1.:-1.:-1.:-1.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
	</lineRoundRectangle>
	<svgPath public="1" get="inline" set="null" line="331" static="1">
		<f a="this:path:strokeWidth:strokeTopColor:strokeBottomColor:?translateX:?translateY:?scaleX:?scaleY" v=":::::0.:0.:1.:1.">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="String"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		<haxe_doc>svg path</haxe_doc>
	</svgPath>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._GradientShape.GradientShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/GradientShape.hx" private="1" module="justGraphix.image.imageAbstracts.GradientShape" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.GradientShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<triangle public="1" get="inline" set="null" line="29" static="1">
			<f a="this:ax:ay:colA:bx:by:colB:cx:cy:colC:?hasHit" v="::::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
			<haxe_doc>creates a filled gradient triangle in OpenGL 3 color style for coordinates a,b,c
        with respective colors after coordinate pairs</haxe_doc>
		</triangle>
		<rectangle public="1" get="inline" set="null" line="39" static="1">
			<f a="this:x:y:wid:hi:colorA:colorB:colorC:colorD">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<a>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
					<dy><x path="Float"/></dy>
					<cy><x path="Float"/></cy>
					<cx><x path="Float"/></cx>
					<bx><x path="Float"/></bx>
					<ay><x path="Float"/></ay>
					<ax><x path="Float"/></ax>
				</a>
			</f>
			<haxe_doc>uses two triangles to form rectangle x,y,width,height with a,b,c,d clockwise gradient colours</haxe_doc>
		</rectangle>
		<quad public="1" get="inline" set="null" line="60" static="1">
			<f a="this:ax:ay:colorA:bx:by:colorB:cx:cy:colorC:dx:dy:colorD:?hasHit" v=":::::::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
			<haxe_doc>uses two triangle to form a quad with clockwise coordinates a,b,c,d
        with respective colours after each coordinate pair

        a better render maybe possible see commented out code in algo.QuadPixel and lerp code in algo.GeomPixel
        ( better render approach compiles but does not yet work, maybe easy? ).</haxe_doc>
		</quad>
		<line public="1" get="inline" set="null" line="76" static="1">
			<f a="this:px:py:qx:qy:thick:colorA:colorB:colorC:colorD:?hasHit:?debugCorners" v="::::::::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
			<haxe_doc>provides a thick line using two gradient triangle vector p,q
        the four colors are arranged clockwise a,b,c,d
        debug corners draws coloured squares on the corners for development</haxe_doc>
		</line>
		<radialPolyon public="1" get="inline" set="null" line="93" static="1">
			<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?sides:?cornerUp" v=":::::::0.:0.:0.:36:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0., gy : 0., gx : 0. }</e></m></meta>
			<haxe_doc>@see fillPolyBuild
        this is a version with radial gradient applied so the centre is one color, but only used gradient triangles so limited</haxe_doc>
		</radialPolyon>
		<radialEllipseTri public="1" get="inline" set="null" line="113" static="1">
			<f a="this:cx:cy:rx:ry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::0.:0.:0.:false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0., gy : 0., gx : 0. }</e></m></meta>
			<haxe_doc>provides a filled ellipse/circle using triangles and more sides for large with a radial color gradient from the centre 
        colorIn is the internal colour and colorOut the external one, gx and gy -1 to 1 provide offset centre
        there are lots of limitations, gx and gy max and min obviously look bad and may need to scale them to 0.7 for rotated ellipse</haxe_doc>
		</radialEllipseTri>
		<sweepTri public="1" get="inline" set="null" line="131" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:colA:colB:colC:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</sweepTri>
		<pie public="1" get="inline" set="null" line="149" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:centreColor:outerColor:?hasHit:?targetError" v=":::::::::false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
		</pie>
		<radialRectangle public="1" get="inline" set="null" line="193" static="1">
			<f a="this:x:y:wid:hi:colorIn:colorOut:?gx:?gy" v=":::::::0:0">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ gy : 0, gx : 0 }</e></m></meta>
			<haxe_doc>provides a radial colour gradient, it uses a temp pixelimage to draw a rectangle and then radial ellipse within.
        @:see fillRadialEllipseTri</haxe_doc>
		</radialRectangle>
		<thickArrow public="1" get="inline" set="null" line="218" static="1">
			<f a="this:px:py:qx:qy:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::false:false:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		</thickArrow>
		<thickArrowBoth public="1" get="inline" set="null" line="235" static="1">
			<f a="this:px:py:qx:qy:thick:color1:color2:?hasHit" v="::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</thickArrowBoth>
		<thickFixArrow public="1" get="inline" set="null" line="251" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?flare:?reverseFlare:?hasHit" v="::::::::::false:false:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, reverseFlare : false, flare : false }</e></m></meta>
		</thickFixArrow>
		<thickFixArrowBoth public="1" get="inline" set="null" line="268" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color1:color2:?hasHit" v="::::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</thickFixArrowBoth>
		<RoundRectangle public="1" get="inline" set="null" line="289" static="1">
			<f a="this:x:y:hi:wid:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v=":::::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
			<haxe_doc>x, y      - position
        hi, wid   - the outside dimensions
        dx, dy    - define the 9-slice distance in from x, y, dy can default to dx
        fat, tall - the inner dimensions of the 9-slice centre, optional</haxe_doc>
		</RoundRectangle>
		<lineRoundRectangle public="1" get="inline" set="null" line="304" static="1">
			<f a="this:x:y:hi:wid:thick:colorA:colorB:colorC:colorD:?dx:?dy:?fat:?tall" v="::::::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		</lineRoundRectangle>
		<svgPath public="1" get="inline" set="null" line="331" static="1">
			<f a="this:path:strokeWidth:strokeTopColor:strokeBottomColor:?translateX:?translateY:?scaleX:?scaleY" v=":::::0.:0.:1.:1.">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
			<haxe_doc>svg path</haxe_doc>
		</svgPath>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.ImageShape" params="" file="src/justGraphix/image/imageAbstracts/ImageShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._ImageShape.ImageShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/ImageShape.hx" private="1" module="justGraphix.image.imageAbstracts.ImageShape" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.ImageShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<triangle public="1" get="inline" set="null" line="22" static="1">
		<f a="this:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</triangle>
	<quad public="1" get="inline" set="null" line="32" static="1">
		<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
	</quad>
	<image public="1" get="inline" set="null" line="43" static="1">
		<f a="this:texture:?x:?y:?wid:?hi:?hasHit" v="::0.:0.:0.:0.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, hi : 0., wid : 0., y : 0., x : 0. }</e></m></meta>
		<haxe_doc>just a simple image ( automatically scaled )</haxe_doc>
	</image>
	<rectangle public="1" get="inline" set="null" line="60" static="1">
		<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?scaleX:?scaleY:?hasHit" v=":::::::0.:0.:0.:0.:0.:1.:1.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, scaleY : 1., scaleX : 1., skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
	</rectangle>
	<nineSlice public="1" get="inline" set="null" line="136" static="1">
		<f a="this:texture:win:x:y:wid:hi:left:top:fat:tall:widNew:hiNew:leftNew:topNew:fatNew:tallNew:?hasHit" v=":::::::::::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</nineSlice>
	<quadFudge public="1" get="inline" set="null" line="166" static="1">
		<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		<haxe_doc>works with image Fudge of UV values, deprediated unless turns out useful in edge cases.</haxe_doc>
	</quadFudge>
	<rectFudge public="1" get="inline" set="null" line="185" static="1">
		<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?hasHit" v=":::::::0.:0.:0.:0.:0.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<c path="justGraphix.image.algo.RectangleWindow"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
	</rectFudge>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._ImageShape.ImageShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/ImageShape.hx" private="1" module="justGraphix.image.imageAbstracts.ImageShape" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.ImageShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<triangle public="1" get="inline" set="null" line="22" static="1">
			<f a="this:texture:win:ax:ay:au:av:bx:by:bu:bv:cx:cy:cu:cv:?hasHit" v=":::::::::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</triangle>
		<quad public="1" get="inline" set="null" line="32" static="1">
			<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
		</quad>
		<image public="1" get="inline" set="null" line="43" static="1">
			<f a="this:texture:?x:?y:?wid:?hi:?hasHit" v="::0.:0.:0.:0.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, hi : 0., wid : 0., y : 0., x : 0. }</e></m></meta>
			<haxe_doc>just a simple image ( automatically scaled )</haxe_doc>
		</image>
		<rectangle public="1" get="inline" set="null" line="60" static="1">
			<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?scaleX:?scaleY:?hasHit" v=":::::::0.:0.:0.:0.:0.:1.:1.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, scaleY : 1., scaleX : 1., skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
		</rectangle>
		<nineSlice public="1" get="inline" set="null" line="136" static="1">
			<f a="this:texture:win:x:y:wid:hi:left:top:fat:tall:widNew:hiNew:leftNew:topNew:fatNew:tallNew:?hasHit" v=":::::::::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</nineSlice>
		<quadFudge public="1" get="inline" set="null" line="166" static="1">
			<f a="this:texture:win:ax:ay:bx:by:cx:cy:dx:dy:?hasHit" v=":::::::::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true }</e></m></meta>
			<haxe_doc>works with image Fudge of UV values, deprediated unless turns out useful in edge cases.</haxe_doc>
		</quadFudge>
		<rectFudge public="1" get="inline" set="null" line="185" static="1">
			<f a="this:texture:win:x:y:wid:hi:?theta:?centreX:?centreY:?skewX:?skewY:?hasHit" v=":::::::0.:0.:0.:0.:0.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<c path="justGraphix.image.algo.RectangleWindow"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, skewY : 0., skewX : 0., centreY : 0., centreX : 0., theta : 0. }</e></m></meta>
		</rectFudge>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.LineShape" params="" file="src/justGraphix/image/imageAbstracts/LineShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._LineShape.LineShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/LineShape.hx" private="1" module="justGraphix.image.imageAbstracts.LineShape" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.LineShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<thinLine public="1" get="inline" set="null" line="24" static="1">
		<f a="this:ax:ay:bx:by:color">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<c path="justGraphix.hit.HitThinLine"/>
		</f>
		<meta><m n=":keep"/></meta>
	</thinLine>
	<roundRectangle public="1" get="inline" set="null" line="34" static="1">
		<f a="this:x:y:hi:wid:thick:color:?dx:?dy:?fat:?tall" v=":::::::-1.:-1.:-1.:-1.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
	</roundRectangle>
	<ellipseTri public="1" get="inline" set="null" line="70" static="1">
		<f a="this:cx:cy:rx:ry:drx:dry:color:?phi:?printSides:?targetError" v="::::::::0.:false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0. }</e></m></meta>
		<haxe_doc>this is provides a thick outline ellipse or circle ( using triangles ), large ones have more sides.
        @:see fillEllipseTri
        it uses a temp pixelimage with transparent false,
        and a second ellipse to remove the centre before copying over pixels
        setup so large ellipses automatically use more sides.
        for phi rotated ellipses it over estimates the temp pixelimage to be safe</haxe_doc>
	</ellipseTri>
	<radialEllipseTri public="1" get="inline" set="null" line="121" static="1">
		<f a="this:cx:cy:rx:ry:drx:dry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::::0.:0.:0:false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0, gy : 0., gx : 0. }</e></m></meta>
		<haxe_doc>radial ellipse thick line 
        @see fillRadialEllipseTri</haxe_doc>
	</radialEllipseTri>
	<svgPath public="1" get="inline" set="null" line="178" static="1">
		<f a="this:path:strokeWidth:strokeColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v="::::0.:0.:1.:1.:false">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="String"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		<haxe_doc>svg path thick line</haxe_doc>
	</svgPath>
	<svgThinPath public="1" get="inline" set="null" line="199" static="1">
		<f a="this:path:strokeColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v=":::0.:0.:1.:1.:false">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
	</svgThinPath>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._LineShape.LineShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/LineShape.hx" private="1" module="justGraphix.image.imageAbstracts.LineShape" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.LineShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<thinLine public="1" get="inline" set="null" line="24" static="1">
			<f a="this:ax:ay:bx:by:color">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="justGraphix.hit.HitThinLine"/>
			</f>
			<meta><m n=":keep"/></meta>
		</thinLine>
		<roundRectangle public="1" get="inline" set="null" line="34" static="1">
			<f a="this:x:y:hi:wid:thick:color:?dx:?dy:?fat:?tall" v=":::::::-1.:-1.:-1.:-1.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tall : -1., fat : -1., dy : -1., dx : -1. }</e></m></meta>
		</roundRectangle>
		<ellipseTri public="1" get="inline" set="null" line="70" static="1">
			<f a="this:cx:cy:rx:ry:drx:dry:color:?phi:?printSides:?targetError" v="::::::::0.:false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0. }</e></m></meta>
			<haxe_doc>this is provides a thick outline ellipse or circle ( using triangles ), large ones have more sides.
        @:see fillEllipseTri
        it uses a temp pixelimage with transparent false,
        and a second ellipse to remove the centre before copying over pixels
        setup so large ellipses automatically use more sides.
        for phi rotated ellipses it over estimates the temp pixelimage to be safe</haxe_doc>
		</ellipseTri>
		<radialEllipseTri public="1" get="inline" set="null" line="121" static="1">
			<f a="this:cx:cy:rx:ry:drx:dry:colorIn:colorOut:?gx:?gy:?phi:?printSides:?targetError" v=":::::::::0.:0.:0:false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0, gy : 0., gx : 0. }</e></m></meta>
			<haxe_doc>radial ellipse thick line 
        @see fillRadialEllipseTri</haxe_doc>
		</radialEllipseTri>
		<svgPath public="1" get="inline" set="null" line="178" static="1">
			<f a="this:path:strokeWidth:strokeColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v="::::0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
			<haxe_doc>svg path thick line</haxe_doc>
		</svgPath>
		<svgThinPath public="1" get="inline" set="null" line="199" static="1">
			<f a="this:path:strokeColor:?translateX:?translateY:?scaleX:?scaleY:?hitsAllowed" v=":::0.:0.:1.:1.:false">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hitsAllowed : false, scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		</svgThinPath>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.PatternShape" params="" file="src/justGraphix/image/imageAbstracts/PatternShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._PatternShape.PatternShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/PatternShape.hx" private="1" module="justGraphix.image.imageAbstracts.PatternShape" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.PatternShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<rectangle public="1" get="inline" set="null" line="17" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></rectangle>
	<rectangleDown public="1" get="inline" set="null" line="27" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></rectangleDown>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._PatternShape.PatternShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/PatternShape.hx" private="1" module="justGraphix.image.imageAbstracts.PatternShape" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.PatternShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<rectangle public="1" get="inline" set="null" line="17" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></rectangle>
		<rectangleDown public="1" get="inline" set="null" line="27" static="1"><f a="this:x:y:w:h:foreColor:backColor:patternFill">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></rectangleDown>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.RawImage" params="" file="src/justGraphix/image/imageAbstracts/RawImage.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<haxe_doc>Provides methods to deal directly with the raw Pixelimage data
    take care as the internal colour values are not ARGB format
    methods are very similar to the Picture class within Img in iterMagix</haxe_doc>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._RawImage.RawImage_Impl_" params="" file="src/justGraphix/image/imageAbstracts/RawImage.hx" private="1" module="justGraphix.image.imageAbstracts.RawImage" final="1">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.RawImage"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<clone public="1" get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<haxe_doc>clone the current Pixelimage to a new one, does not copy the mask.</haxe_doc>
	</clone>
	<set public="1" get="inline" set="null" line="33" static="1">
		<f a="this:index:value">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>direct array access of pixel Int
        not advised as pixels normally have mask and blend applied
        and the color order is changed when set indirectly.
        see setPixel on Pixelimage</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="37" static="1">
		<f a="this:index">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<fromTo public="1" get="inline" set="null" line="43" static="1">
		<f a="a:b">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<haxe_doc>transfers pixel values directly from first image to second
        returns second image</haxe_doc>
	</fromTo>
	<toFrom public="1" get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<haxe_doc>transfers pixel values directly from second image to first
        return first image</haxe_doc>
	</toFrom>
	<traceGrid public="1" get="inline" set="null" line="60" static="1">
		<f a="this">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Void"/>
		</f>
		<haxe_doc>debug tool traces the pixel data in rows to console.</haxe_doc>
	</traceGrid>
	<imgToString public="1" get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="String"/>
		</f>
		<haxe_doc>traces the pixel values stored internally</haxe_doc>
	</imgToString>
	<rawImageData public="1" get="accessor" set="accessor" static="1"><e path="justGraphix.image.RawImageData"/></rawImageData>
	<get_rawImageData get="inline" set="null" line="72" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<e path="justGraphix.image.RawImageData"/>
</f></get_rawImageData>
	<set_rawImageData get="inline" set="null" line="76" static="1"><f a="this:d">
	<x path="justGraphix.image.Pixelimage"/>
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></set_rawImageData>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._RawImage.RawImage_Impl_" params="" file="src/justGraphix/image/imageAbstracts/RawImage.hx" private="1" module="justGraphix.image.imageAbstracts.RawImage" final="1">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.RawImage"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<clone public="1" get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<haxe_doc>clone the current Pixelimage to a new one, does not copy the mask.</haxe_doc>
		</clone>
		<set public="1" get="inline" set="null" line="33" static="1">
			<f a="this:index:value">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>direct array access of pixel Int
        not advised as pixels normally have mask and blend applied
        and the color order is changed when set indirectly.
        see setPixel on Pixelimage</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="37" static="1">
			<f a="this:index">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<fromTo public="1" get="inline" set="null" line="43" static="1">
			<f a="a:b">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<haxe_doc>transfers pixel values directly from first image to second
        returns second image</haxe_doc>
		</fromTo>
		<toFrom public="1" get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<haxe_doc>transfers pixel values directly from second image to first
        return first image</haxe_doc>
		</toFrom>
		<traceGrid public="1" get="inline" set="null" line="60" static="1">
			<f a="this">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Void"/>
			</f>
			<haxe_doc>debug tool traces the pixel data in rows to console.</haxe_doc>
		</traceGrid>
		<imgToString public="1" get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="String"/>
			</f>
			<haxe_doc>traces the pixel values stored internally</haxe_doc>
		</imgToString>
		<rawImageData public="1" get="accessor" set="accessor" static="1"><e path="justGraphix.image.RawImageData"/></rawImageData>
		<get_rawImageData get="inline" set="null" line="72" static="1"><f a="this">
	<x path="justGraphix.image.Pixelimage"/>
	<e path="justGraphix.image.RawImageData"/>
</f></get_rawImageData>
		<set_rawImageData get="inline" set="null" line="76" static="1"><f a="this:d">
	<x path="justGraphix.image.Pixelimage"/>
	<e path="justGraphix.image.RawImageData"/>
	<e path="justGraphix.image.RawImageData"/>
</f></set_rawImageData>
	</class>
	<class path="justGraphix.image.imageAbstracts.NineColorBorder" params="" file="src/justGraphix/image/imageAbstracts/RectanglePad.hx" module="justGraphix.image.imageAbstracts.RectanglePad">
		<left public="1"><x path="Int"/></left>
		<right public="1"><x path="Int"/></right>
		<top public="1"><x path="Int"/></top>
		<bottom public="1"><x path="Int"/></bottom>
		<leftTop public="1"><x path="Int"/></leftTop>
		<rightTop public="1"><x path="Int"/></rightTop>
		<leftBottom public="1"><x path="Int"/></leftBottom>
		<rightBottom public="1"><x path="Int"/></rightBottom>
		<middle public="1"><x path="Int"/></middle>
		<new public="1" get="inline" set="null" line="27">
			<f a="?left:?right:?top:?bottom:?leftTop:?rightTop:?leftBottom:?rightBottom:?middle" v="0xFF80ADF0:0xFFF08080:0xFFF9F17F:0xff94eaea:0xffe09500:0xff9ff49f:0xFFf0a0f0:0xFFB18BEA:0xFFf0a0a0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ middle : 0xFFf0a0a0, rightBottom : 0xFFB18BEA, leftBottom : 0xFFf0a0f0, rightTop : 0xff9ff49f, leftTop : 0xffe09500, bottom : 0xff94eaea, top : 0xFFF9F17F, right : 0xFFF08080, left : 0xFF80ADF0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.RectanglePad" params="" file="src/justGraphix/image/imageAbstracts/RectanglePad.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._RectanglePad.RectanglePad_Impl_" params="" file="src/justGraphix/image/imageAbstracts/RectanglePad.hx" private="1" module="justGraphix.image.imageAbstracts.RectanglePad" final="1">
	<_new public="1" get="inline" set="null" line="43" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.RectanglePad"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<colorPadImage public="1" get="inline" set="null" line="48" static="1">
		<f a="this:places:?color" v="::null">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<c path="justGraphix.image.imageAbstracts.NineColorBorder"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ color : null }</e></m></meta>
	</colorPadImage>
	<colorPadImageXY public="1" get="inline" set="null" line="52" static="1">
		<f a="this:placesX:placesY:?color" v=":::null">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="justGraphix.image.imageAbstracts.NineColorBorder"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ color : null }</e></m></meta>
	</colorPadImageXY>
	<borderPad public="1" get="inline" set="null" line="80" static="1"><f a="this:placesX:placesY:color">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></borderPad>
	<padImage public="1" get="inline" set="null" line="107" static="1"><f a="this:places">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padImage>
	<padImageXY public="1" get="inline" set="null" line="111" static="1"><f a="this:placesX:placesY">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padImageXY>
	<padWrapImage public="1" get="inline" set="null" line="138" static="1"><f a="this:places">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padWrapImage>
	<padWrapImageXY public="1" get="inline" set="null" line="144" static="1"><f a="this:placesX:placesY">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padWrapImageXY>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._RectanglePad.RectanglePad_Impl_" params="" file="src/justGraphix/image/imageAbstracts/RectanglePad.hx" private="1" module="justGraphix.image.imageAbstracts.RectanglePad" final="1">
		<_new public="1" get="inline" set="null" line="43" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.RectanglePad"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<colorPadImage public="1" get="inline" set="null" line="48" static="1">
			<f a="this:places:?color" v="::null">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<c path="justGraphix.image.imageAbstracts.NineColorBorder"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ color : null }</e></m></meta>
		</colorPadImage>
		<colorPadImageXY public="1" get="inline" set="null" line="52" static="1">
			<f a="this:placesX:placesY:?color" v=":::null">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="justGraphix.image.imageAbstracts.NineColorBorder"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ color : null }</e></m></meta>
		</colorPadImageXY>
		<borderPad public="1" get="inline" set="null" line="80" static="1"><f a="this:placesX:placesY:color">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></borderPad>
		<padImage public="1" get="inline" set="null" line="107" static="1"><f a="this:places">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padImage>
		<padImageXY public="1" get="inline" set="null" line="111" static="1"><f a="this:placesX:placesY">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padImageXY>
		<padWrapImage public="1" get="inline" set="null" line="138" static="1"><f a="this:places">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padWrapImage>
		<padWrapImageXY public="1" get="inline" set="null" line="144" static="1"><f a="this:placesX:placesY">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.image.Pixelimage"/>
</f></padWrapImageXY>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.SoftShape" params="" file="src/justGraphix/image/imageAbstracts/SoftShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._SoftShape.SoftShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/SoftShape.hx" private="1" module="justGraphix.image.imageAbstracts.SoftShape" final="1">
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.SoftShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<quint public="1" get="inline" set="null" line="33" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:softC:?hasHit" v=":::::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</quint>
	<quad public="1" get="inline" set="null" line="57" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</quad>
	<quadFudge public="1" get="inline" set="null" line="85" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</quadFudge>
	<quadQuarter public="1" get="inline" set="null" line="111" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</quadQuarter>
	<line public="1" get="inline" set="null" line="137" static="1">
		<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</line>
	<lineLuxury public="1" get="inline" set="null" line="165" static="1">
		<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
	</lineLuxury>
	<triangle public="1" get="inline" set="null" line="191" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:color:soft3:?softAB:?softBC:?softCA:?hasHit" v=":::::::::true:true:true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitTri"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
	</triangle>
	<arrow public="1" get="inline" set="null" line="216" static="1">
		<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::false:false:40.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
	</arrow>
	<arrowBoth public="1" get="inline" set="null" line="231" static="1">
		<f a="this:px:py:qx:qy:thick:color:?soft:?hasHit" v=":::::::40.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
	</arrowBoth>
	<fixArrow public="1" get="inline" set="null" line="248" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::::false:false:40.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
	</fixArrow>
	<fixArrowBoth public="1" get="inline" set="null" line="267" static="1">
		<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?soft:?hasHit" v=":::::::::40.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
	</fixArrowBoth>
	<ellipseTri public="1" get="inline" set="null" line="285" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?softC:?printSides:?targetError" v="::::::0:10:false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, softC : 10, phi : 0 }</e></m></meta>
	</ellipseTri>
	<polyBuild public="1" get="inline" set="null" line="304" static="1">
		<f a="this:cx:cy:rx:ry:color:?phi:?sides:?softC:?cornerUp" v="::::::0.:36:10.:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, softC : 10., sides : 36, phi : 0. }</e></m></meta>
	</polyBuild>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._SoftShape.SoftShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/SoftShape.hx" private="1" module="justGraphix.image.imageAbstracts.SoftShape" final="1">
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.SoftShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<quint public="1" get="inline" set="null" line="33" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:softC:?hasHit" v=":::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</quint>
		<quad public="1" get="inline" set="null" line="57" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</quad>
		<quadFudge public="1" get="inline" set="null" line="85" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</quadFudge>
		<quadQuarter public="1" get="inline" set="null" line="111" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit" v="::::::::::40:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</quadQuarter>
		<line public="1" get="inline" set="null" line="137" static="1">
			<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</line>
		<lineLuxury public="1" get="inline" set="null" line="165" static="1">
			<f a="this:px:py:qx:qy:thick:color:?soft:?softAB:?softBC:?softCD:?softDA:?hasHit:?debugCorners" v=":::::::40:true:true:true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : true, softDA : true, softCD : true, softBC : true, softAB : true, soft : 40 }</e></m></meta>
		</lineLuxury>
		<triangle public="1" get="inline" set="null" line="191" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:color:soft3:?softAB:?softBC:?softCA:?hasHit" v=":::::::::true:true:true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitTri"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false, softCA : true, softBC : true, softAB : true }</e></m></meta>
		</triangle>
		<arrow public="1" get="inline" set="null" line="216" static="1">
			<f a="this:px:py:qx:qy:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::false:false:40.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</arrow>
		<arrowBoth public="1" get="inline" set="null" line="231" static="1">
			<f a="this:px:py:qx:qy:thick:color:?soft:?hasHit" v=":::::::40.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
		</arrowBoth>
		<fixArrow public="1" get="inline" set="null" line="248" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?flare:?reverseFlare:?soft:?hasHit" v=":::::::::false:false:40.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40., reverseFlare : false, flare : false }</e></m></meta>
		</fixArrow>
		<fixArrowBoth public="1" get="inline" set="null" line="267" static="1">
			<f a="this:px:py:qx:qy:arrowWidth:arrowHeight:thick:color:?soft:?hasHit" v=":::::::::40.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : true, soft : 40. }</e></m></meta>
		</fixArrowBoth>
		<ellipseTri public="1" get="inline" set="null" line="285" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?softC:?printSides:?targetError" v="::::::0:10:false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, softC : 10, phi : 0 }</e></m></meta>
		</ellipseTri>
		<polyBuild public="1" get="inline" set="null" line="304" static="1">
			<f a="this:cx:cy:rx:ry:color:?phi:?sides:?softC:?cornerUp" v="::::::0.:36:10.:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, softC : 10., sides : 36, phi : 0. }</e></m></meta>
		</polyBuild>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.TileShape" params="" file="src/justGraphix/image/imageAbstracts/TileShape.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._TileShape.TileShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/TileShape.hx" private="1" module="justGraphix.image.imageAbstracts.TileShape" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.TileShape"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<triangle public="1" get="inline" set="null" line="25" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</triangle>
	<quad public="1" get="inline" set="null" line="35" static="1">
		<f a="this:ax:ay:bx:by:cx:cy:dx:dy:tileImage:?hasHit" v="::::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</quad>
	<rectangle public="1" get="inline" set="null" line="45" static="1">
		<f a="this:x:y:wid:hi:tileImage:?hasHit" v="::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitQuad"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</rectangle>
	<line public="1" get="inline" set="null" line="57" static="1">
		<f a="this:px:py:qx:qy:thick:tileImage:?hasHit:?debugCorners" v=":::::::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
		</f>
		<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
		<haxe_doc>tiles a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
	</line>
	<PolyBuild public="1" get="inline" set="null" line="78" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi:?sides:?cornerUp" v="::::::0.:36:true">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
		<haxe_doc>this provides building block for image tiled regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
	</PolyBuild>
	<quadrant public="1" get="inline" set="null" line="95" static="1">
		<f a="this:cx:cy:rx:ry:startAngle:tileImage:?phi:?targetError" v="::::::::1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
		<haxe_doc>tiles Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
	</quadrant>
	<quadrantI public="1" get="inline" set="null" line="109" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantI>
	<quadrantII public="1" get="inline" set="null" line="122" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantII>
	<quadrantIII public="1" get="inline" set="null" line="135" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantIII>
	<quadrantIV public="1" get="inline" set="null" line="148" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
	</quadrantIV>
	<sweepTri public="1" get="inline" set="null" line="161" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit" v="::::::::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<c path="justGraphix.hit.HitTri"/>
		</f>
		<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
	</sweepTri>
	<pie public="1" get="inline" set="null" line="178" static="1">
		<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit:?targetError" v="::::::::false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
	</pie>
	<ellipseTri public="1" get="inline" set="null" line="220" static="1">
		<f a="this:cx:cy:rx:ry:tileImage:?phi:?printSides:?targetError" v="::::::0:false:1.05">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
	</ellipseTri>
	<svgPath public="1" get="inline" set="null" line="237" static="1">
		<f a="this:path:strokeWidth:tileImageStroke:?translateX:?translateY:?scaleX:?scaleY" v="::::0.:0.:1.:1.">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="String"/>
			<x path="Float"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
		<haxe_doc>svg path</haxe_doc>
	</svgPath>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._TileShape.TileShape_Impl_" params="" file="src/justGraphix/image/imageAbstracts/TileShape.hx" private="1" module="justGraphix.image.imageAbstracts.TileShape" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.TileShape"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<triangle public="1" get="inline" set="null" line="25" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:tileImage:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitTri"/></x>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</triangle>
		<quad public="1" get="inline" set="null" line="35" static="1">
			<f a="this:ax:ay:bx:by:cx:cy:dx:dy:tileImage:?hasHit" v="::::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</quad>
		<rectangle public="1" get="inline" set="null" line="45" static="1">
			<f a="this:x:y:wid:hi:tileImage:?hasHit" v="::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitQuad"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</rectangle>
		<line public="1" get="inline" set="null" line="57" static="1">
			<f a="this:px:py:qx:qy:thick:tileImage:?hasHit:?debugCorners" v=":::::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><c path="justGraphix.hit.HitQuad"/></x>
			</f>
			<meta><m n=":value"><e>{ debugCorners : false, hasHit : false }</e></m></meta>
			<haxe_doc>tiles a thick line using two triangles vector p, q
        debug corners draws coloured squares on the corners for development</haxe_doc>
		</line>
		<PolyBuild public="1" get="inline" set="null" line="78" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi:?sides:?cornerUp" v="::::::0.:36:true">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cornerUp : true, sides : 36, phi : 0. }</e></m></meta>
			<haxe_doc>this provides building block for image tiled regular polygons,ellipses and circles
        cornerUp false will have polygon with flat edge on the top
        defined from centre cx,cy the radius allow stretching the regualar and phi controls rotation
        sides defines the sides required
        would be nice to add skew in future?
        cornerUp may need debugging</haxe_doc>
		</PolyBuild>
		<quadrant public="1" get="inline" set="null" line="95" static="1">
			<f a="this:cx:cy:rx:ry:startAngle:tileImage:?phi:?targetError" v="::::::::1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05 }</e></m></meta>
			<haxe_doc>tiles Quadrant draws a quarter arc, for rounded rectangle there are I,II,III,IV defined ones in Pixelshape</haxe_doc>
		</quadrant>
		<quadrantI public="1" get="inline" set="null" line="109" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantI>
		<quadrantII public="1" get="inline" set="null" line="122" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantII>
		<quadrantIII public="1" get="inline" set="null" line="135" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantIII>
		<quadrantIV public="1" get="inline" set="null" line="148" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi" v="::::::0.">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ phi : 0. }</e></m></meta>
		</quadrantIV>
		<sweepTri public="1" get="inline" set="null" line="161" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit" v="::::::::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<c path="justGraphix.hit.HitTri"/>
			</f>
			<meta><m n=":value"><e>{ hasHit : false }</e></m></meta>
		</sweepTri>
		<pie public="1" get="inline" set="null" line="178" static="1">
			<f a="this:ax:ay:rx:ry:startRadian:sweepRadian:tileImage:?hasHit:?targetError" v="::::::::false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Null"><c path="justGraphix.hit.HitTriArray"/></x>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, hasHit : false }</e></m></meta>
		</pie>
		<ellipseTri public="1" get="inline" set="null" line="220" static="1">
			<f a="this:cx:cy:rx:ry:tileImage:?phi:?printSides:?targetError" v="::::::0:false:1.05">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetError : 1.05, printSides : false, phi : 0 }</e></m></meta>
		</ellipseTri>
		<svgPath public="1" get="inline" set="null" line="237" static="1">
			<f a="this:path:strokeWidth:tileImageStroke:?translateX:?translateY:?scaleX:?scaleY" v="::::0.:0.:1.:1.">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ scaleY : 1., scaleX : 1., translateY : 0., translateX : 0. }</e></m></meta>
			<haxe_doc>svg path</haxe_doc>
		</svgPath>
	</class>
	<abstract path="justGraphix.image.imageAbstracts.TransformImage" params="" file="src/justGraphix/image/imageAbstracts/TransformImage.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta><m n=":transient"/></meta>
		<impl><class path="justGraphix.image.imageAbstracts._TransformImage.TransformImage_Impl_" params="" file="src/justGraphix/image/imageAbstracts/TransformImage.hx" private="1" module="justGraphix.image.imageAbstracts.TransformImage" final="1">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.imageAbstracts.TransformImage"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<flipX public="1" get="inline" set="null" line="15" static="1">
		<f a="this:?inPlace:?includeMask" v=":true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, inPlace : true }</e></m></meta>
	</flipX>
	<flipY public="1" get="inline" set="null" line="19" static="1">
		<f a="this:?inPlace:?includeMask" v=":true:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, inPlace : true }</e></m></meta>
	</flipY>
	<flippedX public="1" get="inline" set="null" line="30" static="1">
		<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
		<haxe_doc>creates a new Pixelimage that is flipped horizonally.
        inPlace overwrites current.</haxe_doc>
	</flippedX>
	<flippedY public="1" get="inline" set="null" line="41" static="1">
		<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
		<haxe_doc>creates a new Pixelimage that is flipped vertically.
        inPlace overwrites current.</haxe_doc>
	</flippedY>
	<spunClock90 public="1" get="inline" set="null" line="50" static="1">
		<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		<haxe_doc>creates a new Pixelimage base on current image, rotated 90° clockwise</haxe_doc>
	</spunClock90>
	<spunAntiClock90 public="1" get="inline" set="null" line="56" static="1">
		<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</spunAntiClock90>
	<spun180 public="1" get="inline" set="null" line="62" static="1">
		<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</spun180>
	<scaleMatch public="1" get="inline" set="null" line="68" static="1">
		<f a="this:img:?transparent:?includeMask" v="::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</scaleMatch>
	<scaleXY public="1" get="inline" set="null" line="78" static="1">
		<f a="this:sx:sy:?transparent:?includeMask" v=":::false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
	</scaleXY>
	<rotateClockwiseDegrees public="1" get="inline" set="null" line="84" static="1">
		<f a="this:angle:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
	</rotateClockwiseDegrees>
	<rotateClockwiseRadians public="1" get="inline" set="null" line="92" static="1">
		<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
	</rotateClockwiseRadians>
	<rotate public="1" get="inline" set="null" line="100" static="1">
		<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
	</rotate>
	<scaleUpInt public="1" get="inline" set="null" line="107" static="1">
		<f a="this:?scaleW:?scaleH:?transparent:?includeMask" v=":2:2:false:false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ includeMask : false, transparent : false, scaleH : 2, scaleW : 2 }</e></m></meta>
	</scaleUpInt>
	<skew public="1" get="inline" set="null" line="114" static="1">
		<f a="this:skewX:skewY:?inPlace" v=":::false">
			<x path="justGraphix.image.Pixelimage"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta><m n=":value"><e>{ inPlace : false }</e></m></meta>
	</skew>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.image.imageAbstracts._TransformImage.TransformImage_Impl_" params="" file="src/justGraphix/image/imageAbstracts/TransformImage.hx" private="1" module="justGraphix.image.imageAbstracts.TransformImage" final="1">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.imageAbstracts.TransformImage"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<flipX public="1" get="inline" set="null" line="15" static="1">
			<f a="this:?inPlace:?includeMask" v=":true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : true }</e></m></meta>
		</flipX>
		<flipY public="1" get="inline" set="null" line="19" static="1">
			<f a="this:?inPlace:?includeMask" v=":true:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : true }</e></m></meta>
		</flipY>
		<flippedX public="1" get="inline" set="null" line="30" static="1">
			<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage that is flipped horizonally.
        inPlace overwrites current.</haxe_doc>
		</flippedX>
		<flippedY public="1" get="inline" set="null" line="41" static="1">
			<f a="this:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage that is flipped vertically.
        inPlace overwrites current.</haxe_doc>
		</flippedY>
		<spunClock90 public="1" get="inline" set="null" line="50" static="1">
			<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage base on current image, rotated 90° clockwise</haxe_doc>
		</spunClock90>
		<spunAntiClock90 public="1" get="inline" set="null" line="56" static="1">
			<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</spunAntiClock90>
		<spun180 public="1" get="inline" set="null" line="62" static="1">
			<f a="this:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</spun180>
		<scaleMatch public="1" get="inline" set="null" line="68" static="1">
			<f a="this:img:?transparent:?includeMask" v="::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</scaleMatch>
		<scaleXY public="1" get="inline" set="null" line="78" static="1">
			<f a="this:sx:sy:?transparent:?includeMask" v=":::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</scaleXY>
		<rotateClockwiseDegrees public="1" get="inline" set="null" line="84" static="1">
			<f a="this:angle:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotateClockwiseDegrees>
		<rotateClockwiseRadians public="1" get="inline" set="null" line="92" static="1">
			<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotateClockwiseRadians>
		<rotate public="1" get="inline" set="null" line="100" static="1">
			<f a="this:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotate>
		<scaleUpInt public="1" get="inline" set="null" line="107" static="1">
			<f a="this:?scaleW:?scaleH:?transparent:?includeMask" v=":2:2:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, scaleH : 2, scaleW : 2 }</e></m></meta>
		</scaleUpInt>
		<skew public="1" get="inline" set="null" line="114" static="1">
			<f a="this:skewX:skewY:?inPlace" v=":::false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ inPlace : false }</e></m></meta>
		</skew>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.transformation.BinaryPatternFill" params="" file="src/justGraphix/image/transformation/BinaryPatternFill.hx"/>
	<class path="justGraphix.image.transformation._BinaryPatternFill.BinaryPatternFill_Fields_" params="" file="src/justGraphix/image/transformation/BinaryPatternFill.hx" private="1" module="justGraphix.image.transformation.BinaryPatternFill" final="1">
		<patternRectangle public="1" get="inline" set="null" line="10" static="1"><f a="thisImage:x:y:w:h:foreColor:backColor:patternFill">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></patternRectangle>
		<patternRectangleDown public="1" get="inline" set="null" line="42" static="1"><f a="thisImage:x:y:w:h:foreColor:backColor:patternFill">
	<x path="justGraphix.image.Pixelimage"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
	<x path="Void"/>
</f></patternRectangleDown>
	</class>
	<class path="justGraphix.image.transformation._FlipImage.FlipImage_Fields_" params="" file="src/justGraphix/image/transformation/FlipImage.hx" private="1" module="justGraphix.image.transformation.FlipImage" final="1">
		<imageflipX public="1" get="inline" set="null" line="14" static="1">
			<f a="thisImage:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage that is flipped horizonally.
        inPlace overwrites current.</haxe_doc>
		</imageflipX>
		<imageflipY public="1" get="inline" set="null" line="61" static="1">
			<f a="thisImage:x:y:w:h:?transparent:?inPlace:?includeMask" v=":::::false:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, inPlace : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage that is flipped vertically.
        inPlace overwrites current.</haxe_doc>
		</imageflipY>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.transformation._ScaleImage.ScaleImage_Fields_" params="" file="src/justGraphix/image/transformation/ScaleImage.hx" private="1" module="justGraphix.image.transformation.ScaleImage" final="1">
		<scaleUpInteger public="1" get="inline" set="null" line="9" static="1">
			<f a="thisImage:?scaleW:?scaleH:?transparent:?includeMask" v=":2:2:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":value"><e>{ includeMask : false, transparent : false, scaleH : 2, scaleW : 2 }</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage.width</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage.height</e></m>
			</meta>
		</scaleUpInteger>
		<scalingXY public="1" get="inline" set="null" line="38" static="1">
			<f a="thisImage:sx:sy:?transparent:?includeMask" v=":::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":value"><e>{ includeMask : false, transparent : false }</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage.rectWindow</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage.width</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage.height</e></m>
			</meta>
		</scalingXY>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.image.transformation._SpinImage.SpinImage_Fields_" params="" file="src/justGraphix/image/transformation/SpinImage.hx" private="1" module="justGraphix.image.transformation.SpinImage" final="1">
		<spinClock90 public="1" get="inline" set="null" line="15" static="1">
			<f a="thisImage:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
			<haxe_doc>creates a new Pixelimage base on current image, rotated 90° clockwise</haxe_doc>
		</spinClock90>
		<spinAntiClock90 public="1" get="inline" set="null" line="52" static="1">
			<f a="thisImage:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</spinAntiClock90>
		<spin180 public="1" get="inline" set="null" line="90" static="1">
			<f a="thisImage:x:y:w:h:?transparent:?includeMask" v=":::::false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false }</e></m></meta>
		</spin180>
		<rotatingClockwiseDegrees public="1" get="inline" set="null" line="127" static="1">
			<f a="thisImage:angle:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotatingClockwiseDegrees>
		<rotatingClockwiseRadians public="1" get="inline" set="null" line="148" static="1">
			<f a="thisImage:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta><m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m></meta>
		</rotatingClockwiseRadians>
		<rotating public="1" get="inline" set="null" line="169" static="1">
			<f a="thisImage:theta:?centreX:?centreY:?transparent:?includeMask" v="::0.:0.:false:false">
				<x path="justGraphix.image.Pixelimage"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":value"><e>{ includeMask : false, transparent : false, centreY : 0., centreX : 0. }</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage.rectWindow</e></m>
			</meta>
		</rotating>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterStepBack" params="" file="src/justGraphix/iterMagix/BackwardStep.hx" module="justGraphix.iterMagix.BackwardStep">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<step public="1"><x path="Int"/></step>
		<count public="1"><x path="Int"/></count>
		<includeMax public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</includeMax>
		<new public="1" get="inline" set="null" line="14">
			<f a="min_:max_:?step_" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ step_ : 1 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.BackwardStep" params="" file="src/justGraphix/iterMagix/BackwardStep.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterStepBack"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterStepBack"/></this>
		<to><icast field="toIterStart"><x path="justGraphix.iterMagix.BackwardStep"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":access"><e>IntIterStepBack.step</e></m>
		</meta>
		<impl><class path="justGraphix.iterMagix._BackwardStep.BackwardStep_Impl_" params="" file="src/justGraphix/iterMagix/BackwardStep.hx" private="1" module="justGraphix.iterMagix.BackwardStep" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.BackwardStep"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="31" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="justGraphix.iterMagix.BackwardStep"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="35" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.IntIterStepBack"/>
			<x path="justGraphix.iterMagix.BackwardStep"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<hasNext public="1" get="inline" set="null" line="40" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="Int"/>
</f></next>
	<step public="1" get="inline" set="null" line="57" static="1"><f a="this:step_">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.BackwardStep"/>
</f></step>
	<fromTheTop public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="justGraphix.iterMagix.BackwardStep"/>
</f></fromTheTop>
	<meta>
		<m n=":access"><e>IntIterStepBack.step</e></m>
		<m n=":access">
			<e>IntIterator.min</e>
			<e>IntIterator.max</e>
		</m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._BackwardStep.BackwardStep_Impl_" params="" file="src/justGraphix/iterMagix/BackwardStep.hx" private="1" module="justGraphix.iterMagix.BackwardStep" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.BackwardStep"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="31" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="justGraphix.iterMagix.BackwardStep"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="35" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.IntIterStepBack"/>
				<x path="justGraphix.iterMagix.BackwardStep"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<hasNext public="1" get="inline" set="null" line="40" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="Int"/>
</f></next>
		<step public="1" get="inline" set="null" line="57" static="1"><f a="this:step_">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.BackwardStep"/>
</f></step>
		<fromTheTop public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStepBack"/>
	<x path="justGraphix.iterMagix.BackwardStep"/>
</f></fromTheTop>
		<meta>
			<m n=":access"><e>IntIterStepBack.step</e></m>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.Backwards" params="" file="src/justGraphix/iterMagix/Backwards.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterStart"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterStart"/></this>
		<to><icast field="toIterStart"><x path="justGraphix.iterMagix.Backwards"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
		<impl><class path="justGraphix.iterMagix._Backwards.Backwards_Impl_" params="" file="src/justGraphix/iterMagix/Backwards.hx" private="1" module="justGraphix.iterMagix.Backwards" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.Backwards"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="19" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="justGraphix.iterMagix.Backwards"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="23" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.IntIterStart"/>
			<x path="justGraphix.iterMagix.Backwards"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<hasNext public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
</f></next>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Backwards.Backwards_Impl_" params="" file="src/justGraphix/iterMagix/Backwards.hx" private="1" module="justGraphix.iterMagix.Backwards" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.Backwards"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="19" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="justGraphix.iterMagix.Backwards"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="23" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.IntIterStart"/>
				<x path="justGraphix.iterMagix.Backwards"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<hasNext public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
</f></next>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<typedef path="justGraphix.iterMagix.BoolUpdate" params="" file="src/justGraphix/iterMagix/Booly.hx" module="justGraphix.iterMagix.Booly"><f a="">
	<x path="Bool"/>
	<x path="Bool"/>
</f></typedef>
	<abstract path="justGraphix.iterMagix.Booly" params="" file="src/justGraphix/iterMagix/Booly.hx">
		<from><icast><x path="Bool"/></icast></from>
		<this><x path="Bool"/></this>
		<to><icast><x path="Bool"/></icast></to>
		<impl><class path="justGraphix.iterMagix._Booly.Booly_Impl_" params="" file="src/justGraphix/iterMagix/Booly.hx" private="1" module="justGraphix.iterMagix.Booly" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="b">
			<x path="Bool"/>
			<x path="justGraphix.iterMagix.Booly"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.BoolUpdate"/></updater>
	<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<x path="Bool"/>
	<t path="justGraphix.iterMagix.BoolUpdate"/>
</f></get_updater>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Booly.Booly_Impl_" params="" file="src/justGraphix/iterMagix/Booly.hx" private="1" module="justGraphix.iterMagix.Booly" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="justGraphix.iterMagix.Booly"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.BoolUpdate"/></updater>
		<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<x path="Bool"/>
	<t path="justGraphix.iterMagix.BoolUpdate"/>
</f></get_updater>
	</class>
	<class path="justGraphix.iterMagix.BoundIterator" params="" file="src/justGraphix/iterMagix/BoundIterator.hx">
		<_boundIterator3 public="1" expr="boundIterator3">
			<f a="a:b:c">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":value"><e>boundIterator3</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">boundIterator3</font> module level field]]></haxe_doc>
		</_boundIterator3>
		<_boundIterator4 public="1" expr="boundIterator4">
			<f a="a:b:c:d">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":value"><e>boundIterator4</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">fillGrad4RoundRectangle</font> module level field]]></haxe_doc>
		</_boundIterator4>
		<_boundIteratorX public="1" expr="boundIteratorX">
			<f a="pMin:pMax">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":value"><e>boundIteratorX</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">boundIteratorX</font> module level field]]></haxe_doc>
		</_boundIteratorX>
		<new public="1" set="method" line="70">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.iterMagix._BoundIterator.BoundIterator_Fields_" params="" file="src/justGraphix/iterMagix/BoundIterator.hx" private="1" module="justGraphix.iterMagix.BoundIterator" final="1">
		<boundIterator3 public="1" get="inline" set="null" line="9" static="1"><f a="a:b:c">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></boundIterator3>
		<boundIterator4 public="1" get="inline" set="null" line="28" static="1"><f a="a:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></boundIterator4>
		<boundIteratorX public="1" get="inline" set="null" line="53" static="1"><f a="pMin:pMax">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></boundIteratorX>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.iterMagix.PointXYZ" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<toString public="1" get="inline" set="null" line="27">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" get="inline" set="null" line="20"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<typedef path="justGraphix.iterMagix.BytesFloat" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr"><c path="haxe.io.Bytes"/></typedef>
	<class path="justGraphix.iterMagix.IPoints" params="T" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr" interface="1">
		<count public="1"><x path="Int"/></count>
		<length public="1"><x path="Int"/></length>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></get>
		<zero public="1" set="method"><f a="len">
	<x path="Int"/>
	<c path="justGraphix.iterMagix.IPoints.T"/>
</f></zero>
	</class>
	<class path="justGraphix.iterMagix.BytesF32Arr_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr">
		<implements path="justGraphix.iterMagix.IPoints"><t path="justGraphix.iterMagix.BytesFloat"/></implements>
		<data><t path="justGraphix.iterMagix.BytesFloat"/></data>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<length public="1"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="46"><f a="index:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set>
		<get public="1" get="inline" set="null" line="51"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></get>
		<zero public="1" get="inline" set="null" line="55"><f a="len">
	<x path="Int"/>
	<t path="justGraphix.iterMagix.BytesFloat"/>
</f></zero>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.BytesF32Arr" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx">
		<from><icast><c path="justGraphix.iterMagix.BytesF32Arr_"/></icast></from>
		<this><c path="justGraphix.iterMagix.BytesF32Arr_"/></this>
		<to><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></to>
		<meta><m n=":access"><e>justGraphix.iterMagix.BytesF32Arr_.data</e></m></meta>
		<impl><class path="justGraphix.iterMagix._BytesF32Arr.BytesF32Arr_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<data public="1" get="inline" set="null" line="71" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<t path="justGraphix.iterMagix.BytesFloat"/>
</f></data>
	<x public="1" get="accessor" set="null" static="1"><x path="justGraphix.iterMagix.XPoints"/></x>
	<get_x get="inline" set="null" line="75" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="justGraphix.iterMagix.XPoints"/>
</f></get_x>
	<y public="1" get="accessor" set="null" static="1"><x path="justGraphix.iterMagix.YPoints"/></y>
	<get_y get="inline" set="null" line="79" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="justGraphix.iterMagix.YPoints"/>
</f></get_y>
	<z public="1" get="accessor" set="null" static="1"><x path="justGraphix.iterMagix.ZPoints"/></z>
	<get_z get="inline" set="null" line="83" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="justGraphix.iterMagix.ZPoints"/>
</f></get_z>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="87" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Int"/>
</f></get_length>
	<xyz public="1" get="inline" set="null" line="91" static="1"><f a="this:index:x_:y_:z_">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xyz>
	<vec public="1" get="inline" set="null" line="97" static="1"><f a="this:index">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Int"/>
	<c path="justGraphix.iterMagix.PointXYZ"/>
</f></vec>
	<set public="1" get="inline" set="null" line="104" static="1">
		<f a="this:index:v">
			<c path="justGraphix.iterMagix.BytesF32Arr_"/>
			<x path="Int"/>
			<c path="justGraphix.iterMagix.PointXYZ"/>
			<c path="justGraphix.iterMagix.PointXYZ"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="110" static="1">
		<f a="this:index">
			<c path="justGraphix.iterMagix.BytesF32Arr_"/>
			<x path="Int"/>
			<c path="justGraphix.iterMagix.PointXYZ"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<hasNext public="1" get="inline" set="null" line="114" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="118" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<c path="justGraphix.iterMagix.PointXYZ"/>
</f></next>
	<resetCount public="1" get="inline" set="null" line="122" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Void"/>
</f></resetCount>
	<toString public="1" get="inline" set="null" line="126" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":access"><e>justGraphix.iterMagix.BytesF32Arr_.data</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._BytesF32Arr.BytesF32Arr_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<data public="1" get="inline" set="null" line="71" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<t path="justGraphix.iterMagix.BytesFloat"/>
</f></data>
		<x public="1" get="accessor" set="null" static="1"><x path="justGraphix.iterMagix.XPoints"/></x>
		<get_x get="inline" set="null" line="75" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="justGraphix.iterMagix.XPoints"/>
</f></get_x>
		<y public="1" get="accessor" set="null" static="1"><x path="justGraphix.iterMagix.YPoints"/></y>
		<get_y get="inline" set="null" line="79" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="justGraphix.iterMagix.YPoints"/>
</f></get_y>
		<z public="1" get="accessor" set="null" static="1"><x path="justGraphix.iterMagix.ZPoints"/></z>
		<get_z get="inline" set="null" line="83" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="justGraphix.iterMagix.ZPoints"/>
</f></get_z>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="87" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Int"/>
</f></get_length>
		<xyz public="1" get="inline" set="null" line="91" static="1"><f a="this:index:x_:y_:z_">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></xyz>
		<vec public="1" get="inline" set="null" line="97" static="1"><f a="this:index">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Int"/>
	<c path="justGraphix.iterMagix.PointXYZ"/>
</f></vec>
		<set public="1" get="inline" set="null" line="104" static="1">
			<f a="this:index:v">
				<c path="justGraphix.iterMagix.BytesF32Arr_"/>
				<x path="Int"/>
				<c path="justGraphix.iterMagix.PointXYZ"/>
				<c path="justGraphix.iterMagix.PointXYZ"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="110" static="1">
			<f a="this:index">
				<c path="justGraphix.iterMagix.BytesF32Arr_"/>
				<x path="Int"/>
				<c path="justGraphix.iterMagix.PointXYZ"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<hasNext public="1" get="inline" set="null" line="114" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="118" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<c path="justGraphix.iterMagix.PointXYZ"/>
</f></next>
		<resetCount public="1" get="inline" set="null" line="122" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<x path="Void"/>
</f></resetCount>
		<toString public="1" get="inline" set="null" line="126" static="1"><f a="this">
	<c path="justGraphix.iterMagix.BytesF32Arr_"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":access"><e>justGraphix.iterMagix.BytesF32Arr_.data</e></m></meta>
	</class>
	<abstract path="justGraphix.iterMagix.XPoints" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr">
		<from><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></from>
		<this><x path="justGraphix.iterMagix.BytesF32Arr"/></this>
		<to><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></to>
		<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
		<impl><class path="justGraphix.iterMagix._BytesF32Arr.XPoints_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
	<_new public="1" set="method" line="141" static="1">
		<f a="bf32">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="justGraphix.iterMagix.XPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="146" static="1">
		<f a="this:index:value">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="152" static="1">
		<f a="this:index">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._BytesF32Arr.XPoints_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
		<_new public="1" set="method" line="141" static="1">
			<f a="bf32">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="justGraphix.iterMagix.XPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="146" static="1">
			<f a="this:index:value">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="152" static="1">
			<f a="this:index">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
	</class>
	<abstract path="justGraphix.iterMagix.YPoints" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr">
		<from><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></from>
		<this><x path="justGraphix.iterMagix.BytesF32Arr"/></this>
		<to><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></to>
		<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
		<impl><class path="justGraphix.iterMagix._BytesF32Arr.YPoints_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
	<_new public="1" set="method" line="158" static="1">
		<f a="bf32">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="justGraphix.iterMagix.YPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="163" static="1">
		<f a="this:index:value">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="169" static="1">
		<f a="this:index">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._BytesF32Arr.YPoints_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
		<_new public="1" set="method" line="158" static="1">
			<f a="bf32">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="justGraphix.iterMagix.YPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="163" static="1">
			<f a="this:index:value">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="169" static="1">
			<f a="this:index">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
	</class>
	<abstract path="justGraphix.iterMagix.ZPoints" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" module="justGraphix.iterMagix.BytesF32Arr">
		<from><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></from>
		<this><x path="justGraphix.iterMagix.BytesF32Arr"/></this>
		<to><icast><x path="justGraphix.iterMagix.BytesF32Arr"/></icast></to>
		<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
		<impl><class path="justGraphix.iterMagix._BytesF32Arr.ZPoints_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
	<_new public="1" set="method" line="175" static="1">
		<f a="bf32">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="justGraphix.iterMagix.ZPoints"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="180" static="1">
		<f a="this:index:value">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="186" static="1">
		<f a="this:index">
			<x path="justGraphix.iterMagix.BytesF32Arr"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._BytesF32Arr.ZPoints_Impl_" params="" file="src/justGraphix/iterMagix/BytesF32Arr.hx" private="1" module="justGraphix.iterMagix.BytesF32Arr" final="1">
		<_new public="1" set="method" line="175" static="1">
			<f a="bf32">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="justGraphix.iterMagix.ZPoints"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="180" static="1">
			<f a="this:index:value">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="186" static="1">
			<f a="this:index">
				<x path="justGraphix.iterMagix.BytesF32Arr"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<meta><m n=":access"><e>BytesF32Arr.data</e></m></meta>
	</class>
	<class path="justGraphix.iterMagix.EaseIter" params="" file="src/justGraphix/iterMagix/EaseIterator.hx" module="justGraphix.iterMagix.EaseIterator">
		<start public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</start>
		<max public="1" expr=".1">
			<x path="Float"/>
			<meta><m n=":value"><e>.1</e></m></meta>
		</max>
		<step public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</step>
		<value public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</value>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<includeMax public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</includeMax>
		<cropTo expr="null">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</cropTo>
		<ease expr="null">
			<x path="Null"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</ease>
		<finish expr="null">
			<x path="Null"><f a=""><x path="Void"/></f></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</finish>
		<new public="1" get="inline" set="null" line="400"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.EaseIterator" params="" file="src/justGraphix/iterMagix/EaseIterator.hx">
		<from><icast><c path="justGraphix.iterMagix.EaseIter"/></icast></from>
		<this><c path="justGraphix.iterMagix.EaseIter"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.includeMax</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.cropTo</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.value</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.finish</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.ease</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._EaseIterator.EaseIterator_Impl_" params="" file="src/justGraphix/iterMagix/EaseIterator.hx" private="1" module="justGraphix.iterMagix.EaseIterator" final="1">
	<step public="1" get="inline" set="null" line="413" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></step>
	<_new public="1" get="inline" set="null" line="419" static="1">
		<f a=""><x path="justGraphix.iterMagix.EaseIterator"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="425" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.EaseIter"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":access"><e>justGraphix.iterMagix.EaseIter.count</e></m></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="436" static="1"><f a="this">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Float"/>
</f></next>
	<crop get="inline" set="null" line="452" static="1"><f a="this:val">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></crop>
	<toTheTop public="1" get="inline" set="null" line="456" static="1"><f a="this">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></toTheTop>
	<places public="1" get="inline" set="null" line="461" static="1"><f a="this:n">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></places>
	<reset public="1" get="inline" set="null" line="466" static="1"><f a="this">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></reset>
	<easing public="1" get="inline" set="null" line="472" static="1"><f a="this:ease_">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></easing>
	<change public="1" get="inline" set="null" line="484" static="1"><f a="i:start:end">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></change>
	<changeEase public="1" get="inline" set="null" line="500" static="1"><f a="this:x0:x1:easeFunc">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
</f></changeEase>
	<finished public="1" get="inline" set="null" line="504" static="1"><f a="this:finish_">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<f a=""><x path="Void"/></f>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></finished>
	<meta>
		<m n=":access"><e>justGraphix.iterMagix.EaseIter.ease</e></m>
		<m n=":access"><e>justGraphix.iterMagix.EaseIter.finish</e></m>
		<m n=":access"><e>justGraphix.iterMagix.EaseIter.value</e></m>
		<m n=":access"><e>justGraphix.iterMagix.EaseIter.count</e></m>
		<m n=":access"><e>justGraphix.iterMagix.EaseIter.cropTo</e></m>
		<m n=":access"><e>justGraphix.iterMagix.EaseIter.includeMax</e></m>
		<m n=":access">
			<e>IntIterator.min</e>
			<e>IntIterator.max</e>
		</m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._EaseIterator.EaseIterator_Impl_" params="" file="src/justGraphix/iterMagix/EaseIterator.hx" private="1" module="justGraphix.iterMagix.EaseIterator" final="1">
		<step public="1" get="inline" set="null" line="413" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></step>
		<_new public="1" get="inline" set="null" line="419" static="1">
			<f a=""><x path="justGraphix.iterMagix.EaseIterator"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="425" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.EaseIter"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>justGraphix.iterMagix.EaseIter.count</e></m></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="436" static="1"><f a="this">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Float"/>
</f></next>
		<crop get="inline" set="null" line="452" static="1"><f a="this:val">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></crop>
		<toTheTop public="1" get="inline" set="null" line="456" static="1"><f a="this">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></toTheTop>
		<places public="1" get="inline" set="null" line="461" static="1"><f a="this:n">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></places>
		<reset public="1" get="inline" set="null" line="466" static="1"><f a="this">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></reset>
		<easing public="1" get="inline" set="null" line="472" static="1"><f a="this:ease_">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></easing>
		<change public="1" get="inline" set="null" line="484" static="1"><f a="i:start:end">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></change>
		<changeEase public="1" get="inline" set="null" line="500" static="1"><f a="this:x0:x1:easeFunc">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<x path="Float"/>
	<x path="Float"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="Float"/>
</f></changeEase>
		<finished public="1" get="inline" set="null" line="504" static="1"><f a="this:finish_">
	<c path="justGraphix.iterMagix.EaseIter"/>
	<f a=""><x path="Void"/></f>
	<x path="justGraphix.iterMagix.EaseIterator"/>
</f></finished>
		<meta>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.ease</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.finish</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.value</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.cropTo</e></m>
			<m n=":access"><e>justGraphix.iterMagix.EaseIter.includeMax</e></m>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<class path="justGraphix.iterMagix._EaseIterator.EaseIterator_Fields_" params="" file="src/justGraphix/iterMagix/EaseIterator.hx" private="1" module="justGraphix.iterMagix.EaseIterator" final="1">
		<PI final="1" public="1" set="null" expr="3.1415926535897932384626433832795" line="22" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3.1415926535897932384626433832795</e></m></meta>
		</PI>
		<PI_H final="1" public="1" set="null" expr="1.57079632679489661923132169163975" line="23" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.57079632679489661923132169163975</e></m></meta>
		</PI_H>
		<LN_2 final="1" public="1" set="null" expr="0.6931471805599453" line="24" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN_2>
		<LN_2_10 final="1" public="1" set="null" expr="6.931471805599453" line="25" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>6.931471805599453</e></m></meta>
		</LN_2_10>
		<linear public="1" get="inline" set="null" line="30" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>1-order</haxe_doc>
		</linear>
		<sineIn public="1" get="inline" set="null" line="37" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineIn>
		<sineOut public="1" get="inline" set="null" line="46" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineOut>
		<sineInOut public="1" get="inline" set="null" line="55" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineInOut>
		<sineOutIn public="1" get="inline" set="null" line="64" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></sineOutIn>
		<quadIn public="1" get="inline" set="null" line="81" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>2-order</haxe_doc>
		</quadIn>
		<quadOut public="1" get="inline" set="null" line="85" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>2-order</haxe_doc>
		</quadOut>
		<quadInOut public="1" get="inline" set="null" line="89" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>2-order</haxe_doc>
		</quadInOut>
		<quadOutIn public="1" get="inline" set="null" line="93" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>2-order</haxe_doc>
		</quadOutIn>
		<cubicIn public="1" get="inline" set="null" line="102" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>3-order</haxe_doc>
		</cubicIn>
		<cubicOut public="1" get="inline" set="null" line="106" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>3-order</haxe_doc>
		</cubicOut>
		<cubicInOut public="1" get="inline" set="null" line="110" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>3-order</haxe_doc>
		</cubicInOut>
		<cubicOutIn public="1" get="inline" set="null" line="116" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>3-order</haxe_doc>
		</cubicOutIn>
		<quartIn public="1" get="inline" set="null" line="125" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>4-order</haxe_doc>
		</quartIn>
		<quartOut public="1" get="inline" set="null" line="129" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>4-order</haxe_doc>
		</quartOut>
		<quartInOut public="1" get="inline" set="null" line="133" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>4-order</haxe_doc>
		</quartInOut>
		<quartOutIn public="1" get="inline" set="null" line="137" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>4-order</haxe_doc>
		</quartOutIn>
		<quintIn public="1" get="inline" set="null" line="146" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>5-order</haxe_doc>
		</quintIn>
		<quintOut public="1" get="inline" set="null" line="150" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>5-order</haxe_doc>
		</quintOut>
		<quintInOut public="1" get="inline" set="null" line="154" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>5-order</haxe_doc>
		</quintInOut>
		<quintOutIn public="1" get="inline" set="null" line="158" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>5-order</haxe_doc>
		</quintOutIn>
		<expoIn public="1" get="inline" set="null" line="166" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoIn>
		<expoOut public="1" get="inline" set="null" line="169" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoOut>
		<expoInOut public="1" get="inline" set="null" line="172" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoInOut>
		<expoOutIn public="1" get="inline" set="null" line="183" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></expoOutIn>
		<circIn public="1" get="inline" set="null" line="197" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circIn>
		<circOut public="1" get="inline" set="null" line="200" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circOut>
		<circInOut public="1" get="inline" set="null" line="203" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circInOut>
		<circOutIn public="1" set="method" line="206" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></circOutIn>
		<bounceIn public="1" get="inline" set="null" line="214" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceIn>
		<bounceOut public="1" get="inline" set="null" line="225" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceOut>
		<bounceInOut public="1" get="inline" set="null" line="236" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceInOut>
		<bounceOutIn public="1" get="inline" set="null" line="259" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></bounceOutIn>
		<overshoot final="1" public="1" set="null" expr="1.70158" line="283" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1.70158</e></m></meta>
		</overshoot>
		<backIn public="1" get="inline" set="null" line="288" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backIn>
		<backOut public="1" get="inline" set="null" line="297" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backOut>
		<backInOut public="1" get="inline" set="null" line="306" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backInOut>
		<backOutIn public="1" get="inline" set="null" line="317" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></backOutIn>
		<amplitude final="1" public="1" set="null" expr="1" line="332" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</amplitude>
		<period final="1" public="1" set="null" expr="0.0003" line="333" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0003</e></m></meta>
		</period>
		<elasticIn public="1" get="inline" set="null" line="334" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticIn>
		<elasticOut public="1" get="inline" set="null" line="344" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticOut>
		<elasticInOut public="1" get="inline" set="null" line="354" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticInOut>
		<elasticOutIn public="1" get="inline" set="null" line="369" static="1"><f a="t">
	<x path="Float"/>
	<x path="Float"/>
</f></elasticOutIn>
	</class>
	<typedef path="justGraphix.iterMagix.FloatUpdate" params="" file="src/justGraphix/iterMagix/Floaty.hx" module="justGraphix.iterMagix.Floaty"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></typedef>
	<abstract path="justGraphix.iterMagix.Floaty" params="" file="src/justGraphix/iterMagix/Floaty.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Float"/></this>
		<to><icast><x path="Float"/></icast></to>
		<impl><class path="justGraphix.iterMagix._Floaty.Floaty_Impl_" params="" file="src/justGraphix/iterMagix/Floaty.hx" private="1" module="justGraphix.iterMagix.Floaty" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.iterMagix.Floaty"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.FloatUpdate"/></updater>
	<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<x path="Float"/>
	<t path="justGraphix.iterMagix.FloatUpdate"/>
</f></get_updater>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Floaty.Floaty_Impl_" params="" file="src/justGraphix/iterMagix/Floaty.hx" private="1" module="justGraphix.iterMagix.Floaty" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.iterMagix.Floaty"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.FloatUpdate"/></updater>
		<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<x path="Float"/>
	<t path="justGraphix.iterMagix.FloatUpdate"/>
</f></get_updater>
	</class>
	<class path="justGraphix.iterMagix.IntIterator64" params="" file="src/justGraphix/iterMagix/IntIterator64.hx">
		<min><x path="haxe.Int64"/></min>
		<max><x path="haxe.Int64"/></max>
		<hasNext public="1" get="inline" set="null" line="30">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="38">
			<f a=""><x path="haxe.Int64"/></f>
			<haxe_doc>Moves to the next item of the iterator.
		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="22">
			<f a="min:max">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).
		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>usage
```
function main(){
    for( i in ( 0...100: Int64Iter ) ) trace( i );
    for( i in ((0:Int64): Int64_)...((100:Int64):Int64_) ) trace( i );
}  
```</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.iterMagix.Int64_" params="" file="src/justGraphix/iterMagix/IntIterator64.hx" module="justGraphix.iterMagix.IntIterator64">
		<from><icast><x path="haxe.Int64"/></icast></from>
		<this><x path="haxe.Int64"/></this>
		<to><icast><x path="haxe.Int64"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IntIterator64.Int64__Impl_" params="" file="src/justGraphix/iterMagix/IntIterator64.hx" private="1" module="justGraphix.iterMagix.IntIterator64" final="1"><range public="1" set="method" line="47" static="1">
	<f a="lhs:rhs">
		<x path="justGraphix.iterMagix.Int64_"/>
		<x path="justGraphix.iterMagix.Int64_"/>
		<x path="justGraphix.iterMagix.Int64Iter"/>
	</f>
	<meta><m n=":op"><e>A ... B</e></m></meta>
</range></class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IntIterator64.Int64__Impl_" params="" file="src/justGraphix/iterMagix/IntIterator64.hx" private="1" module="justGraphix.iterMagix.IntIterator64" final="1"><range public="1" set="method" line="47" static="1">
	<f a="lhs:rhs">
		<x path="justGraphix.iterMagix.Int64_"/>
		<x path="justGraphix.iterMagix.Int64_"/>
		<x path="justGraphix.iterMagix.Int64Iter"/>
	</f>
	<meta><m n=":op"><e>A ... B</e></m></meta>
</range></class>
	<abstract path="justGraphix.iterMagix.Int64Iter" params="" file="src/justGraphix/iterMagix/IntIterator64.hx" module="justGraphix.iterMagix.IntIterator64">
		<from><icast field="fromIterator"><c path="IntIterator"/></icast></from>
		<this><c path="justGraphix.iterMagix.IntIterator64"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IntIterator64.Int64Iter_Impl_" params="" file="src/justGraphix/iterMagix/IntIterator64.hx" private="1" module="justGraphix.iterMagix.IntIterator64" final="1">
	<_new public="1" get="inline" set="null" line="56" static="1">
		<f a="min:max">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="justGraphix.iterMagix.Int64Iter"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="63" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="justGraphix.iterMagix.Int64Iter"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IntIterator64.Int64Iter_Impl_" params="" file="src/justGraphix/iterMagix/IntIterator64.hx" private="1" module="justGraphix.iterMagix.IntIterator64" final="1">
		<_new public="1" get="inline" set="null" line="56" static="1">
			<f a="min:max">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="justGraphix.iterMagix.Int64Iter"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="63" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="justGraphix.iterMagix.Int64Iter"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<typedef path="justGraphix.iterMagix.IntUpdate" params="" file="src/justGraphix/iterMagix/Inty.hx" module="justGraphix.iterMagix.Inty"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></typedef>
	<abstract path="justGraphix.iterMagix.Inty" params="" file="src/justGraphix/iterMagix/Inty.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<impl><class path="justGraphix.iterMagix._Inty.Inty_Impl_" params="" file="src/justGraphix/iterMagix/Inty.hx" private="1" module="justGraphix.iterMagix.Inty" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="s">
			<x path="Int"/>
			<x path="justGraphix.iterMagix.Inty"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.IntUpdate"/></updater>
	<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<x path="Int"/>
	<t path="justGraphix.iterMagix.IntUpdate"/>
</f></get_updater>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Inty.Inty_Impl_" params="" file="src/justGraphix/iterMagix/Inty.hx" private="1" module="justGraphix.iterMagix.Inty" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="s">
				<x path="Int"/>
				<x path="justGraphix.iterMagix.Inty"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.IntUpdate"/></updater>
		<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<x path="Int"/>
	<t path="justGraphix.iterMagix.IntUpdate"/>
</f></get_updater>
	</class>
	<class path="justGraphix.iterMagix.IntIterStart" params="" file="src/justGraphix/iterMagix/IteratorRange.hx" module="justGraphix.iterMagix.IteratorRange">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<new public="1" get="inline" set="null" line="10"><f a="min_:max_">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Like a normal IntIterator but allows access of start and max after construction and reuse.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.IteratorRange" params="" file="src/justGraphix/iterMagix/IteratorRange.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterStart"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterStart"/></this>
		<to>
			<icast field="toIterStart"><x path="justGraphix.iterMagix.IteratorRange"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IteratorRange.IteratorRange_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRange.hx" private="1" module="justGraphix.iterMagix.IteratorRange" final="1">
	<startLength public="1" get="inline" set="null" line="20" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></startLength>
	<_new public="1" get="inline" set="null" line="23" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator public="1" get="inline" set="null" line="29" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="33" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.IntIterStart"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<iterator public="1" get="inline" set="null" line="36" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
	<adding public="1" get="inline" set="null" line="40" static="1">
		<f a="a:b">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="44" static="1"><f a="this:b">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></add>
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="52" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="56" static="1"><f a="this:l">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<contains public="1" get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="65" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<isWithin public="1" get="inline" set="null" line="69" static="1"><f a="this:ir">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="73" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<addAssign public="1" get="inline" set="null" line="79" static="1">
		<f a="a:v">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</addAssign>
	<minusAssign public="1" get="inline" set="null" line="85" static="1">
		<f a="a:v">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</minusAssign>
	<ifContainMove public="1" get="inline" set="null" line="89" static="1"><f a="this:v:amount">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<toString public="1" get="inline" set="null" line="96" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.IntIterStart"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<map public="1" params="A:B" get="inline" set="null" line="99" static="1"><f a="this:it:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<t path="Iterable"><c path="map.A"/></t>
	<f a="item">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<c path="Array"><c path="map.B"/></c>
</f></map>
	<filter public="1" params="A" get="inline" set="null" line="111" static="1"><f a="this:it:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<t path="Iterable"><c path="filter.A"/></t>
	<f a="item">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="filter.A"/></c>
</f></filter>
	<find public="1" params="T" get="inline" set="null" line="122" static="1"><f a="this:it:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<t path="Iterable"><c path="find.T"/></t>
	<f a="item">
		<c path="find.T"/>
		<x path="Bool"/>
	</f>
	<x path="Null"><c path="find.T"/></x>
</f></find>
	<remapArray public="1" params="A" get="inline" set="null" line="137" static="1"><f a="this:arr:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<c path="Array"><c path="remapArray.A"/></c>
	<f a="item">
		<c path="remapArray.A"/>
		<c path="remapArray.A"/>
	</f>
	<c path="Array"><c path="remapArray.A"/></c>
</f></remapArray>
	<mapArray public="1" params="A" get="inline" set="null" line="142" static="1"><f a="this:arr:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<c path="Array"><c path="mapArray.A"/></c>
	<f a="item">
		<c path="mapArray.A"/>
		<c path="mapArray.A"/>
	</f>
	<c path="Array"><c path="mapArray.A"/></c>
</f></mapArray>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IteratorRange.IteratorRange_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRange.hx" private="1" module="justGraphix.iterMagix.IteratorRange" final="1">
		<startLength public="1" get="inline" set="null" line="20" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></startLength>
		<_new public="1" get="inline" set="null" line="23" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator public="1" get="inline" set="null" line="29" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="33" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.IntIterStart"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<iterator public="1" get="inline" set="null" line="36" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<c path="IntIterator"/>
</f></iterator>
		<adding public="1" get="inline" set="null" line="40" static="1">
			<f a="a:b">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="44" static="1"><f a="this:b">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></add>
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="52" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="56" static="1"><f a="this:l">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<contains public="1" get="inline" set="null" line="61" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="65" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<isWithin public="1" get="inline" set="null" line="69" static="1"><f a="this:ir">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="73" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<addAssign public="1" get="inline" set="null" line="79" static="1">
			<f a="a:v">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</addAssign>
		<minusAssign public="1" get="inline" set="null" line="85" static="1">
			<f a="a:v">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</minusAssign>
		<ifContainMove public="1" get="inline" set="null" line="89" static="1"><f a="this:v:amount">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<toString public="1" get="inline" set="null" line="96" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.IntIterStart"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<map public="1" params="A:B" get="inline" set="null" line="99" static="1"><f a="this:it:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<t path="Iterable"><c path="map.A"/></t>
	<f a="item">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<c path="Array"><c path="map.B"/></c>
</f></map>
		<filter public="1" params="A" get="inline" set="null" line="111" static="1"><f a="this:it:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<t path="Iterable"><c path="filter.A"/></t>
	<f a="item">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="filter.A"/></c>
</f></filter>
		<find public="1" params="T" get="inline" set="null" line="122" static="1"><f a="this:it:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<t path="Iterable"><c path="find.T"/></t>
	<f a="item">
		<c path="find.T"/>
		<x path="Bool"/>
	</f>
	<x path="Null"><c path="find.T"/></x>
</f></find>
		<remapArray public="1" params="A" get="inline" set="null" line="137" static="1"><f a="this:arr:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<c path="Array"><c path="remapArray.A"/></c>
	<f a="item">
		<c path="remapArray.A"/>
		<c path="remapArray.A"/>
	</f>
	<c path="Array"><c path="remapArray.A"/></c>
</f></remapArray>
		<mapArray public="1" params="A" get="inline" set="null" line="142" static="1"><f a="this:arr:f">
	<c path="justGraphix.iterMagix.IntIterStart"/>
	<c path="Array"><c path="mapArray.A"/></c>
	<f a="item">
		<c path="mapArray.A"/>
		<c path="mapArray.A"/>
	</f>
	<c path="Array"><c path="mapArray.A"/></c>
</f></mapArray>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterXY" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" module="justGraphix.iterMagix.IteratorRangeXY">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<xMax public="1"><x path="Int"/></xMax>
		<yMax public="1"><x path="Int"/></yMax>
		<xReset public="1"><x path="Int"/></xReset>
		<yReset public="1"><x path="Int"/></yReset>
		<iter public="1"><c path="IntIterator"/></iter>
		<new public="1" get="inline" set="null" line="24"><f a="xRange_:yRange_">
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.IteratorRangeXY" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterXY"/></icast>
			<icast field="fromIterator2D"><a>
	<outer><c path="IntIterator"/></outer>
	<inner><c path="IntIterator"/></inner>
</a></icast>
			<icast field="fromRect2D"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
</a></icast>
			<icast field="fromRect2Df"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<h><x path="Float"/></h>
</a></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterXY"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IteratorRangeXY.IteratorRangeXY_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXY" final="1">
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a="xRange:yRange">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRangeXY"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator2D public="1" get="inline" set="null" line="44" static="1">
		<f a="two">
			<a>
				<outer><c path="IntIterator"/></outer>
				<inner><c path="IntIterator"/></inner>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXY"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator2D>
	<fromRect2D public="1" get="inline" set="null" line="49" static="1">
		<f a="r">
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<w><x path="Int"/></w>
				<h><x path="Int"/></h>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXY"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect2D>
	<fromRect2Df public="1" get="inline" set="null" line="56" static="1">
		<f a="r">
			<a>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
				<w><x path="Float"/></w>
				<h><x path="Float"/></h>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXY"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect2Df>
	<hasNext public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Int"/>
</f></next>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Int"/>
</f></get_length>
	<contains public="1" get="inline" set="null" line="82" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="87" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<getRangeX public="1" get="inline" set="null" line="92" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
	<getRangeY public="1" get="inline" set="null" line="96" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IteratorRangeXY.IteratorRangeXY_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXY" final="1">
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a="xRange:yRange">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRangeXY"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator2D public="1" get="inline" set="null" line="44" static="1">
			<f a="two">
				<a>
					<outer><c path="IntIterator"/></outer>
					<inner><c path="IntIterator"/></inner>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXY"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator2D>
		<fromRect2D public="1" get="inline" set="null" line="49" static="1">
			<f a="r">
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<w><x path="Int"/></w>
					<h><x path="Int"/></h>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXY"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect2D>
		<fromRect2Df public="1" get="inline" set="null" line="56" static="1">
			<f a="r">
				<a>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
					<w><x path="Float"/></w>
					<h><x path="Float"/></h>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXY"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect2Df>
		<hasNext public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Int"/>
</f></next>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Int"/>
</f></get_length>
		<contains public="1" get="inline" set="null" line="82" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="87" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<getRangeX public="1" get="inline" set="null" line="92" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
		<getRangeY public="1" get="inline" set="null" line="96" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXY"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterYX" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" module="justGraphix.iterMagix.IteratorRangeXY">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<xMax public="1"><x path="Int"/></xMax>
		<yMax public="1"><x path="Int"/></yMax>
		<xReset public="1"><x path="Int"/></xReset>
		<yReset public="1"><x path="Int"/></yReset>
		<iter public="1"><c path="IntIterator"/></iter>
		<new public="1" get="inline" set="null" line="111"><f a="xRange_:yRange_">
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.IteratorRangeYX" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" module="justGraphix.iterMagix.IteratorRangeXY">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterYX"/></icast>
			<icast field="fromIterator2D"><a>
	<outer><c path="IntIterator"/></outer>
	<inner><c path="IntIterator"/></inner>
</a></icast>
			<icast field="fromRect2D"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
</a></icast>
			<icast field="fromRect2Df"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<h><x path="Float"/></h>
</a></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterYX"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IteratorRangeXY.IteratorRangeYX_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXY" final="1">
	<_new public="1" get="inline" set="null" line="125" static="1">
		<f a="xRange:yRange">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRangeYX"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator2D public="1" get="inline" set="null" line="131" static="1">
		<f a="two">
			<a>
				<outer><c path="IntIterator"/></outer>
				<inner><c path="IntIterator"/></inner>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeYX"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator2D>
	<fromRect2D public="1" get="inline" set="null" line="136" static="1">
		<f a="r">
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<w><x path="Int"/></w>
				<h><x path="Int"/></h>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeYX"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect2D>
	<fromRect2Df public="1" get="inline" set="null" line="143" static="1">
		<f a="r">
			<a>
				<y><x path="Float"/></y>
				<x><x path="Float"/></x>
				<w><x path="Float"/></w>
				<h><x path="Float"/></h>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeYX"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect2Df>
	<hasNext public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="153" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Int"/>
</f></next>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="165" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Int"/>
</f></get_length>
	<contains public="1" get="inline" set="null" line="169" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="174" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<getRangeX public="1" get="inline" set="null" line="179" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
	<getRangeY public="1" get="inline" set="null" line="183" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IteratorRangeXY.IteratorRangeYX_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXY.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXY" final="1">
		<_new public="1" get="inline" set="null" line="125" static="1">
			<f a="xRange:yRange">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRangeYX"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator2D public="1" get="inline" set="null" line="131" static="1">
			<f a="two">
				<a>
					<outer><c path="IntIterator"/></outer>
					<inner><c path="IntIterator"/></inner>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeYX"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator2D>
		<fromRect2D public="1" get="inline" set="null" line="136" static="1">
			<f a="r">
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<w><x path="Int"/></w>
					<h><x path="Int"/></h>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeYX"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect2D>
		<fromRect2Df public="1" get="inline" set="null" line="143" static="1">
			<f a="r">
				<a>
					<y><x path="Float"/></y>
					<x><x path="Float"/></x>
					<w><x path="Float"/></w>
					<h><x path="Float"/></h>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeYX"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect2Df>
		<hasNext public="1" get="inline" set="null" line="149" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="153" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Int"/>
</f></next>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="165" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Int"/>
</f></get_length>
		<contains public="1" get="inline" set="null" line="169" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="174" static="1"><f a="this:x:y">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<getRangeX public="1" get="inline" set="null" line="179" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
		<getRangeY public="1" get="inline" set="null" line="183" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterYX"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterXYZ" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZ.hx" module="justGraphix.iterMagix.IteratorRangeXYZ">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<z public="1"><x path="Int"/></z>
		<xMax public="1"><x path="Int"/></xMax>
		<yMax public="1"><x path="Int"/></yMax>
		<zMax public="1"><x path="Int"/></zMax>
		<xReset public="1"><x path="Int"/></xReset>
		<yReset public="1"><x path="Int"/></yReset>
		<zReset public="1"><x path="Int"/></zReset>
		<iter public="1"><c path="IntIterator"/></iter>
		<new public="1" get="inline" set="null" line="28"><f a="xRange_:yRange_:zRange_">
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.IteratorRangeXYZ" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZ.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterXYZ"/></icast>
			<icast field="fromIterator3D"><a>
	<outer><c path="IntIterator"/></outer>
	<middle><c path="IntIterator"/></middle>
	<inner><c path="IntIterator"/></inner>
</a></icast>
			<icast field="fromRect3D"><a>
	<z><x path="Int"/></z>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
	<d><x path="Int"/></d>
</a></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterXYZ"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IteratorRangeXYZ.IteratorRangeXYZ_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZ.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXYZ" final="1">
	<_new public="1" get="inline" set="null" line="45" static="1">
		<f a="xRange:yRange:zRange">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRangeXYZ"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator3D public="1" get="inline" set="null" line="51" static="1">
		<f a="three">
			<a>
				<outer><c path="IntIterator"/></outer>
				<middle><c path="IntIterator"/></middle>
				<inner><c path="IntIterator"/></inner>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXYZ"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator3D>
	<fromRect3D public="1" get="inline" set="null" line="56" static="1">
		<f a="r">
			<a>
				<z><x path="Int"/></z>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<w><x path="Int"/></w>
				<h><x path="Int"/></h>
				<d><x path="Int"/></d>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXYZ"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect3D>
	<hasNext public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="67" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Int"/>
</f></next>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="83" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Int"/>
</f></get_length>
	<contains public="1" get="inline" set="null" line="87" static="1"><f a="this:x:y:z">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="93" static="1"><f a="this:x:y:z">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<getRangeX public="1" get="inline" set="null" line="99" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
	<getRangeY public="1" get="inline" set="null" line="103" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
	<getRangeZ public="1" set="method" line="106" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeZ>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IteratorRangeXYZ.IteratorRangeXYZ_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZ.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXYZ" final="1">
		<_new public="1" get="inline" set="null" line="45" static="1">
			<f a="xRange:yRange:zRange">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRangeXYZ"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator3D public="1" get="inline" set="null" line="51" static="1">
			<f a="three">
				<a>
					<outer><c path="IntIterator"/></outer>
					<middle><c path="IntIterator"/></middle>
					<inner><c path="IntIterator"/></inner>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXYZ"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator3D>
		<fromRect3D public="1" get="inline" set="null" line="56" static="1">
			<f a="r">
				<a>
					<z><x path="Int"/></z>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<w><x path="Int"/></w>
					<h><x path="Int"/></h>
					<d><x path="Int"/></d>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXYZ"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect3D>
		<hasNext public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="67" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Int"/>
</f></next>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="83" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Int"/>
</f></get_length>
		<contains public="1" get="inline" set="null" line="87" static="1"><f a="this:x:y:z">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="93" static="1"><f a="this:x:y:z">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<getRangeX public="1" get="inline" set="null" line="99" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
		<getRangeY public="1" get="inline" set="null" line="103" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
		<getRangeZ public="1" set="method" line="106" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZ"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeZ>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterXYZW" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZW.hx" module="justGraphix.iterMagix.IteratorRangeXYZW">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<z public="1"><x path="Int"/></z>
		<w public="1"><x path="Int"/></w>
		<xMax public="1"><x path="Int"/></xMax>
		<yMax public="1"><x path="Int"/></yMax>
		<zMax public="1"><x path="Int"/></zMax>
		<wMax public="1"><x path="Int"/></wMax>
		<xReset public="1"><x path="Int"/></xReset>
		<yReset public="1"><x path="Int"/></yReset>
		<zReset public="1"><x path="Int"/></zReset>
		<wReset public="1"><x path="Int"/></wReset>
		<iter public="1"><c path="IntIterator"/></iter>
		<new public="1" get="inline" set="null" line="21"><f a="xRange_:yRange_:zRange_:wRange_">
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.IteratorRangeXYZW" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZW.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterXYZW"/></icast>
			<icast field="fromIterator4D"><a>
	<outer><c path="IntIterator"/></outer>
	<middleOuter><c path="IntIterator"/></middleOuter>
	<middleInner><c path="IntIterator"/></middleInner>
	<inner><c path="IntIterator"/></inner>
</a></icast>
			<icast field="fromRect4D"><a>
	<z><x path="Int"/></z>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<v><x path="Int"/></v>
	<u><x path="Int"/></u>
	<h><x path="Int"/></h>
	<d><x path="Int"/></d>
</a></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterXYZW"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IteratorRangeXYZW.IteratorRangeXYZW_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZW.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXYZW" final="1">
	<_new public="1" get="inline" set="null" line="41" static="1">
		<f a="xRange:yRange:zRange:wRange">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRangeXYZW"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator4D public="1" get="inline" set="null" line="47" static="1">
		<f a="four">
			<a>
				<outer><c path="IntIterator"/></outer>
				<middleOuter><c path="IntIterator"/></middleOuter>
				<middleInner><c path="IntIterator"/></middleInner>
				<inner><c path="IntIterator"/></inner>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXYZW"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator4D>
	<fromRect4D public="1" get="inline" set="null" line="52" static="1">
		<f a="r">
			<a>
				<z><x path="Int"/></z>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<w><x path="Int"/></w>
				<v><x path="Int"/></v>
				<u><x path="Int"/></u>
				<h><x path="Int"/></h>
				<d><x path="Int"/></d>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXYZW"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect4D>
	<hasNext public="1" get="inline" set="null" line="60" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Int"/>
</f></next>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="84" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Int"/>
</f></get_length>
	<contains public="1" get="inline" set="null" line="88" static="1"><f a="this:x:y:z:w">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="95" static="1"><f a="this:x:y:z:w">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<getRangeX public="1" get="inline" set="null" line="102" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
	<getRangeY public="1" get="inline" set="null" line="106" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
	<getRangeZ public="1" set="method" line="109" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeZ>
	<getRangeW public="1" set="method" line="112" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeW>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IteratorRangeXYZW.IteratorRangeXYZW_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZW.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXYZW" final="1">
		<_new public="1" get="inline" set="null" line="41" static="1">
			<f a="xRange:yRange:zRange:wRange">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRangeXYZW"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator4D public="1" get="inline" set="null" line="47" static="1">
			<f a="four">
				<a>
					<outer><c path="IntIterator"/></outer>
					<middleOuter><c path="IntIterator"/></middleOuter>
					<middleInner><c path="IntIterator"/></middleInner>
					<inner><c path="IntIterator"/></inner>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXYZW"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator4D>
		<fromRect4D public="1" get="inline" set="null" line="52" static="1">
			<f a="r">
				<a>
					<z><x path="Int"/></z>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<w><x path="Int"/></w>
					<v><x path="Int"/></v>
					<u><x path="Int"/></u>
					<h><x path="Int"/></h>
					<d><x path="Int"/></d>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXYZW"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect4D>
		<hasNext public="1" get="inline" set="null" line="60" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Int"/>
</f></next>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="84" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Int"/>
</f></get_length>
		<contains public="1" get="inline" set="null" line="88" static="1"><f a="this:x:y:z:w">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="95" static="1"><f a="this:x:y:z:w">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<getRangeX public="1" get="inline" set="null" line="102" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
		<getRangeY public="1" get="inline" set="null" line="106" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
		<getRangeZ public="1" set="method" line="109" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeZ>
		<getRangeW public="1" set="method" line="112" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZW"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeW>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterXYZWT" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZWT.hx" module="justGraphix.iterMagix.IteratorRangeXYZWT">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<z public="1"><x path="Int"/></z>
		<w public="1"><x path="Int"/></w>
		<t public="1"><x path="Int"/></t>
		<xMax public="1"><x path="Int"/></xMax>
		<yMax public="1"><x path="Int"/></yMax>
		<zMax public="1"><x path="Int"/></zMax>
		<wMax public="1"><x path="Int"/></wMax>
		<tMax public="1"><x path="Int"/></tMax>
		<xReset public="1"><x path="Int"/></xReset>
		<yReset public="1"><x path="Int"/></yReset>
		<zReset public="1"><x path="Int"/></zReset>
		<wReset public="1"><x path="Int"/></wReset>
		<tReset public="1"><x path="Int"/></tReset>
		<iter public="1"><c path="IntIterator"/></iter>
		<new public="1" get="inline" set="null" line="29"><f a="xRange_:yRange_:zRange_:wRange_:tRange_">
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.IteratorRangeXYZWT" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZWT.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterXYZWT"/></icast>
			<icast field="fromIterator5D"><a>
	<outer><c path="IntIterator"/></outer>
	<middleOuter><c path="IntIterator"/></middleOuter>
	<middleInner><c path="IntIterator"/></middleInner>
	<middle><c path="IntIterator"/></middle>
	<inner><c path="IntIterator"/></inner>
</a></icast>
			<icast field="fromRect5D"><a>
	<z><x path="Int"/></z>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<v><x path="Int"/></v>
	<u><x path="Int"/></u>
	<t><x path="Int"/></t>
	<s><x path="Int"/></s>
	<h><x path="Int"/></h>
	<d><x path="Int"/></d>
</a></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterXYZWT"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._IteratorRangeXYZWT.IteratorRangeXYZWT_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZWT.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXYZWT" final="1">
	<_new public="1" get="inline" set="null" line="53" static="1">
		<f a="xRange:yRange:zRange:wRange:tRange">
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRange"/>
			<x path="justGraphix.iterMagix.IteratorRangeXYZWT"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromIterator5D public="1" get="inline" set="null" line="66" static="1">
		<f a="five">
			<a>
				<outer><c path="IntIterator"/></outer>
				<middleOuter><c path="IntIterator"/></middleOuter>
				<middleInner><c path="IntIterator"/></middleInner>
				<middle><c path="IntIterator"/></middle>
				<inner><c path="IntIterator"/></inner>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXYZWT"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator5D>
	<fromRect5D public="1" get="inline" set="null" line="75" static="1">
		<f a="r">
			<a>
				<z><x path="Int"/></z>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<w><x path="Int"/></w>
				<v><x path="Int"/></v>
				<u><x path="Int"/></u>
				<t><x path="Int"/></t>
				<s><x path="Int"/></s>
				<h><x path="Int"/></h>
				<d><x path="Int"/></d>
			</a>
			<x path="justGraphix.iterMagix.IteratorRangeXYZWT"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRect5D>
	<hasNext public="1" get="inline" set="null" line="84" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="88" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Int"/>
</f></next>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="112" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Int"/>
</f></get_length>
	<contains public="1" get="inline" set="null" line="116" static="1"><f a="this:x:y:z:w:t">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="124" static="1"><f a="this:x:y:z:w:t">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></containsF>
	<getRangeX public="1" get="inline" set="null" line="132" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
	<getRangeY public="1" get="inline" set="null" line="136" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
	<getRangeZ public="1" set="method" line="140" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeZ>
	<getRangeW public="1" set="method" line="144" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeW>
	<getRangeT public="1" set="method" line="147" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeT>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._IteratorRangeXYZWT.IteratorRangeXYZWT_Impl_" params="" file="src/justGraphix/iterMagix/IteratorRangeXYZWT.hx" private="1" module="justGraphix.iterMagix.IteratorRangeXYZWT" final="1">
		<_new public="1" get="inline" set="null" line="53" static="1">
			<f a="xRange:yRange:zRange:wRange:tRange">
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRange"/>
				<x path="justGraphix.iterMagix.IteratorRangeXYZWT"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromIterator5D public="1" get="inline" set="null" line="66" static="1">
			<f a="five">
				<a>
					<outer><c path="IntIterator"/></outer>
					<middleOuter><c path="IntIterator"/></middleOuter>
					<middleInner><c path="IntIterator"/></middleInner>
					<middle><c path="IntIterator"/></middle>
					<inner><c path="IntIterator"/></inner>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXYZWT"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator5D>
		<fromRect5D public="1" get="inline" set="null" line="75" static="1">
			<f a="r">
				<a>
					<z><x path="Int"/></z>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<w><x path="Int"/></w>
					<v><x path="Int"/></v>
					<u><x path="Int"/></u>
					<t><x path="Int"/></t>
					<s><x path="Int"/></s>
					<h><x path="Int"/></h>
					<d><x path="Int"/></d>
				</a>
				<x path="justGraphix.iterMagix.IteratorRangeXYZWT"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRect5D>
		<hasNext public="1" get="inline" set="null" line="84" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="88" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Int"/>
</f></next>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="112" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Int"/>
</f></get_length>
		<contains public="1" get="inline" set="null" line="116" static="1"><f a="this:x:y:z:w:t">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="124" static="1"><f a="this:x:y:z:w:t">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></containsF>
		<getRangeX public="1" get="inline" set="null" line="132" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeX>
		<getRangeY public="1" get="inline" set="null" line="136" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeY>
		<getRangeZ public="1" set="method" line="140" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeZ>
		<getRangeW public="1" set="method" line="144" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeW>
		<getRangeT public="1" set="method" line="147" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterXYZWT"/>
	<x path="justGraphix.iterMagix.IteratorRange"/>
</f></getRangeT>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<abstract path="justGraphix.iterMagix.ParameterString" params="" file="src/justGraphix/iterMagix/ParameterString.hx">
		<from>
			<icast><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromInt"><x path="Int"/></icast>
			<icast field="fromUInt"><x path="UInt"/></icast>
			<icast field="fromBool"><x path="Bool"/></icast>
			<icast field="fromPoints"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromArrayInt"><c path="Array"><x path="Int"/></c></icast>
			<icast field="fromBoolPattern"><c path="Array"><x path="Bool"/></c></icast>
			<icast field="fromUInt32Array"><x path="haxe.io.UInt32Array"/></icast>
		</from>
		<this><c path="String"/></this>
		<to>
			<icast><c path="String"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toInt"><x path="Int"/></icast>
			<icast field="toUInt"><x path="UInt"/></icast>
			<icast field="toBool"><x path="Bool"/></icast>
			<icast field="toPoints"><c path="Array"><x path="Float"/></c></icast>
			<icast field="toArrayInt"><c path="Array"><x path="Int"/></c></icast>
			<icast field="toBoolPattern"><c path="Array"><x path="Bool"/></c></icast>
			<icast field="toUInt32Array"><x path="haxe.io.UInt32Array"/></icast>
		</to>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._ParameterString.ParameterString_Impl_" params="" file="src/justGraphix/iterMagix/ParameterString.hx" private="1" module="justGraphix.iterMagix.ParameterString" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="v">
			<c path="String"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="14" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<toFloat public="1" get="inline" set="null" line="19" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<fromInt public="1" get="inline" set="null" line="24" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromInt>
	<toInt public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":to"/></meta>
	</toInt>
	<fromUInt public="1" get="inline" set="null" line="34" static="1">
		<f a="u">
			<x path="UInt"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromUInt>
	<toUInt public="1" get="inline" set="null" line="39" static="1">
		<f a="this">
			<c path="String"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":to"/></meta>
	</toUInt>
	<fromBool public="1" get="inline" set="null" line="46" static="1">
		<f a="b">
			<x path="Bool"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromBool>
	<toBool public="1" get="inline" set="null" line="51" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":to"/></meta>
	</toBool>
	<fromPoints public="1" get="inline" set="null" line="56" static="1">
		<f a="af">
			<c path="Array"><x path="Float"/></c>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromPoints>
	<toPoints public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toPoints>
	<fromArrayInt public="1" get="inline" set="null" line="67" static="1">
		<f a="af">
			<c path="Array"><x path="Int"/></c>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArrayInt>
	<toArrayInt public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArrayInt>
	<fromBoolPattern public="1" get="inline" set="null" line="78" static="1">
		<f a="bp">
			<c path="Array"><x path="Bool"/></c>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromBoolPattern>
	<toBoolPattern public="1" get="inline" set="null" line="83" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Array"><x path="Bool"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toBoolPattern>
	<fromUInt32Array public="1" get="inline" set="null" line="92" static="1">
		<f a="u32">
			<x path="haxe.io.UInt32Array"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromUInt32Array>
	<toUInt32Array public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toUInt32Array>
	<fromRadian public="1" get="inline" set="null" line="116" static="1">
		<f a="r">
			<x path="Float"/>
			<x path="justGraphix.iterMagix.ParameterString"/>
		</f>
		<haxe_doc>* @param r 
     * @return ParameterString
     * stored as degrees string.</haxe_doc>
	</fromRadian>
	<toRadian public="1" get="inline" set="null" line="121" static="1"><f a="this">
	<c path="String"/>
	<x path="Float"/>
</f></toRadian>
	<toDegree public="1" get="inline" set="null" line="127" static="1"><f a="this">
	<c path="String"/>
	<x path="Float"/>
</f></toDegree>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._ParameterString.ParameterString_Impl_" params="" file="src/justGraphix/iterMagix/ParameterString.hx" private="1" module="justGraphix.iterMagix.ParameterString" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="v">
				<c path="String"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="14" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<toFloat public="1" get="inline" set="null" line="19" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<fromInt public="1" get="inline" set="null" line="24" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromInt>
		<toInt public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":to"/></meta>
		</toInt>
		<fromUInt public="1" get="inline" set="null" line="34" static="1">
			<f a="u">
				<x path="UInt"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromUInt>
		<toUInt public="1" get="inline" set="null" line="39" static="1">
			<f a="this">
				<c path="String"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":to"/></meta>
		</toUInt>
		<fromBool public="1" get="inline" set="null" line="46" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromBool>
		<toBool public="1" get="inline" set="null" line="51" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":to"/></meta>
		</toBool>
		<fromPoints public="1" get="inline" set="null" line="56" static="1">
			<f a="af">
				<c path="Array"><x path="Float"/></c>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromPoints>
		<toPoints public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toPoints>
		<fromArrayInt public="1" get="inline" set="null" line="67" static="1">
			<f a="af">
				<c path="Array"><x path="Int"/></c>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArrayInt>
		<toArrayInt public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArrayInt>
		<fromBoolPattern public="1" get="inline" set="null" line="78" static="1">
			<f a="bp">
				<c path="Array"><x path="Bool"/></c>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromBoolPattern>
		<toBoolPattern public="1" get="inline" set="null" line="83" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Array"><x path="Bool"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toBoolPattern>
		<fromUInt32Array public="1" get="inline" set="null" line="92" static="1">
			<f a="u32">
				<x path="haxe.io.UInt32Array"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromUInt32Array>
		<toUInt32Array public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toUInt32Array>
		<fromRadian public="1" get="inline" set="null" line="116" static="1">
			<f a="r">
				<x path="Float"/>
				<x path="justGraphix.iterMagix.ParameterString"/>
			</f>
			<haxe_doc>* @param r 
     * @return ParameterString
     * stored as degrees string.</haxe_doc>
		</fromRadian>
		<toRadian public="1" get="inline" set="null" line="121" static="1"><f a="this">
	<c path="String"/>
	<x path="Float"/>
</f></toRadian>
		<toDegree public="1" get="inline" set="null" line="127" static="1"><f a="this">
	<c path="String"/>
	<x path="Float"/>
</f></toDegree>
	</class>
	<class path="justGraphix.iterMagix.Pi2EasyIter" params="" file="src/justGraphix/iterMagix/Pi2EaseIter.hx" module="justGraphix.iterMagix.Pi2EaseIter">
		<start public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</start>
		<max public="1" expr=".1">
			<x path="Float"/>
			<meta><m n=":value"><e>.1</e></m></meta>
		</max>
		<step public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</step>
		<startRadian public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</startRadian>
		<deltaRadian public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</deltaRadian>
		<value public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</value>
		<ease expr="null">
			<x path="Null"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</ease>
		<finish expr="null">
			<x path="Null"><f a=""><x path="Void"/></f></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</finish>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<includeMax public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</includeMax>
		<new public="1" get="inline" set="null" line="45"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.Pi2EaseIter" params="" file="src/justGraphix/iterMagix/Pi2EaseIter.hx">
		<from><icast><c path="justGraphix.iterMagix.Pi2EasyIter"/></icast></from>
		<this><c path="justGraphix.iterMagix.Pi2EasyIter"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.includeMax</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.startRadian</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.deltaRadian</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.finish</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.ease</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.value</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iterator.small</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._Pi2EaseIter.Pi2EaseIter_Impl_" params="" file="src/justGraphix/iterMagix/Pi2EaseIter.hx" private="1" module="justGraphix.iterMagix.Pi2EaseIter" final="1">
	<step public="1" get="inline" set="null" line="62" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></step>
	<_new public="1" get="inline" set="null" line="69" static="1">
		<f a="start_:end_">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.iterMagix.Pi2EaseIter"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="Bool"/>
</f></hasNext>
	<easing public="1" get="inline" set="null" line="88" static="1"><f a="this:ease_">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></easing>
	<next public="1" get="inline" set="null" line="93" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="Float"/>
</f></next>
	<toTheTop public="1" get="inline" set="null" line="98" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></toTheTop>
	<reset public="1" get="inline" set="null" line="103" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></reset>
	<finished public="1" get="inline" set="null" line="109" static="1"><f a="this:finish_">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<f a=""><x path="Void"/></f>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></finished>
	<meta>
		<m n=":access"><e>justGraphix.iterMagix.Pi2Iterator.small</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.value</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.ease</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.finish</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.deltaRadian</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.startRadian</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.count</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.includeMax</e></m>
		<m n=":access">
			<e>IntIterator.min</e>
			<e>IntIterator.max</e>
		</m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Pi2EaseIter.Pi2EaseIter_Impl_" params="" file="src/justGraphix/iterMagix/Pi2EaseIter.hx" private="1" module="justGraphix.iterMagix.Pi2EaseIter" final="1">
		<step public="1" get="inline" set="null" line="62" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></step>
		<_new public="1" get="inline" set="null" line="69" static="1">
			<f a="start_:end_">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.iterMagix.Pi2EaseIter"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="78" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="Bool"/>
</f></hasNext>
		<easing public="1" get="inline" set="null" line="88" static="1"><f a="this:ease_">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></easing>
		<next public="1" get="inline" set="null" line="93" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="Float"/>
</f></next>
		<toTheTop public="1" get="inline" set="null" line="98" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></toTheTop>
		<reset public="1" get="inline" set="null" line="103" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></reset>
		<finished public="1" get="inline" set="null" line="109" static="1"><f a="this:finish_">
	<c path="justGraphix.iterMagix.Pi2EasyIter"/>
	<f a=""><x path="Void"/></f>
	<x path="justGraphix.iterMagix.Pi2EaseIter"/>
</f></finished>
		<meta>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iterator.small</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.value</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.ease</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.finish</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.deltaRadian</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.startRadian</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2EasyIter.includeMax</e></m>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<class path="justGraphix.iterMagix.Pi2Iter" params="" file="src/justGraphix/iterMagix/Pi2Iterator.hx" module="justGraphix.iterMagix.Pi2Iterator">
		<start public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</start>
		<max public="1" expr=".1">
			<x path="Float"/>
			<meta><m n=":value"><e>.1</e></m></meta>
		</max>
		<step public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</step>
		<startRadian public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</startRadian>
		<stepFactor public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</stepFactor>
		<value public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</value>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<includeMax public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</includeMax>
		<new public="1" get="inline" set="null" line="26"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.Pi2Iterator" params="" file="src/justGraphix/iterMagix/Pi2Iterator.hx">
		<from><icast><c path="justGraphix.iterMagix.Pi2Iter"/></icast></from>
		<this><c path="justGraphix.iterMagix.Pi2Iter"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.includeMax</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.startRadian</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.stepFactor</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.value</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._Pi2Iterator.Pi2Iterator_Impl_" params="" file="src/justGraphix/iterMagix/Pi2Iterator.hx" private="1" module="justGraphix.iterMagix.Pi2Iterator" final="1">
	<step get="inline" set="null" line="39" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.Pi2Iterator"/>
</f></step>
	<_new public="1" get="inline" set="null" line="46" static="1">
		<f a="start_:end_:targetStep">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.iterMagix.Pi2Iterator"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="57" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="Float"/>
</f></next>
	<toTheTop public="1" get="inline" set="null" line="70" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="justGraphix.iterMagix.Pi2Iterator"/>
</f></toTheTop>
	<reset public="1" get="inline" set="null" line="75" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="justGraphix.iterMagix.Pi2Iterator"/>
</f></reset>
	<pi2pi public="1" get="inline" set="null" line="81" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
	<zeroto2pi public="1" get="inline" set="null" line="90" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
	<small get="inline" set="null" line="99" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></small>
	<meta>
		<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.value</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.stepFactor</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.startRadian</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.count</e></m>
		<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.includeMax</e></m>
		<m n=":access">
			<e>IntIterator.min</e>
			<e>IntIterator.max</e>
		</m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Pi2Iterator.Pi2Iterator_Impl_" params="" file="src/justGraphix/iterMagix/Pi2Iterator.hx" private="1" module="justGraphix.iterMagix.Pi2Iterator" final="1">
		<step get="inline" set="null" line="39" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.Pi2Iterator"/>
</f></step>
		<_new public="1" get="inline" set="null" line="46" static="1">
			<f a="start_:end_:targetStep">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.iterMagix.Pi2Iterator"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="57" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="Float"/>
</f></next>
		<toTheTop public="1" get="inline" set="null" line="70" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="justGraphix.iterMagix.Pi2Iterator"/>
</f></toTheTop>
		<reset public="1" get="inline" set="null" line="75" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Pi2Iter"/>
	<x path="justGraphix.iterMagix.Pi2Iterator"/>
</f></reset>
		<pi2pi public="1" get="inline" set="null" line="81" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="90" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<small get="inline" set="null" line="99" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></small>
		<meta>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.value</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.stepFactor</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.startRadian</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.Pi2Iter.includeMax</e></m>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<class path="justGraphix.iterMagix.PolarIter" params="" file="src/justGraphix/iterMagix/PolarIterator.hx" module="justGraphix.iterMagix.PolarIterator">
		<radius public="1"><x path="justGraphix.iterMagix.UnitIterator"/></radius>
		<phi public="1"><x path="justGraphix.iterMagix.TauIterator"/></phi>
		<iter public="1"><c path="IntIterator"/></iter>
		<new public="1" get="inline" set="null" line="14"><f a="radius:phi">
	<x path="justGraphix.iterMagix.UnitIterator"/>
	<x path="justGraphix.iterMagix.TauIterator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>justGraphix.iterMagix.UnitIterator.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.TauIterator.count</e></m>
			<m n=":access"><e>IntIterator</e></m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.PolarIterator" params="" file="src/justGraphix/iterMagix/PolarIterator.hx">
		<from><icast><c path="justGraphix.iterMagix.PolarIter"/></icast></from>
		<this><c path="justGraphix.iterMagix.PolarIter"/></this>
		<to><icast><c path="justGraphix.iterMagix.PolarIter"/></icast></to>
		<meta>
			<m n=":access"><e>justGraphix.iterMagix.PolarIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.step</e></m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._PolarIterator.PolarIterator_Impl_" params="" file="src/justGraphix/iterMagix/PolarIterator.hx" private="1" module="justGraphix.iterMagix.PolarIterator" final="1">
	<_new public="1" get="inline" set="null" line="24" static="1">
		<f a="stepRadius:steps">
			<x path="Float"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.PolarIterator"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="31" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="35" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Int"/>
</f></next>
	<r public="1" get="accessor" set="null" static="1"><x path="Float"/></r>
	<get_r get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_r>
	<theta public="1" get="accessor" set="null" static="1"><x path="Float"/></theta>
	<get_theta get="inline" set="null" line="50" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_theta>
	<cx public="1" get="accessor" set="null" static="1"><x path="Float"/></cx>
	<get_cx get="inline" set="null" line="54" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_cx>
	<cy public="1" get="accessor" set="null" static="1"><x path="Float"/></cy>
	<get_cy get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_cy>
	<x public="1" get="accessor" set="null" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_x>
	<y public="1" get="accessor" set="null" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="66" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_y>
	<sx public="1" get="inline" set="null" line="70" static="1"><f a="this:scale">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></sx>
	<sy public="1" get="inline" set="null" line="74" static="1"><f a="this:scale">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></sy>
	<meta>
		<m n=":access"><e>justGraphix.iterMagix.UnitIter.step</e></m>
		<m n=":access"><e>justGraphix.iterMagix.PolarIter.count</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._PolarIterator.PolarIterator_Impl_" params="" file="src/justGraphix/iterMagix/PolarIterator.hx" private="1" module="justGraphix.iterMagix.PolarIterator" final="1">
		<_new public="1" get="inline" set="null" line="24" static="1">
			<f a="stepRadius:steps">
				<x path="Float"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.PolarIterator"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="31" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="35" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Int"/>
</f></next>
		<r public="1" get="accessor" set="null" static="1"><x path="Float"/></r>
		<get_r get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_r>
		<theta public="1" get="accessor" set="null" static="1"><x path="Float"/></theta>
		<get_theta get="inline" set="null" line="50" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_theta>
		<cx public="1" get="accessor" set="null" static="1"><x path="Float"/></cx>
		<get_cx get="inline" set="null" line="54" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_cx>
		<cy public="1" get="accessor" set="null" static="1"><x path="Float"/></cy>
		<get_cy get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_cy>
		<x public="1" get="accessor" set="null" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_x>
		<y public="1" get="accessor" set="null" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="66" static="1"><f a="this">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
</f></get_y>
		<sx public="1" get="inline" set="null" line="70" static="1"><f a="this:scale">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></sx>
		<sy public="1" get="inline" set="null" line="74" static="1"><f a="this:scale">
	<c path="justGraphix.iterMagix.PolarIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></sy>
		<meta>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.step</e></m>
			<m n=":access"><e>justGraphix.iterMagix.PolarIter.count</e></m>
		</meta>
	</class>
	<class path="justGraphix.iterMagix.IntIterStep" params="" file="src/justGraphix/iterMagix/StepIterator.hx" module="justGraphix.iterMagix.StepIterator">
		<start public="1"><x path="Int"/></start>
		<max public="1"><x path="Int"/></max>
		<step public="1"><x path="Int"/></step>
		<count public="1"><x path="Int"/></count>
		<new public="1" get="inline" set="null" line="16">
			<f a="min_:max_:?step_" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ step_ : 1 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.StepIterator" params="" file="src/justGraphix/iterMagix/StepIterator.hx">
		<from>
			<icast><c path="justGraphix.iterMagix.IntIterStep"/></icast>
			<icast field="fromIterator"><c path="IntIterator"/></icast>
		</from>
		<this><c path="justGraphix.iterMagix.IntIterStep"/></this>
		<to><icast field="toIterStart"><x path="justGraphix.iterMagix.StepIterator"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._StepIterator.StepIterator_Impl_" params="" file="src/justGraphix/iterMagix/StepIterator.hx" private="1" module="justGraphix.iterMagix.StepIterator" final="1">
	<startLength public="1" get="inline" set="null" line="29" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
</f></startLength>
	<step public="1" get="inline" set="null" line="32" static="1"><f a="this:step_">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
</f></step>
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a="min:max">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
</f></next>
	<fromIterator public="1" get="inline" set="null" line="50" static="1">
		<f a="ii">
			<c path="IntIterator"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromIterator>
	<toIterStart set="method" line="54" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.IntIterStep"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
		</f>
		<meta><m n=":to"/></meta>
	</toIterStart>
	<iterator public="1" get="inline" set="null" line="57" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<c path="IntIterator"/>
</f></iterator>
	<adding public="1" get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="justGraphix.iterMagix.StepIterator"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="65" static="1"><f a="this:b">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
</f></add>
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<get_length get="inline" set="null" line="73" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="77" static="1"><f a="this:l">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<contains public="1" get="inline" set="null" line="82" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
	<containsF public="1" get="inline" set="null" line="86" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
	<isWithin public="1" get="inline" set="null" line="90" static="1"><f a="this:ir">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
	<x path="Bool"/>
</f></isWithin>
	<moveRange public="1" get="inline" set="null" line="94" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
	<addAssign public="1" get="inline" set="null" line="100" static="1">
		<f a="a:v">
			<x path="justGraphix.iterMagix.StepIterator"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
		</f>
		<meta><m n=":op"><e>A += B</e></m></meta>
	</addAssign>
	<minusAssign public="1" get="inline" set="null" line="106" static="1">
		<f a="a:v">
			<x path="justGraphix.iterMagix.StepIterator"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.StepIterator"/>
		</f>
		<meta><m n=":op"><e>A -= B</e></m></meta>
	</minusAssign>
	<ifContainMove public="1" get="inline" set="null" line="110" static="1"><f a="this:v:amount">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
	<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._StepIterator.StepIterator_Impl_" params="" file="src/justGraphix/iterMagix/StepIterator.hx" private="1" module="justGraphix.iterMagix.StepIterator" final="1">
		<startLength public="1" get="inline" set="null" line="29" static="1"><f a="min:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
</f></startLength>
		<step public="1" get="inline" set="null" line="32" static="1"><f a="this:step_">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
</f></step>
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
</f></next>
		<fromIterator public="1" get="inline" set="null" line="50" static="1">
			<f a="ii">
				<c path="IntIterator"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromIterator>
		<toIterStart set="method" line="54" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.IntIterStep"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
			</f>
			<meta><m n=":to"/></meta>
		</toIterStart>
		<iterator public="1" get="inline" set="null" line="57" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<c path="IntIterator"/>
</f></iterator>
		<adding public="1" get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="justGraphix.iterMagix.StepIterator"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="65" static="1"><f a="this:b">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
</f></add>
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<get_length get="inline" set="null" line="73" static="1"><f a="this">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="77" static="1"><f a="this:l">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<contains public="1" get="inline" set="null" line="82" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></contains>
		<containsF public="1" get="inline" set="null" line="86" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></containsF>
		<isWithin public="1" get="inline" set="null" line="90" static="1"><f a="this:ir">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="justGraphix.iterMagix.StepIterator"/>
	<x path="Bool"/>
</f></isWithin>
		<moveRange public="1" get="inline" set="null" line="94" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Void"/>
</f></moveRange>
		<addAssign public="1" get="inline" set="null" line="100" static="1">
			<f a="a:v">
				<x path="justGraphix.iterMagix.StepIterator"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
			</f>
			<meta><m n=":op"><e>A += B</e></m></meta>
		</addAssign>
		<minusAssign public="1" get="inline" set="null" line="106" static="1">
			<f a="a:v">
				<x path="justGraphix.iterMagix.StepIterator"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.StepIterator"/>
			</f>
			<meta><m n=":op"><e>A -= B</e></m></meta>
		</minusAssign>
		<ifContainMove public="1" get="inline" set="null" line="110" static="1"><f a="this:v:amount">
	<c path="justGraphix.iterMagix.IntIterStep"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></ifContainMove>
		<meta><m n=":access">
	<e>IntIterator.min</e>
	<e>IntIterator.max</e>
</m></meta>
	</class>
	<typedef path="justGraphix.iterMagix.StringUpdate" params="" file="src/justGraphix/iterMagix/Stringy.hx" module="justGraphix.iterMagix.Stringy"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></typedef>
	<abstract path="justGraphix.iterMagix.Stringy" params="" file="src/justGraphix/iterMagix/Stringy.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="justGraphix.iterMagix._Stringy.Stringy_Impl_" params="" file="src/justGraphix/iterMagix/Stringy.hx" private="1" module="justGraphix.iterMagix.Stringy" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="s">
			<c path="String"/>
			<x path="justGraphix.iterMagix.Stringy"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.StringUpdate"/></updater>
	<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<c path="String"/>
	<t path="justGraphix.iterMagix.StringUpdate"/>
</f></get_updater>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Stringy.Stringy_Impl_" params="" file="src/justGraphix/iterMagix/Stringy.hx" private="1" module="justGraphix.iterMagix.Stringy" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="s">
				<c path="String"/>
				<x path="justGraphix.iterMagix.Stringy"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.StringUpdate"/></updater>
		<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<c path="String"/>
	<t path="justGraphix.iterMagix.StringUpdate"/>
</f></get_updater>
	</class>
	<class path="justGraphix.iterMagix.TauEaseIter" params="" file="src/justGraphix/iterMagix/TauEaseIterator.hx" module="justGraphix.iterMagix.TauEaseIterator">
		<tauIter public="1"><x path="justGraphix.iterMagix.TauIterator"/></tauIter>
		<ease public="1" expr="null">
			<x path="Null"><f a="">
	<x path="Float"/>
	<x path="Float"/>
</f></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</ease>
		<new public="1" get="inline" set="null" line="9"><f a="tauIter">
	<x path="justGraphix.iterMagix.TauIterator"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.iterMagix.TauEaseIterator" params="" file="src/justGraphix/iterMagix/TauEaseIterator.hx">
		<from><icast><c path="justGraphix.iterMagix.TauEaseIter"/></icast></from>
		<this><c path="justGraphix.iterMagix.TauEaseIter"/></this>
		<to><icast><c path="justGraphix.iterMagix.TauEaseIter"/></icast></to>
		<meta>
			<m n=":access"/>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._TauEaseIterator.TauEaseIterator_Impl_" params="" file="src/justGraphix/iterMagix/TauEaseIterator.hx" private="1" module="justGraphix.iterMagix.TauEaseIterator" final="1">
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="min:max:steps">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.TauEaseIterator"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="24" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<x path="Float"/>
</f></next>
	<easing public="1" get="inline" set="null" line="41" static="1"><f a="this:ease_">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="justGraphix.iterMagix.TauEaseIterator"/>
</f></easing>
	<finished public="1" get="inline" set="null" line="46" static="1"><f a="this:finish_">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<f a=""><x path="Void"/></f>
	<x path="justGraphix.iterMagix.TauEaseIterator"/>
</f></finished>
	<meta><m n=":access"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._TauEaseIterator.TauEaseIterator_Impl_" params="" file="src/justGraphix/iterMagix/TauEaseIterator.hx" private="1" module="justGraphix.iterMagix.TauEaseIterator" final="1">
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="min:max:steps">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.TauEaseIterator"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="24" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<x path="Float"/>
</f></next>
		<easing public="1" get="inline" set="null" line="41" static="1"><f a="this:ease_">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<f a="">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<x path="justGraphix.iterMagix.TauEaseIterator"/>
</f></easing>
		<finished public="1" get="inline" set="null" line="46" static="1"><f a="this:finish_">
	<c path="justGraphix.iterMagix.TauEaseIter"/>
	<f a=""><x path="Void"/></f>
	<x path="justGraphix.iterMagix.TauEaseIterator"/>
</f></finished>
		<meta><m n=":access"/></meta>
	</class>
	<class path="justGraphix.iterMagix.TauIter" params="" file="src/justGraphix/iterMagix/TauIterator.hx" module="justGraphix.iterMagix.TauIterator">
		<iter public="1"><x path="justGraphix.iterMagix.UnitIterator"/></iter>
		<start public="1"><x path="Float"/></start>
		<stepSize public="1"><x path="Float"/></stepSize>
		<value public="1"><x path="Float"/></value>
		<count public="1"><x path="Float"/></count>
		<end public="1"><x path="Float"/></end>
		<finish public="1" expr="null">
			<x path="Null"><f a=""><x path="Void"/></f></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</finish>
		<new public="1" get="inline" set="null" line="94"><f a="start:end">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.iterMagix.TauIterator" params="" file="src/justGraphix/iterMagix/TauIterator.hx">
		<this><c path="justGraphix.iterMagix.TauIter"/></this>
		<meta>
			<m n=":access"><e>justGraphic.imageMagic.TauIter.count</e></m>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._TauIterator.TauIterator_Impl_" params="" file="src/justGraphix/iterMagix/TauIterator.hx" private="1" module="justGraphix.iterMagix.TauIterator" final="1">
	<step public="1" set="method" line="105" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.TauIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.TauIterator"/>
</f></step>
	<_new public="1" get="inline" set="null" line="111" static="1">
		<f a="min:max:steps">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="justGraphix.iterMagix.TauIterator"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauIter"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="121" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauIter"/>
	<x path="Float"/>
</f></next>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>justGraphic.imageMagic.TauIter.count</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._TauIterator.TauIterator_Impl_" params="" file="src/justGraphix/iterMagix/TauIterator.hx" private="1" module="justGraphix.iterMagix.TauIterator" final="1">
		<step public="1" set="method" line="105" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.TauIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.TauIterator"/>
</f></step>
		<_new public="1" get="inline" set="null" line="111" static="1">
			<f a="min:max:steps">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="justGraphix.iterMagix.TauIterator"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="117" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauIter"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="121" static="1"><f a="this">
	<c path="justGraphix.iterMagix.TauIter"/>
	<x path="Float"/>
</f></next>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>justGraphic.imageMagic.TauIter.count</e></m>
		</meta>
	</class>
	<class path="justGraphix.iterMagix._TauIterator.TauIterator_Fields_" params="" file="src/justGraphix/iterMagix/TauIterator.hx" private="1" module="justGraphix.iterMagix.TauIterator" final="1">
		<epsilon public="1" expr="0.000000000000005" line="3" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.000000000000005</e></m></meta>
		</epsilon>
		<pie_2 public="1" get="accessor" set="null" static="1"><x path="Float"/></pie_2>
		<get_pie_2 public="1" get="inline" set="null" line="7" static="1"><f a=""><x path="Float"/></f></get_pie_2>
		<tau3_4 public="1" get="accessor" set="null" static="1"><x path="Float"/></tau3_4>
		<get_tau3_4 public="1" get="inline" set="null" line="12" static="1"><f a=""><x path="Float"/></f></get_tau3_4>
		<pie public="1" get="accessor" set="null" static="1"><x path="Float"/></pie>
		<get_pie public="1" get="inline" set="null" line="17" static="1"><f a=""><x path="Float"/></f></get_pie>
		<tau public="1" get="accessor" set="null" static="1"><x path="Float"/></tau>
		<get_tau public="1" get="inline" set="null" line="22" static="1"><f a=""><x path="Float"/></f></get_tau>
		<tauDivisor public="1" get="inline" set="null" line="26" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></tauDivisor>
		<minusTau public="1" set="method" line="30" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></minusTau>
		<tauNormalize public="1" get="inline" set="null" line="35" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></tauNormalize>
		<clean0 public="1" set="method" line="39" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></clean0>
		<tauLimit public="1" get="inline" set="null" line="48" static="1">
			<f a="val:?zero" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":value"><e>{ zero : false }</e></m>
				<m n=":keep"/>
			</meta>
		</tauLimit>
		<pi2piLimit public="1" get="inline" set="null" line="53" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2piLimit>
		<smallest public="1" get="inline" set="null" line="63" static="1"><f a="v1:v2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smallest>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="justGraphix.iterMagix.Tupdate" params="T" file="src/justGraphix/iterMagix/Tmodfiy.hx" module="justGraphix.iterMagix.Tmodfiy"><f a="">
	<c path="justGraphix.iterMagix.Tupdate.T"/>
	<c path="justGraphix.iterMagix.Tupdate.T"/>
</f></typedef>
	<abstract path="justGraphix.iterMagix.Tmodify" params="T" file="src/justGraphix/iterMagix/Tmodfiy.hx" module="justGraphix.iterMagix.Tmodfiy">
		<from><icast><c path="justGraphix.iterMagix.Tmodify.T"/></icast></from>
		<this><c path="justGraphix.iterMagix.Tmodify.T"/></this>
		<to><icast><c path="justGraphix.iterMagix.Tmodify.T"/></icast></to>
		<impl><class path="justGraphix.iterMagix._Tmodfiy.Tmodify_Impl_" params="" file="src/justGraphix/iterMagix/Tmodfiy.hx" private="1" module="justGraphix.iterMagix.Tmodfiy" final="1">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="t">
			<c path="justGraphix.iterMagix.Tmodify.T"/>
			<x path="justGraphix.iterMagix.Tmodify"><c path="justGraphix.iterMagix.Tmodify.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tmodify.T"/></t></updater>
	<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Tmodify.T"/>
	<t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tmodify.T"/></t>
</f></get_updater>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Tmodfiy.Tmodify_Impl_" params="" file="src/justGraphix/iterMagix/Tmodfiy.hx" private="1" module="justGraphix.iterMagix.Tmodfiy" final="1">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="t">
				<c path="justGraphix.iterMagix.Tmodify.T"/>
				<x path="justGraphix.iterMagix.Tmodify"><c path="justGraphix.iterMagix.Tmodify.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<updater public="1" get="accessor" set="null" static="1"><t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tmodify.T"/></t></updater>
		<get_updater get="inline" set="null" line="6" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Tmodify.T"/>
	<t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tmodify.T"/></t>
</f></get_updater>
	</class>
	<class path="justGraphix.iterMagix.Tstruct" params="T" file="src/justGraphix/iterMagix/Tmodfiy.hx" module="justGraphix.iterMagix.Tmodfiy">
		<t public="1"><c path="justGraphix.iterMagix.Tstruct.T"/></t>
		<update public="1"><t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tstruct.T"/></t></update>
		<new public="1" set="method" line="18"><f a="t">
	<c path="justGraphix.iterMagix.Tstruct.T"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.iterMagix.Tmodify2" params="T" file="src/justGraphix/iterMagix/Tmodfiy.hx" module="justGraphix.iterMagix.Tmodfiy">
		<from><icast field="fromTmodify"><c path="fromTmodify.T"/></icast></from>
		<this><c path="justGraphix.iterMagix.Tstruct"><c path="justGraphix.iterMagix.Tmodify2.T"/></c></this>
		<to><icast field="toTmodify"><c path="justGraphix.iterMagix.Tmodify2.T"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.iterMagix._Tmodfiy.Tmodify2_Impl_" params="" file="src/justGraphix/iterMagix/Tmodfiy.hx" private="1" module="justGraphix.iterMagix.Tmodfiy" final="1">
	<_new public="1" get="inline" set="null" line="25" static="1">
		<f a="t">
			<c path="justGraphix.iterMagix.Tmodify2.T"/>
			<x path="justGraphix.iterMagix.Tmodify2"><c path="justGraphix.iterMagix.Tmodify2.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<createUpdate public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Tstruct"><c path="justGraphix.iterMagix.Tmodify2.T"/></c>
	<t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tmodify2.T"/></t>
</f></createUpdate>
	<toTmodify public="1" get="inline" set="null" line="36" static="1">
		<f a="this">
			<c path="justGraphix.iterMagix.Tstruct"><c path="justGraphix.iterMagix.Tmodify2.T"/></c>
			<c path="justGraphix.iterMagix.Tmodify2.T"/>
		</f>
		<meta><m n=":to"/></meta>
	</toTmodify>
	<fromTmodify public="1" params="T" get="inline" set="null" line="41" static="1">
		<f a="t">
			<c path="fromTmodify.T"/>
			<x path="justGraphix.iterMagix.Tmodify2"><c path="fromTmodify.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromTmodify>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._Tmodfiy.Tmodify2_Impl_" params="" file="src/justGraphix/iterMagix/Tmodfiy.hx" private="1" module="justGraphix.iterMagix.Tmodfiy" final="1">
		<_new public="1" get="inline" set="null" line="25" static="1">
			<f a="t">
				<c path="justGraphix.iterMagix.Tmodify2.T"/>
				<x path="justGraphix.iterMagix.Tmodify2"><c path="justGraphix.iterMagix.Tmodify2.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<createUpdate public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<c path="justGraphix.iterMagix.Tstruct"><c path="justGraphix.iterMagix.Tmodify2.T"/></c>
	<t path="justGraphix.iterMagix.Tupdate"><c path="justGraphix.iterMagix.Tmodify2.T"/></t>
</f></createUpdate>
		<toTmodify public="1" get="inline" set="null" line="36" static="1">
			<f a="this">
				<c path="justGraphix.iterMagix.Tstruct"><c path="justGraphix.iterMagix.Tmodify2.T"/></c>
				<c path="justGraphix.iterMagix.Tmodify2.T"/>
			</f>
			<meta><m n=":to"/></meta>
		</toTmodify>
		<fromTmodify public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="t">
				<c path="fromTmodify.T"/>
				<x path="justGraphix.iterMagix.Tmodify2"><c path="fromTmodify.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromTmodify>
	</class>
	<class path="justGraphix.iterMagix.UnitIter" params="" file="src/justGraphix/iterMagix/UnitIterator.hx" module="justGraphix.iterMagix.UnitIterator">
		<start public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</start>
		<max public="1" expr=".1">
			<x path="Float"/>
			<meta><m n=":value"><e>.1</e></m></meta>
		</max>
		<step public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</step>
		<value public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</value>
		<isNegative public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isNegative>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<includeMax public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</includeMax>
		<cropTo expr="null">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</cropTo>
		<new public="1" get="inline" set="null" line="29"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.iterMagix.UnitIterator" params="" file="src/justGraphix/iterMagix/UnitIterator.hx">
		<from><icast><c path="justGraphix.iterMagix.UnitIter"/></icast></from>
		<this><c path="justGraphix.iterMagix.UnitIter"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.includeMax</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.isNegative</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.cropTo</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.value</e></m>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="justGraphix.iterMagix._UnitIterator.UnitIterator_Impl_" params="" file="src/justGraphix/iterMagix/UnitIterator.hx" private="1" module="justGraphix.iterMagix.UnitIterator" final="1">
	<step public="1" set="method" line="43" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></step>
	<setFloatStep public="1" get="inline" set="null" line="51" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloatStep>
	<_new public="1" get="inline" set="null" line="54" static="1">
		<f a=""><x path="justGraphix.iterMagix.UnitIterator"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hasNext public="1" get="inline" set="null" line="59" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="67" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
</f></next>
	<positiveValue get="inline" set="null" line="72" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
</f></positiveValue>
	<crop get="inline" set="null" line="79" static="1"><f a="this:val">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></crop>
	<toTheTop public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></toTheTop>
	<places public="1" get="inline" set="null" line="88" static="1"><f a="this:n">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></places>
	<reset public="1" get="inline" set="null" line="93" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></reset>
	<resetPositive public="1" get="inline" set="null" line="99" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></resetPositive>
	<negative public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></negative>
	<positive public="1" get="inline" set="null" line="110" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></positive>
	<change public="1" get="inline" set="null" line="115" static="1"><f a="i:start:end">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></change>
	<changeCrop public="1" get="inline" set="null" line="119" static="1"><f a="i:start:end:places_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
</f></changeCrop>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":access"><e>justGraphix.iterMagix.UnitIter.value</e></m>
		<m n=":access"><e>justGraphix.iterMagix.UnitIter.count</e></m>
		<m n=":access"><e>justGraphix.iterMagix.UnitIter.cropTo</e></m>
		<m n=":access"><e>justGraphix.iterMagix.UnitIter.isNegative</e></m>
		<m n=":access"><e>justGraphix.iterMagix.UnitIter.includeMax</e></m>
		<m n=":access">
			<e>IntIterator.min</e>
			<e>IntIterator.max</e>
		</m>
	</meta>
</class></impl>
	</abstract>
	<class path="justGraphix.iterMagix._UnitIterator.UnitIterator_Impl_" params="" file="src/justGraphix/iterMagix/UnitIterator.hx" private="1" module="justGraphix.iterMagix.UnitIterator" final="1">
		<step public="1" set="method" line="43" static="1"><f a="this:count_">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></step>
		<setFloatStep public="1" get="inline" set="null" line="51" static="1"><f a="this:v">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloatStep>
		<_new public="1" get="inline" set="null" line="54" static="1">
			<f a=""><x path="justGraphix.iterMagix.UnitIterator"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hasNext public="1" get="inline" set="null" line="59" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="67" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
</f></next>
		<positiveValue get="inline" set="null" line="72" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
</f></positiveValue>
		<crop get="inline" set="null" line="79" static="1"><f a="this:val">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Float"/>
	<x path="Float"/>
</f></crop>
		<toTheTop public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></toTheTop>
		<places public="1" get="inline" set="null" line="88" static="1"><f a="this:n">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="Int"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></places>
		<reset public="1" get="inline" set="null" line="93" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></reset>
		<resetPositive public="1" get="inline" set="null" line="99" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></resetPositive>
		<negative public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></negative>
		<positive public="1" get="inline" set="null" line="110" static="1"><f a="this">
	<c path="justGraphix.iterMagix.UnitIter"/>
	<x path="justGraphix.iterMagix.UnitIterator"/>
</f></positive>
		<change public="1" get="inline" set="null" line="115" static="1"><f a="i:start:end">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></change>
		<changeCrop public="1" get="inline" set="null" line="119" static="1"><f a="i:start:end:places_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
</f></changeCrop>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.value</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.count</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.cropTo</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.isNegative</e></m>
			<m n=":access"><e>justGraphix.iterMagix.UnitIter.includeMax</e></m>
			<m n=":access">
				<e>IntIterator.min</e>
				<e>IntIterator.max</e>
			</m>
		</meta>
	</class>
	<abstract path="justGraphix.pallette.ansi.Emacs256Hex" params="" file="src/justGraphix/pallette/ansi/Emacs256Hex.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.ansi._Emacs256Hex.Emacs256Hex_Impl_" params="" file="src/justGraphix/pallette/ansi/Emacs256Hex.hx" private="1" module="justGraphix.pallette.ansi.Emacs256Hex" final="1">
	<e0 public="1" get="inline" set="null" expr="cast 0x000000" line="4" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x000000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e0>
	<e1 public="1" get="inline" set="null" expr="cast 0x800000" line="5" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x800000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e1>
	<e2 public="1" get="inline" set="null" expr="cast 0x008000" line="6" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x008000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e2>
	<e3 public="1" get="inline" set="null" expr="cast 0x808000" line="7" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x808000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e3>
	<e4 public="1" get="inline" set="null" expr="cast 0x000080" line="8" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x000080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e4>
	<e5 public="1" get="inline" set="null" expr="cast 0x800080" line="9" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x800080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e5>
	<e6 public="1" get="inline" set="null" expr="cast 0x008080" line="10" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x008080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e6>
	<e7 public="1" get="inline" set="null" expr="cast 0xc0c0c0" line="11" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xc0c0c0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e7>
	<e8 public="1" get="inline" set="null" expr="cast 0x808080" line="12" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x808080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e8>
	<e9 public="1" get="inline" set="null" expr="cast 0xff0000" line="13" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e9>
	<e10 public="1" get="inline" set="null" expr="cast 0x00ff00" line="14" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e10>
	<e11 public="1" get="inline" set="null" expr="cast 0xffff00" line="15" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e11>
	<e12 public="1" get="inline" set="null" expr="cast 0x0000ff" line="16" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0000ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e12>
	<e13 public="1" get="inline" set="null" expr="cast 0xff00ff" line="17" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff00ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e13>
	<e14 public="1" get="inline" set="null" expr="cast 0x00ffff" line="18" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e14>
	<e15 public="1" get="inline" set="null" expr="cast 0xffffff" line="19" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e15>
	<e16 public="1" get="inline" set="null" expr="cast e0" line="20" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast e0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e16>
	<e17 public="1" get="inline" set="null" expr="cast 0x00005f" line="21" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00005f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e17>
	<e18 public="1" get="inline" set="null" expr="cast 0x000087" line="22" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x000087</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e18>
	<e19 public="1" get="inline" set="null" expr="cast 0x0000af" line="23" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0000af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e19>
	<e20 public="1" get="inline" set="null" expr="cast 0x0000d7" line="24" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0000d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e20>
	<e21 public="1" get="inline" set="null" expr="cast 0x0000ff" line="25" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0000ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e21>
	<e22 public="1" get="inline" set="null" expr="cast 0x005f00" line="26" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x005f00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e22>
	<e23 public="1" get="inline" set="null" expr="cast 0x005f5f" line="27" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x005f5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e23>
	<e24 public="1" get="inline" set="null" expr="cast 0x005f87" line="28" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x005f87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e24>
	<e25 public="1" get="inline" set="null" expr="cast 0x005faf" line="29" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x005faf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e25>
	<e26 public="1" get="inline" set="null" expr="cast 0x005fd7" line="30" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x005fd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e26>
	<e27 public="1" get="inline" set="null" expr="cast 0x005fff" line="31" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x005fff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e27>
	<e28 public="1" get="inline" set="null" expr="cast 0x008700" line="32" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x008700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e28>
	<e29 public="1" get="inline" set="null" expr="cast 0x00875f" line="33" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00875f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e29>
	<e30 public="1" get="inline" set="null" expr="cast 0x008787" line="34" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x008787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e30>
	<e31 public="1" get="inline" set="null" expr="cast 0x0087af" line="35" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0087af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e31>
	<e32 public="1" get="inline" set="null" expr="cast 0x0087d7" line="36" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0087d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e32>
	<e33 public="1" get="inline" set="null" expr="cast 0x0087ff" line="37" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x0087ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e33>
	<e34 public="1" get="inline" set="null" expr="cast 0x00af00" line="38" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00af00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e34>
	<e35 public="1" get="inline" set="null" expr="cast 0x00af5f" line="39" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00af5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e35>
	<e36 public="1" get="inline" set="null" expr="cast 0x00af87" line="40" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00af87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e36>
	<e37 public="1" get="inline" set="null" expr="cast 0x00afaf" line="41" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00afaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e37>
	<e38 public="1" get="inline" set="null" expr="cast 0x00afd7" line="42" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00afd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e38>
	<e39 public="1" get="inline" set="null" expr="cast 0x00afff" line="43" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00afff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e39>
	<e40 public="1" get="inline" set="null" expr="cast 0x00d700" line="44" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00d700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e40>
	<e41 public="1" get="inline" set="null" expr="cast 0x00d75f" line="45" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00d75f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e41>
	<e42 public="1" get="inline" set="null" expr="cast 0x00d787" line="46" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00d787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e42>
	<e43 public="1" get="inline" set="null" expr="cast 0x00d7af" line="47" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00d7af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e43>
	<e44 public="1" get="inline" set="null" expr="cast 0x00d7d7" line="48" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00d7d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e44>
	<e45 public="1" get="inline" set="null" expr="cast 0x00d7ff" line="49" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00d7ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e45>
	<e46 public="1" get="inline" set="null" expr="cast 0x00ff00" line="50" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e46>
	<e47 public="1" get="inline" set="null" expr="cast 0x00ff5f" line="51" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ff5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e47>
	<e48 public="1" get="inline" set="null" expr="cast 0x00ff87" line="52" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ff87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e48>
	<e49 public="1" get="inline" set="null" expr="cast 0x00ffaf" line="53" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ffaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e49>
	<e50 public="1" get="inline" set="null" expr="cast 0x00ffd7" line="54" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ffd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e50>
	<e51 public="1" get="inline" set="null" expr="cast 0x00ffff" line="55" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x00ffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e51>
	<e52 public="1" get="inline" set="null" expr="cast 0x5f0000" line="56" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e52>
	<e53 public="1" get="inline" set="null" expr="cast 0x5f005f" line="57" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f005f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e53>
	<e54 public="1" get="inline" set="null" expr="cast 0x5f0087" line="58" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f0087</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e54>
	<e55 public="1" get="inline" set="null" expr="cast 0x5f00af" line="59" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f00af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e55>
	<e56 public="1" get="inline" set="null" expr="cast 0x5f00d7" line="60" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f00d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e56>
	<e57 public="1" get="inline" set="null" expr="cast 0x5f00ff" line="61" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f00ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e57>
	<e58 public="1" get="inline" set="null" expr="cast 0x5f5f00" line="62" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f5f00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e58>
	<e59 public="1" get="inline" set="null" expr="cast 0x5f5f5f" line="63" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f5f5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e59>
	<e60 public="1" get="inline" set="null" expr="cast 0x5f5f87" line="64" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f5f87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e60>
	<e61 public="1" get="inline" set="null" expr="cast 0x5f5faf" line="65" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f5faf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e61>
	<e62 public="1" get="inline" set="null" expr="cast 0x5f5fd7" line="66" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f5fd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e62>
	<e63 public="1" get="inline" set="null" expr="cast 0x5f5fff" line="67" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f5fff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e63>
	<e64 public="1" get="inline" set="null" expr="cast 0x5f8700" line="68" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f8700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e64>
	<e65 public="1" get="inline" set="null" expr="cast 0x5f875f" line="69" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f875f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e65>
	<e66 public="1" get="inline" set="null" expr="cast 0x5f8787" line="70" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f8787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e66>
	<e67 public="1" get="inline" set="null" expr="cast 0x5f87af" line="71" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f87af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e67>
	<e68 public="1" get="inline" set="null" expr="cast 0x5f87d7" line="72" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f87d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e68>
	<e69 public="1" get="inline" set="null" expr="cast 0x5f87ff" line="73" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5f87ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e69>
	<e70 public="1" get="inline" set="null" expr="cast 0x5faf00" line="74" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5faf00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e70>
	<e71 public="1" get="inline" set="null" expr="cast 0x5faf5f" line="75" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5faf5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e71>
	<e72 public="1" get="inline" set="null" expr="cast 0x5faf87" line="76" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5faf87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e72>
	<e73 public="1" get="inline" set="null" expr="cast 0x5fafaf" line="77" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fafaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e73>
	<e74 public="1" get="inline" set="null" expr="cast 0x5fafd7" line="78" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fafd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e74>
	<e75 public="1" get="inline" set="null" expr="cast 0x5fafff" line="79" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fafff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e75>
	<e76 public="1" get="inline" set="null" expr="cast 0x5fd700" line="80" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fd700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e76>
	<e77 public="1" get="inline" set="null" expr="cast 0x5fd75f" line="81" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fd75f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e77>
	<e78 public="1" get="inline" set="null" expr="cast 0x5fd787" line="82" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fd787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e78>
	<e79 public="1" get="inline" set="null" expr="cast 0x5fd7af" line="83" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fd7af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e79>
	<e80 public="1" get="inline" set="null" expr="cast 0x5fd7d7" line="84" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fd7d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e80>
	<e81 public="1" get="inline" set="null" expr="cast 0x5fd7ff" line="85" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fd7ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e81>
	<e82 public="1" get="inline" set="null" expr="cast 0x5fff00" line="86" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e82>
	<e83 public="1" get="inline" set="null" expr="cast 0x5fff5f" line="87" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fff5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e83>
	<e84 public="1" get="inline" set="null" expr="cast 0x5fff87" line="88" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fff87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e84>
	<e85 public="1" get="inline" set="null" expr="cast 0x5fffaf" line="89" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fffaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e85>
	<e86 public="1" get="inline" set="null" expr="cast 0x5fffd7" line="90" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fffd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e86>
	<e87 public="1" get="inline" set="null" expr="cast 0x5fffff" line="91" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x5fffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e87>
	<e88 public="1" get="inline" set="null" expr="cast 0x870000" line="92" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x870000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e88>
	<e89 public="1" get="inline" set="null" expr="cast 0x87005f" line="93" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87005f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e89>
	<e90 public="1" get="inline" set="null" expr="cast 0x870087" line="94" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x870087</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e90>
	<e91 public="1" get="inline" set="null" expr="cast 0x8700af" line="95" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8700af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e91>
	<e92 public="1" get="inline" set="null" expr="cast 0x8700d7" line="96" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8700d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e92>
	<e93 public="1" get="inline" set="null" expr="cast 0x8700ff" line="97" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8700ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e93>
	<e94 public="1" get="inline" set="null" expr="cast 0x875f00" line="98" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x875f00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e94>
	<e95 public="1" get="inline" set="null" expr="cast 0x875f5f" line="99" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x875f5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e95>
	<e96 public="1" get="inline" set="null" expr="cast 0x875f87" line="100" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x875f87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e96>
	<e97 public="1" get="inline" set="null" expr="cast 0x875faf" line="101" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x875faf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e97>
	<e98 public="1" get="inline" set="null" expr="cast 0x875fd7" line="102" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x875fd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e98>
	<e99 public="1" get="inline" set="null" expr="cast 0x875fff" line="103" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x875fff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e99>
	<e100 public="1" get="inline" set="null" expr="cast 0x878700" line="104" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x878700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e100>
	<e101 public="1" get="inline" set="null" expr="cast 0x87875f" line="105" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87875f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e101>
	<e102 public="1" get="inline" set="null" expr="cast 0x878787" line="106" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x878787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e102>
	<e103 public="1" get="inline" set="null" expr="cast 0x8787af" line="107" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8787af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e103>
	<e104 public="1" get="inline" set="null" expr="cast 0x8787d7" line="108" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8787d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e104>
	<e105 public="1" get="inline" set="null" expr="cast 0x8787ff" line="109" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8787ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e105>
	<e106 public="1" get="inline" set="null" expr="cast 0x87af00" line="110" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87af00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e106>
	<e107 public="1" get="inline" set="null" expr="cast 0x87af5f" line="111" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87af5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e107>
	<e108 public="1" get="inline" set="null" expr="cast 0x87af87" line="112" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87af87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e108>
	<e109 public="1" get="inline" set="null" expr="cast 0x87afaf" line="113" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87afaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e109>
	<e110 public="1" get="inline" set="null" expr="cast 0x87afd7" line="114" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87afd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e110>
	<e111 public="1" get="inline" set="null" expr="cast 0x87afff" line="115" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87afff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e111>
	<e112 public="1" get="inline" set="null" expr="cast 0x87d700" line="116" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87d700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e112>
	<e113 public="1" get="inline" set="null" expr="cast 0x87d75f" line="117" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87d75f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e113>
	<e114 public="1" get="inline" set="null" expr="cast 0x87d787" line="118" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87d787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e114>
	<e115 public="1" get="inline" set="null" expr="cast 0x87d7af" line="119" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87d7af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e115>
	<e116 public="1" get="inline" set="null" expr="cast 0x87d7d7" line="120" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87d7d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e116>
	<e117 public="1" get="inline" set="null" expr="cast 0x87d7ff" line="121" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87d7ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e117>
	<e118 public="1" get="inline" set="null" expr="cast 0x87ff00" line="122" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87ff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e118>
	<e119 public="1" get="inline" set="null" expr="cast 0x87ff5f" line="123" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87ff5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e119>
	<e120 public="1" get="inline" set="null" expr="cast 0x87ff87" line="124" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87ff87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e120>
	<e121 public="1" get="inline" set="null" expr="cast 0x87ffaf" line="125" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87ffaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e121>
	<e122 public="1" get="inline" set="null" expr="cast 0x87ffd7" line="126" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87ffd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e122>
	<e123 public="1" get="inline" set="null" expr="cast 0x87ffff" line="127" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x87ffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e123>
	<e124 public="1" get="inline" set="null" expr="cast 0xaf0000" line="128" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e124>
	<e125 public="1" get="inline" set="null" expr="cast 0xaf005f" line="129" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf005f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e125>
	<e126 public="1" get="inline" set="null" expr="cast 0xaf0087" line="130" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf0087</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e126>
	<e127 public="1" get="inline" set="null" expr="cast 0xaf00af" line="131" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf00af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e127>
	<e128 public="1" get="inline" set="null" expr="cast 0xaf00d7" line="132" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf00d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e128>
	<e129 public="1" get="inline" set="null" expr="cast 0xaf00ff" line="133" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf00ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e129>
	<e130 public="1" get="inline" set="null" expr="cast 0xaf5f00" line="134" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf5f00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e130>
	<e131 public="1" get="inline" set="null" expr="cast 0xaf5f5f" line="135" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf5f5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e131>
	<e132 public="1" get="inline" set="null" expr="cast 0xaf5f87" line="136" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf5f87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e132>
	<e133 public="1" get="inline" set="null" expr="cast 0xaf5faf" line="137" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf5faf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e133>
	<e134 public="1" get="inline" set="null" expr="cast 0xaf5fd7" line="138" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf5fd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e134>
	<e135 public="1" get="inline" set="null" expr="cast 0xaf5fff" line="139" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf5fff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e135>
	<e136 public="1" get="inline" set="null" expr="cast 0xaf8700" line="140" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf8700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e136>
	<e137 public="1" get="inline" set="null" expr="cast 0xaf875f" line="141" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf875f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e137>
	<e138 public="1" get="inline" set="null" expr="cast 0xaf8787" line="142" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf8787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e138>
	<e139 public="1" get="inline" set="null" expr="cast 0xaf87af" line="143" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf87af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e139>
	<e140 public="1" get="inline" set="null" expr="cast 0xaf87d7" line="144" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf87d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e140>
	<e141 public="1" get="inline" set="null" expr="cast 0xaf87ff" line="145" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xaf87ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e141>
	<e142 public="1" get="inline" set="null" expr="cast 0xafaf00" line="146" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafaf00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e142>
	<e143 public="1" get="inline" set="null" expr="cast 0xafaf5f" line="147" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafaf5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e143>
	<e144 public="1" get="inline" set="null" expr="cast 0xafaf87" line="148" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafaf87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e144>
	<e145 public="1" get="inline" set="null" expr="cast 0xafafaf" line="149" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafafaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e145>
	<e146 public="1" get="inline" set="null" expr="cast 0xafafd7" line="150" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafafd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e146>
	<e147 public="1" get="inline" set="null" expr="cast 0xafafff" line="151" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafafff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e147>
	<e148 public="1" get="inline" set="null" expr="cast 0xafd700" line="152" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafd700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e148>
	<e149 public="1" get="inline" set="null" expr="cast 0xafd75f" line="153" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafd75f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e149>
	<e150 public="1" get="inline" set="null" expr="cast 0xafd787" line="154" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafd787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e150>
	<e151 public="1" get="inline" set="null" expr="cast 0xafd7af" line="155" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafd7af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e151>
	<e152 public="1" get="inline" set="null" expr="cast 0xafd7d7" line="156" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafd7d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e152>
	<e153 public="1" get="inline" set="null" expr="cast 0xafd7ff" line="157" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafd7ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e153>
	<e154 public="1" get="inline" set="null" expr="cast 0xafff00" line="158" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e154>
	<e155 public="1" get="inline" set="null" expr="cast 0xafff5f" line="159" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafff5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e155>
	<e156 public="1" get="inline" set="null" expr="cast 0xafff87" line="160" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafff87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e156>
	<e157 public="1" get="inline" set="null" expr="cast 0xafffaf" line="161" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafffaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e157>
	<e158 public="1" get="inline" set="null" expr="cast 0xafffd7" line="162" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafffd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e158>
	<e159 public="1" get="inline" set="null" expr="cast 0xafffff" line="163" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xafffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e159>
	<e160 public="1" get="inline" set="null" expr="cast 0xd70000" line="165" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd70000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e160>
	<e161 public="1" get="inline" set="null" expr="cast 0xd7005f" line="166" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7005f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e161>
	<e162 public="1" get="inline" set="null" expr="cast 0xd70087" line="167" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd70087</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e162>
	<e163 public="1" get="inline" set="null" expr="cast 0xd700af" line="168" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd700af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e163>
	<e164 public="1" get="inline" set="null" expr="cast 0xd700d7" line="169" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd700d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e164>
	<e165 public="1" get="inline" set="null" expr="cast 0xd700ff" line="170" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd700ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e165>
	<e166 public="1" get="inline" set="null" expr="cast 0xd75f00" line="171" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd75f00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e166>
	<e167 public="1" get="inline" set="null" expr="cast 0xd75f5f" line="172" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd75f5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e167>
	<e168 public="1" get="inline" set="null" expr="cast 0xd75f87" line="173" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd75f87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e168>
	<e169 public="1" get="inline" set="null" expr="cast 0xd75faf" line="174" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd75faf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e169>
	<e170 public="1" get="inline" set="null" expr="cast 0xd75fd7" line="175" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd75fd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e170>
	<e171 public="1" get="inline" set="null" expr="cast 0xd75fff" line="176" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd75fff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e171>
	<e172 public="1" get="inline" set="null" expr="cast 0xd78700" line="177" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd78700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e172>
	<e173 public="1" get="inline" set="null" expr="cast 0xd7875f" line="178" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7875f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e173>
	<e174 public="1" get="inline" set="null" expr="cast 0xd78787" line="179" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd78787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e174>
	<e175 public="1" get="inline" set="null" expr="cast 0xd787af" line="180" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd787af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e175>
	<e176 public="1" get="inline" set="null" expr="cast 0xd787d7" line="181" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd787d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e176>
	<e177 public="1" get="inline" set="null" expr="cast 0xd787ff" line="182" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd787ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e177>
	<e178 public="1" get="inline" set="null" expr="cast 0xd7af00" line="183" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7af00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e178>
	<e179 public="1" get="inline" set="null" expr="cast 0xd7af5f" line="184" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7af5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e179>
	<e180 public="1" get="inline" set="null" expr="cast 0xd7af87" line="185" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7af87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e180>
	<e181 public="1" get="inline" set="null" expr="cast 0xd7afaf" line="186" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7afaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e181>
	<e182 public="1" get="inline" set="null" expr="cast 0xd7afd7" line="187" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7afd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e182>
	<e183 public="1" get="inline" set="null" expr="cast 0xd7afff" line="188" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7afff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e183>
	<e184 public="1" get="inline" set="null" expr="cast 0xd7d700" line="189" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7d700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e184>
	<e185 public="1" get="inline" set="null" expr="cast 0xd7d75f" line="190" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7d75f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e185>
	<e186 public="1" get="inline" set="null" expr="cast 0xd7d787" line="191" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7d787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e186>
	<e187 public="1" get="inline" set="null" expr="cast 0xd7d7af" line="192" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7d7af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e187>
	<e188 public="1" get="inline" set="null" expr="cast 0xd7d7d7" line="193" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7d7d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e188>
	<e189 public="1" get="inline" set="null" expr="cast 0xd7d7ff" line="194" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7d7ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e189>
	<e190 public="1" get="inline" set="null" expr="cast 0xd7ff00" line="195" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7ff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e190>
	<e191 public="1" get="inline" set="null" expr="cast 0xd7ff5f" line="196" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7ff5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e191>
	<e192 public="1" get="inline" set="null" expr="cast 0xd7ff87" line="197" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7ff87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e192>
	<e193 public="1" get="inline" set="null" expr="cast 0xd7ffaf" line="198" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7ffaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e193>
	<e194 public="1" get="inline" set="null" expr="cast 0xd7ffd7" line="199" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7ffd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e194>
	<e195 public="1" get="inline" set="null" expr="cast 0xd7ffff" line="200" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd7ffff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e195>
	<e196 public="1" get="inline" set="null" expr="cast 0xff0000" line="202" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e196>
	<e197 public="1" get="inline" set="null" expr="cast 0xff005f" line="203" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff005f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e197>
	<e198 public="1" get="inline" set="null" expr="cast 0xff0087" line="204" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff0087</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e198>
	<e199 public="1" get="inline" set="null" expr="cast 0xff00af" line="205" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff00af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e199>
	<e200 public="1" get="inline" set="null" expr="cast 0xff00d7" line="206" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff00d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e200>
	<e201 public="1" get="inline" set="null" expr="cast 0xff00ff" line="207" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff00ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e201>
	<e202 public="1" get="inline" set="null" expr="cast 0xff5f00" line="208" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff5f00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e202>
	<e203 public="1" get="inline" set="null" expr="cast 0xff5f5f" line="209" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff5f5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e203>
	<e204 public="1" get="inline" set="null" expr="cast 0xff5f87" line="210" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff5f87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e204>
	<e205 public="1" get="inline" set="null" expr="cast 0xff5faf" line="211" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff5faf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e205>
	<e206 public="1" get="inline" set="null" expr="cast 0xff5fd7" line="212" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff5fd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e206>
	<e207 public="1" get="inline" set="null" expr="cast 0xff5fff" line="213" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff5fff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e207>
	<e208 public="1" get="inline" set="null" expr="cast 0xff8700" line="214" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff8700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e208>
	<e209 public="1" get="inline" set="null" expr="cast 0xff875f" line="215" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff875f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e209>
	<e210 public="1" get="inline" set="null" expr="cast 0xff8787" line="216" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff8787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e210>
	<e211 public="1" get="inline" set="null" expr="cast 0xff87af" line="217" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff87af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e211>
	<e212 public="1" get="inline" set="null" expr="cast 0xff87d7" line="218" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff87d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e212>
	<e213 public="1" get="inline" set="null" expr="cast 0xff87ff" line="219" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xff87ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e213>
	<e214 public="1" get="inline" set="null" expr="cast 0xffaf00" line="220" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffaf00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e214>
	<e215 public="1" get="inline" set="null" expr="cast 0xffaf5f" line="221" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffaf5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e215>
	<e216 public="1" get="inline" set="null" expr="cast 0xffaf87" line="222" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffaf87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e216>
	<e217 public="1" get="inline" set="null" expr="cast 0xffafaf" line="223" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffafaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e217>
	<e218 public="1" get="inline" set="null" expr="cast 0xffafd7" line="224" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffafd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e218>
	<e219 public="1" get="inline" set="null" expr="cast 0xffafff" line="225" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffafff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e219>
	<e220 public="1" get="inline" set="null" expr="cast 0xffd700" line="226" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffd700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e220>
	<e221 public="1" get="inline" set="null" expr="cast 0xffd75f" line="227" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffd75f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e221>
	<e222 public="1" get="inline" set="null" expr="cast 0xffd787" line="228" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffd787</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e222>
	<e223 public="1" get="inline" set="null" expr="cast 0xffd7af" line="229" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffd7af</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e223>
	<e224 public="1" get="inline" set="null" expr="cast 0xffd7d7" line="230" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffd7d7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e224>
	<e225 public="1" get="inline" set="null" expr="cast 0xffd7ff" line="231" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffd7ff</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e225>
	<e226 public="1" get="inline" set="null" expr="cast 0xffff00" line="232" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e226>
	<e227 public="1" get="inline" set="null" expr="cast 0xffff5f" line="233" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffff5f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e227>
	<e228 public="1" get="inline" set="null" expr="cast 0xffff87" line="234" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffff87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e228>
	<e229 public="1" get="inline" set="null" expr="cast 0xffffaf" line="235" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffffaf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e229>
	<e230 public="1" get="inline" set="null" expr="cast 0xffffd7" line="236" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xffffd7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e230>
	<e231 public="1" get="inline" set="null" expr="cast e15" line="237" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast e15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e231>
	<e232 public="1" get="inline" set="null" expr="cast 0x080808" line="238" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x080808</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e232>
	<e233 public="1" get="inline" set="null" expr="cast 0x121212" line="239" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x121212</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e233>
	<e234 public="1" get="inline" set="null" expr="cast 0x1c1c1c" line="240" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x1c1c1c</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e234>
	<e235 public="1" get="inline" set="null" expr="cast 0x262626" line="241" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x262626</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e235>
	<e236 public="1" get="inline" set="null" expr="cast 0x303030" line="242" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x303030</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e236>
	<e237 public="1" get="inline" set="null" expr="cast 0x3a3a3a" line="243" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x3a3a3a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e237>
	<e238 public="1" get="inline" set="null" expr="cast 0x444444" line="244" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x444444</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e238>
	<e239 public="1" get="inline" set="null" expr="cast 0x4e4e4e" line="245" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x4e4e4e</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e239>
	<e240 public="1" get="inline" set="null" expr="cast 0x585858" line="246" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x585858</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e240>
	<e241 public="1" get="inline" set="null" expr="cast 0x626262" line="247" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x626262</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e241>
	<e242 public="1" get="inline" set="null" expr="cast 0x6c6c6c" line="248" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x6c6c6c</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e242>
	<e243 public="1" get="inline" set="null" expr="cast 0x767676" line="249" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x767676</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e243>
	<e244 public="1" get="inline" set="null" expr="cast 0x808080" line="250" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x808080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e244>
	<e245 public="1" get="inline" set="null" expr="cast 0x8a8a8a" line="251" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x8a8a8a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e245>
	<e246 public="1" get="inline" set="null" expr="cast 0x949494" line="252" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x949494</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e246>
	<e247 public="1" get="inline" set="null" expr="cast 0x9e9e9e" line="253" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0x9e9e9e</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e247>
	<e248 public="1" get="inline" set="null" expr="cast 0xa8a8a8" line="254" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xa8a8a8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e248>
	<e249 public="1" get="inline" set="null" expr="cast 0xb2b2b2" line="255" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xb2b2b2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e249>
	<e250 public="1" get="inline" set="null" expr="cast 0xbcbcbc" line="256" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xbcbcbc</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e250>
	<e251 public="1" get="inline" set="null" expr="cast 0xc6c6c6" line="257" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xc6c6c6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e251>
	<e252 public="1" get="inline" set="null" expr="cast 0xd0d0d0" line="258" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xd0d0d0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e252>
	<e253 public="1" get="inline" set="null" expr="cast 0xdadada" line="259" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xdadada</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e253>
	<e254 public="1" get="inline" set="null" expr="cast 0xe4e4e4" line="260" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xe4e4e4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e254>
	<e255 public="1" get="inline" set="null" expr="cast 0xeeeeee" line="261" static="1">
		<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
		<meta>
			<m n=":value"><e>cast 0xeeeeee</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</e255>
	<getIndexFromHex public="1" get="inline" set="null" line="263" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></getIndexFromHex>
	<getAll public="1" get="inline" set="null" line="266" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></getAll>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.ansi._Emacs256Hex.Emacs256Hex_Impl_" params="" file="src/justGraphix/pallette/ansi/Emacs256Hex.hx" private="1" module="justGraphix.pallette.ansi.Emacs256Hex" final="1">
		<e0 public="1" get="inline" set="null" expr="cast 0x000000" line="4" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x000000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e0>
		<e1 public="1" get="inline" set="null" expr="cast 0x800000" line="5" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x800000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e1>
		<e2 public="1" get="inline" set="null" expr="cast 0x008000" line="6" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x008000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e2>
		<e3 public="1" get="inline" set="null" expr="cast 0x808000" line="7" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x808000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e3>
		<e4 public="1" get="inline" set="null" expr="cast 0x000080" line="8" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x000080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e4>
		<e5 public="1" get="inline" set="null" expr="cast 0x800080" line="9" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x800080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e5>
		<e6 public="1" get="inline" set="null" expr="cast 0x008080" line="10" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x008080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e6>
		<e7 public="1" get="inline" set="null" expr="cast 0xc0c0c0" line="11" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xc0c0c0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e7>
		<e8 public="1" get="inline" set="null" expr="cast 0x808080" line="12" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x808080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e8>
		<e9 public="1" get="inline" set="null" expr="cast 0xff0000" line="13" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e9>
		<e10 public="1" get="inline" set="null" expr="cast 0x00ff00" line="14" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e10>
		<e11 public="1" get="inline" set="null" expr="cast 0xffff00" line="15" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e11>
		<e12 public="1" get="inline" set="null" expr="cast 0x0000ff" line="16" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0000ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e12>
		<e13 public="1" get="inline" set="null" expr="cast 0xff00ff" line="17" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff00ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e13>
		<e14 public="1" get="inline" set="null" expr="cast 0x00ffff" line="18" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e14>
		<e15 public="1" get="inline" set="null" expr="cast 0xffffff" line="19" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e15>
		<e16 public="1" get="inline" set="null" expr="cast e0" line="20" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast e0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e16>
		<e17 public="1" get="inline" set="null" expr="cast 0x00005f" line="21" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00005f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e17>
		<e18 public="1" get="inline" set="null" expr="cast 0x000087" line="22" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x000087</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e18>
		<e19 public="1" get="inline" set="null" expr="cast 0x0000af" line="23" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0000af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e19>
		<e20 public="1" get="inline" set="null" expr="cast 0x0000d7" line="24" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0000d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e20>
		<e21 public="1" get="inline" set="null" expr="cast 0x0000ff" line="25" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0000ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e21>
		<e22 public="1" get="inline" set="null" expr="cast 0x005f00" line="26" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x005f00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e22>
		<e23 public="1" get="inline" set="null" expr="cast 0x005f5f" line="27" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x005f5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e23>
		<e24 public="1" get="inline" set="null" expr="cast 0x005f87" line="28" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x005f87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e24>
		<e25 public="1" get="inline" set="null" expr="cast 0x005faf" line="29" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x005faf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e25>
		<e26 public="1" get="inline" set="null" expr="cast 0x005fd7" line="30" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x005fd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e26>
		<e27 public="1" get="inline" set="null" expr="cast 0x005fff" line="31" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x005fff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e27>
		<e28 public="1" get="inline" set="null" expr="cast 0x008700" line="32" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x008700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e28>
		<e29 public="1" get="inline" set="null" expr="cast 0x00875f" line="33" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00875f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e29>
		<e30 public="1" get="inline" set="null" expr="cast 0x008787" line="34" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x008787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e30>
		<e31 public="1" get="inline" set="null" expr="cast 0x0087af" line="35" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0087af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e31>
		<e32 public="1" get="inline" set="null" expr="cast 0x0087d7" line="36" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0087d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e32>
		<e33 public="1" get="inline" set="null" expr="cast 0x0087ff" line="37" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x0087ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e33>
		<e34 public="1" get="inline" set="null" expr="cast 0x00af00" line="38" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00af00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e34>
		<e35 public="1" get="inline" set="null" expr="cast 0x00af5f" line="39" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00af5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e35>
		<e36 public="1" get="inline" set="null" expr="cast 0x00af87" line="40" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00af87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e36>
		<e37 public="1" get="inline" set="null" expr="cast 0x00afaf" line="41" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00afaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e37>
		<e38 public="1" get="inline" set="null" expr="cast 0x00afd7" line="42" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00afd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e38>
		<e39 public="1" get="inline" set="null" expr="cast 0x00afff" line="43" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00afff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e39>
		<e40 public="1" get="inline" set="null" expr="cast 0x00d700" line="44" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00d700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e40>
		<e41 public="1" get="inline" set="null" expr="cast 0x00d75f" line="45" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00d75f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e41>
		<e42 public="1" get="inline" set="null" expr="cast 0x00d787" line="46" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00d787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e42>
		<e43 public="1" get="inline" set="null" expr="cast 0x00d7af" line="47" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00d7af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e43>
		<e44 public="1" get="inline" set="null" expr="cast 0x00d7d7" line="48" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00d7d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e44>
		<e45 public="1" get="inline" set="null" expr="cast 0x00d7ff" line="49" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00d7ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e45>
		<e46 public="1" get="inline" set="null" expr="cast 0x00ff00" line="50" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e46>
		<e47 public="1" get="inline" set="null" expr="cast 0x00ff5f" line="51" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ff5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e47>
		<e48 public="1" get="inline" set="null" expr="cast 0x00ff87" line="52" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ff87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e48>
		<e49 public="1" get="inline" set="null" expr="cast 0x00ffaf" line="53" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ffaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e49>
		<e50 public="1" get="inline" set="null" expr="cast 0x00ffd7" line="54" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ffd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e50>
		<e51 public="1" get="inline" set="null" expr="cast 0x00ffff" line="55" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x00ffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e51>
		<e52 public="1" get="inline" set="null" expr="cast 0x5f0000" line="56" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e52>
		<e53 public="1" get="inline" set="null" expr="cast 0x5f005f" line="57" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f005f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e53>
		<e54 public="1" get="inline" set="null" expr="cast 0x5f0087" line="58" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f0087</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e54>
		<e55 public="1" get="inline" set="null" expr="cast 0x5f00af" line="59" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f00af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e55>
		<e56 public="1" get="inline" set="null" expr="cast 0x5f00d7" line="60" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f00d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e56>
		<e57 public="1" get="inline" set="null" expr="cast 0x5f00ff" line="61" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f00ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e57>
		<e58 public="1" get="inline" set="null" expr="cast 0x5f5f00" line="62" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f5f00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e58>
		<e59 public="1" get="inline" set="null" expr="cast 0x5f5f5f" line="63" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f5f5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e59>
		<e60 public="1" get="inline" set="null" expr="cast 0x5f5f87" line="64" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f5f87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e60>
		<e61 public="1" get="inline" set="null" expr="cast 0x5f5faf" line="65" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f5faf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e61>
		<e62 public="1" get="inline" set="null" expr="cast 0x5f5fd7" line="66" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f5fd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e62>
		<e63 public="1" get="inline" set="null" expr="cast 0x5f5fff" line="67" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f5fff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e63>
		<e64 public="1" get="inline" set="null" expr="cast 0x5f8700" line="68" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f8700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e64>
		<e65 public="1" get="inline" set="null" expr="cast 0x5f875f" line="69" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f875f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e65>
		<e66 public="1" get="inline" set="null" expr="cast 0x5f8787" line="70" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f8787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e66>
		<e67 public="1" get="inline" set="null" expr="cast 0x5f87af" line="71" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f87af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e67>
		<e68 public="1" get="inline" set="null" expr="cast 0x5f87d7" line="72" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f87d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e68>
		<e69 public="1" get="inline" set="null" expr="cast 0x5f87ff" line="73" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5f87ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e69>
		<e70 public="1" get="inline" set="null" expr="cast 0x5faf00" line="74" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5faf00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e70>
		<e71 public="1" get="inline" set="null" expr="cast 0x5faf5f" line="75" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5faf5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e71>
		<e72 public="1" get="inline" set="null" expr="cast 0x5faf87" line="76" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5faf87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e72>
		<e73 public="1" get="inline" set="null" expr="cast 0x5fafaf" line="77" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fafaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e73>
		<e74 public="1" get="inline" set="null" expr="cast 0x5fafd7" line="78" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fafd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e74>
		<e75 public="1" get="inline" set="null" expr="cast 0x5fafff" line="79" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fafff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e75>
		<e76 public="1" get="inline" set="null" expr="cast 0x5fd700" line="80" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fd700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e76>
		<e77 public="1" get="inline" set="null" expr="cast 0x5fd75f" line="81" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fd75f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e77>
		<e78 public="1" get="inline" set="null" expr="cast 0x5fd787" line="82" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fd787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e78>
		<e79 public="1" get="inline" set="null" expr="cast 0x5fd7af" line="83" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fd7af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e79>
		<e80 public="1" get="inline" set="null" expr="cast 0x5fd7d7" line="84" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fd7d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e80>
		<e81 public="1" get="inline" set="null" expr="cast 0x5fd7ff" line="85" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fd7ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e81>
		<e82 public="1" get="inline" set="null" expr="cast 0x5fff00" line="86" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e82>
		<e83 public="1" get="inline" set="null" expr="cast 0x5fff5f" line="87" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fff5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e83>
		<e84 public="1" get="inline" set="null" expr="cast 0x5fff87" line="88" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fff87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e84>
		<e85 public="1" get="inline" set="null" expr="cast 0x5fffaf" line="89" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fffaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e85>
		<e86 public="1" get="inline" set="null" expr="cast 0x5fffd7" line="90" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fffd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e86>
		<e87 public="1" get="inline" set="null" expr="cast 0x5fffff" line="91" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x5fffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e87>
		<e88 public="1" get="inline" set="null" expr="cast 0x870000" line="92" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x870000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e88>
		<e89 public="1" get="inline" set="null" expr="cast 0x87005f" line="93" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87005f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e89>
		<e90 public="1" get="inline" set="null" expr="cast 0x870087" line="94" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x870087</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e90>
		<e91 public="1" get="inline" set="null" expr="cast 0x8700af" line="95" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8700af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e91>
		<e92 public="1" get="inline" set="null" expr="cast 0x8700d7" line="96" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8700d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e92>
		<e93 public="1" get="inline" set="null" expr="cast 0x8700ff" line="97" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8700ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e93>
		<e94 public="1" get="inline" set="null" expr="cast 0x875f00" line="98" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x875f00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e94>
		<e95 public="1" get="inline" set="null" expr="cast 0x875f5f" line="99" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x875f5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e95>
		<e96 public="1" get="inline" set="null" expr="cast 0x875f87" line="100" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x875f87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e96>
		<e97 public="1" get="inline" set="null" expr="cast 0x875faf" line="101" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x875faf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e97>
		<e98 public="1" get="inline" set="null" expr="cast 0x875fd7" line="102" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x875fd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e98>
		<e99 public="1" get="inline" set="null" expr="cast 0x875fff" line="103" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x875fff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e99>
		<e100 public="1" get="inline" set="null" expr="cast 0x878700" line="104" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x878700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e100>
		<e101 public="1" get="inline" set="null" expr="cast 0x87875f" line="105" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87875f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e101>
		<e102 public="1" get="inline" set="null" expr="cast 0x878787" line="106" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x878787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e102>
		<e103 public="1" get="inline" set="null" expr="cast 0x8787af" line="107" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8787af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e103>
		<e104 public="1" get="inline" set="null" expr="cast 0x8787d7" line="108" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8787d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e104>
		<e105 public="1" get="inline" set="null" expr="cast 0x8787ff" line="109" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8787ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e105>
		<e106 public="1" get="inline" set="null" expr="cast 0x87af00" line="110" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87af00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e106>
		<e107 public="1" get="inline" set="null" expr="cast 0x87af5f" line="111" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87af5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e107>
		<e108 public="1" get="inline" set="null" expr="cast 0x87af87" line="112" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87af87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e108>
		<e109 public="1" get="inline" set="null" expr="cast 0x87afaf" line="113" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87afaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e109>
		<e110 public="1" get="inline" set="null" expr="cast 0x87afd7" line="114" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87afd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e110>
		<e111 public="1" get="inline" set="null" expr="cast 0x87afff" line="115" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87afff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e111>
		<e112 public="1" get="inline" set="null" expr="cast 0x87d700" line="116" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87d700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e112>
		<e113 public="1" get="inline" set="null" expr="cast 0x87d75f" line="117" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87d75f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e113>
		<e114 public="1" get="inline" set="null" expr="cast 0x87d787" line="118" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87d787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e114>
		<e115 public="1" get="inline" set="null" expr="cast 0x87d7af" line="119" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87d7af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e115>
		<e116 public="1" get="inline" set="null" expr="cast 0x87d7d7" line="120" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87d7d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e116>
		<e117 public="1" get="inline" set="null" expr="cast 0x87d7ff" line="121" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87d7ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e117>
		<e118 public="1" get="inline" set="null" expr="cast 0x87ff00" line="122" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87ff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e118>
		<e119 public="1" get="inline" set="null" expr="cast 0x87ff5f" line="123" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87ff5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e119>
		<e120 public="1" get="inline" set="null" expr="cast 0x87ff87" line="124" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87ff87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e120>
		<e121 public="1" get="inline" set="null" expr="cast 0x87ffaf" line="125" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87ffaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e121>
		<e122 public="1" get="inline" set="null" expr="cast 0x87ffd7" line="126" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87ffd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e122>
		<e123 public="1" get="inline" set="null" expr="cast 0x87ffff" line="127" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x87ffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e123>
		<e124 public="1" get="inline" set="null" expr="cast 0xaf0000" line="128" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e124>
		<e125 public="1" get="inline" set="null" expr="cast 0xaf005f" line="129" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf005f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e125>
		<e126 public="1" get="inline" set="null" expr="cast 0xaf0087" line="130" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf0087</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e126>
		<e127 public="1" get="inline" set="null" expr="cast 0xaf00af" line="131" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf00af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e127>
		<e128 public="1" get="inline" set="null" expr="cast 0xaf00d7" line="132" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf00d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e128>
		<e129 public="1" get="inline" set="null" expr="cast 0xaf00ff" line="133" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf00ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e129>
		<e130 public="1" get="inline" set="null" expr="cast 0xaf5f00" line="134" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf5f00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e130>
		<e131 public="1" get="inline" set="null" expr="cast 0xaf5f5f" line="135" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf5f5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e131>
		<e132 public="1" get="inline" set="null" expr="cast 0xaf5f87" line="136" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf5f87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e132>
		<e133 public="1" get="inline" set="null" expr="cast 0xaf5faf" line="137" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf5faf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e133>
		<e134 public="1" get="inline" set="null" expr="cast 0xaf5fd7" line="138" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf5fd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e134>
		<e135 public="1" get="inline" set="null" expr="cast 0xaf5fff" line="139" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf5fff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e135>
		<e136 public="1" get="inline" set="null" expr="cast 0xaf8700" line="140" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf8700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e136>
		<e137 public="1" get="inline" set="null" expr="cast 0xaf875f" line="141" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf875f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e137>
		<e138 public="1" get="inline" set="null" expr="cast 0xaf8787" line="142" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf8787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e138>
		<e139 public="1" get="inline" set="null" expr="cast 0xaf87af" line="143" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf87af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e139>
		<e140 public="1" get="inline" set="null" expr="cast 0xaf87d7" line="144" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf87d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e140>
		<e141 public="1" get="inline" set="null" expr="cast 0xaf87ff" line="145" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xaf87ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e141>
		<e142 public="1" get="inline" set="null" expr="cast 0xafaf00" line="146" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafaf00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e142>
		<e143 public="1" get="inline" set="null" expr="cast 0xafaf5f" line="147" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafaf5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e143>
		<e144 public="1" get="inline" set="null" expr="cast 0xafaf87" line="148" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafaf87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e144>
		<e145 public="1" get="inline" set="null" expr="cast 0xafafaf" line="149" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafafaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e145>
		<e146 public="1" get="inline" set="null" expr="cast 0xafafd7" line="150" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafafd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e146>
		<e147 public="1" get="inline" set="null" expr="cast 0xafafff" line="151" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafafff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e147>
		<e148 public="1" get="inline" set="null" expr="cast 0xafd700" line="152" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafd700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e148>
		<e149 public="1" get="inline" set="null" expr="cast 0xafd75f" line="153" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafd75f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e149>
		<e150 public="1" get="inline" set="null" expr="cast 0xafd787" line="154" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafd787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e150>
		<e151 public="1" get="inline" set="null" expr="cast 0xafd7af" line="155" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafd7af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e151>
		<e152 public="1" get="inline" set="null" expr="cast 0xafd7d7" line="156" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafd7d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e152>
		<e153 public="1" get="inline" set="null" expr="cast 0xafd7ff" line="157" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafd7ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e153>
		<e154 public="1" get="inline" set="null" expr="cast 0xafff00" line="158" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e154>
		<e155 public="1" get="inline" set="null" expr="cast 0xafff5f" line="159" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafff5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e155>
		<e156 public="1" get="inline" set="null" expr="cast 0xafff87" line="160" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafff87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e156>
		<e157 public="1" get="inline" set="null" expr="cast 0xafffaf" line="161" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafffaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e157>
		<e158 public="1" get="inline" set="null" expr="cast 0xafffd7" line="162" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafffd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e158>
		<e159 public="1" get="inline" set="null" expr="cast 0xafffff" line="163" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xafffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e159>
		<e160 public="1" get="inline" set="null" expr="cast 0xd70000" line="165" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd70000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e160>
		<e161 public="1" get="inline" set="null" expr="cast 0xd7005f" line="166" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7005f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e161>
		<e162 public="1" get="inline" set="null" expr="cast 0xd70087" line="167" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd70087</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e162>
		<e163 public="1" get="inline" set="null" expr="cast 0xd700af" line="168" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd700af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e163>
		<e164 public="1" get="inline" set="null" expr="cast 0xd700d7" line="169" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd700d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e164>
		<e165 public="1" get="inline" set="null" expr="cast 0xd700ff" line="170" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd700ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e165>
		<e166 public="1" get="inline" set="null" expr="cast 0xd75f00" line="171" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd75f00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e166>
		<e167 public="1" get="inline" set="null" expr="cast 0xd75f5f" line="172" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd75f5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e167>
		<e168 public="1" get="inline" set="null" expr="cast 0xd75f87" line="173" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd75f87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e168>
		<e169 public="1" get="inline" set="null" expr="cast 0xd75faf" line="174" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd75faf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e169>
		<e170 public="1" get="inline" set="null" expr="cast 0xd75fd7" line="175" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd75fd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e170>
		<e171 public="1" get="inline" set="null" expr="cast 0xd75fff" line="176" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd75fff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e171>
		<e172 public="1" get="inline" set="null" expr="cast 0xd78700" line="177" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd78700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e172>
		<e173 public="1" get="inline" set="null" expr="cast 0xd7875f" line="178" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7875f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e173>
		<e174 public="1" get="inline" set="null" expr="cast 0xd78787" line="179" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd78787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e174>
		<e175 public="1" get="inline" set="null" expr="cast 0xd787af" line="180" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd787af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e175>
		<e176 public="1" get="inline" set="null" expr="cast 0xd787d7" line="181" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd787d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e176>
		<e177 public="1" get="inline" set="null" expr="cast 0xd787ff" line="182" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd787ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e177>
		<e178 public="1" get="inline" set="null" expr="cast 0xd7af00" line="183" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7af00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e178>
		<e179 public="1" get="inline" set="null" expr="cast 0xd7af5f" line="184" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7af5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e179>
		<e180 public="1" get="inline" set="null" expr="cast 0xd7af87" line="185" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7af87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e180>
		<e181 public="1" get="inline" set="null" expr="cast 0xd7afaf" line="186" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7afaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e181>
		<e182 public="1" get="inline" set="null" expr="cast 0xd7afd7" line="187" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7afd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e182>
		<e183 public="1" get="inline" set="null" expr="cast 0xd7afff" line="188" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7afff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e183>
		<e184 public="1" get="inline" set="null" expr="cast 0xd7d700" line="189" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7d700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e184>
		<e185 public="1" get="inline" set="null" expr="cast 0xd7d75f" line="190" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7d75f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e185>
		<e186 public="1" get="inline" set="null" expr="cast 0xd7d787" line="191" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7d787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e186>
		<e187 public="1" get="inline" set="null" expr="cast 0xd7d7af" line="192" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7d7af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e187>
		<e188 public="1" get="inline" set="null" expr="cast 0xd7d7d7" line="193" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7d7d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e188>
		<e189 public="1" get="inline" set="null" expr="cast 0xd7d7ff" line="194" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7d7ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e189>
		<e190 public="1" get="inline" set="null" expr="cast 0xd7ff00" line="195" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7ff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e190>
		<e191 public="1" get="inline" set="null" expr="cast 0xd7ff5f" line="196" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7ff5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e191>
		<e192 public="1" get="inline" set="null" expr="cast 0xd7ff87" line="197" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7ff87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e192>
		<e193 public="1" get="inline" set="null" expr="cast 0xd7ffaf" line="198" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7ffaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e193>
		<e194 public="1" get="inline" set="null" expr="cast 0xd7ffd7" line="199" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7ffd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e194>
		<e195 public="1" get="inline" set="null" expr="cast 0xd7ffff" line="200" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd7ffff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e195>
		<e196 public="1" get="inline" set="null" expr="cast 0xff0000" line="202" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e196>
		<e197 public="1" get="inline" set="null" expr="cast 0xff005f" line="203" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff005f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e197>
		<e198 public="1" get="inline" set="null" expr="cast 0xff0087" line="204" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff0087</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e198>
		<e199 public="1" get="inline" set="null" expr="cast 0xff00af" line="205" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff00af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e199>
		<e200 public="1" get="inline" set="null" expr="cast 0xff00d7" line="206" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff00d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e200>
		<e201 public="1" get="inline" set="null" expr="cast 0xff00ff" line="207" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff00ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e201>
		<e202 public="1" get="inline" set="null" expr="cast 0xff5f00" line="208" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff5f00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e202>
		<e203 public="1" get="inline" set="null" expr="cast 0xff5f5f" line="209" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff5f5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e203>
		<e204 public="1" get="inline" set="null" expr="cast 0xff5f87" line="210" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff5f87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e204>
		<e205 public="1" get="inline" set="null" expr="cast 0xff5faf" line="211" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff5faf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e205>
		<e206 public="1" get="inline" set="null" expr="cast 0xff5fd7" line="212" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff5fd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e206>
		<e207 public="1" get="inline" set="null" expr="cast 0xff5fff" line="213" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff5fff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e207>
		<e208 public="1" get="inline" set="null" expr="cast 0xff8700" line="214" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff8700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e208>
		<e209 public="1" get="inline" set="null" expr="cast 0xff875f" line="215" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff875f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e209>
		<e210 public="1" get="inline" set="null" expr="cast 0xff8787" line="216" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff8787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e210>
		<e211 public="1" get="inline" set="null" expr="cast 0xff87af" line="217" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff87af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e211>
		<e212 public="1" get="inline" set="null" expr="cast 0xff87d7" line="218" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff87d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e212>
		<e213 public="1" get="inline" set="null" expr="cast 0xff87ff" line="219" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xff87ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e213>
		<e214 public="1" get="inline" set="null" expr="cast 0xffaf00" line="220" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffaf00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e214>
		<e215 public="1" get="inline" set="null" expr="cast 0xffaf5f" line="221" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffaf5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e215>
		<e216 public="1" get="inline" set="null" expr="cast 0xffaf87" line="222" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffaf87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e216>
		<e217 public="1" get="inline" set="null" expr="cast 0xffafaf" line="223" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffafaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e217>
		<e218 public="1" get="inline" set="null" expr="cast 0xffafd7" line="224" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffafd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e218>
		<e219 public="1" get="inline" set="null" expr="cast 0xffafff" line="225" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffafff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e219>
		<e220 public="1" get="inline" set="null" expr="cast 0xffd700" line="226" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffd700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e220>
		<e221 public="1" get="inline" set="null" expr="cast 0xffd75f" line="227" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffd75f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e221>
		<e222 public="1" get="inline" set="null" expr="cast 0xffd787" line="228" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffd787</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e222>
		<e223 public="1" get="inline" set="null" expr="cast 0xffd7af" line="229" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffd7af</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e223>
		<e224 public="1" get="inline" set="null" expr="cast 0xffd7d7" line="230" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffd7d7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e224>
		<e225 public="1" get="inline" set="null" expr="cast 0xffd7ff" line="231" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffd7ff</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e225>
		<e226 public="1" get="inline" set="null" expr="cast 0xffff00" line="232" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e226>
		<e227 public="1" get="inline" set="null" expr="cast 0xffff5f" line="233" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffff5f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e227>
		<e228 public="1" get="inline" set="null" expr="cast 0xffff87" line="234" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffff87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e228>
		<e229 public="1" get="inline" set="null" expr="cast 0xffffaf" line="235" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffffaf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e229>
		<e230 public="1" get="inline" set="null" expr="cast 0xffffd7" line="236" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xffffd7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e230>
		<e231 public="1" get="inline" set="null" expr="cast e15" line="237" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast e15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e231>
		<e232 public="1" get="inline" set="null" expr="cast 0x080808" line="238" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x080808</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e232>
		<e233 public="1" get="inline" set="null" expr="cast 0x121212" line="239" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x121212</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e233>
		<e234 public="1" get="inline" set="null" expr="cast 0x1c1c1c" line="240" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x1c1c1c</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e234>
		<e235 public="1" get="inline" set="null" expr="cast 0x262626" line="241" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x262626</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e235>
		<e236 public="1" get="inline" set="null" expr="cast 0x303030" line="242" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x303030</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e236>
		<e237 public="1" get="inline" set="null" expr="cast 0x3a3a3a" line="243" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x3a3a3a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e237>
		<e238 public="1" get="inline" set="null" expr="cast 0x444444" line="244" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x444444</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e238>
		<e239 public="1" get="inline" set="null" expr="cast 0x4e4e4e" line="245" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x4e4e4e</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e239>
		<e240 public="1" get="inline" set="null" expr="cast 0x585858" line="246" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x585858</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e240>
		<e241 public="1" get="inline" set="null" expr="cast 0x626262" line="247" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x626262</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e241>
		<e242 public="1" get="inline" set="null" expr="cast 0x6c6c6c" line="248" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x6c6c6c</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e242>
		<e243 public="1" get="inline" set="null" expr="cast 0x767676" line="249" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x767676</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e243>
		<e244 public="1" get="inline" set="null" expr="cast 0x808080" line="250" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x808080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e244>
		<e245 public="1" get="inline" set="null" expr="cast 0x8a8a8a" line="251" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x8a8a8a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e245>
		<e246 public="1" get="inline" set="null" expr="cast 0x949494" line="252" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x949494</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e246>
		<e247 public="1" get="inline" set="null" expr="cast 0x9e9e9e" line="253" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0x9e9e9e</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e247>
		<e248 public="1" get="inline" set="null" expr="cast 0xa8a8a8" line="254" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xa8a8a8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e248>
		<e249 public="1" get="inline" set="null" expr="cast 0xb2b2b2" line="255" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xb2b2b2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e249>
		<e250 public="1" get="inline" set="null" expr="cast 0xbcbcbc" line="256" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xbcbcbc</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e250>
		<e251 public="1" get="inline" set="null" expr="cast 0xc6c6c6" line="257" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xc6c6c6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e251>
		<e252 public="1" get="inline" set="null" expr="cast 0xd0d0d0" line="258" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xd0d0d0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e252>
		<e253 public="1" get="inline" set="null" expr="cast 0xdadada" line="259" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xdadada</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e253>
		<e254 public="1" get="inline" set="null" expr="cast 0xe4e4e4" line="260" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xe4e4e4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e254>
		<e255 public="1" get="inline" set="null" expr="cast 0xeeeeee" line="261" static="1">
			<x path="justGraphix.pallette.ansi.Emacs256Hex"/>
			<meta>
				<m n=":value"><e>cast 0xeeeeee</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</e255>
		<getIndexFromHex public="1" get="inline" set="null" line="263" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></getIndexFromHex>
		<getAll public="1" get="inline" set="null" line="266" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></getAll>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.browser.BrowserColourARGB" params="" file="src/justGraphix/pallette/browser/BrowserColourARGB.hx">
		<closeColorsByName public="1" get="inline" set="null" line="8" static="1">
			<f a="col:numberToShow">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>* provides a list of closest colours</haxe_doc>
		</closeColorsByName>
		<getColors public="1" get="inline" set="null" line="21" static="1">
			<f a=""><c path="Array"><x path="justGraphix.pallette.browser.ARGBColours"/></c></f>
			<haxe_doc>* list of all enums</haxe_doc>
		</getColors>
		<random public="1" get="inline" set="null" line="174" static="1">
			<f a=""><x path="justGraphix.pallette.browser.ARGBColours"/></f>
			<haxe_doc>* provides a random way to get a colour</haxe_doc>
		</random>
		<getName public="1" get="inline" set="null" line="183" static="1">
			<f a="c">
				<x path="justGraphix.pallette.browser.ARGBColours"/>
				<c path="String"/>
			</f>
			<haxe_doc>* allows you to query the enums</haxe_doc>
		</getName>
	</class>
	<abstract path="justGraphix.pallette.browser.ARGBColours" params="" file="src/justGraphix/pallette/browser/BrowserColourARGB.hx" module="justGraphix.pallette.browser.BrowserColourARGB">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.browser._BrowserColourARGB.ARGBColours_Impl_" params="" file="src/justGraphix/pallette/browser/BrowserColourARGB.hx" private="1" module="justGraphix.pallette.browser.BrowserColourARGB" extern="1" final="1">
	<AliceBlue public="1" get="inline" set="null" expr="cast 0xFFF0F8FF" line="336" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF0F8FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AliceBlue>
	<AntiqueWhite public="1" get="inline" set="null" expr="cast 0xFFFAEBD7" line="337" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFAEBD7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AntiqueWhite>
	<Aquamarine public="1" get="inline" set="null" expr="cast 0xFF7FFFD4" line="339" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF7FFFD4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Aquamarine>
	<Azure public="1" get="inline" set="null" expr="cast 0xFFF0FFFF" line="340" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF0FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Azure>
	<Beige public="1" get="inline" set="null" expr="cast 0xFFF5F5DC" line="341" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF5F5DC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Beige>
	<Bisque public="1" get="inline" set="null" expr="cast 0xFFFFE4C4" line="342" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE4C4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Bisque>
	<Black public="1" get="inline" set="null" expr="cast 0xFF000000" line="343" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF000000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Black>
	<BlanchedAlmond public="1" get="inline" set="null" expr="cast 0xFFFFEBCD" line="344" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFEBCD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BlanchedAlmond>
	<Blue public="1" get="inline" set="null" expr="cast 0xFF0000FF" line="345" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Blue>
	<BlueViolet public="1" get="inline" set="null" expr="cast 0xFF8A2BE2" line="346" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF8A2BE2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BlueViolet>
	<Brown public="1" get="inline" set="null" expr="cast 0xFFA52A2A" line="347" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFA52A2A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Brown>
	<BurlyWood public="1" get="inline" set="null" expr="cast 0xFFDEB887" line="348" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDEB887</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BurlyWood>
	<CadetBlue public="1" get="inline" set="null" expr="cast 0xFF5F9EA0" line="349" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF5F9EA0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CadetBlue>
	<Chartreuse public="1" get="inline" set="null" expr="cast 0xFF7FFF00" line="350" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF7FFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Chartreuse>
	<Chocolate public="1" get="inline" set="null" expr="cast 0xFFD2691E" line="351" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFD2691E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Chocolate>
	<Coral public="1" get="inline" set="null" expr="cast 0xFFFF7F50" line="352" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF7F50</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Coral>
	<CornflowerBlue public="1" get="inline" set="null" expr="cast 0xFF6495ED" line="353" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF6495ED</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CornflowerBlue>
	<Cornsilk public="1" get="inline" set="null" expr="cast 0xFFFFF8DC" line="354" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFF8DC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cornsilk>
	<Crimson public="1" get="inline" set="null" expr="cast 0xFFDC143C" line="355" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDC143C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Crimson>
	<Cyan public="1" get="inline" set="null" expr="cast 0xFF00FFFF" line="356" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cyan>
	<DarkBlue public="1" get="inline" set="null" expr="cast 0xFF00008B" line="357" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00008B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkBlue>
	<DarkCyan public="1" get="inline" set="null" expr="cast 0xFF008B8B" line="358" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF008B8B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkCyan>
	<DarkGoldenRod public="1" get="inline" set="null" expr="cast 0xFFB8860B" line="359" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFB8860B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGoldenRod>
	<DarkGrey public="1" get="inline" set="null" expr="cast 0xFFA9A9A9" line="361" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFA9A9A9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGrey>
	<DarkGreen public="1" get="inline" set="null" expr="cast 0xFF006400" line="362" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF006400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGreen>
	<DarkKhaki public="1" get="inline" set="null" expr="cast 0xFFBDB76B" line="363" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFBDB76B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkKhaki>
	<DarkMagenta public="1" get="inline" set="null" expr="cast 0xFF8B008B" line="364" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF8B008B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkMagenta>
	<DarkOliveGreen public="1" get="inline" set="null" expr="cast 0xFF556B2F" line="365" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF556B2F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkOliveGreen>
	<Darkorange public="1" get="inline" set="null" expr="cast 0xFFFF8C00" line="366" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF8C00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Darkorange>
	<DarkOrchid public="1" get="inline" set="null" expr="cast 0xFF9932CC" line="367" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF9932CC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkOrchid>
	<DarkRed public="1" get="inline" set="null" expr="cast 0xFF8B0000" line="368" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF8B0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkRed>
	<DarkSalmon public="1" get="inline" set="null" expr="cast 0xFFE9967A" line="369" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFE9967A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSalmon>
	<DarkSeaGreen public="1" get="inline" set="null" expr="cast 0xFF8FBC8F" line="370" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF8FBC8F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSeaGreen>
	<DarkSlateBlue public="1" get="inline" set="null" expr="cast 0xFF483D8B" line="371" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF483D8B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSlateBlue>
	<DarkSlateGrey public="1" get="inline" set="null" expr="cast 0xFF2F4F4F" line="373" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF2F4F4F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSlateGrey>
	<DarkTurquoise public="1" get="inline" set="null" expr="cast 0xFF00CED1" line="374" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00CED1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkTurquoise>
	<DarkViolet public="1" get="inline" set="null" expr="cast 0xFF9400D3" line="375" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF9400D3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkViolet>
	<DeepPink public="1" get="inline" set="null" expr="cast 0xFFFF1493" line="376" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF1493</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeepPink>
	<DeepSkyBlue public="1" get="inline" set="null" expr="cast 0xFF00BFFF" line="377" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00BFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeepSkyBlue>
	<DimGray public="1" get="inline" set="null" expr="cast 0xFF696969" line="378" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF696969</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DimGray>
	<DimGrey public="1" get="inline" set="null" expr="cast 0xFF696969" line="379" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF696969</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DimGrey>
	<DodgerBlue public="1" get="inline" set="null" expr="cast 0xFF1E90FF" line="380" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF1E90FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DodgerBlue>
	<FireBrick public="1" get="inline" set="null" expr="cast 0xFFB22222" line="381" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFB22222</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FireBrick>
	<FloralWhite public="1" get="inline" set="null" expr="cast 0xFFFFFAF0" line="382" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFAF0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FloralWhite>
	<ForestGreen public="1" get="inline" set="null" expr="cast 0xFF228B22" line="383" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF228B22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ForestGreen>
	<Gainsboro public="1" get="inline" set="null" expr="cast 0xFFDCDCDC" line="385" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDCDCDC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gainsboro>
	<GhostWhite public="1" get="inline" set="null" expr="cast 0xFFF8F8FF" line="386" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF8F8FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GhostWhite>
	<Gold public="1" get="inline" set="null" expr="cast 0xFFFFD700" line="387" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFD700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gold>
	<GoldenRod public="1" get="inline" set="null" expr="cast 0xFFDAA520" line="388" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDAA520</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GoldenRod>
	<Grey public="1" get="inline" set="null" expr="cast 0xFF808080" line="390" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF808080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Grey>
	<Green public="1" get="inline" set="null" expr="cast 0xFF008000" line="391" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF008000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Green>
	<GreenYellow public="1" get="inline" set="null" expr="cast 0xFFADFF2F" line="392" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFADFF2F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GreenYellow>
	<HoneyDew public="1" get="inline" set="null" expr="cast 0xFFF0FFF0" line="393" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF0FFF0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HoneyDew>
	<HotPink public="1" get="inline" set="null" expr="cast 0xFFFF69B4" line="394" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF69B4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HotPink>
	<IndianRed public="1" get="inline" set="null" expr="cast 0xFFCD5C5C" line="395" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFCD5C5C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IndianRed>
	<Indigo public="1" get="inline" set="null" expr="cast 0xFF4B0082" line="396" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF4B0082</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Indigo>
	<Ivory public="1" get="inline" set="null" expr="cast 0xFFFFFFF0" line="397" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFFF0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Ivory>
	<Khaki public="1" get="inline" set="null" expr="cast 0xFFF0E68C" line="398" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF0E68C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Khaki>
	<Lavender public="1" get="inline" set="null" expr="cast 0xFFE6E6FA" line="399" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFE6E6FA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lavender>
	<LavenderBlush public="1" get="inline" set="null" expr="cast 0xFFFFF0F5" line="400" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFF0F5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LavenderBlush>
	<LawnGreen public="1" get="inline" set="null" expr="cast 0xFF7CFC00" line="401" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF7CFC00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LawnGreen>
	<LemonChiffon public="1" get="inline" set="null" expr="cast 0xFFFFFACD" line="402" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFACD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LemonChiffon>
	<LightBlue public="1" get="inline" set="null" expr="cast 0xFFADD8E6" line="403" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFADD8E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightBlue>
	<LightCoral public="1" get="inline" set="null" expr="cast 0xFFF08080" line="404" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF08080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightCoral>
	<LightCyan public="1" get="inline" set="null" expr="cast 0xFFE0FFFF" line="405" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFE0FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightCyan>
	<LightGoldenRodYellow public="1" get="inline" set="null" expr="cast 0xFFFAFAD2" line="406" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFAFAD2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGoldenRodYellow>
	<LightGrey public="1" get="inline" set="null" expr="cast 0xFFD3D3D3" line="408" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFD3D3D3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGrey>
	<LightGreen public="1" get="inline" set="null" expr="cast 0xFF90EE90" line="409" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF90EE90</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGreen>
	<LightPink public="1" get="inline" set="null" expr="cast 0xFFFFB6C1" line="410" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFB6C1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightPink>
	<LightSalmon public="1" get="inline" set="null" expr="cast 0xFFFFA07A" line="411" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFA07A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSalmon>
	<LightSeaGreen public="1" get="inline" set="null" expr="cast 0xFF20B2AA" line="412" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF20B2AA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSeaGreen>
	<LightSkyBlue public="1" get="inline" set="null" expr="cast 0xFF87CEFA" line="413" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF87CEFA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSkyBlue>
	<LightSlateGray public="1" get="inline" set="null" expr="cast 0xFF778899" line="414" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF778899</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSlateGray>
	<LightSlateGrey public="1" get="inline" set="null" expr="cast 0xFF778899" line="415" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF778899</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSlateGrey>
	<LightSteelBlue public="1" get="inline" set="null" expr="cast 0xFFB0C4DE" line="416" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFB0C4DE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSteelBlue>
	<LightYellow public="1" get="inline" set="null" expr="cast 0xFFFFFFE0" line="417" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFFE0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightYellow>
	<Lime public="1" get="inline" set="null" expr="cast 0xFF00FF00" line="418" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lime>
	<LimeGreen public="1" get="inline" set="null" expr="cast 0xFF32CD32" line="419" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF32CD32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LimeGreen>
	<Linen public="1" get="inline" set="null" expr="cast 0xFFFAF0E6" line="420" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFAF0E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Linen>
	<Magenta public="1" get="inline" set="null" expr="cast 0xFFFF00FF" line="421" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Magenta>
	<Maroon public="1" get="inline" set="null" expr="cast 0xFF800000" line="422" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF800000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Maroon>
	<MediumAquaMarine public="1" get="inline" set="null" expr="cast 0xFF66CDAA" line="423" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF66CDAA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumAquaMarine>
	<MediumBlue public="1" get="inline" set="null" expr="cast 0xFF0000CD" line="424" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000CD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumBlue>
	<MediumOrchid public="1" get="inline" set="null" expr="cast 0xFFBA55D3" line="425" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFBA55D3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumOrchid>
	<MediumPurple public="1" get="inline" set="null" expr="cast 0xFF9370DB" line="426" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF9370DB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumPurple>
	<MediumSeaGreen public="1" get="inline" set="null" expr="cast 0xFF3CB371" line="427" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF3CB371</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumSeaGreen>
	<MediumSlateBlue public="1" get="inline" set="null" expr="cast 0xFF7B68EE" line="428" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF7B68EE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumSlateBlue>
	<MediumSpringGreen public="1" get="inline" set="null" expr="cast 0xFF00FA9A" line="429" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FA9A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumSpringGreen>
	<MediumTurquoise public="1" get="inline" set="null" expr="cast 0xFF48D1CC" line="430" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF48D1CC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumTurquoise>
	<MediumVioletRed public="1" get="inline" set="null" expr="cast 0xFFC71585" line="431" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFC71585</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumVioletRed>
	<MidnightBlue public="1" get="inline" set="null" expr="cast 0xFF191970" line="432" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF191970</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MidnightBlue>
	<MintCream public="1" get="inline" set="null" expr="cast 0xFFF5FFFA" line="433" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF5FFFA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MintCream>
	<MistyRose public="1" get="inline" set="null" expr="cast 0xFFFFE4E1" line="434" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE4E1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MistyRose>
	<Moccasin public="1" get="inline" set="null" expr="cast 0xFFFFE4B5" line="435" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE4B5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Moccasin>
	<NavajoWhite public="1" get="inline" set="null" expr="cast 0xFFFFDEAD" line="436" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFDEAD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NavajoWhite>
	<Navy public="1" get="inline" set="null" expr="cast 0xFF000080" line="437" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF000080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Navy>
	<OldLace public="1" get="inline" set="null" expr="cast 0xFFFDF5E6" line="438" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFDF5E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OldLace>
	<Olive public="1" get="inline" set="null" expr="cast 0xFF808000" line="439" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF808000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Olive>
	<OliveDrab public="1" get="inline" set="null" expr="cast 0xFF6B8E23" line="440" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF6B8E23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OliveDrab>
	<Orange public="1" get="inline" set="null" expr="cast 0xFFFFA500" line="441" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFA500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Orange>
	<OrangeRed public="1" get="inline" set="null" expr="cast 0xFFFF4500" line="442" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF4500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OrangeRed>
	<Orchid public="1" get="inline" set="null" expr="cast 0xFFDA70D6" line="443" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDA70D6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Orchid>
	<PaleGoldenRod public="1" get="inline" set="null" expr="cast 0xFFEEE8AA" line="444" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFEEE8AA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleGoldenRod>
	<PaleGreen public="1" get="inline" set="null" expr="cast 0xFF98FB98" line="445" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF98FB98</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleGreen>
	<PaleTurquoise public="1" get="inline" set="null" expr="cast 0xFFAFEEEE" line="446" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFAFEEEE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleTurquoise>
	<PaleVioletRed public="1" get="inline" set="null" expr="cast 0xFFDB7093" line="447" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDB7093</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleVioletRed>
	<PapayaWhip public="1" get="inline" set="null" expr="cast 0xFFFFEFD5" line="448" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFEFD5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PapayaWhip>
	<PeachPuff public="1" get="inline" set="null" expr="cast 0xFFFFDAB9" line="449" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFDAB9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PeachPuff>
	<Peru public="1" get="inline" set="null" expr="cast 0xFFCD853F" line="450" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFCD853F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Peru>
	<Pink public="1" get="inline" set="null" expr="cast 0xFFFFC0CB" line="451" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFC0CB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Pink>
	<Plum public="1" get="inline" set="null" expr="cast 0xFFDDA0DD" line="452" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFDDA0DD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Plum>
	<PowderBlue public="1" get="inline" set="null" expr="cast 0xFFB0E0E6" line="453" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFB0E0E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PowderBlue>
	<Purple public="1" get="inline" set="null" expr="cast 0xFF800080" line="454" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF800080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Purple>
	<Red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="455" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Red>
	<RosyBrown public="1" get="inline" set="null" expr="cast 0xFFBC8F8F" line="456" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFBC8F8F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RosyBrown>
	<RoyalBlue public="1" get="inline" set="null" expr="cast 0xFF4169E1" line="457" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF4169E1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RoyalBlue>
	<SaddleBrown public="1" get="inline" set="null" expr="cast 0xFF8B4513" line="458" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF8B4513</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SaddleBrown>
	<Salmon public="1" get="inline" set="null" expr="cast 0xFFFA8072" line="459" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFA8072</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Salmon>
	<SandyBrown public="1" get="inline" set="null" expr="cast 0xFFF4A460" line="460" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF4A460</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SandyBrown>
	<SeaGreen public="1" get="inline" set="null" expr="cast 0xFF2E8B57" line="461" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF2E8B57</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeaGreen>
	<SeaShell public="1" get="inline" set="null" expr="cast 0xFFFFF5EE" line="462" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFF5EE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeaShell>
	<Sienna public="1" get="inline" set="null" expr="cast 0xFFA0522D" line="463" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFA0522D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Sienna>
	<Silver public="1" get="inline" set="null" expr="cast 0xFFC0C0C0" line="464" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFC0C0C0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Silver>
	<SkyBlue public="1" get="inline" set="null" expr="cast 0xFF87CEEB" line="465" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF87CEEB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SkyBlue>
	<SlateBlue public="1" get="inline" set="null" expr="cast 0xFF6A5ACD" line="466" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF6A5ACD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SlateBlue>
	<SlateGrey public="1" get="inline" set="null" expr="cast 0xFF708090" line="468" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF708090</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SlateGrey>
	<Snow public="1" get="inline" set="null" expr="cast 0xFFFFFAFA" line="469" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFAFA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Snow>
	<SpringGreen public="1" get="inline" set="null" expr="cast 0xFF00FF7F" line="470" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FF7F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SpringGreen>
	<SteelBlue public="1" get="inline" set="null" expr="cast 0xFF4682B4" line="471" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF4682B4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SteelBlue>
	<Tan public="1" get="inline" set="null" expr="cast 0xFFD2B48C" line="472" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFD2B48C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tan>
	<Teal public="1" get="inline" set="null" expr="cast 0xFF008080" line="473" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF008080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Teal>
	<Thistle public="1" get="inline" set="null" expr="cast 0xFFD8BFD8" line="474" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFD8BFD8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Thistle>
	<Tomato public="1" get="inline" set="null" expr="cast 0xFFFF6347" line="475" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF6347</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tomato>
	<Turquoise public="1" get="inline" set="null" expr="cast 0xFF40E0D0" line="476" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF40E0D0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Turquoise>
	<Violet public="1" get="inline" set="null" expr="cast 0xFFEE82EE" line="477" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFEE82EE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Violet>
	<Wheat public="1" get="inline" set="null" expr="cast 0xFFF5DEB3" line="478" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF5DEB3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Wheat>
	<White public="1" get="inline" set="null" expr="cast 0xFFFFFFFF" line="479" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</White>
	<WhiteSmoke public="1" get="inline" set="null" expr="cast 0xFFF5F5F5" line="480" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFF5F5F5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WhiteSmoke>
	<Yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="481" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Yellow>
	<YellowGreen public="1" get="inline" set="null" expr="cast 0xFF9ACD32" line="482" static="1">
		<x path="justGraphix.pallette.browser.ARGBColours"/>
		<meta>
			<m n=":value"><e>cast 0xFF9ACD32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</YellowGreen>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.browser._BrowserColourARGB.ARGBColours_Impl_" params="" file="src/justGraphix/pallette/browser/BrowserColourARGB.hx" private="1" module="justGraphix.pallette.browser.BrowserColourARGB" extern="1" final="1">
		<AliceBlue public="1" get="inline" set="null" expr="cast 0xFFF0F8FF" line="336" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF0F8FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AliceBlue>
		<AntiqueWhite public="1" get="inline" set="null" expr="cast 0xFFFAEBD7" line="337" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFAEBD7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AntiqueWhite>
		<Aquamarine public="1" get="inline" set="null" expr="cast 0xFF7FFFD4" line="339" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF7FFFD4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Aquamarine>
		<Azure public="1" get="inline" set="null" expr="cast 0xFFF0FFFF" line="340" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF0FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Azure>
		<Beige public="1" get="inline" set="null" expr="cast 0xFFF5F5DC" line="341" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF5F5DC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Beige>
		<Bisque public="1" get="inline" set="null" expr="cast 0xFFFFE4C4" line="342" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE4C4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Bisque>
		<Black public="1" get="inline" set="null" expr="cast 0xFF000000" line="343" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF000000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Black>
		<BlanchedAlmond public="1" get="inline" set="null" expr="cast 0xFFFFEBCD" line="344" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFEBCD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BlanchedAlmond>
		<Blue public="1" get="inline" set="null" expr="cast 0xFF0000FF" line="345" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Blue>
		<BlueViolet public="1" get="inline" set="null" expr="cast 0xFF8A2BE2" line="346" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF8A2BE2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BlueViolet>
		<Brown public="1" get="inline" set="null" expr="cast 0xFFA52A2A" line="347" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFA52A2A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Brown>
		<BurlyWood public="1" get="inline" set="null" expr="cast 0xFFDEB887" line="348" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDEB887</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BurlyWood>
		<CadetBlue public="1" get="inline" set="null" expr="cast 0xFF5F9EA0" line="349" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF5F9EA0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CadetBlue>
		<Chartreuse public="1" get="inline" set="null" expr="cast 0xFF7FFF00" line="350" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF7FFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Chartreuse>
		<Chocolate public="1" get="inline" set="null" expr="cast 0xFFD2691E" line="351" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFD2691E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Chocolate>
		<Coral public="1" get="inline" set="null" expr="cast 0xFFFF7F50" line="352" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF7F50</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Coral>
		<CornflowerBlue public="1" get="inline" set="null" expr="cast 0xFF6495ED" line="353" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF6495ED</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CornflowerBlue>
		<Cornsilk public="1" get="inline" set="null" expr="cast 0xFFFFF8DC" line="354" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFF8DC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cornsilk>
		<Crimson public="1" get="inline" set="null" expr="cast 0xFFDC143C" line="355" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDC143C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Crimson>
		<Cyan public="1" get="inline" set="null" expr="cast 0xFF00FFFF" line="356" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cyan>
		<DarkBlue public="1" get="inline" set="null" expr="cast 0xFF00008B" line="357" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00008B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkBlue>
		<DarkCyan public="1" get="inline" set="null" expr="cast 0xFF008B8B" line="358" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF008B8B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkCyan>
		<DarkGoldenRod public="1" get="inline" set="null" expr="cast 0xFFB8860B" line="359" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFB8860B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGoldenRod>
		<DarkGrey public="1" get="inline" set="null" expr="cast 0xFFA9A9A9" line="361" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFA9A9A9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGrey>
		<DarkGreen public="1" get="inline" set="null" expr="cast 0xFF006400" line="362" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF006400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGreen>
		<DarkKhaki public="1" get="inline" set="null" expr="cast 0xFFBDB76B" line="363" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFBDB76B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkKhaki>
		<DarkMagenta public="1" get="inline" set="null" expr="cast 0xFF8B008B" line="364" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF8B008B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkMagenta>
		<DarkOliveGreen public="1" get="inline" set="null" expr="cast 0xFF556B2F" line="365" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF556B2F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkOliveGreen>
		<Darkorange public="1" get="inline" set="null" expr="cast 0xFFFF8C00" line="366" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF8C00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Darkorange>
		<DarkOrchid public="1" get="inline" set="null" expr="cast 0xFF9932CC" line="367" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF9932CC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkOrchid>
		<DarkRed public="1" get="inline" set="null" expr="cast 0xFF8B0000" line="368" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF8B0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkRed>
		<DarkSalmon public="1" get="inline" set="null" expr="cast 0xFFE9967A" line="369" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFE9967A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSalmon>
		<DarkSeaGreen public="1" get="inline" set="null" expr="cast 0xFF8FBC8F" line="370" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF8FBC8F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSeaGreen>
		<DarkSlateBlue public="1" get="inline" set="null" expr="cast 0xFF483D8B" line="371" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF483D8B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSlateBlue>
		<DarkSlateGrey public="1" get="inline" set="null" expr="cast 0xFF2F4F4F" line="373" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF2F4F4F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSlateGrey>
		<DarkTurquoise public="1" get="inline" set="null" expr="cast 0xFF00CED1" line="374" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00CED1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkTurquoise>
		<DarkViolet public="1" get="inline" set="null" expr="cast 0xFF9400D3" line="375" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF9400D3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkViolet>
		<DeepPink public="1" get="inline" set="null" expr="cast 0xFFFF1493" line="376" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF1493</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeepPink>
		<DeepSkyBlue public="1" get="inline" set="null" expr="cast 0xFF00BFFF" line="377" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00BFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeepSkyBlue>
		<DimGray public="1" get="inline" set="null" expr="cast 0xFF696969" line="378" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF696969</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DimGray>
		<DimGrey public="1" get="inline" set="null" expr="cast 0xFF696969" line="379" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF696969</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DimGrey>
		<DodgerBlue public="1" get="inline" set="null" expr="cast 0xFF1E90FF" line="380" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF1E90FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DodgerBlue>
		<FireBrick public="1" get="inline" set="null" expr="cast 0xFFB22222" line="381" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFB22222</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FireBrick>
		<FloralWhite public="1" get="inline" set="null" expr="cast 0xFFFFFAF0" line="382" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFAF0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FloralWhite>
		<ForestGreen public="1" get="inline" set="null" expr="cast 0xFF228B22" line="383" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF228B22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ForestGreen>
		<Gainsboro public="1" get="inline" set="null" expr="cast 0xFFDCDCDC" line="385" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDCDCDC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gainsboro>
		<GhostWhite public="1" get="inline" set="null" expr="cast 0xFFF8F8FF" line="386" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF8F8FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GhostWhite>
		<Gold public="1" get="inline" set="null" expr="cast 0xFFFFD700" line="387" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFD700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gold>
		<GoldenRod public="1" get="inline" set="null" expr="cast 0xFFDAA520" line="388" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDAA520</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GoldenRod>
		<Grey public="1" get="inline" set="null" expr="cast 0xFF808080" line="390" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF808080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Grey>
		<Green public="1" get="inline" set="null" expr="cast 0xFF008000" line="391" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF008000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Green>
		<GreenYellow public="1" get="inline" set="null" expr="cast 0xFFADFF2F" line="392" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFADFF2F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GreenYellow>
		<HoneyDew public="1" get="inline" set="null" expr="cast 0xFFF0FFF0" line="393" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF0FFF0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HoneyDew>
		<HotPink public="1" get="inline" set="null" expr="cast 0xFFFF69B4" line="394" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF69B4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HotPink>
		<IndianRed public="1" get="inline" set="null" expr="cast 0xFFCD5C5C" line="395" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFCD5C5C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IndianRed>
		<Indigo public="1" get="inline" set="null" expr="cast 0xFF4B0082" line="396" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF4B0082</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Indigo>
		<Ivory public="1" get="inline" set="null" expr="cast 0xFFFFFFF0" line="397" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFFF0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Ivory>
		<Khaki public="1" get="inline" set="null" expr="cast 0xFFF0E68C" line="398" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF0E68C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Khaki>
		<Lavender public="1" get="inline" set="null" expr="cast 0xFFE6E6FA" line="399" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFE6E6FA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lavender>
		<LavenderBlush public="1" get="inline" set="null" expr="cast 0xFFFFF0F5" line="400" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFF0F5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LavenderBlush>
		<LawnGreen public="1" get="inline" set="null" expr="cast 0xFF7CFC00" line="401" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF7CFC00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LawnGreen>
		<LemonChiffon public="1" get="inline" set="null" expr="cast 0xFFFFFACD" line="402" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFACD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LemonChiffon>
		<LightBlue public="1" get="inline" set="null" expr="cast 0xFFADD8E6" line="403" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFADD8E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightBlue>
		<LightCoral public="1" get="inline" set="null" expr="cast 0xFFF08080" line="404" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF08080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightCoral>
		<LightCyan public="1" get="inline" set="null" expr="cast 0xFFE0FFFF" line="405" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFE0FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightCyan>
		<LightGoldenRodYellow public="1" get="inline" set="null" expr="cast 0xFFFAFAD2" line="406" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFAFAD2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGoldenRodYellow>
		<LightGrey public="1" get="inline" set="null" expr="cast 0xFFD3D3D3" line="408" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFD3D3D3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGrey>
		<LightGreen public="1" get="inline" set="null" expr="cast 0xFF90EE90" line="409" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF90EE90</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGreen>
		<LightPink public="1" get="inline" set="null" expr="cast 0xFFFFB6C1" line="410" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFB6C1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightPink>
		<LightSalmon public="1" get="inline" set="null" expr="cast 0xFFFFA07A" line="411" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFA07A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSalmon>
		<LightSeaGreen public="1" get="inline" set="null" expr="cast 0xFF20B2AA" line="412" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF20B2AA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSeaGreen>
		<LightSkyBlue public="1" get="inline" set="null" expr="cast 0xFF87CEFA" line="413" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF87CEFA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSkyBlue>
		<LightSlateGray public="1" get="inline" set="null" expr="cast 0xFF778899" line="414" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF778899</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSlateGray>
		<LightSlateGrey public="1" get="inline" set="null" expr="cast 0xFF778899" line="415" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF778899</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSlateGrey>
		<LightSteelBlue public="1" get="inline" set="null" expr="cast 0xFFB0C4DE" line="416" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFB0C4DE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSteelBlue>
		<LightYellow public="1" get="inline" set="null" expr="cast 0xFFFFFFE0" line="417" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFFE0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightYellow>
		<Lime public="1" get="inline" set="null" expr="cast 0xFF00FF00" line="418" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lime>
		<LimeGreen public="1" get="inline" set="null" expr="cast 0xFF32CD32" line="419" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF32CD32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LimeGreen>
		<Linen public="1" get="inline" set="null" expr="cast 0xFFFAF0E6" line="420" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFAF0E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Linen>
		<Magenta public="1" get="inline" set="null" expr="cast 0xFFFF00FF" line="421" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Magenta>
		<Maroon public="1" get="inline" set="null" expr="cast 0xFF800000" line="422" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF800000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Maroon>
		<MediumAquaMarine public="1" get="inline" set="null" expr="cast 0xFF66CDAA" line="423" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF66CDAA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumAquaMarine>
		<MediumBlue public="1" get="inline" set="null" expr="cast 0xFF0000CD" line="424" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000CD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumBlue>
		<MediumOrchid public="1" get="inline" set="null" expr="cast 0xFFBA55D3" line="425" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFBA55D3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumOrchid>
		<MediumPurple public="1" get="inline" set="null" expr="cast 0xFF9370DB" line="426" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF9370DB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumPurple>
		<MediumSeaGreen public="1" get="inline" set="null" expr="cast 0xFF3CB371" line="427" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF3CB371</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumSeaGreen>
		<MediumSlateBlue public="1" get="inline" set="null" expr="cast 0xFF7B68EE" line="428" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF7B68EE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumSlateBlue>
		<MediumSpringGreen public="1" get="inline" set="null" expr="cast 0xFF00FA9A" line="429" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FA9A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumSpringGreen>
		<MediumTurquoise public="1" get="inline" set="null" expr="cast 0xFF48D1CC" line="430" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF48D1CC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumTurquoise>
		<MediumVioletRed public="1" get="inline" set="null" expr="cast 0xFFC71585" line="431" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFC71585</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumVioletRed>
		<MidnightBlue public="1" get="inline" set="null" expr="cast 0xFF191970" line="432" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF191970</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MidnightBlue>
		<MintCream public="1" get="inline" set="null" expr="cast 0xFFF5FFFA" line="433" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF5FFFA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MintCream>
		<MistyRose public="1" get="inline" set="null" expr="cast 0xFFFFE4E1" line="434" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE4E1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MistyRose>
		<Moccasin public="1" get="inline" set="null" expr="cast 0xFFFFE4B5" line="435" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE4B5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Moccasin>
		<NavajoWhite public="1" get="inline" set="null" expr="cast 0xFFFFDEAD" line="436" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFDEAD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NavajoWhite>
		<Navy public="1" get="inline" set="null" expr="cast 0xFF000080" line="437" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF000080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Navy>
		<OldLace public="1" get="inline" set="null" expr="cast 0xFFFDF5E6" line="438" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFDF5E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OldLace>
		<Olive public="1" get="inline" set="null" expr="cast 0xFF808000" line="439" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF808000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Olive>
		<OliveDrab public="1" get="inline" set="null" expr="cast 0xFF6B8E23" line="440" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF6B8E23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OliveDrab>
		<Orange public="1" get="inline" set="null" expr="cast 0xFFFFA500" line="441" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFA500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Orange>
		<OrangeRed public="1" get="inline" set="null" expr="cast 0xFFFF4500" line="442" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF4500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OrangeRed>
		<Orchid public="1" get="inline" set="null" expr="cast 0xFFDA70D6" line="443" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDA70D6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Orchid>
		<PaleGoldenRod public="1" get="inline" set="null" expr="cast 0xFFEEE8AA" line="444" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFEEE8AA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleGoldenRod>
		<PaleGreen public="1" get="inline" set="null" expr="cast 0xFF98FB98" line="445" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF98FB98</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleGreen>
		<PaleTurquoise public="1" get="inline" set="null" expr="cast 0xFFAFEEEE" line="446" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFAFEEEE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleTurquoise>
		<PaleVioletRed public="1" get="inline" set="null" expr="cast 0xFFDB7093" line="447" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDB7093</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleVioletRed>
		<PapayaWhip public="1" get="inline" set="null" expr="cast 0xFFFFEFD5" line="448" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFEFD5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PapayaWhip>
		<PeachPuff public="1" get="inline" set="null" expr="cast 0xFFFFDAB9" line="449" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFDAB9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PeachPuff>
		<Peru public="1" get="inline" set="null" expr="cast 0xFFCD853F" line="450" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFCD853F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Peru>
		<Pink public="1" get="inline" set="null" expr="cast 0xFFFFC0CB" line="451" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFC0CB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Pink>
		<Plum public="1" get="inline" set="null" expr="cast 0xFFDDA0DD" line="452" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFDDA0DD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Plum>
		<PowderBlue public="1" get="inline" set="null" expr="cast 0xFFB0E0E6" line="453" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFB0E0E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PowderBlue>
		<Purple public="1" get="inline" set="null" expr="cast 0xFF800080" line="454" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF800080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Purple>
		<Red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="455" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Red>
		<RosyBrown public="1" get="inline" set="null" expr="cast 0xFFBC8F8F" line="456" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFBC8F8F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RosyBrown>
		<RoyalBlue public="1" get="inline" set="null" expr="cast 0xFF4169E1" line="457" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF4169E1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RoyalBlue>
		<SaddleBrown public="1" get="inline" set="null" expr="cast 0xFF8B4513" line="458" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF8B4513</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SaddleBrown>
		<Salmon public="1" get="inline" set="null" expr="cast 0xFFFA8072" line="459" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFA8072</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Salmon>
		<SandyBrown public="1" get="inline" set="null" expr="cast 0xFFF4A460" line="460" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF4A460</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SandyBrown>
		<SeaGreen public="1" get="inline" set="null" expr="cast 0xFF2E8B57" line="461" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF2E8B57</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeaGreen>
		<SeaShell public="1" get="inline" set="null" expr="cast 0xFFFFF5EE" line="462" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFF5EE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeaShell>
		<Sienna public="1" get="inline" set="null" expr="cast 0xFFA0522D" line="463" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFA0522D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Sienna>
		<Silver public="1" get="inline" set="null" expr="cast 0xFFC0C0C0" line="464" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFC0C0C0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Silver>
		<SkyBlue public="1" get="inline" set="null" expr="cast 0xFF87CEEB" line="465" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF87CEEB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SkyBlue>
		<SlateBlue public="1" get="inline" set="null" expr="cast 0xFF6A5ACD" line="466" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF6A5ACD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SlateBlue>
		<SlateGrey public="1" get="inline" set="null" expr="cast 0xFF708090" line="468" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF708090</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SlateGrey>
		<Snow public="1" get="inline" set="null" expr="cast 0xFFFFFAFA" line="469" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFAFA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Snow>
		<SpringGreen public="1" get="inline" set="null" expr="cast 0xFF00FF7F" line="470" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FF7F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SpringGreen>
		<SteelBlue public="1" get="inline" set="null" expr="cast 0xFF4682B4" line="471" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF4682B4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SteelBlue>
		<Tan public="1" get="inline" set="null" expr="cast 0xFFD2B48C" line="472" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFD2B48C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tan>
		<Teal public="1" get="inline" set="null" expr="cast 0xFF008080" line="473" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF008080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Teal>
		<Thistle public="1" get="inline" set="null" expr="cast 0xFFD8BFD8" line="474" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFD8BFD8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Thistle>
		<Tomato public="1" get="inline" set="null" expr="cast 0xFFFF6347" line="475" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF6347</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tomato>
		<Turquoise public="1" get="inline" set="null" expr="cast 0xFF40E0D0" line="476" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF40E0D0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Turquoise>
		<Violet public="1" get="inline" set="null" expr="cast 0xFFEE82EE" line="477" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFEE82EE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Violet>
		<Wheat public="1" get="inline" set="null" expr="cast 0xFFF5DEB3" line="478" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF5DEB3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Wheat>
		<White public="1" get="inline" set="null" expr="cast 0xFFFFFFFF" line="479" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</White>
		<WhiteSmoke public="1" get="inline" set="null" expr="cast 0xFFF5F5F5" line="480" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFF5F5F5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WhiteSmoke>
		<Yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="481" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Yellow>
		<YellowGreen public="1" get="inline" set="null" expr="cast 0xFF9ACD32" line="482" static="1">
			<x path="justGraphix.pallette.browser.ARGBColours"/>
			<meta>
				<m n=":value"><e>cast 0xFF9ACD32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</YellowGreen>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.browser.StrColours" params="" file="src/justGraphix/pallette/browser/BrowserColours.hx" module="justGraphix.pallette.browser.BrowserColours">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.browser._BrowserColours.StrColours_Impl_" params="" file="src/justGraphix/pallette/browser/BrowserColours.hx" private="1" module="justGraphix.pallette.browser.BrowserColours" extern="1" final="1">
	<AliceBlue public="1" get="inline" set="null" expr="cast &quot;#F0F8FF&quot;" line="4" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F0F8FF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AliceBlue>
	<AntiqueWhite public="1" get="inline" set="null" expr="cast &quot;#FAEBD7&quot;" line="5" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FAEBD7"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AntiqueWhite>
	<Aqua public="1" get="inline" set="null" expr="cast &quot;#00FFFF&quot;" line="6" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00FFFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Aqua>
	<Aquamarine public="1" get="inline" set="null" expr="cast &quot;#7FFFD4&quot;" line="7" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#7FFFD4"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Aquamarine>
	<Azure public="1" get="inline" set="null" expr="cast &quot;#F0FFFF&quot;" line="8" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F0FFFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Azure>
	<Beige public="1" get="inline" set="null" expr="cast &quot;#F5F5DC&quot;" line="9" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F5F5DC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Beige>
	<Bisque public="1" get="inline" set="null" expr="cast &quot;#FFE4C4&quot;" line="10" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFE4C4"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Bisque>
	<Black public="1" get="inline" set="null" expr="cast &quot;#000000&quot;" line="11" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#000000"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Black>
	<BlanchedAlmond public="1" get="inline" set="null" expr="cast &quot;#FFEBCD&quot;" line="12" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFEBCD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BlanchedAlmond>
	<Blue public="1" get="inline" set="null" expr="cast &quot;#0000FF&quot;" line="13" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#0000FF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Blue>
	<BlueViolet public="1" get="inline" set="null" expr="cast &quot;#8A2BE2&quot;" line="14" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#8A2BE2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BlueViolet>
	<Brown public="1" get="inline" set="null" expr="cast &quot;#A52A2A&quot;" line="15" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#A52A2A"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Brown>
	<BurlyWood public="1" get="inline" set="null" expr="cast &quot;#DEB887&quot;" line="16" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DEB887"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BurlyWood>
	<CadetBlue public="1" get="inline" set="null" expr="cast &quot;#5F9EA0&quot;" line="17" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#5F9EA0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CadetBlue>
	<Chartreuse public="1" get="inline" set="null" expr="cast &quot;#7FFF00&quot;" line="18" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#7FFF00"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Chartreuse>
	<Chocolate public="1" get="inline" set="null" expr="cast &quot;#D2691E&quot;" line="19" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#D2691E"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Chocolate>
	<Coral public="1" get="inline" set="null" expr="cast &quot;#FF7F50&quot;" line="20" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF7F50"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Coral>
	<CornflowerBlue public="1" get="inline" set="null" expr="cast &quot;#6495ED&quot;" line="21" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#6495ED"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CornflowerBlue>
	<Cornsilk public="1" get="inline" set="null" expr="cast &quot;#FFF8DC&quot;" line="22" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFF8DC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cornsilk>
	<Crimson public="1" get="inline" set="null" expr="cast &quot;#DC143C&quot;" line="23" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DC143C"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Crimson>
	<Cyan public="1" get="inline" set="null" expr="cast &quot;#00FFFF&quot;" line="24" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00FFFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cyan>
	<DarkBlue public="1" get="inline" set="null" expr="cast &quot;#00008B&quot;" line="25" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00008B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkBlue>
	<DarkCyan public="1" get="inline" set="null" expr="cast &quot;#008B8B&quot;" line="26" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#008B8B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkCyan>
	<DarkGoldenRod public="1" get="inline" set="null" expr="cast &quot;#B8860B&quot;" line="27" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#B8860B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGoldenRod>
	<DarkGray public="1" get="inline" set="null" expr="cast &quot;#A9A9A9&quot;" line="28" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#A9A9A9"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGray>
	<DarkGrey public="1" get="inline" set="null" expr="cast &quot;#A9A9A9&quot;" line="29" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#A9A9A9"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGrey>
	<DarkGreen public="1" get="inline" set="null" expr="cast &quot;#006400&quot;" line="30" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#006400"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGreen>
	<DarkKhaki public="1" get="inline" set="null" expr="cast &quot;#BDB76B&quot;" line="31" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#BDB76B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkKhaki>
	<DarkMagenta public="1" get="inline" set="null" expr="cast &quot;#8B008B&quot;" line="32" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#8B008B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkMagenta>
	<DarkOliveGreen public="1" get="inline" set="null" expr="cast &quot;#556B2F&quot;" line="33" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#556B2F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkOliveGreen>
	<Darkorange public="1" get="inline" set="null" expr="cast &quot;#FF8C00&quot;" line="34" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF8C00"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Darkorange>
	<DarkOrchid public="1" get="inline" set="null" expr="cast &quot;#9932CC&quot;" line="35" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#9932CC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkOrchid>
	<DarkRed public="1" get="inline" set="null" expr="cast &quot;#8B0000&quot;" line="36" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#8B0000"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkRed>
	<DarkSalmon public="1" get="inline" set="null" expr="cast &quot;#E9967A&quot;" line="37" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#E9967A"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSalmon>
	<DarkSeaGreen public="1" get="inline" set="null" expr="cast &quot;#8FBC8F&quot;" line="38" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#8FBC8F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSeaGreen>
	<DarkSlateBlue public="1" get="inline" set="null" expr="cast &quot;#483D8B&quot;" line="39" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#483D8B"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSlateBlue>
	<DarkSlateGray public="1" get="inline" set="null" expr="cast &quot;#2F4F4F&quot;" line="40" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#2F4F4F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSlateGray>
	<DarkSlateGrey public="1" get="inline" set="null" expr="cast &quot;#2F4F4F&quot;" line="41" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#2F4F4F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkSlateGrey>
	<DarkTurquoise public="1" get="inline" set="null" expr="cast &quot;#00CED1&quot;" line="42" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00CED1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkTurquoise>
	<DarkViolet public="1" get="inline" set="null" expr="cast &quot;#9400D3&quot;" line="43" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#9400D3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkViolet>
	<DeepPink public="1" get="inline" set="null" expr="cast &quot;#FF1493&quot;" line="44" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF1493"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeepPink>
	<DeepSkyBlue public="1" get="inline" set="null" expr="cast &quot;#00BFFF&quot;" line="45" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00BFFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeepSkyBlue>
	<DimGray public="1" get="inline" set="null" expr="cast &quot;#696969&quot;" line="46" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#696969"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DimGray>
	<DimGrey public="1" get="inline" set="null" expr="cast &quot;#696969&quot;" line="47" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#696969"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DimGrey>
	<DodgerBlue public="1" get="inline" set="null" expr="cast &quot;#1E90FF&quot;" line="48" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#1E90FF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DodgerBlue>
	<FireBrick public="1" get="inline" set="null" expr="cast &quot;#B22222&quot;" line="49" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#B22222"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FireBrick>
	<FloralWhite public="1" get="inline" set="null" expr="cast &quot;#FFFAF0&quot;" line="50" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFAF0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FloralWhite>
	<ForestGreen public="1" get="inline" set="null" expr="cast &quot;#228B22&quot;" line="51" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#228B22"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ForestGreen>
	<Fuchsia public="1" get="inline" set="null" expr="cast &quot;#FF00FF&quot;" line="52" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF00FF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Fuchsia>
	<Gainsboro public="1" get="inline" set="null" expr="cast &quot;#DCDCDC&quot;" line="53" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DCDCDC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gainsboro>
	<GhostWhite public="1" get="inline" set="null" expr="cast &quot;#F8F8FF&quot;" line="54" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F8F8FF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GhostWhite>
	<Gold public="1" get="inline" set="null" expr="cast &quot;#FFD700&quot;" line="55" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFD700"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gold>
	<GoldenRod public="1" get="inline" set="null" expr="cast &quot;#DAA520&quot;" line="56" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DAA520"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GoldenRod>
	<Gray public="1" get="inline" set="null" expr="cast &quot;#808080&quot;" line="57" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#808080"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gray>
	<Grey public="1" get="inline" set="null" expr="cast &quot;#808080&quot;" line="58" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#808080"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Grey>
	<Green public="1" get="inline" set="null" expr="cast &quot;#008000&quot;" line="59" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#008000"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Green>
	<GreenYellow public="1" get="inline" set="null" expr="cast &quot;#ADFF2F&quot;" line="60" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#ADFF2F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GreenYellow>
	<HoneyDew public="1" get="inline" set="null" expr="cast &quot;#F0FFF0&quot;" line="61" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F0FFF0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HoneyDew>
	<HotPink public="1" get="inline" set="null" expr="cast &quot;#FF69B4&quot;" line="62" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF69B4"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HotPink>
	<IndianRed public="1" get="inline" set="null" expr="cast &quot;#CD5C5C&quot;" line="63" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#CD5C5C"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IndianRed>
	<Indigo public="1" get="inline" set="null" expr="cast &quot;#4B0082&quot;" line="64" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#4B0082"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Indigo>
	<Ivory public="1" get="inline" set="null" expr="cast &quot;#FFFFF0&quot;" line="65" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFFF0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Ivory>
	<Khaki public="1" get="inline" set="null" expr="cast &quot;#F0E68C&quot;" line="66" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F0E68C"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Khaki>
	<Lavender public="1" get="inline" set="null" expr="cast &quot;#E6E6FA&quot;" line="67" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#E6E6FA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lavender>
	<LavenderBlush public="1" get="inline" set="null" expr="cast &quot;#FFF0F5&quot;" line="68" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFF0F5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LavenderBlush>
	<LawnGreen public="1" get="inline" set="null" expr="cast &quot;#7CFC00&quot;" line="69" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#7CFC00"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LawnGreen>
	<LemonChiffon public="1" get="inline" set="null" expr="cast &quot;#FFFACD&quot;" line="70" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFACD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LemonChiffon>
	<LightBlue public="1" get="inline" set="null" expr="cast &quot;#ADD8E6&quot;" line="71" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#ADD8E6"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightBlue>
	<LightCoral public="1" get="inline" set="null" expr="cast &quot;#F08080&quot;" line="72" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F08080"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightCoral>
	<LightCyan public="1" get="inline" set="null" expr="cast &quot;#E0FFFF&quot;" line="73" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#E0FFFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightCyan>
	<LightGoldenRodYellow public="1" get="inline" set="null" expr="cast &quot;#FAFAD2&quot;" line="74" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FAFAD2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGoldenRodYellow>
	<LightGray public="1" get="inline" set="null" expr="cast &quot;#D3D3D3&quot;" line="75" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#D3D3D3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGray>
	<LightGrey public="1" get="inline" set="null" expr="cast &quot;#D3D3D3&quot;" line="76" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#D3D3D3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGrey>
	<LightGreen public="1" get="inline" set="null" expr="cast &quot;#90EE90&quot;" line="77" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#90EE90"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGreen>
	<LightPink public="1" get="inline" set="null" expr="cast &quot;#FFB6C1&quot;" line="78" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFB6C1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightPink>
	<LightSalmon public="1" get="inline" set="null" expr="cast &quot;#FFA07A&quot;" line="79" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFA07A"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSalmon>
	<LightSeaGreen public="1" get="inline" set="null" expr="cast &quot;#20B2AA&quot;" line="80" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#20B2AA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSeaGreen>
	<LightSkyBlue public="1" get="inline" set="null" expr="cast &quot;#87CEFA&quot;" line="81" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#87CEFA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSkyBlue>
	<LightSlateGray public="1" get="inline" set="null" expr="cast &quot;#778899&quot;" line="82" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#778899"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSlateGray>
	<LightSlateGrey public="1" get="inline" set="null" expr="cast &quot;#778899&quot;" line="83" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#778899"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSlateGrey>
	<LightSteelBlue public="1" get="inline" set="null" expr="cast &quot;#B0C4DE&quot;" line="84" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#B0C4DE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightSteelBlue>
	<LightYellow public="1" get="inline" set="null" expr="cast &quot;#FFFFE0&quot;" line="85" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFFE0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightYellow>
	<Lime public="1" get="inline" set="null" expr="cast &quot;#00FF00&quot;" line="86" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00FF00"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lime>
	<LimeGreen public="1" get="inline" set="null" expr="cast &quot;#32CD32&quot;" line="87" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#32CD32"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LimeGreen>
	<Linen public="1" get="inline" set="null" expr="cast &quot;#FAF0E6&quot;" line="88" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FAF0E6"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Linen>
	<Magenta public="1" get="inline" set="null" expr="cast &quot;#FF00FF&quot;" line="89" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF00FF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Magenta>
	<Maroon public="1" get="inline" set="null" expr="cast &quot;#800000&quot;" line="90" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#800000"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Maroon>
	<MediumAquaMarine public="1" get="inline" set="null" expr="cast &quot;#66CDAA&quot;" line="91" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#66CDAA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumAquaMarine>
	<MediumBlue public="1" get="inline" set="null" expr="cast &quot;#0000CD&quot;" line="92" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#0000CD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumBlue>
	<MediumOrchid public="1" get="inline" set="null" expr="cast &quot;#BA55D3&quot;" line="93" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#BA55D3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumOrchid>
	<MediumPurple public="1" get="inline" set="null" expr="cast &quot;#9370DB&quot;" line="94" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#9370DB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumPurple>
	<MediumSeaGreen public="1" get="inline" set="null" expr="cast &quot;#3CB371&quot;" line="95" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#3CB371"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumSeaGreen>
	<MediumSlateBlue public="1" get="inline" set="null" expr="cast &quot;#7B68EE&quot;" line="96" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#7B68EE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumSlateBlue>
	<MediumSpringGreen public="1" get="inline" set="null" expr="cast &quot;#00FA9A&quot;" line="97" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00FA9A"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumSpringGreen>
	<MediumTurquoise public="1" get="inline" set="null" expr="cast &quot;#48D1CC&quot;" line="98" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#48D1CC"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumTurquoise>
	<MediumVioletRed public="1" get="inline" set="null" expr="cast &quot;#C71585&quot;" line="99" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#C71585"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumVioletRed>
	<MidnightBlue public="1" get="inline" set="null" expr="cast &quot;#191970&quot;" line="100" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#191970"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MidnightBlue>
	<MintCream public="1" get="inline" set="null" expr="cast &quot;#F5FFFA&quot;" line="101" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F5FFFA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MintCream>
	<MistyRose public="1" get="inline" set="null" expr="cast &quot;#FFE4E1&quot;" line="102" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFE4E1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MistyRose>
	<Moccasin public="1" get="inline" set="null" expr="cast &quot;#FFE4B5&quot;" line="103" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFE4B5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Moccasin>
	<NavajoWhite public="1" get="inline" set="null" expr="cast &quot;#FFDEAD&quot;" line="104" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFDEAD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NavajoWhite>
	<Navy public="1" get="inline" set="null" expr="cast &quot;#000080&quot;" line="105" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#000080"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Navy>
	<OldLace public="1" get="inline" set="null" expr="cast &quot;#FDF5E6&quot;" line="106" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FDF5E6"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OldLace>
	<Olive public="1" get="inline" set="null" expr="cast &quot;#808000&quot;" line="107" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#808000"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Olive>
	<OliveDrab public="1" get="inline" set="null" expr="cast &quot;#6B8E23&quot;" line="108" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#6B8E23"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OliveDrab>
	<Orange public="1" get="inline" set="null" expr="cast &quot;#FFA500&quot;" line="109" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFA500"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Orange>
	<OrangeRed public="1" get="inline" set="null" expr="cast &quot;#FF4500&quot;" line="110" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF4500"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OrangeRed>
	<Orchid public="1" get="inline" set="null" expr="cast &quot;#DA70D6&quot;" line="111" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DA70D6"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Orchid>
	<PaleGoldenRod public="1" get="inline" set="null" expr="cast &quot;#EEE8AA&quot;" line="112" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#EEE8AA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleGoldenRod>
	<PaleGreen public="1" get="inline" set="null" expr="cast &quot;#98FB98&quot;" line="113" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#98FB98"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleGreen>
	<PaleTurquoise public="1" get="inline" set="null" expr="cast &quot;#AFEEEE&quot;" line="114" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#AFEEEE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleTurquoise>
	<PaleVioletRed public="1" get="inline" set="null" expr="cast &quot;#DB7093&quot;" line="115" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DB7093"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleVioletRed>
	<PapayaWhip public="1" get="inline" set="null" expr="cast &quot;#FFEFD5&quot;" line="116" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFEFD5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PapayaWhip>
	<PeachPuff public="1" get="inline" set="null" expr="cast &quot;#FFDAB9&quot;" line="117" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFDAB9"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PeachPuff>
	<Peru public="1" get="inline" set="null" expr="cast &quot;#CD853F&quot;" line="118" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#CD853F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Peru>
	<Pink public="1" get="inline" set="null" expr="cast &quot;#FFC0CB&quot;" line="119" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFC0CB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Pink>
	<Plum public="1" get="inline" set="null" expr="cast &quot;#DDA0DD&quot;" line="120" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#DDA0DD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Plum>
	<PowderBlue public="1" get="inline" set="null" expr="cast &quot;#B0E0E6&quot;" line="121" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#B0E0E6"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PowderBlue>
	<Purple public="1" get="inline" set="null" expr="cast &quot;#800080&quot;" line="122" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#800080"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Purple>
	<Red public="1" get="inline" set="null" expr="cast &quot;#FF0000&quot;" line="123" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF0000"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Red>
	<RosyBrown public="1" get="inline" set="null" expr="cast &quot;#BC8F8F&quot;" line="124" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#BC8F8F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RosyBrown>
	<RoyalBlue public="1" get="inline" set="null" expr="cast &quot;#4169E1&quot;" line="125" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#4169E1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RoyalBlue>
	<SaddleBrown public="1" get="inline" set="null" expr="cast &quot;#8B4513&quot;" line="126" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#8B4513"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SaddleBrown>
	<Salmon public="1" get="inline" set="null" expr="cast &quot;#FA8072&quot;" line="127" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FA8072"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Salmon>
	<SandyBrown public="1" get="inline" set="null" expr="cast &quot;#F4A460&quot;" line="128" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F4A460"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SandyBrown>
	<SeaGreen public="1" get="inline" set="null" expr="cast &quot;#2E8B57&quot;" line="129" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#2E8B57"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeaGreen>
	<SeaShell public="1" get="inline" set="null" expr="cast &quot;#FFF5EE&quot;" line="130" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFF5EE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeaShell>
	<Sienna public="1" get="inline" set="null" expr="cast &quot;#A0522D&quot;" line="131" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#A0522D"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Sienna>
	<Silver public="1" get="inline" set="null" expr="cast &quot;#C0C0C0&quot;" line="132" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#C0C0C0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Silver>
	<SkyBlue public="1" get="inline" set="null" expr="cast &quot;#87CEEB&quot;" line="133" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#87CEEB"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SkyBlue>
	<SlateBlue public="1" get="inline" set="null" expr="cast &quot;#6A5ACD&quot;" line="134" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#6A5ACD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SlateBlue>
	<SlateGray public="1" get="inline" set="null" expr="cast &quot;#708090&quot;" line="135" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#708090"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SlateGray>
	<SlateGrey public="1" get="inline" set="null" expr="cast &quot;#708090&quot;" line="136" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#708090"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SlateGrey>
	<Snow public="1" get="inline" set="null" expr="cast &quot;#FFFAFA&quot;" line="137" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFAFA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Snow>
	<SpringGreen public="1" get="inline" set="null" expr="cast &quot;#00FF7F&quot;" line="138" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#00FF7F"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SpringGreen>
	<SteelBlue public="1" get="inline" set="null" expr="cast &quot;#4682B4&quot;" line="139" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#4682B4"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SteelBlue>
	<Tan public="1" get="inline" set="null" expr="cast &quot;#D2B48C&quot;" line="140" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#D2B48C"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tan>
	<Teal public="1" get="inline" set="null" expr="cast &quot;#008080&quot;" line="141" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#008080"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Teal>
	<Thistle public="1" get="inline" set="null" expr="cast &quot;#D8BFD8&quot;" line="142" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#D8BFD8"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Thistle>
	<Tomato public="1" get="inline" set="null" expr="cast &quot;#FF6347&quot;" line="143" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FF6347"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tomato>
	<Turquoise public="1" get="inline" set="null" expr="cast &quot;#40E0D0&quot;" line="144" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#40E0D0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Turquoise>
	<Violet public="1" get="inline" set="null" expr="cast &quot;#EE82EE&quot;" line="145" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#EE82EE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Violet>
	<Wheat public="1" get="inline" set="null" expr="cast &quot;#F5DEB3&quot;" line="146" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F5DEB3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Wheat>
	<White public="1" get="inline" set="null" expr="cast &quot;#FFFFFF&quot;" line="147" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFFFF"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</White>
	<WhiteSmoke public="1" get="inline" set="null" expr="cast &quot;#F5F5F5&quot;" line="148" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#F5F5F5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WhiteSmoke>
	<Yellow public="1" get="inline" set="null" expr="cast &quot;#FFFF00&quot;" line="149" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#FFFF00"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Yellow>
	<YellowGreen public="1" get="inline" set="null" expr="cast &quot;#9ACD32&quot;" line="150" static="1">
		<x path="justGraphix.pallette.browser.StrColours"/>
		<meta>
			<m n=":value"><e>cast "#9ACD32"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</YellowGreen>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.browser._BrowserColours.StrColours_Impl_" params="" file="src/justGraphix/pallette/browser/BrowserColours.hx" private="1" module="justGraphix.pallette.browser.BrowserColours" extern="1" final="1">
		<AliceBlue public="1" get="inline" set="null" expr="cast &quot;#F0F8FF&quot;" line="4" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F0F8FF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AliceBlue>
		<AntiqueWhite public="1" get="inline" set="null" expr="cast &quot;#FAEBD7&quot;" line="5" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FAEBD7"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AntiqueWhite>
		<Aqua public="1" get="inline" set="null" expr="cast &quot;#00FFFF&quot;" line="6" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00FFFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Aqua>
		<Aquamarine public="1" get="inline" set="null" expr="cast &quot;#7FFFD4&quot;" line="7" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#7FFFD4"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Aquamarine>
		<Azure public="1" get="inline" set="null" expr="cast &quot;#F0FFFF&quot;" line="8" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F0FFFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Azure>
		<Beige public="1" get="inline" set="null" expr="cast &quot;#F5F5DC&quot;" line="9" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F5F5DC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Beige>
		<Bisque public="1" get="inline" set="null" expr="cast &quot;#FFE4C4&quot;" line="10" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFE4C4"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Bisque>
		<Black public="1" get="inline" set="null" expr="cast &quot;#000000&quot;" line="11" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#000000"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Black>
		<BlanchedAlmond public="1" get="inline" set="null" expr="cast &quot;#FFEBCD&quot;" line="12" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFEBCD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BlanchedAlmond>
		<Blue public="1" get="inline" set="null" expr="cast &quot;#0000FF&quot;" line="13" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#0000FF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Blue>
		<BlueViolet public="1" get="inline" set="null" expr="cast &quot;#8A2BE2&quot;" line="14" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#8A2BE2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BlueViolet>
		<Brown public="1" get="inline" set="null" expr="cast &quot;#A52A2A&quot;" line="15" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#A52A2A"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Brown>
		<BurlyWood public="1" get="inline" set="null" expr="cast &quot;#DEB887&quot;" line="16" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DEB887"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BurlyWood>
		<CadetBlue public="1" get="inline" set="null" expr="cast &quot;#5F9EA0&quot;" line="17" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#5F9EA0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CadetBlue>
		<Chartreuse public="1" get="inline" set="null" expr="cast &quot;#7FFF00&quot;" line="18" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#7FFF00"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Chartreuse>
		<Chocolate public="1" get="inline" set="null" expr="cast &quot;#D2691E&quot;" line="19" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#D2691E"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Chocolate>
		<Coral public="1" get="inline" set="null" expr="cast &quot;#FF7F50&quot;" line="20" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF7F50"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Coral>
		<CornflowerBlue public="1" get="inline" set="null" expr="cast &quot;#6495ED&quot;" line="21" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#6495ED"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CornflowerBlue>
		<Cornsilk public="1" get="inline" set="null" expr="cast &quot;#FFF8DC&quot;" line="22" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFF8DC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cornsilk>
		<Crimson public="1" get="inline" set="null" expr="cast &quot;#DC143C&quot;" line="23" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DC143C"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Crimson>
		<Cyan public="1" get="inline" set="null" expr="cast &quot;#00FFFF&quot;" line="24" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00FFFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cyan>
		<DarkBlue public="1" get="inline" set="null" expr="cast &quot;#00008B&quot;" line="25" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00008B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkBlue>
		<DarkCyan public="1" get="inline" set="null" expr="cast &quot;#008B8B&quot;" line="26" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#008B8B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkCyan>
		<DarkGoldenRod public="1" get="inline" set="null" expr="cast &quot;#B8860B&quot;" line="27" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#B8860B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGoldenRod>
		<DarkGray public="1" get="inline" set="null" expr="cast &quot;#A9A9A9&quot;" line="28" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#A9A9A9"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGray>
		<DarkGrey public="1" get="inline" set="null" expr="cast &quot;#A9A9A9&quot;" line="29" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#A9A9A9"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGrey>
		<DarkGreen public="1" get="inline" set="null" expr="cast &quot;#006400&quot;" line="30" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#006400"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGreen>
		<DarkKhaki public="1" get="inline" set="null" expr="cast &quot;#BDB76B&quot;" line="31" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#BDB76B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkKhaki>
		<DarkMagenta public="1" get="inline" set="null" expr="cast &quot;#8B008B&quot;" line="32" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#8B008B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkMagenta>
		<DarkOliveGreen public="1" get="inline" set="null" expr="cast &quot;#556B2F&quot;" line="33" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#556B2F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkOliveGreen>
		<Darkorange public="1" get="inline" set="null" expr="cast &quot;#FF8C00&quot;" line="34" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF8C00"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Darkorange>
		<DarkOrchid public="1" get="inline" set="null" expr="cast &quot;#9932CC&quot;" line="35" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#9932CC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkOrchid>
		<DarkRed public="1" get="inline" set="null" expr="cast &quot;#8B0000&quot;" line="36" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#8B0000"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkRed>
		<DarkSalmon public="1" get="inline" set="null" expr="cast &quot;#E9967A&quot;" line="37" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#E9967A"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSalmon>
		<DarkSeaGreen public="1" get="inline" set="null" expr="cast &quot;#8FBC8F&quot;" line="38" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#8FBC8F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSeaGreen>
		<DarkSlateBlue public="1" get="inline" set="null" expr="cast &quot;#483D8B&quot;" line="39" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#483D8B"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSlateBlue>
		<DarkSlateGray public="1" get="inline" set="null" expr="cast &quot;#2F4F4F&quot;" line="40" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#2F4F4F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSlateGray>
		<DarkSlateGrey public="1" get="inline" set="null" expr="cast &quot;#2F4F4F&quot;" line="41" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#2F4F4F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkSlateGrey>
		<DarkTurquoise public="1" get="inline" set="null" expr="cast &quot;#00CED1&quot;" line="42" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00CED1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkTurquoise>
		<DarkViolet public="1" get="inline" set="null" expr="cast &quot;#9400D3&quot;" line="43" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#9400D3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkViolet>
		<DeepPink public="1" get="inline" set="null" expr="cast &quot;#FF1493&quot;" line="44" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF1493"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeepPink>
		<DeepSkyBlue public="1" get="inline" set="null" expr="cast &quot;#00BFFF&quot;" line="45" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00BFFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeepSkyBlue>
		<DimGray public="1" get="inline" set="null" expr="cast &quot;#696969&quot;" line="46" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#696969"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DimGray>
		<DimGrey public="1" get="inline" set="null" expr="cast &quot;#696969&quot;" line="47" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#696969"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DimGrey>
		<DodgerBlue public="1" get="inline" set="null" expr="cast &quot;#1E90FF&quot;" line="48" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#1E90FF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DodgerBlue>
		<FireBrick public="1" get="inline" set="null" expr="cast &quot;#B22222&quot;" line="49" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#B22222"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FireBrick>
		<FloralWhite public="1" get="inline" set="null" expr="cast &quot;#FFFAF0&quot;" line="50" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFAF0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FloralWhite>
		<ForestGreen public="1" get="inline" set="null" expr="cast &quot;#228B22&quot;" line="51" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#228B22"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ForestGreen>
		<Fuchsia public="1" get="inline" set="null" expr="cast &quot;#FF00FF&quot;" line="52" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF00FF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Fuchsia>
		<Gainsboro public="1" get="inline" set="null" expr="cast &quot;#DCDCDC&quot;" line="53" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DCDCDC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gainsboro>
		<GhostWhite public="1" get="inline" set="null" expr="cast &quot;#F8F8FF&quot;" line="54" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F8F8FF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GhostWhite>
		<Gold public="1" get="inline" set="null" expr="cast &quot;#FFD700&quot;" line="55" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFD700"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gold>
		<GoldenRod public="1" get="inline" set="null" expr="cast &quot;#DAA520&quot;" line="56" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DAA520"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GoldenRod>
		<Gray public="1" get="inline" set="null" expr="cast &quot;#808080&quot;" line="57" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#808080"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gray>
		<Grey public="1" get="inline" set="null" expr="cast &quot;#808080&quot;" line="58" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#808080"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Grey>
		<Green public="1" get="inline" set="null" expr="cast &quot;#008000&quot;" line="59" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#008000"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Green>
		<GreenYellow public="1" get="inline" set="null" expr="cast &quot;#ADFF2F&quot;" line="60" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#ADFF2F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GreenYellow>
		<HoneyDew public="1" get="inline" set="null" expr="cast &quot;#F0FFF0&quot;" line="61" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F0FFF0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HoneyDew>
		<HotPink public="1" get="inline" set="null" expr="cast &quot;#FF69B4&quot;" line="62" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF69B4"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HotPink>
		<IndianRed public="1" get="inline" set="null" expr="cast &quot;#CD5C5C&quot;" line="63" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#CD5C5C"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IndianRed>
		<Indigo public="1" get="inline" set="null" expr="cast &quot;#4B0082&quot;" line="64" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#4B0082"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Indigo>
		<Ivory public="1" get="inline" set="null" expr="cast &quot;#FFFFF0&quot;" line="65" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFFF0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Ivory>
		<Khaki public="1" get="inline" set="null" expr="cast &quot;#F0E68C&quot;" line="66" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F0E68C"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Khaki>
		<Lavender public="1" get="inline" set="null" expr="cast &quot;#E6E6FA&quot;" line="67" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#E6E6FA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lavender>
		<LavenderBlush public="1" get="inline" set="null" expr="cast &quot;#FFF0F5&quot;" line="68" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFF0F5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LavenderBlush>
		<LawnGreen public="1" get="inline" set="null" expr="cast &quot;#7CFC00&quot;" line="69" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#7CFC00"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LawnGreen>
		<LemonChiffon public="1" get="inline" set="null" expr="cast &quot;#FFFACD&quot;" line="70" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFACD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LemonChiffon>
		<LightBlue public="1" get="inline" set="null" expr="cast &quot;#ADD8E6&quot;" line="71" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#ADD8E6"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightBlue>
		<LightCoral public="1" get="inline" set="null" expr="cast &quot;#F08080&quot;" line="72" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F08080"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightCoral>
		<LightCyan public="1" get="inline" set="null" expr="cast &quot;#E0FFFF&quot;" line="73" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#E0FFFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightCyan>
		<LightGoldenRodYellow public="1" get="inline" set="null" expr="cast &quot;#FAFAD2&quot;" line="74" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FAFAD2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGoldenRodYellow>
		<LightGray public="1" get="inline" set="null" expr="cast &quot;#D3D3D3&quot;" line="75" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#D3D3D3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGray>
		<LightGrey public="1" get="inline" set="null" expr="cast &quot;#D3D3D3&quot;" line="76" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#D3D3D3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGrey>
		<LightGreen public="1" get="inline" set="null" expr="cast &quot;#90EE90&quot;" line="77" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#90EE90"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGreen>
		<LightPink public="1" get="inline" set="null" expr="cast &quot;#FFB6C1&quot;" line="78" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFB6C1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightPink>
		<LightSalmon public="1" get="inline" set="null" expr="cast &quot;#FFA07A&quot;" line="79" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFA07A"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSalmon>
		<LightSeaGreen public="1" get="inline" set="null" expr="cast &quot;#20B2AA&quot;" line="80" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#20B2AA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSeaGreen>
		<LightSkyBlue public="1" get="inline" set="null" expr="cast &quot;#87CEFA&quot;" line="81" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#87CEFA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSkyBlue>
		<LightSlateGray public="1" get="inline" set="null" expr="cast &quot;#778899&quot;" line="82" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#778899"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSlateGray>
		<LightSlateGrey public="1" get="inline" set="null" expr="cast &quot;#778899&quot;" line="83" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#778899"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSlateGrey>
		<LightSteelBlue public="1" get="inline" set="null" expr="cast &quot;#B0C4DE&quot;" line="84" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#B0C4DE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightSteelBlue>
		<LightYellow public="1" get="inline" set="null" expr="cast &quot;#FFFFE0&quot;" line="85" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFFE0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightYellow>
		<Lime public="1" get="inline" set="null" expr="cast &quot;#00FF00&quot;" line="86" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00FF00"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lime>
		<LimeGreen public="1" get="inline" set="null" expr="cast &quot;#32CD32&quot;" line="87" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#32CD32"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LimeGreen>
		<Linen public="1" get="inline" set="null" expr="cast &quot;#FAF0E6&quot;" line="88" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FAF0E6"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Linen>
		<Magenta public="1" get="inline" set="null" expr="cast &quot;#FF00FF&quot;" line="89" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF00FF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Magenta>
		<Maroon public="1" get="inline" set="null" expr="cast &quot;#800000&quot;" line="90" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#800000"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Maroon>
		<MediumAquaMarine public="1" get="inline" set="null" expr="cast &quot;#66CDAA&quot;" line="91" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#66CDAA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumAquaMarine>
		<MediumBlue public="1" get="inline" set="null" expr="cast &quot;#0000CD&quot;" line="92" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#0000CD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumBlue>
		<MediumOrchid public="1" get="inline" set="null" expr="cast &quot;#BA55D3&quot;" line="93" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#BA55D3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumOrchid>
		<MediumPurple public="1" get="inline" set="null" expr="cast &quot;#9370DB&quot;" line="94" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#9370DB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumPurple>
		<MediumSeaGreen public="1" get="inline" set="null" expr="cast &quot;#3CB371&quot;" line="95" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#3CB371"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumSeaGreen>
		<MediumSlateBlue public="1" get="inline" set="null" expr="cast &quot;#7B68EE&quot;" line="96" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#7B68EE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumSlateBlue>
		<MediumSpringGreen public="1" get="inline" set="null" expr="cast &quot;#00FA9A&quot;" line="97" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00FA9A"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumSpringGreen>
		<MediumTurquoise public="1" get="inline" set="null" expr="cast &quot;#48D1CC&quot;" line="98" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#48D1CC"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumTurquoise>
		<MediumVioletRed public="1" get="inline" set="null" expr="cast &quot;#C71585&quot;" line="99" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#C71585"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumVioletRed>
		<MidnightBlue public="1" get="inline" set="null" expr="cast &quot;#191970&quot;" line="100" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#191970"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MidnightBlue>
		<MintCream public="1" get="inline" set="null" expr="cast &quot;#F5FFFA&quot;" line="101" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F5FFFA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MintCream>
		<MistyRose public="1" get="inline" set="null" expr="cast &quot;#FFE4E1&quot;" line="102" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFE4E1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MistyRose>
		<Moccasin public="1" get="inline" set="null" expr="cast &quot;#FFE4B5&quot;" line="103" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFE4B5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Moccasin>
		<NavajoWhite public="1" get="inline" set="null" expr="cast &quot;#FFDEAD&quot;" line="104" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFDEAD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NavajoWhite>
		<Navy public="1" get="inline" set="null" expr="cast &quot;#000080&quot;" line="105" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#000080"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Navy>
		<OldLace public="1" get="inline" set="null" expr="cast &quot;#FDF5E6&quot;" line="106" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FDF5E6"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OldLace>
		<Olive public="1" get="inline" set="null" expr="cast &quot;#808000&quot;" line="107" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#808000"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Olive>
		<OliveDrab public="1" get="inline" set="null" expr="cast &quot;#6B8E23&quot;" line="108" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#6B8E23"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OliveDrab>
		<Orange public="1" get="inline" set="null" expr="cast &quot;#FFA500&quot;" line="109" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFA500"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Orange>
		<OrangeRed public="1" get="inline" set="null" expr="cast &quot;#FF4500&quot;" line="110" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF4500"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OrangeRed>
		<Orchid public="1" get="inline" set="null" expr="cast &quot;#DA70D6&quot;" line="111" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DA70D6"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Orchid>
		<PaleGoldenRod public="1" get="inline" set="null" expr="cast &quot;#EEE8AA&quot;" line="112" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#EEE8AA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleGoldenRod>
		<PaleGreen public="1" get="inline" set="null" expr="cast &quot;#98FB98&quot;" line="113" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#98FB98"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleGreen>
		<PaleTurquoise public="1" get="inline" set="null" expr="cast &quot;#AFEEEE&quot;" line="114" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#AFEEEE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleTurquoise>
		<PaleVioletRed public="1" get="inline" set="null" expr="cast &quot;#DB7093&quot;" line="115" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DB7093"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleVioletRed>
		<PapayaWhip public="1" get="inline" set="null" expr="cast &quot;#FFEFD5&quot;" line="116" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFEFD5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PapayaWhip>
		<PeachPuff public="1" get="inline" set="null" expr="cast &quot;#FFDAB9&quot;" line="117" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFDAB9"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PeachPuff>
		<Peru public="1" get="inline" set="null" expr="cast &quot;#CD853F&quot;" line="118" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#CD853F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Peru>
		<Pink public="1" get="inline" set="null" expr="cast &quot;#FFC0CB&quot;" line="119" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFC0CB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Pink>
		<Plum public="1" get="inline" set="null" expr="cast &quot;#DDA0DD&quot;" line="120" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#DDA0DD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Plum>
		<PowderBlue public="1" get="inline" set="null" expr="cast &quot;#B0E0E6&quot;" line="121" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#B0E0E6"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PowderBlue>
		<Purple public="1" get="inline" set="null" expr="cast &quot;#800080&quot;" line="122" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#800080"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Purple>
		<Red public="1" get="inline" set="null" expr="cast &quot;#FF0000&quot;" line="123" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF0000"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Red>
		<RosyBrown public="1" get="inline" set="null" expr="cast &quot;#BC8F8F&quot;" line="124" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#BC8F8F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RosyBrown>
		<RoyalBlue public="1" get="inline" set="null" expr="cast &quot;#4169E1&quot;" line="125" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#4169E1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RoyalBlue>
		<SaddleBrown public="1" get="inline" set="null" expr="cast &quot;#8B4513&quot;" line="126" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#8B4513"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SaddleBrown>
		<Salmon public="1" get="inline" set="null" expr="cast &quot;#FA8072&quot;" line="127" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FA8072"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Salmon>
		<SandyBrown public="1" get="inline" set="null" expr="cast &quot;#F4A460&quot;" line="128" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F4A460"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SandyBrown>
		<SeaGreen public="1" get="inline" set="null" expr="cast &quot;#2E8B57&quot;" line="129" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#2E8B57"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeaGreen>
		<SeaShell public="1" get="inline" set="null" expr="cast &quot;#FFF5EE&quot;" line="130" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFF5EE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeaShell>
		<Sienna public="1" get="inline" set="null" expr="cast &quot;#A0522D&quot;" line="131" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#A0522D"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Sienna>
		<Silver public="1" get="inline" set="null" expr="cast &quot;#C0C0C0&quot;" line="132" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#C0C0C0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Silver>
		<SkyBlue public="1" get="inline" set="null" expr="cast &quot;#87CEEB&quot;" line="133" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#87CEEB"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SkyBlue>
		<SlateBlue public="1" get="inline" set="null" expr="cast &quot;#6A5ACD&quot;" line="134" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#6A5ACD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SlateBlue>
		<SlateGray public="1" get="inline" set="null" expr="cast &quot;#708090&quot;" line="135" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#708090"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SlateGray>
		<SlateGrey public="1" get="inline" set="null" expr="cast &quot;#708090&quot;" line="136" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#708090"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SlateGrey>
		<Snow public="1" get="inline" set="null" expr="cast &quot;#FFFAFA&quot;" line="137" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFAFA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Snow>
		<SpringGreen public="1" get="inline" set="null" expr="cast &quot;#00FF7F&quot;" line="138" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#00FF7F"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SpringGreen>
		<SteelBlue public="1" get="inline" set="null" expr="cast &quot;#4682B4&quot;" line="139" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#4682B4"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SteelBlue>
		<Tan public="1" get="inline" set="null" expr="cast &quot;#D2B48C&quot;" line="140" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#D2B48C"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tan>
		<Teal public="1" get="inline" set="null" expr="cast &quot;#008080&quot;" line="141" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#008080"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Teal>
		<Thistle public="1" get="inline" set="null" expr="cast &quot;#D8BFD8&quot;" line="142" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#D8BFD8"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Thistle>
		<Tomato public="1" get="inline" set="null" expr="cast &quot;#FF6347&quot;" line="143" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FF6347"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tomato>
		<Turquoise public="1" get="inline" set="null" expr="cast &quot;#40E0D0&quot;" line="144" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#40E0D0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Turquoise>
		<Violet public="1" get="inline" set="null" expr="cast &quot;#EE82EE&quot;" line="145" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#EE82EE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Violet>
		<Wheat public="1" get="inline" set="null" expr="cast &quot;#F5DEB3&quot;" line="146" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F5DEB3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Wheat>
		<White public="1" get="inline" set="null" expr="cast &quot;#FFFFFF&quot;" line="147" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFFFF"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</White>
		<WhiteSmoke public="1" get="inline" set="null" expr="cast &quot;#F5F5F5&quot;" line="148" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#F5F5F5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WhiteSmoke>
		<Yellow public="1" get="inline" set="null" expr="cast &quot;#FFFF00&quot;" line="149" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#FFFF00"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Yellow>
		<YellowGreen public="1" get="inline" set="null" expr="cast &quot;#9ACD32&quot;" line="150" static="1">
			<x path="justGraphix.pallette.browser.StrColours"/>
			<meta>
				<m n=":value"><e>cast "#9ACD32"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</YellowGreen>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.browser.BrowserColours" params="" file="src/justGraphix/pallette/browser/BrowserColours.hx"><rgb public="1" get="inline" set="null" line="155" static="1"><f a="color">
	<x path="justGraphix.pallette.browser.StrColours"/>
	<c path="Array"><x path="Int"/></c>
</f></rgb></class>
	<abstract path="justGraphix.pallette.metal.Bronzes" params="" file="src/justGraphix/pallette/metal/Bronze.hx" module="justGraphix.pallette.metal.Bronze">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.metal._Bronze.Bronzes_Impl_" params="" file="src/justGraphix/pallette/metal/Bronze.hx" private="1" module="justGraphix.pallette.metal.Bronze" extern="1" final="1">
	<bronzeGold public="1" get="inline" set="null" expr="cast 0xffC9AE5D" line="4" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xffC9AE5D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</bronzeGold>
	<bronze public="1" get="inline" set="null" expr="cast 0xffCD7F32" line="5" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xffCD7F32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</bronze>
	<blastOffBronze public="1" get="inline" set="null" expr="cast 0xffA57164" line="6" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xffA57164</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blastOffBronze>
	<deepBronze public="1" get="inline" set="null" expr="cast 0xff8C7853" line="7" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xff8C7853</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</deepBronze>
	<mediumBronze public="1" get="inline" set="null" expr="cast 0xff6C541E" line="8" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xff6C541E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mediumBronze>
	<antiqueBronze public="1" get="inline" set="null" expr="cast 0xff665D1E" line="9" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xff665D1E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</antiqueBronze>
	<darkBronze public="1" get="inline" set="null" expr="cast 0xff52503C" line="10" static="1">
		<x path="justGraphix.pallette.metal.Bronzes"/>
		<meta>
			<m n=":value"><e>cast 0xff52503C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkBronze>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.metal._Bronze.Bronzes_Impl_" params="" file="src/justGraphix/pallette/metal/Bronze.hx" private="1" module="justGraphix.pallette.metal.Bronze" extern="1" final="1">
		<bronzeGold public="1" get="inline" set="null" expr="cast 0xffC9AE5D" line="4" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xffC9AE5D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</bronzeGold>
		<bronze public="1" get="inline" set="null" expr="cast 0xffCD7F32" line="5" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xffCD7F32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</bronze>
		<blastOffBronze public="1" get="inline" set="null" expr="cast 0xffA57164" line="6" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xffA57164</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blastOffBronze>
		<deepBronze public="1" get="inline" set="null" expr="cast 0xff8C7853" line="7" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xff8C7853</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</deepBronze>
		<mediumBronze public="1" get="inline" set="null" expr="cast 0xff6C541E" line="8" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xff6C541E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mediumBronze>
		<antiqueBronze public="1" get="inline" set="null" expr="cast 0xff665D1E" line="9" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xff665D1E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</antiqueBronze>
		<darkBronze public="1" get="inline" set="null" expr="cast 0xff52503C" line="10" static="1">
			<x path="justGraphix.pallette.metal.Bronzes"/>
			<meta>
				<m n=":value"><e>cast 0xff52503C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkBronze>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.metal.Bronze" params="" file="src/justGraphix/pallette/metal/Bronze.hx">
		<getColors public="1" get="inline" set="null" line="17" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.metal.Bronzes"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="27" static="1"><f a=""><x path="justGraphix.pallette.metal.Bronzes"/></f></random>
		<getName public="1" get="inline" set="null" line="33" static="1"><f a="b">
	<x path="justGraphix.pallette.metal.Bronzes"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![bronze](../../bootstrap/img/bronze.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.metal.Coppers" params="" file="src/justGraphix/pallette/metal/Copper.hx" module="justGraphix.pallette.metal.Copper">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.metal._Copper.Coppers_Impl_" params="" file="src/justGraphix/pallette/metal/Copper.hx" private="1" module="justGraphix.pallette.metal.Copper" extern="1" final="1">
	<copperGreen public="1" get="inline" set="null" expr="cast 0xff679267" line="4" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff679267</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperGreen>
	<patina public="1" get="inline" set="null" expr="cast 0xff639A8F" line="5" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff639A8F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</patina>
	<verdigris public="1" get="inline" set="null" expr="cast 0xff43B3AE" line="6" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff43B3AE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</verdigris>
	<patinaLight public="1" get="inline" set="null" expr="cast 0xffAFD0CA" line="7" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffAFD0CA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</patinaLight>
	<copperYellow public="1" get="inline" set="null" expr="cast 0xffC9AE5D" line="8" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffC9AE5D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperYellow>
	<copperCream public="1" get="inline" set="null" expr="cast 0xffECD5C5" line="9" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffECD5C5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperCream>
	<copperOrange public="1" get="inline" set="null" expr="cast 0xffD99058" line="10" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffD99058</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperOrange>
	<paleCopper public="1" get="inline" set="null" expr="cast 0xffDA8A67" line="11" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffDA8A67</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleCopper>
	<copperRustLight public="1" get="inline" set="null" expr="cast 0xffCD9999" line="12" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffCD9999</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperRustLight>
	<copperRed public="1" get="inline" set="null" expr="cast 0xffCB6D51" line="13" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffCB6D51</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperRed>
	<kenyanCopperLight public="1" get="inline" set="null" expr="cast 0xffBF6935" line="14" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffBF6935</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</kenyanCopperLight>
	<copperCanyonLight public="1" get="inline" set="null" expr="cast 0xffC08D5E" line="15" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffC08D5E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperCanyonLight>
	<brilliantCopper public="1" get="inline" set="null" expr="cast 0xffB87B6B" line="16" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffB87B6B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brilliantCopper>
	<copper public="1" get="inline" set="null" expr="cast 0xffB87333" line="17" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffB87333</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copper>
	<copperBronze public="1" get="inline" set="null" expr="cast 0xffAE6938" line="18" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffAE6938</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperBronze>
	<copperPenny public="1" get="inline" set="null" expr="cast 0xffAD6F69" line="19" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffAD6F69</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperPenny>
	<copperTan public="1" get="inline" set="null" expr="cast 0xffA87C6D" line="20" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xffA87C6D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperTan>
	<copperRose public="1" get="inline" set="null" expr="cast 0xff956666" line="21" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff956666</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperRose>
	<copperRust public="1" get="inline" set="null" expr="cast 0xff944747" line="22" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff944747</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperRust>
	<cauldron public="1" get="inline" set="null" expr="cast 0xff882D17" line="23" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff882D17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cauldron>
	<copperLustre public="1" get="inline" set="null" expr="cast 0xff80461B" line="24" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff80461B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperLustre>
	<copperCanyon public="1" get="inline" set="null" expr="cast 0xff7E3A15" line="25" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff7E3A15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperCanyon>
	<kenyanCopper public="1" get="inline" set="null" expr="cast 0xff7C1C05" line="26" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff7C1C05</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</kenyanCopper>
	<copperLeaf public="1" get="inline" set="null" expr="cast 0xff79443B" line="27" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff79443B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperLeaf>
	<darkCopper public="1" get="inline" set="null" expr="cast 0xff71291D" line="28" static="1">
		<x path="justGraphix.pallette.metal.Coppers"/>
		<meta>
			<m n=":value"><e>cast 0xff71291D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkCopper>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.metal._Copper.Coppers_Impl_" params="" file="src/justGraphix/pallette/metal/Copper.hx" private="1" module="justGraphix.pallette.metal.Copper" extern="1" final="1">
		<copperGreen public="1" get="inline" set="null" expr="cast 0xff679267" line="4" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff679267</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperGreen>
		<patina public="1" get="inline" set="null" expr="cast 0xff639A8F" line="5" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff639A8F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</patina>
		<verdigris public="1" get="inline" set="null" expr="cast 0xff43B3AE" line="6" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff43B3AE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</verdigris>
		<patinaLight public="1" get="inline" set="null" expr="cast 0xffAFD0CA" line="7" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffAFD0CA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</patinaLight>
		<copperYellow public="1" get="inline" set="null" expr="cast 0xffC9AE5D" line="8" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffC9AE5D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperYellow>
		<copperCream public="1" get="inline" set="null" expr="cast 0xffECD5C5" line="9" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffECD5C5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperCream>
		<copperOrange public="1" get="inline" set="null" expr="cast 0xffD99058" line="10" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffD99058</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperOrange>
		<paleCopper public="1" get="inline" set="null" expr="cast 0xffDA8A67" line="11" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffDA8A67</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleCopper>
		<copperRustLight public="1" get="inline" set="null" expr="cast 0xffCD9999" line="12" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffCD9999</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperRustLight>
		<copperRed public="1" get="inline" set="null" expr="cast 0xffCB6D51" line="13" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffCB6D51</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperRed>
		<kenyanCopperLight public="1" get="inline" set="null" expr="cast 0xffBF6935" line="14" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffBF6935</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</kenyanCopperLight>
		<copperCanyonLight public="1" get="inline" set="null" expr="cast 0xffC08D5E" line="15" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffC08D5E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperCanyonLight>
		<brilliantCopper public="1" get="inline" set="null" expr="cast 0xffB87B6B" line="16" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffB87B6B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brilliantCopper>
		<copper public="1" get="inline" set="null" expr="cast 0xffB87333" line="17" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffB87333</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copper>
		<copperBronze public="1" get="inline" set="null" expr="cast 0xffAE6938" line="18" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffAE6938</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperBronze>
		<copperPenny public="1" get="inline" set="null" expr="cast 0xffAD6F69" line="19" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffAD6F69</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperPenny>
		<copperTan public="1" get="inline" set="null" expr="cast 0xffA87C6D" line="20" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xffA87C6D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperTan>
		<copperRose public="1" get="inline" set="null" expr="cast 0xff956666" line="21" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff956666</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperRose>
		<copperRust public="1" get="inline" set="null" expr="cast 0xff944747" line="22" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff944747</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperRust>
		<cauldron public="1" get="inline" set="null" expr="cast 0xff882D17" line="23" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff882D17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cauldron>
		<copperLustre public="1" get="inline" set="null" expr="cast 0xff80461B" line="24" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff80461B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperLustre>
		<copperCanyon public="1" get="inline" set="null" expr="cast 0xff7E3A15" line="25" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff7E3A15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperCanyon>
		<kenyanCopper public="1" get="inline" set="null" expr="cast 0xff7C1C05" line="26" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff7C1C05</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</kenyanCopper>
		<copperLeaf public="1" get="inline" set="null" expr="cast 0xff79443B" line="27" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff79443B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperLeaf>
		<darkCopper public="1" get="inline" set="null" expr="cast 0xff71291D" line="28" static="1">
			<x path="justGraphix.pallette.metal.Coppers"/>
			<meta>
				<m n=":value"><e>cast 0xff71291D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkCopper>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.metal.Copper" params="" file="src/justGraphix/pallette/metal/Copper.hx">
		<getColors public="1" get="inline" set="null" line="36" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.metal.Coppers"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="66" static="1"><f a=""><x path="justGraphix.pallette.metal.Coppers"/></f></random>
		<getName public="1" get="inline" set="null" line="72" static="1"><f a="b">
	<x path="justGraphix.pallette.metal.Coppers"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![Copper](../../bootstrap/img/coppers.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.metal.Golds" params="" file="src/justGraphix/pallette/metal/Gold.hx" module="justGraphix.pallette.metal.Gold">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.metal._Gold.Golds_Impl_" params="" file="src/justGraphix/pallette/metal/Gold.hx" private="1" module="justGraphix.pallette.metal.Gold" extern="1" final="1">
	<rolex public="1" get="inline" set="null" expr="cast 0xffA37E2C" line="5" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffA37E2C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rolex>
	<periniNavi public="1" get="inline" set="null" expr="cast 0xffD5A848" line="6" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffD5A848</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</periniNavi>
	<crownRoyal public="1" get="inline" set="null" expr="cast 0xffE4B77D" line="7" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffE4B77D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</crownRoyal>
	<metallic public="1" get="inline" set="null" expr="cast 0xffD4AF37" line="8" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffD4AF37</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</metallic>
	<goldenYellow public="1" get="inline" set="null" expr="cast 0xffFFDF00" line="9" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFDF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenYellow>
	<poppy public="1" get="inline" set="null" expr="cast 0xffFCC200" line="10" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFCC200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</poppy>
	<sunglow public="1" get="inline" set="null" expr="cast 0xffFFC627" line="11" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFC627</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sunglow>
	<superNova public="1" get="inline" set="null" expr="cast 0xffFFCC00" line="12" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFCC00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</superNova>
	<vividOrange public="1" get="inline" set="null" expr="cast 0xffFD8515" line="13" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFD8515</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</vividOrange>
	<pomona public="1" get="inline" set="null" expr="cast 0xffC6930A" line="14" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffC6930A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pomona>
	<tangerineYellow public="1" get="inline" set="null" expr="cast 0xffFFd100" line="15" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFd100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tangerineYellow>
	<saffron public="1" get="inline" set="null" expr="cast 0xffF1B82D" line="16" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffF1B82D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</saffron>
	<newOrleans public="1" get="inline" set="null" expr="cast 0xffE6BE8A" line="17" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffE6BE8A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</newOrleans>
	<goldenDream public="1" get="inline" set="null" expr="cast 0xffFFCC33" line="18" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFCC33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenDream>
	<harvestEveGold public="1" get="inline" set="null" expr="cast 0xffDA9100" line="19" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffDA9100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</harvestEveGold>
	<chanterelle public="1" get="inline" set="null" expr="cast 0xffDAA520" line="20" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffDAA520</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chanterelle>
	<vegasGold public="1" get="inline" set="null" expr="cast 0xffC5B358" line="21" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffC5B358</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</vegasGold>
	<satinSheenGold public="1" get="inline" set="null" expr="cast 0xffCBA135" line="22" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xffCBA135</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</satinSheenGold>
	<cobre public="1" get="inline" set="null" expr="cast 0xff996515" line="23" static="1">
		<x path="justGraphix.pallette.metal.Golds"/>
		<meta>
			<m n=":value"><e>cast 0xff996515</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cobre>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.metal._Gold.Golds_Impl_" params="" file="src/justGraphix/pallette/metal/Gold.hx" private="1" module="justGraphix.pallette.metal.Gold" extern="1" final="1">
		<rolex public="1" get="inline" set="null" expr="cast 0xffA37E2C" line="5" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffA37E2C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rolex>
		<periniNavi public="1" get="inline" set="null" expr="cast 0xffD5A848" line="6" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffD5A848</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</periniNavi>
		<crownRoyal public="1" get="inline" set="null" expr="cast 0xffE4B77D" line="7" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffE4B77D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</crownRoyal>
		<metallic public="1" get="inline" set="null" expr="cast 0xffD4AF37" line="8" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffD4AF37</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</metallic>
		<goldenYellow public="1" get="inline" set="null" expr="cast 0xffFFDF00" line="9" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFDF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenYellow>
		<poppy public="1" get="inline" set="null" expr="cast 0xffFCC200" line="10" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFCC200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</poppy>
		<sunglow public="1" get="inline" set="null" expr="cast 0xffFFC627" line="11" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFC627</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sunglow>
		<superNova public="1" get="inline" set="null" expr="cast 0xffFFCC00" line="12" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFCC00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</superNova>
		<vividOrange public="1" get="inline" set="null" expr="cast 0xffFD8515" line="13" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFD8515</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</vividOrange>
		<pomona public="1" get="inline" set="null" expr="cast 0xffC6930A" line="14" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffC6930A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pomona>
		<tangerineYellow public="1" get="inline" set="null" expr="cast 0xffFFd100" line="15" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFd100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tangerineYellow>
		<saffron public="1" get="inline" set="null" expr="cast 0xffF1B82D" line="16" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffF1B82D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</saffron>
		<newOrleans public="1" get="inline" set="null" expr="cast 0xffE6BE8A" line="17" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffE6BE8A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</newOrleans>
		<goldenDream public="1" get="inline" set="null" expr="cast 0xffFFCC33" line="18" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFCC33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenDream>
		<harvestEveGold public="1" get="inline" set="null" expr="cast 0xffDA9100" line="19" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffDA9100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</harvestEveGold>
		<chanterelle public="1" get="inline" set="null" expr="cast 0xffDAA520" line="20" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffDAA520</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chanterelle>
		<vegasGold public="1" get="inline" set="null" expr="cast 0xffC5B358" line="21" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffC5B358</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</vegasGold>
		<satinSheenGold public="1" get="inline" set="null" expr="cast 0xffCBA135" line="22" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xffCBA135</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</satinSheenGold>
		<cobre public="1" get="inline" set="null" expr="cast 0xff996515" line="23" static="1">
			<x path="justGraphix.pallette.metal.Golds"/>
			<meta>
				<m n=":value"><e>cast 0xff996515</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cobre>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.metal.Gold" params="" file="src/justGraphix/pallette/metal/Gold.hx">
		<gradient0 public="1" get="inline" set="null" line="29" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></gradient0>
		<gradient1 public="1" get="inline" set="null" line="32" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></gradient1>
		<gradient2 public="1" get="inline" set="null" line="35" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></gradient2>
		<getColors public="1" get="inline" set="null" line="39" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.metal.Golds"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="61" static="1"><f a=""><x path="justGraphix.pallette.metal.Golds"/></f></random>
		<getName public="1" get="inline" set="null" line="68" static="1"><f a="g">
	<x path="justGraphix.pallette.metal.Golds"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![Gold](../../bootstrap/img/gold.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.metal.AllGolds" params="" file="src/justGraphix/pallette/metal/Gold.hx" module="justGraphix.pallette.metal.Gold">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.metal._Gold.AllGolds_Impl_" params="" file="src/justGraphix/pallette/metal/Gold.hx" private="1" module="justGraphix.pallette.metal.Gold" extern="1" final="1">
	<old_Lace public="1" get="inline" set="null" expr="cast 0xffFDF5E6" line="95" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFDF5E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</old_Lace>
	<linen public="1" get="inline" set="null" expr="cast 0xffFAF0E6" line="96" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFAF0E6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</linen>
	<cornsilk public="1" get="inline" set="null" expr="cast 0xffFFF8DC" line="97" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFF8DC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cornsilk>
	<beige public="1" get="inline" set="null" expr="cast 0xffF5F5DC" line="98" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffF5F5DC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</beige>
	<lemonChiffon public="1" get="inline" set="null" expr="cast 0xffFFFACD" line="100" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFFACD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lemonChiffon>
	<blond public="1" get="inline" set="null" expr="cast 0xffFAF0BE" line="101" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFAF0BE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blond>
	<paleGoldenrod public="1" get="inline" set="null" expr="cast 0xffEEE8AA" line="102" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffEEE8AA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleGoldenrod>
	<wheat public="1" get="inline" set="null" expr="cast 0xffF5DEB3" line="103" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffF5DEB3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</wheat>
	<lightCandlelight public="1" get="inline" set="null" expr="cast 0xffFEEF61" line="104" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFEEF61</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightCandlelight>
	<maize public="1" get="inline" set="null" expr="cast 0xffFBEC5D" line="105" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFBEC5D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</maize>
	<lemonPeel public="1" get="inline" set="null" expr="cast 0xFDE910" line="106" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xFDE910</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lemonPeel>
	<jasmine public="1" get="inline" set="null" expr="cast 0xffF8DE7E" line="107" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffF8DE7E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</jasmine>
	<jonquil public="1" get="inline" set="null" expr="cast 0xffFADA5E" line="108" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFADA5E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</jonquil>
	<dandelion public="1" get="inline" set="null" expr="cast 0xffFED85D" line="109" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFED85D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dandelion>
	<mustard public="1" get="inline" set="null" expr="cast 0xffFFDB58" line="110" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFDB58</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mustard>
	<mediumGoldenrod public="1" get="inline" set="null" expr="cast 0xffFCD667" line="111" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFCD667</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mediumGoldenrod>
	<candlelight public="1" get="inline" set="null" expr="cast 0xffFCD917" line="112" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFCD917</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</candlelight>
	<goldenYellow public="1" get="inline" set="null" expr="cast 0xffFFDF00" line="113" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFDF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenYellow>
	<schoolBusYellow public="1" get="inline" set="null" expr="cast 0xffFFD800" line="114" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFD800</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</schoolBusYellow>
	<golden public="1" get="inline" set="null" expr="cast 0xffFFD700" line="115" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFD700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</golden>
	<lightCaliforniaGold public="1" get="inline" set="null" expr="cast 0xffFFD230" line="116" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFD230</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightCaliforniaGold>
	<sunglow public="1" get="inline" set="null" expr="cast 0xffFFCC33" line="117" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFCC33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sunglow>
	<tangerineYellow public="1" get="inline" set="null" expr="cast 0xffFFCC00" line="118" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFCC00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tangerineYellow>
	<saffron public="1" get="inline" set="null" expr="cast 0xffF4C430" line="119" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffF4C430</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</saffron>
	<goldenPoppy public="1" get="inline" set="null" expr="cast 0xffFCC200" line="120" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFCC200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenPoppy>
	<selectiveYellow public="1" get="inline" set="null" expr="cast 0xffFFBA00" line="122" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFBA00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</selectiveYellow>
	<missouriGold public="1" get="inline" set="null" expr="cast 0xffF1B82D" line="123" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffF1B82D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</missouriGold>
	<macaroniAndCheese public="1" get="inline" set="null" expr="cast 0xffFFB79B" line="124" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFFB79B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</macaroniAndCheese>
	<sandyBrown public="1" get="inline" set="null" expr="cast 0xffF4A460" line="125" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffF4A460</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sandyBrown>
	<desertSand public="1" get="inline" set="null" expr="cast 0xffEDC9AF" line="126" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffEDC9AF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</desertSand>
	<paleGold public="1" get="inline" set="null" expr="cast 0xffE6BE8A" line="127" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffE6BE8A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleGold>
	<lightBuddhaGold public="1" get="inline" set="null" expr="cast 0xffE4D430" line="128" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffE4D430</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightBuddhaGold>
	<incaGold public="1" get="inline" set="null" expr="cast 0xffE3A857" line="129" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffE3A857</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</incaGold>
	<brightCaliforniaGold public="1" get="inline" set="null" expr="cast 0xffFE9D04" line="130" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffFE9D04</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brightCaliforniaGold>
	<earthYellow public="1" get="inline" set="null" expr="cast 0xffE1A95F" line="131" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffE1A95F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</earthYellow>
	<brass public="1" get="inline" set="null" expr="cast 0xffC3A368" line="132" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffC3A368</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brass>
	<aztecGold public="1" get="inline" set="null" expr="cast 0xffC39953" line="133" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffC39953</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</aztecGold>
	<californiaGold public="1" get="inline" set="null" expr="cast 0xffA98F64" line="134" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffA98F64</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</californiaGold>
	<vegasGold public="1" get="inline" set="null" expr="cast 0xffC5B356" line="135" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffC5B356</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</vegasGold>
	<oldGold public="1" get="inline" set="null" expr="cast 0xffCFB53B" line="136" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffCFB53B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</oldGold>
	<metalicGold public="1" get="inline" set="null" expr="cast 0xffD4AF37" line="137" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffD4AF37</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</metalicGold>
	<goldenrod public="1" get="inline" set="null" expr="cast 0xffDAA520" line="138" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffDAA520</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenrod>
	<satinSheenGold public="1" get="inline" set="null" expr="cast 0xffCBA135" line="139" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffCBA135</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</satinSheenGold>
	<buddhaGold public="1" get="inline" set="null" expr="cast 0xffC1A004" line="140" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffC1A004</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</buddhaGold>
	<pomonaGold public="1" get="inline" set="null" expr="cast 0xffC6930A" line="141" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffC6930A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pomonaGold>
	<califoniaGold public="1" get="inline" set="null" expr="cast 0xffB78727" line="142" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffB78727</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</califoniaGold>
	<peru public="1" get="inline" set="null" expr="cast 0xffCD853F" line="143" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffCD853F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</peru>
	<roseGold public="1" get="inline" set="null" expr="cast 0xffB76E79" line="144" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffB76E79</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</roseGold>
	<burntSienna public="1" get="inline" set="null" expr="cast 0xffE97451" line="145" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffE97451</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</burntSienna>
	<ochre public="1" get="inline" set="null" expr="cast 0xffCC7722" line="146" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffCC7722</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ochre>
	<pirateGold public="1" get="inline" set="null" expr="cast 0xffBA7827" line="147" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffBA7827</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pirateGold>
	<darkGoldenrod public="1" get="inline" set="null" expr="cast 0xffb8860B" line="148" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xffb8860B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkGoldenrod>
	<metallicSunburst public="1" get="inline" set="null" expr="cast 0xff9C7C3B" line="149" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xff9C7C3B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</metallicSunburst>
	<goldFusion public="1" get="inline" set="null" expr="cast 0xff85754E" line="150" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xff85754E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldFusion>
	<sandyTaupe public="1" get="inline" set="null" expr="cast 0xff967117" line="151" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xff967117</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sandyTaupe>
	<goldenBrown public="1" get="inline" set="null" expr="cast 0xff996515" line="152" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xff996515</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenBrown>
	<rawUmber public="1" get="inline" set="null" expr="cast 0xff734A12" line="153" static="1">
		<x path="justGraphix.pallette.metal.AllGolds"/>
		<meta>
			<m n=":value"><e>cast 0xff734A12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rawUmber>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.metal._Gold.AllGolds_Impl_" params="" file="src/justGraphix/pallette/metal/Gold.hx" private="1" module="justGraphix.pallette.metal.Gold" extern="1" final="1">
		<old_Lace public="1" get="inline" set="null" expr="cast 0xffFDF5E6" line="95" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFDF5E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</old_Lace>
		<linen public="1" get="inline" set="null" expr="cast 0xffFAF0E6" line="96" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFAF0E6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</linen>
		<cornsilk public="1" get="inline" set="null" expr="cast 0xffFFF8DC" line="97" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFF8DC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cornsilk>
		<beige public="1" get="inline" set="null" expr="cast 0xffF5F5DC" line="98" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffF5F5DC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</beige>
		<lemonChiffon public="1" get="inline" set="null" expr="cast 0xffFFFACD" line="100" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFFACD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lemonChiffon>
		<blond public="1" get="inline" set="null" expr="cast 0xffFAF0BE" line="101" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFAF0BE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blond>
		<paleGoldenrod public="1" get="inline" set="null" expr="cast 0xffEEE8AA" line="102" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffEEE8AA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleGoldenrod>
		<wheat public="1" get="inline" set="null" expr="cast 0xffF5DEB3" line="103" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffF5DEB3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</wheat>
		<lightCandlelight public="1" get="inline" set="null" expr="cast 0xffFEEF61" line="104" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFEEF61</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightCandlelight>
		<maize public="1" get="inline" set="null" expr="cast 0xffFBEC5D" line="105" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFBEC5D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</maize>
		<lemonPeel public="1" get="inline" set="null" expr="cast 0xFDE910" line="106" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xFDE910</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lemonPeel>
		<jasmine public="1" get="inline" set="null" expr="cast 0xffF8DE7E" line="107" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffF8DE7E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</jasmine>
		<jonquil public="1" get="inline" set="null" expr="cast 0xffFADA5E" line="108" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFADA5E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</jonquil>
		<dandelion public="1" get="inline" set="null" expr="cast 0xffFED85D" line="109" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFED85D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dandelion>
		<mustard public="1" get="inline" set="null" expr="cast 0xffFFDB58" line="110" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFDB58</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mustard>
		<mediumGoldenrod public="1" get="inline" set="null" expr="cast 0xffFCD667" line="111" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFCD667</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mediumGoldenrod>
		<candlelight public="1" get="inline" set="null" expr="cast 0xffFCD917" line="112" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFCD917</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</candlelight>
		<goldenYellow public="1" get="inline" set="null" expr="cast 0xffFFDF00" line="113" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFDF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenYellow>
		<schoolBusYellow public="1" get="inline" set="null" expr="cast 0xffFFD800" line="114" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFD800</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</schoolBusYellow>
		<golden public="1" get="inline" set="null" expr="cast 0xffFFD700" line="115" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFD700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</golden>
		<lightCaliforniaGold public="1" get="inline" set="null" expr="cast 0xffFFD230" line="116" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFD230</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightCaliforniaGold>
		<sunglow public="1" get="inline" set="null" expr="cast 0xffFFCC33" line="117" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFCC33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sunglow>
		<tangerineYellow public="1" get="inline" set="null" expr="cast 0xffFFCC00" line="118" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFCC00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tangerineYellow>
		<saffron public="1" get="inline" set="null" expr="cast 0xffF4C430" line="119" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffF4C430</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</saffron>
		<goldenPoppy public="1" get="inline" set="null" expr="cast 0xffFCC200" line="120" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFCC200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenPoppy>
		<selectiveYellow public="1" get="inline" set="null" expr="cast 0xffFFBA00" line="122" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFBA00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</selectiveYellow>
		<missouriGold public="1" get="inline" set="null" expr="cast 0xffF1B82D" line="123" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffF1B82D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</missouriGold>
		<macaroniAndCheese public="1" get="inline" set="null" expr="cast 0xffFFB79B" line="124" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFFB79B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</macaroniAndCheese>
		<sandyBrown public="1" get="inline" set="null" expr="cast 0xffF4A460" line="125" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffF4A460</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sandyBrown>
		<desertSand public="1" get="inline" set="null" expr="cast 0xffEDC9AF" line="126" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffEDC9AF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</desertSand>
		<paleGold public="1" get="inline" set="null" expr="cast 0xffE6BE8A" line="127" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffE6BE8A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleGold>
		<lightBuddhaGold public="1" get="inline" set="null" expr="cast 0xffE4D430" line="128" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffE4D430</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightBuddhaGold>
		<incaGold public="1" get="inline" set="null" expr="cast 0xffE3A857" line="129" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffE3A857</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</incaGold>
		<brightCaliforniaGold public="1" get="inline" set="null" expr="cast 0xffFE9D04" line="130" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffFE9D04</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brightCaliforniaGold>
		<earthYellow public="1" get="inline" set="null" expr="cast 0xffE1A95F" line="131" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffE1A95F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</earthYellow>
		<brass public="1" get="inline" set="null" expr="cast 0xffC3A368" line="132" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffC3A368</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brass>
		<aztecGold public="1" get="inline" set="null" expr="cast 0xffC39953" line="133" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffC39953</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</aztecGold>
		<californiaGold public="1" get="inline" set="null" expr="cast 0xffA98F64" line="134" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffA98F64</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</californiaGold>
		<vegasGold public="1" get="inline" set="null" expr="cast 0xffC5B356" line="135" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffC5B356</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</vegasGold>
		<oldGold public="1" get="inline" set="null" expr="cast 0xffCFB53B" line="136" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffCFB53B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</oldGold>
		<metalicGold public="1" get="inline" set="null" expr="cast 0xffD4AF37" line="137" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffD4AF37</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</metalicGold>
		<goldenrod public="1" get="inline" set="null" expr="cast 0xffDAA520" line="138" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffDAA520</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenrod>
		<satinSheenGold public="1" get="inline" set="null" expr="cast 0xffCBA135" line="139" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffCBA135</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</satinSheenGold>
		<buddhaGold public="1" get="inline" set="null" expr="cast 0xffC1A004" line="140" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffC1A004</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</buddhaGold>
		<pomonaGold public="1" get="inline" set="null" expr="cast 0xffC6930A" line="141" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffC6930A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pomonaGold>
		<califoniaGold public="1" get="inline" set="null" expr="cast 0xffB78727" line="142" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffB78727</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</califoniaGold>
		<peru public="1" get="inline" set="null" expr="cast 0xffCD853F" line="143" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffCD853F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</peru>
		<roseGold public="1" get="inline" set="null" expr="cast 0xffB76E79" line="144" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffB76E79</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</roseGold>
		<burntSienna public="1" get="inline" set="null" expr="cast 0xffE97451" line="145" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffE97451</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</burntSienna>
		<ochre public="1" get="inline" set="null" expr="cast 0xffCC7722" line="146" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffCC7722</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ochre>
		<pirateGold public="1" get="inline" set="null" expr="cast 0xffBA7827" line="147" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffBA7827</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pirateGold>
		<darkGoldenrod public="1" get="inline" set="null" expr="cast 0xffb8860B" line="148" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xffb8860B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkGoldenrod>
		<metallicSunburst public="1" get="inline" set="null" expr="cast 0xff9C7C3B" line="149" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xff9C7C3B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</metallicSunburst>
		<goldFusion public="1" get="inline" set="null" expr="cast 0xff85754E" line="150" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xff85754E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldFusion>
		<sandyTaupe public="1" get="inline" set="null" expr="cast 0xff967117" line="151" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xff967117</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sandyTaupe>
		<goldenBrown public="1" get="inline" set="null" expr="cast 0xff996515" line="152" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xff996515</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenBrown>
		<rawUmber public="1" get="inline" set="null" expr="cast 0xff734A12" line="153" static="1">
			<x path="justGraphix.pallette.metal.AllGolds"/>
			<meta>
				<m n=":value"><e>cast 0xff734A12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rawUmber>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.metal.AllGold" params="" file="src/justGraphix/pallette/metal/Gold.hx" module="justGraphix.pallette.metal.Gold">
		<getColors public="1" get="inline" set="null" line="158" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.metal.AllGolds"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="219" static="1"><f a=""><x path="justGraphix.pallette.metal.AllGolds"/></f></random>
		<getName public="1" get="inline" set="null" line="226" static="1"><f a="g">
	<x path="justGraphix.pallette.metal.AllGolds"/>
	<c path="String"/>
</f></getName>
	</class>
	<abstract path="justGraphix.pallette.metal.Silvers" params="" file="src/justGraphix/pallette/metal/Silver.hx" module="justGraphix.pallette.metal.Silver">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.metal._Silver.Silvers_Impl_" params="" file="src/justGraphix/pallette/metal/Silver.hx" private="1" module="justGraphix.pallette.metal.Silver" extern="1" final="1">
	<platinum public="1" get="inline" set="null" expr="cast 0xffE5E4E2" line="4" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffE5E4E2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</platinum>
	<lavenderTint public="1" get="inline" set="null" expr="cast 0xffDADADA" line="5" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffDADADA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lavenderTint>
	<lightSilver public="1" get="inline" set="null" expr="cast 0xffD8D8D8" line="6" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffD8D8D8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightSilver>
	<paleSilver public="1" get="inline" set="null" expr="cast 0xffC9C0BB" line="7" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffC9C0BB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleSilver>
	<silverPink public="1" get="inline" set="null" expr="cast 0xffC4AEAD" line="8" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffC4AEAD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</silverPink>
	<silver public="1" get="inline" set="null" expr="cast 0xffC0C0C0" line="9" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffC0C0C0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</silver>
	<silverSand public="1" get="inline" set="null" expr="cast 0xffBFC1C2" line="10" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffBFC1C2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</silverSand>
	<silverChalice public="1" get="inline" set="null" expr="cast 0xffACACAC" line="11" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffACACAC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</silverChalice>
	<quicksilver public="1" get="inline" set="null" expr="cast 0xffA6A6A6" line="12" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffA6A6A6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</quicksilver>
	<lightSirocco public="1" get="inline" set="null" expr="cast 0xffB8C2C2" line="13" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffB8C2C2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightSirocco>
	<newSilver public="1" get="inline" set="null" expr="cast 0xffBFB8A5" line="14" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xffBFB8A5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</newSilver>
	<romanSilver public="1" get="inline" set="null" expr="cast 0xff838996" line="15" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xff838996</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</romanSilver>
	<sirocco public="1" get="inline" set="null" expr="cast 0xff818080" line="16" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xff818080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sirocco>
	<oldSilver public="1" get="inline" set="null" expr="cast 0xff848482" line="17" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xff848482</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</oldSilver>
	<sonicSilver public="1" get="inline" set="null" expr="cast 0xff757575" line="18" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xff757575</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sonicSilver>
	<darkSilver public="1" get="inline" set="null" expr="cast 0xff71706E" line="19" static="1">
		<x path="justGraphix.pallette.metal.Silvers"/>
		<meta>
			<m n=":value"><e>cast 0xff71706E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkSilver>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.metal._Silver.Silvers_Impl_" params="" file="src/justGraphix/pallette/metal/Silver.hx" private="1" module="justGraphix.pallette.metal.Silver" extern="1" final="1">
		<platinum public="1" get="inline" set="null" expr="cast 0xffE5E4E2" line="4" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffE5E4E2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</platinum>
		<lavenderTint public="1" get="inline" set="null" expr="cast 0xffDADADA" line="5" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffDADADA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lavenderTint>
		<lightSilver public="1" get="inline" set="null" expr="cast 0xffD8D8D8" line="6" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffD8D8D8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightSilver>
		<paleSilver public="1" get="inline" set="null" expr="cast 0xffC9C0BB" line="7" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffC9C0BB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleSilver>
		<silverPink public="1" get="inline" set="null" expr="cast 0xffC4AEAD" line="8" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffC4AEAD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</silverPink>
		<silver public="1" get="inline" set="null" expr="cast 0xffC0C0C0" line="9" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffC0C0C0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</silver>
		<silverSand public="1" get="inline" set="null" expr="cast 0xffBFC1C2" line="10" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffBFC1C2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</silverSand>
		<silverChalice public="1" get="inline" set="null" expr="cast 0xffACACAC" line="11" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffACACAC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</silverChalice>
		<quicksilver public="1" get="inline" set="null" expr="cast 0xffA6A6A6" line="12" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffA6A6A6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</quicksilver>
		<lightSirocco public="1" get="inline" set="null" expr="cast 0xffB8C2C2" line="13" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffB8C2C2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightSirocco>
		<newSilver public="1" get="inline" set="null" expr="cast 0xffBFB8A5" line="14" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xffBFB8A5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</newSilver>
		<romanSilver public="1" get="inline" set="null" expr="cast 0xff838996" line="15" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xff838996</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</romanSilver>
		<sirocco public="1" get="inline" set="null" expr="cast 0xff818080" line="16" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xff818080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sirocco>
		<oldSilver public="1" get="inline" set="null" expr="cast 0xff848482" line="17" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xff848482</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</oldSilver>
		<sonicSilver public="1" get="inline" set="null" expr="cast 0xff757575" line="18" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xff757575</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sonicSilver>
		<darkSilver public="1" get="inline" set="null" expr="cast 0xff71706E" line="19" static="1">
			<x path="justGraphix.pallette.metal.Silvers"/>
			<meta>
				<m n=":value"><e>cast 0xff71706E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkSilver>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.metal.Silver" params="" file="src/justGraphix/pallette/metal/Silver.hx">
		<getColors public="1" get="inline" set="null" line="26" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.metal.Silvers"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="46" static="1"><f a=""><x path="justGraphix.pallette.metal.Silvers"/></f></random>
		<getName public="1" get="inline" set="null" line="52" static="1"><f a="b">
	<x path="justGraphix.pallette.metal.Silvers"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![Silver](../../bootstrap/img/silver.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.nature.HairTones" params="" file="src/justGraphix/pallette/nature/HairTone.hx" module="justGraphix.pallette.nature.HairTone">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.nature._HairTone.HairTones_Impl_" params="" file="src/justGraphix/pallette/nature/HairTone.hx" private="1" module="justGraphix.pallette.nature.HairTone" extern="1" final="1">
	<midnightBlack public="1" get="inline" set="null" expr="cast 0xFF090806" line="4" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF090806</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</midnightBlack>
	<offBlack public="1" get="inline" set="null" expr="cast 0xFF2C222B" line="5" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF2C222B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</offBlack>
	<darkestBrown public="1" get="inline" set="null" expr="cast 0xFF383024" line="6" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF383024</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkestBrown>
	<medDarkBrown public="1" get="inline" set="null" expr="cast 0xFF564B4F" line="7" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF564B4F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</medDarkBrown>
	<chestnutBrown public="1" get="inline" set="null" expr="cast 0xFF504444" line="8" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF504444</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chestnutBrown>
	<lightChestnutBrown public="1" get="inline" set="null" expr="cast 0xFF6A4E42" line="9" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF6A4E42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightChestnutBrown>
	<darkGoldenBrown public="1" get="inline" set="null" expr="cast 0xFF554838" line="10" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF554838</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkGoldenBrown>
	<lightGoldenBrown public="1" get="inline" set="null" expr="cast 0xFFA7856A" line="11" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFA7856A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightGoldenBrown>
	<darkHoneyBlonde public="1" get="inline" set="null" expr="cast 0xFFB89778" line="12" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFB89778</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkHoneyBlonde>
	<bleachedBlonde public="1" get="inline" set="null" expr="cast 0xFFDCD0BA" line="13" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFDCD0BA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</bleachedBlonde>
	<lightAshBlonde public="1" get="inline" set="null" expr="cast 0xFFDEBC99" line="14" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFDEBC99</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightAshBlonde>
	<lightAshBrown public="1" get="inline" set="null" expr="cast 0xFF977961" line="15" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF977961</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightAshBrown>
	<lightestBlonde public="1" get="inline" set="null" expr="cast 0xFFE6CEA8" line="16" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFE6CEA8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightestBlonde>
	<paleGoldenBlonde public="1" get="inline" set="null" expr="cast 0xFFE5C8A8" line="17" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFE5C8A8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleGoldenBlonde>
	<strawberryBlonde public="1" get="inline" set="null" expr="cast 0xFFA56B46" line="18" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFA56B46</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</strawberryBlonde>
	<lightAuburn public="1" get="inline" set="null" expr="cast 0xFF91553D" line="19" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF91553D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightAuburn>
	<darkAuburn public="1" get="inline" set="null" expr="cast 0xFF533D32" line="20" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF533D32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkAuburn>
	<darkestGrey public="1" get="inline" set="null" expr="cast 0xFF71635A" line="21" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF71635A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkestGrey>
	<mediumGrey public="1" get="inline" set="null" expr="cast 0xFFB7A69E" line="22" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFB7A69E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mediumGrey>
	<lightGrey public="1" get="inline" set="null" expr="cast 0xFFD6C4C2" line="23" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFD6C4C2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightGrey>
	<whiteBlonde public="1" get="inline" set="null" expr="cast 0xFFFFF5E1" line="24" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFF5E1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</whiteBlonde>
	<platinumBlonde public="1" get="inline" set="null" expr="cast 0xFFCABFB1" line="25" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFCABFB1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</platinumBlonde>
	<russetRed public="1" get="inline" set="null" expr="cast 0xFF8D4A43" line="26" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF8D4A43</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</russetRed>
	<teraCutta public="1" get="inline" set="null" expr="cast 0xFFB55239" line="27" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFB55239</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</teraCutta>
	<toastedWheat public="1" get="inline" set="null" expr="cast 0xFFD8C078" line="29" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFD8C078</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</toastedWheat>
	<meltedButter public="1" get="inline" set="null" expr="cast 0xFFe3cc88" line="30" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFe3cc88</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</meltedButter>
	<wheatMilk public="1" get="inline" set="null" expr="cast 0xFFF2DA91" line="31" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF2DA91</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</wheatMilk>
	<cakeTwo public="1" get="inline" set="null" expr="cast 0xFFF2E1AE" line="32" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF2E1AE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cakeTwo>
	<poorJean public="1" get="inline" set="null" expr="cast 0xFFF2E7C7" line="33" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF2E7C7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</poorJean>
	<mudOnShoe public="1" get="inline" set="null" expr="cast 0xFF664F3C" line="35" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF664F3C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mudOnShoe>
	<cookie public="1" get="inline" set="null" expr="cast 0xFF8c684a" line="36" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF8c684a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cookie>
	<treeBark public="1" get="inline" set="null" expr="cast 0xFF332A22" line="37" static="1">
		<x path="justGraphix.pallette.nature.HairTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF332A22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</treeBark>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.nature._HairTone.HairTones_Impl_" params="" file="src/justGraphix/pallette/nature/HairTone.hx" private="1" module="justGraphix.pallette.nature.HairTone" extern="1" final="1">
		<midnightBlack public="1" get="inline" set="null" expr="cast 0xFF090806" line="4" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF090806</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</midnightBlack>
		<offBlack public="1" get="inline" set="null" expr="cast 0xFF2C222B" line="5" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF2C222B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</offBlack>
		<darkestBrown public="1" get="inline" set="null" expr="cast 0xFF383024" line="6" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF383024</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkestBrown>
		<medDarkBrown public="1" get="inline" set="null" expr="cast 0xFF564B4F" line="7" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF564B4F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</medDarkBrown>
		<chestnutBrown public="1" get="inline" set="null" expr="cast 0xFF504444" line="8" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF504444</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chestnutBrown>
		<lightChestnutBrown public="1" get="inline" set="null" expr="cast 0xFF6A4E42" line="9" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF6A4E42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightChestnutBrown>
		<darkGoldenBrown public="1" get="inline" set="null" expr="cast 0xFF554838" line="10" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF554838</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkGoldenBrown>
		<lightGoldenBrown public="1" get="inline" set="null" expr="cast 0xFFA7856A" line="11" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFA7856A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightGoldenBrown>
		<darkHoneyBlonde public="1" get="inline" set="null" expr="cast 0xFFB89778" line="12" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFB89778</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkHoneyBlonde>
		<bleachedBlonde public="1" get="inline" set="null" expr="cast 0xFFDCD0BA" line="13" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFDCD0BA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</bleachedBlonde>
		<lightAshBlonde public="1" get="inline" set="null" expr="cast 0xFFDEBC99" line="14" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFDEBC99</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightAshBlonde>
		<lightAshBrown public="1" get="inline" set="null" expr="cast 0xFF977961" line="15" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF977961</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightAshBrown>
		<lightestBlonde public="1" get="inline" set="null" expr="cast 0xFFE6CEA8" line="16" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFE6CEA8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightestBlonde>
		<paleGoldenBlonde public="1" get="inline" set="null" expr="cast 0xFFE5C8A8" line="17" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFE5C8A8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleGoldenBlonde>
		<strawberryBlonde public="1" get="inline" set="null" expr="cast 0xFFA56B46" line="18" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFA56B46</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</strawberryBlonde>
		<lightAuburn public="1" get="inline" set="null" expr="cast 0xFF91553D" line="19" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF91553D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightAuburn>
		<darkAuburn public="1" get="inline" set="null" expr="cast 0xFF533D32" line="20" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF533D32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkAuburn>
		<darkestGrey public="1" get="inline" set="null" expr="cast 0xFF71635A" line="21" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF71635A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkestGrey>
		<mediumGrey public="1" get="inline" set="null" expr="cast 0xFFB7A69E" line="22" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFB7A69E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mediumGrey>
		<lightGrey public="1" get="inline" set="null" expr="cast 0xFFD6C4C2" line="23" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFD6C4C2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightGrey>
		<whiteBlonde public="1" get="inline" set="null" expr="cast 0xFFFFF5E1" line="24" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFF5E1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</whiteBlonde>
		<platinumBlonde public="1" get="inline" set="null" expr="cast 0xFFCABFB1" line="25" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFCABFB1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</platinumBlonde>
		<russetRed public="1" get="inline" set="null" expr="cast 0xFF8D4A43" line="26" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF8D4A43</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</russetRed>
		<teraCutta public="1" get="inline" set="null" expr="cast 0xFFB55239" line="27" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFB55239</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</teraCutta>
		<toastedWheat public="1" get="inline" set="null" expr="cast 0xFFD8C078" line="29" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFD8C078</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</toastedWheat>
		<meltedButter public="1" get="inline" set="null" expr="cast 0xFFe3cc88" line="30" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFe3cc88</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</meltedButter>
		<wheatMilk public="1" get="inline" set="null" expr="cast 0xFFF2DA91" line="31" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF2DA91</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</wheatMilk>
		<cakeTwo public="1" get="inline" set="null" expr="cast 0xFFF2E1AE" line="32" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF2E1AE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cakeTwo>
		<poorJean public="1" get="inline" set="null" expr="cast 0xFFF2E7C7" line="33" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF2E7C7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</poorJean>
		<mudOnShoe public="1" get="inline" set="null" expr="cast 0xFF664F3C" line="35" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF664F3C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mudOnShoe>
		<cookie public="1" get="inline" set="null" expr="cast 0xFF8c684a" line="36" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF8c684a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cookie>
		<treeBark public="1" get="inline" set="null" expr="cast 0xFF332A22" line="37" static="1">
			<x path="justGraphix.pallette.nature.HairTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF332A22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</treeBark>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.nature.HairTone" params="" file="src/justGraphix/pallette/nature/HairTone.hx">
		<getColors public="1" get="inline" set="null" line="44" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.nature.HairTones"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="79" static="1"><f a=""><x path="justGraphix.pallette.nature.HairTones"/></f></random>
		<getName public="1" get="inline" set="null" line="85" static="1"><f a="s">
	<x path="justGraphix.pallette.nature.HairTones"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![hairTone](../../bootstrap/img/hairTone.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.nature.PinkTones" params="" file="src/justGraphix/pallette/nature/PinkTone.hx" module="justGraphix.pallette.nature.PinkTone">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.nature._PinkTone.PinkTones_Impl_" params="" file="src/justGraphix/pallette/nature/PinkTone.hx" private="1" module="justGraphix.pallette.nature.PinkTone" extern="1" final="1">
	<linen public="1" get="inline" set="null" expr="cast 0xFFFBEAE2" line="4" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFBEAE2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</linen>
	<cinderalla public="1" get="inline" set="null" expr="cast 0xFFFCE1D6" line="5" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFCE1D6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cinderalla>
	<apricot public="1" get="inline" set="null" expr="cast 0xFFFDD2C2" line="6" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFDD2C2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</apricot>
	<waxFlower public="1" get="inline" set="null" expr="cast 0xFFFFC2AD" line="7" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFC2AD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</waxFlower>
	<manhattan public="1" get="inline" set="null" expr="cast 0xFFF5B399" line="8" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF5B399</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</manhattan>
	<tonyPink public="1" get="inline" set="null" expr="cast 0xFFE39D7E" line="9" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFE39D7E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tonyPink>
	<copper public="1" get="inline" set="null" expr="cast 0xFFDB9073" line="10" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFDB9073</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copper>
	<rawSienna public="1" get="inline" set="null" expr="cast 0xFFCE7A58" line="11" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFCE7A58</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rawSienna>
	<brown public="1" get="inline" set="null" expr="cast 0xFFB1674A" line="12" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFB1674A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brown>
	<ironStone public="1" get="inline" set="null" expr="cast 0xFF7F4C3B" line="13" static="1">
		<x path="justGraphix.pallette.nature.PinkTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF7F4C3B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ironStone>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.nature._PinkTone.PinkTones_Impl_" params="" file="src/justGraphix/pallette/nature/PinkTone.hx" private="1" module="justGraphix.pallette.nature.PinkTone" extern="1" final="1">
		<linen public="1" get="inline" set="null" expr="cast 0xFFFBEAE2" line="4" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFBEAE2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</linen>
		<cinderalla public="1" get="inline" set="null" expr="cast 0xFFFCE1D6" line="5" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFCE1D6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cinderalla>
		<apricot public="1" get="inline" set="null" expr="cast 0xFFFDD2C2" line="6" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFDD2C2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</apricot>
		<waxFlower public="1" get="inline" set="null" expr="cast 0xFFFFC2AD" line="7" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFC2AD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</waxFlower>
		<manhattan public="1" get="inline" set="null" expr="cast 0xFFF5B399" line="8" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF5B399</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</manhattan>
		<tonyPink public="1" get="inline" set="null" expr="cast 0xFFE39D7E" line="9" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFE39D7E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tonyPink>
		<copper public="1" get="inline" set="null" expr="cast 0xFFDB9073" line="10" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFDB9073</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copper>
		<rawSienna public="1" get="inline" set="null" expr="cast 0xFFCE7A58" line="11" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFCE7A58</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rawSienna>
		<brown public="1" get="inline" set="null" expr="cast 0xFFB1674A" line="12" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFB1674A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brown>
		<ironStone public="1" get="inline" set="null" expr="cast 0xFF7F4C3B" line="13" static="1">
			<x path="justGraphix.pallette.nature.PinkTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF7F4C3B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ironStone>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.nature.PinkTone" params="" file="src/justGraphix/pallette/nature/PinkTone.hx">
		<getColors public="1" get="inline" set="null" line="20" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.nature.PinkTones"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="33" static="1"><f a=""><x path="justGraphix.pallette.nature.PinkTones"/></f></random>
		<getName public="1" get="inline" set="null" line="39" static="1"><f a="s">
	<x path="justGraphix.pallette.nature.PinkTones"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![pinkTone](../../bootstrap/img/pinkTone.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.nature.SkinTones" params="" file="src/justGraphix/pallette/nature/SkinTone.hx" module="justGraphix.pallette.nature.SkinTone">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.nature._SkinTone.SkinTones_Impl_" params="" file="src/justGraphix/pallette/nature/SkinTone.hx" private="1" module="justGraphix.pallette.nature.SkinTone" extern="1" final="1">
	<woodBark public="1" get="inline" set="null" expr="cast 0xFF2D221E" line="6" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF2D221E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</woodBark>
	<sambuca public="1" get="inline" set="null" expr="cast 0xFF3C2E28" line="7" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF3C2E28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sambuca>
	<rebel public="1" get="inline" set="null" expr="cast 0xFF4B3932" line="8" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF4B3932</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rebel>
	<veryDarkBrown public="1" get="inline" set="null" expr="cast 0xFF5A453C" line="9" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF5A453C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</veryDarkBrown>
	<spice public="1" get="inline" set="null" expr="cast 0xFF695046" line="10" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF695046</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spice>
	<dorado public="1" get="inline" set="null" expr="cast 0xFF785C50" line="11" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF785C50</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dorado>
	<russett public="1" get="inline" set="null" expr="cast 0xFF87675A" line="12" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF87675A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</russett>
	<toast public="1" get="inline" set="null" expr="cast 0xFF967264" line="13" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF967264</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</toast>
	<hemp public="1" get="inline" set="null" expr="cast 0xFFA57E6E" line="14" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFA57E6E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hemp>
	<brandyRose public="1" get="inline" set="null" expr="cast 0xFFB48A78" line="15" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFB48A78</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brandyRose>
	<quickSand public="1" get="inline" set="null" expr="cast 0xFFC39582" line="16" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFC39582</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</quickSand>
	<rose public="1" get="inline" set="null" expr="cast 0xFFD2A18C" line="17" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFD2A18C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rose>
	<tumbleweed public="1" get="inline" set="null" expr="cast 0xFFE1AC96" line="18" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFE1AC96</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tumbleweed>
	<mandysPink public="1" get="inline" set="null" expr="cast 0xFFF0B8A0" line="19" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF0B8A0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mandysPink>
	<melon public="1" get="inline" set="null" expr="cast 0xFFFFC3AA" line="20" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFC3AA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</melon>
	<apricot public="1" get="inline" set="null" expr="cast 0xFFFFCEB4" line="21" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFCEB4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</apricot>
	<karry public="1" get="inline" set="null" expr="cast 0xFFFFDABE" line="22" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFDABE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</karry>
	<bisque public="1" get="inline" set="null" expr="cast 0xFFFFE5C8" line="23" static="1">
		<x path="justGraphix.pallette.nature.SkinTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE5C8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</bisque>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.nature._SkinTone.SkinTones_Impl_" params="" file="src/justGraphix/pallette/nature/SkinTone.hx" private="1" module="justGraphix.pallette.nature.SkinTone" extern="1" final="1">
		<woodBark public="1" get="inline" set="null" expr="cast 0xFF2D221E" line="6" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF2D221E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</woodBark>
		<sambuca public="1" get="inline" set="null" expr="cast 0xFF3C2E28" line="7" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF3C2E28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sambuca>
		<rebel public="1" get="inline" set="null" expr="cast 0xFF4B3932" line="8" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF4B3932</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rebel>
		<veryDarkBrown public="1" get="inline" set="null" expr="cast 0xFF5A453C" line="9" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF5A453C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</veryDarkBrown>
		<spice public="1" get="inline" set="null" expr="cast 0xFF695046" line="10" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF695046</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spice>
		<dorado public="1" get="inline" set="null" expr="cast 0xFF785C50" line="11" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF785C50</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dorado>
		<russett public="1" get="inline" set="null" expr="cast 0xFF87675A" line="12" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF87675A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</russett>
		<toast public="1" get="inline" set="null" expr="cast 0xFF967264" line="13" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF967264</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</toast>
		<hemp public="1" get="inline" set="null" expr="cast 0xFFA57E6E" line="14" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFA57E6E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hemp>
		<brandyRose public="1" get="inline" set="null" expr="cast 0xFFB48A78" line="15" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFB48A78</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brandyRose>
		<quickSand public="1" get="inline" set="null" expr="cast 0xFFC39582" line="16" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFC39582</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</quickSand>
		<rose public="1" get="inline" set="null" expr="cast 0xFFD2A18C" line="17" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFD2A18C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rose>
		<tumbleweed public="1" get="inline" set="null" expr="cast 0xFFE1AC96" line="18" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFE1AC96</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tumbleweed>
		<mandysPink public="1" get="inline" set="null" expr="cast 0xFFF0B8A0" line="19" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF0B8A0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mandysPink>
		<melon public="1" get="inline" set="null" expr="cast 0xFFFFC3AA" line="20" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFC3AA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</melon>
		<apricot public="1" get="inline" set="null" expr="cast 0xFFFFCEB4" line="21" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFCEB4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</apricot>
		<karry public="1" get="inline" set="null" expr="cast 0xFFFFDABE" line="22" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFDABE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</karry>
		<bisque public="1" get="inline" set="null" expr="cast 0xFFFFE5C8" line="23" static="1">
			<x path="justGraphix.pallette.nature.SkinTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE5C8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</bisque>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.nature.SkinTone" params="" file="src/justGraphix/pallette/nature/SkinTone.hx">
		<getColors public="1" get="inline" set="null" line="30" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.nature.SkinTones"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="51" static="1"><f a=""><x path="justGraphix.pallette.nature.SkinTones"/></f></random>
		<getName public="1" get="inline" set="null" line="57" static="1"><f a="s">
	<x path="justGraphix.pallette.nature.SkinTones"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![skinTone](../../bootstrap/img/skinTone.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.nature.SkinTones2" params="" file="src/justGraphix/pallette/nature/SkinTone2.hx" module="justGraphix.pallette.nature.SkinTone2">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.nature._SkinTone2.SkinTones2_Impl_" params="" file="src/justGraphix/pallette/nature/SkinTone2.hx" private="1" module="justGraphix.pallette.nature.SkinTone2" extern="1" final="1">
	<caramel public="1" get="inline" set="null" expr="cast 0xFFFFDCB1" line="4" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFDCB1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</caramel>
	<gold public="1" get="inline" set="null" expr="cast 0xFFE5C29B" line="5" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE5C29B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</gold>
	<goldSand public="1" get="inline" set="null" expr="cast 0xFFE4B98E" line="6" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE4B98E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldSand>
	<calico public="1" get="inline" set="null" expr="cast 0xFFE2B98F" line="7" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE2B98F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</calico>
	<copper public="1" get="inline" set="null" expr="cast 0xFFE3A173" line="8" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE3A173</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copper>
	<copperField public="1" get="inline" set="null" expr="cast 0xFFD99164" line="9" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFD99164</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copperField>
	<rawSienna public="1" get="inline" set="null" expr="cast 0xFFCC8443" line="10" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFCC8443</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rawSienna>
	<antiqueBrass public="1" get="inline" set="null" expr="cast 0xFFC77A58" line="11" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFC77A58</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</antiqueBrass>
	<fire public="1" get="inline" set="null" expr="cast 0xFFA54900" line="12" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFA54900</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fire>
	<redBerry public="1" get="inline" set="null" expr="cast 0xFF880400" line="13" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF880400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redBerry>
	<loneStar public="1" get="inline" set="null" expr="cast 0xFF710200" line="14" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF710200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</loneStar>
	<brownPod public="1" get="inline" set="null" expr="cast 0xFF440C00" line="15" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF440C00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brownPod>
	<negroni public="1" get="inline" set="null" expr="cast 0xFFFFE0C4" line="16" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE0C4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</negroni>
	<desertSand public="1" get="inline" set="null" expr="cast 0xFFEECFB4" line="17" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFEECFB4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</desertSand>
	<tumbleWeed public="1" get="inline" set="null" expr="cast 0xFFDEAB7F" line="18" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFDEAB7F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tumbleWeed>
	<tumbleWeed2 public="1" get="inline" set="null" expr="cast 0xFFE0B184" line="19" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE0B184</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tumbleWeed2>
	<tumbleWeed3 public="1" get="inline" set="null" expr="cast 0xFFDFA675" line="20" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFDFA675</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tumbleWeed3>
	<copper2 public="1" get="inline" set="null" expr="cast 0xFFBE723C" line="21" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFBE723C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</copper2>
	<brightRed public="1" get="inline" set="null" expr="cast 0xFFA01900" line="22" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFA01900</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brightRed>
	<rosewood public="1" get="inline" set="null" expr="cast 0xFF580000" line="23" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF580000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rosewood>
	<black public="1" get="inline" set="null" expr="cast 0xFF000000" line="24" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF000000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</black>
	<parchment public="1" get="inline" set="null" expr="cast 0xFFEDE4C8" line="25" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFEDE4C8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</parchment>
	<desertSand2 public="1" get="inline" set="null" expr="cast 0xFFEFD6BD" line="26" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFEFD6BD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</desertSand2>
	<gold2 public="1" get="inline" set="null" expr="cast 0xFFEABD9D" line="27" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFEABD9D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</gold2>
	<roseFog public="1" get="inline" set="null" expr="cast 0xFFE3C2AE" line="28" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE3C2AE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</roseFog>
	<calico2 public="1" get="inline" set="null" expr="cast 0xFFDFB997" line="29" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFDFB997</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</calico2>
	<wiskey public="1" get="inline" set="null" expr="cast 0xFFD0926E" line="30" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFD0926E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</wiskey>
	<mongoose public="1" get="inline" set="null" expr="cast 0xFFBD9778" line="31" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFBD9778</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mongoose>
	<brown public="1" get="inline" set="null" expr="cast 0xFFBB6D4A" line="32" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFBB6D4A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brown>
	<redBerry2 public="1" get="inline" set="null" expr="cast 0xFF940A00" line="33" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF940A00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redBerry2>
	<roseFog2 public="1" get="inline" set="null" expr="cast 0xFFE1ADA4" line="34" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFE1ADA4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</roseFog2>
	<barleyCorn public="1" get="inline" set="null" expr="cast 0xFFA58859" line="35" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFFA58859</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</barleyCorn>
	<maroon public="1" get="inline" set="null" expr="cast 0xFF7B0000" line="36" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF7B0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</maroon>
	<loneStar2 public="1" get="inline" set="null" expr="cast 0xFF720000" line="37" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF720000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</loneStar2>
	<rosewood2 public="1" get="inline" set="null" expr="cast 0xFF560000" line="38" static="1">
		<x path="justGraphix.pallette.nature.SkinTones2"/>
		<meta>
			<m n=":value"><e>cast 0xFF560000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rosewood2>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.nature._SkinTone2.SkinTones2_Impl_" params="" file="src/justGraphix/pallette/nature/SkinTone2.hx" private="1" module="justGraphix.pallette.nature.SkinTone2" extern="1" final="1">
		<caramel public="1" get="inline" set="null" expr="cast 0xFFFFDCB1" line="4" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFDCB1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</caramel>
		<gold public="1" get="inline" set="null" expr="cast 0xFFE5C29B" line="5" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE5C29B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</gold>
		<goldSand public="1" get="inline" set="null" expr="cast 0xFFE4B98E" line="6" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE4B98E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldSand>
		<calico public="1" get="inline" set="null" expr="cast 0xFFE2B98F" line="7" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE2B98F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</calico>
		<copper public="1" get="inline" set="null" expr="cast 0xFFE3A173" line="8" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE3A173</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copper>
		<copperField public="1" get="inline" set="null" expr="cast 0xFFD99164" line="9" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFD99164</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copperField>
		<rawSienna public="1" get="inline" set="null" expr="cast 0xFFCC8443" line="10" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFCC8443</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rawSienna>
		<antiqueBrass public="1" get="inline" set="null" expr="cast 0xFFC77A58" line="11" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFC77A58</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</antiqueBrass>
		<fire public="1" get="inline" set="null" expr="cast 0xFFA54900" line="12" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFA54900</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fire>
		<redBerry public="1" get="inline" set="null" expr="cast 0xFF880400" line="13" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF880400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redBerry>
		<loneStar public="1" get="inline" set="null" expr="cast 0xFF710200" line="14" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF710200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</loneStar>
		<brownPod public="1" get="inline" set="null" expr="cast 0xFF440C00" line="15" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF440C00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brownPod>
		<negroni public="1" get="inline" set="null" expr="cast 0xFFFFE0C4" line="16" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE0C4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</negroni>
		<desertSand public="1" get="inline" set="null" expr="cast 0xFFEECFB4" line="17" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFEECFB4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</desertSand>
		<tumbleWeed public="1" get="inline" set="null" expr="cast 0xFFDEAB7F" line="18" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFDEAB7F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tumbleWeed>
		<tumbleWeed2 public="1" get="inline" set="null" expr="cast 0xFFE0B184" line="19" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE0B184</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tumbleWeed2>
		<tumbleWeed3 public="1" get="inline" set="null" expr="cast 0xFFDFA675" line="20" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFDFA675</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tumbleWeed3>
		<copper2 public="1" get="inline" set="null" expr="cast 0xFFBE723C" line="21" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFBE723C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</copper2>
		<brightRed public="1" get="inline" set="null" expr="cast 0xFFA01900" line="22" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFA01900</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brightRed>
		<rosewood public="1" get="inline" set="null" expr="cast 0xFF580000" line="23" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF580000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rosewood>
		<black public="1" get="inline" set="null" expr="cast 0xFF000000" line="24" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF000000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</black>
		<parchment public="1" get="inline" set="null" expr="cast 0xFFEDE4C8" line="25" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFEDE4C8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</parchment>
		<desertSand2 public="1" get="inline" set="null" expr="cast 0xFFEFD6BD" line="26" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFEFD6BD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</desertSand2>
		<gold2 public="1" get="inline" set="null" expr="cast 0xFFEABD9D" line="27" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFEABD9D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</gold2>
		<roseFog public="1" get="inline" set="null" expr="cast 0xFFE3C2AE" line="28" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE3C2AE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</roseFog>
		<calico2 public="1" get="inline" set="null" expr="cast 0xFFDFB997" line="29" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFDFB997</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</calico2>
		<wiskey public="1" get="inline" set="null" expr="cast 0xFFD0926E" line="30" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFD0926E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</wiskey>
		<mongoose public="1" get="inline" set="null" expr="cast 0xFFBD9778" line="31" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFBD9778</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mongoose>
		<brown public="1" get="inline" set="null" expr="cast 0xFFBB6D4A" line="32" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFBB6D4A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brown>
		<redBerry2 public="1" get="inline" set="null" expr="cast 0xFF940A00" line="33" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF940A00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redBerry2>
		<roseFog2 public="1" get="inline" set="null" expr="cast 0xFFE1ADA4" line="34" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFE1ADA4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</roseFog2>
		<barleyCorn public="1" get="inline" set="null" expr="cast 0xFFA58859" line="35" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFFA58859</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</barleyCorn>
		<maroon public="1" get="inline" set="null" expr="cast 0xFF7B0000" line="36" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF7B0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</maroon>
		<loneStar2 public="1" get="inline" set="null" expr="cast 0xFF720000" line="37" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF720000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</loneStar2>
		<rosewood2 public="1" get="inline" set="null" expr="cast 0xFF560000" line="38" static="1">
			<x path="justGraphix.pallette.nature.SkinTones2"/>
			<meta>
				<m n=":value"><e>cast 0xFF560000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rosewood2>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.nature.SkinTone2" params="" file="src/justGraphix/pallette/nature/SkinTone2.hx">
		<getColors public="1" get="inline" set="null" line="45" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.nature.SkinTones2"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="83" static="1"><f a=""><x path="justGraphix.pallette.nature.SkinTones2"/></f></random>
		<getName public="1" get="inline" set="null" line="89" static="1"><f a="s">
	<x path="justGraphix.pallette.nature.SkinTones2"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![skinTone2](../../bootstrap/img/skinTone2.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.nature.YellowTones" params="" file="src/justGraphix/pallette/nature/YellowTone.hx" module="justGraphix.pallette.nature.YellowTone">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.nature._YellowTone.YellowTones_Impl_" params="" file="src/justGraphix/pallette/nature/YellowTone.hx" private="1" module="justGraphix.pallette.nature.YellowTone" extern="1" final="1">
	<linen2 public="1" get="inline" set="null" expr="cast 0xFFF8EBDB" line="4" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF8EBDB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</linen2>
	<oasis public="1" get="inline" set="null" expr="cast 0xFFFDE5CD" line="5" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFDE5CD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</oasis>
	<lightApricot public="1" get="inline" set="null" expr="cast 0xFFFDD5B1" line="6" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFFDD5B1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightApricot>
	<manhatten2 public="1" get="inline" set="null" expr="cast 0xFFF3C79A" line="7" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFF3C79A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</manhatten2>
	<tumbleweed public="1" get="inline" set="null" expr="cast 0xFFE2AF82" line="8" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFE2AF82</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tumbleweed>
	<wiskey public="1" get="inline" set="null" expr="cast 0xFFD39E69" line="9" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFD39E69</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</wiskey>
	<muddyWaters public="1" get="inline" set="null" expr="cast 0xFFB88A58" line="10" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFFB88A58</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</muddyWaters>
	<dirt public="1" get="inline" set="null" expr="cast 0xFF997249" line="11" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF997249</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dirt>
	<pottersClay public="1" get="inline" set="null" expr="cast 0xFF805737" line="12" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF805737</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pottersClay>
	<spice public="1" get="inline" set="null" expr="cast 0xFF68492D" line="13" static="1">
		<x path="justGraphix.pallette.nature.YellowTones"/>
		<meta>
			<m n=":value"><e>cast 0xFF68492D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spice>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.nature._YellowTone.YellowTones_Impl_" params="" file="src/justGraphix/pallette/nature/YellowTone.hx" private="1" module="justGraphix.pallette.nature.YellowTone" extern="1" final="1">
		<linen2 public="1" get="inline" set="null" expr="cast 0xFFF8EBDB" line="4" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF8EBDB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</linen2>
		<oasis public="1" get="inline" set="null" expr="cast 0xFFFDE5CD" line="5" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFDE5CD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</oasis>
		<lightApricot public="1" get="inline" set="null" expr="cast 0xFFFDD5B1" line="6" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFFDD5B1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightApricot>
		<manhatten2 public="1" get="inline" set="null" expr="cast 0xFFF3C79A" line="7" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFF3C79A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</manhatten2>
		<tumbleweed public="1" get="inline" set="null" expr="cast 0xFFE2AF82" line="8" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFE2AF82</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tumbleweed>
		<wiskey public="1" get="inline" set="null" expr="cast 0xFFD39E69" line="9" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFD39E69</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</wiskey>
		<muddyWaters public="1" get="inline" set="null" expr="cast 0xFFB88A58" line="10" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFFB88A58</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</muddyWaters>
		<dirt public="1" get="inline" set="null" expr="cast 0xFF997249" line="11" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF997249</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dirt>
		<pottersClay public="1" get="inline" set="null" expr="cast 0xFF805737" line="12" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF805737</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pottersClay>
		<spice public="1" get="inline" set="null" expr="cast 0xFF68492D" line="13" static="1">
			<x path="justGraphix.pallette.nature.YellowTones"/>
			<meta>
				<m n=":value"><e>cast 0xFF68492D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spice>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.nature.YellowTone" params="" file="src/justGraphix/pallette/nature/YellowTone.hx">
		<getColors public="1" get="inline" set="null" line="20" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.nature.YellowTones"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="33" static="1"><f a=""><x path="justGraphix.pallette.nature.YellowTones"/></f></random>
		<getName public="1" get="inline" set="null" line="39" static="1"><f a="s">
	<x path="justGraphix.pallette.nature.YellowTones"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![yellowTone](../../bootstrap/img/yellowTone.png)</haxe_doc>
	</class>
	<class path="justGraphix.pallette.random.CeramicColor" params="" file="src/justGraphix/pallette/random/CeramicColor.hx">
		<getColors public="1" get="inline" set="null" line="8" static="1">
			<f a=""><c path="Array"><x path="justGraphix.pallette.random.CeramicRGB"/></c></f>
			<haxe_doc>* list of all enums</haxe_doc>
		</getColors>
		<random public="1" get="inline" set="null" line="20" static="1">
			<f a=""><x path="justGraphix.pallette.random.CeramicRGB"/></f>
			<haxe_doc>* provides a random way to get a colour</haxe_doc>
		</random>
		<getName public="1" get="inline" set="null" line="29" static="1">
			<f a="c">
				<x path="justGraphix.pallette.random.CeramicRGB"/>
				<c path="String"/>
			</f>
			<haxe_doc>* allows you to query the enums</haxe_doc>
		</getName>
	</class>
	<abstract path="justGraphix.pallette.random.CeramicRGB" params="" file="src/justGraphix/pallette/random/CeramicColor.hx" module="justGraphix.pallette.random.CeramicColor">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.random._CeramicColor.CeramicRGB_Impl_" params="" file="src/justGraphix/pallette/random/CeramicColor.hx" private="1" module="justGraphix.pallette.random.CeramicColor" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast -1" line="96" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast -1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NONE>
	<WHITE public="1" get="inline" set="null" expr="cast 0xFFFFFF" line="97" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WHITE>
	<GRAY public="1" get="inline" set="null" expr="cast 0x808080" line="98" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x808080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GRAY>
	<BLACK public="1" get="inline" set="null" expr="cast 0x000000" line="99" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x000000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BLACK>
	<GREEN public="1" get="inline" set="null" expr="cast 0x008000" line="100" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x008000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GREEN>
	<LIME public="1" get="inline" set="null" expr="cast 0x00FF00" line="101" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x00FF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIME>
	<YELLOW public="1" get="inline" set="null" expr="cast 0xFFFF00" line="102" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</YELLOW>
	<ORANGE public="1" get="inline" set="null" expr="cast 0xFFA500" line="103" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFA500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ORANGE>
	<RED public="1" get="inline" set="null" expr="cast 0xFF0000" line="104" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RED>
	<PURPLE public="1" get="inline" set="null" expr="cast 0x800080" line="105" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x800080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PURPLE>
	<BLUE public="1" get="inline" set="null" expr="cast 0x0000FF" line="106" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x0000FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BLUE>
	<BROWN public="1" get="inline" set="null" expr="cast 0x8B4513" line="107" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x8B4513</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BROWN>
	<PINK public="1" get="inline" set="null" expr="cast 0xFFC0CB" line="108" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFC0CB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PINK>
	<MAGENTA public="1" get="inline" set="null" expr="cast 0xFF00FF" line="109" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MAGENTA>
	<CYAN public="1" get="inline" set="null" expr="cast 0x00FFFF" line="110" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x00FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CYAN>
	<CORNFLOWERBLUE public="1" get="inline" set="null" expr="cast 0x6495ED" line="111" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x6495ED</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CORNFLOWERBLUE>
	<MEDIUMVIOLETRED public="1" get="inline" set="null" expr="cast 0xC71585" line="112" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xC71585</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MEDIUMVIOLETRED>
	<DEEPPINK public="1" get="inline" set="null" expr="cast 0xFF1493" line="113" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF1493</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DEEPPINK>
	<PALEVIOLETRED public="1" get="inline" set="null" expr="cast 0xDB7093" line="114" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xDB7093</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PALEVIOLETRED>
	<HOTPINK public="1" get="inline" set="null" expr="cast 0xFF69B4" line="115" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF69B4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HOTPINK>
	<LIGHTPINK public="1" get="inline" set="null" expr="cast 0xFFB6C1" line="116" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFB6C1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIGHTPINK>
	<DARKRED public="1" get="inline" set="null" expr="cast 0x8B0000" line="117" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x8B0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKRED>
	<FIREBRICK public="1" get="inline" set="null" expr="cast 0xB22222" line="118" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xB22222</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIREBRICK>
	<CRIMSON public="1" get="inline" set="null" expr="cast 0xDC143C" line="119" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xDC143C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CRIMSON>
	<INDIANRED public="1" get="inline" set="null" expr="cast 0xCD5C5C" line="120" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xCD5C5C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INDIANRED>
	<LIGHTCORAL public="1" get="inline" set="null" expr="cast 0xF08080" line="121" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xF08080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIGHTCORAL>
	<SALMON public="1" get="inline" set="null" expr="cast 0xFA8072" line="122" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFA8072</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SALMON>
	<DARKSALMON public="1" get="inline" set="null" expr="cast 0xE9967A" line="123" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xE9967A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKSALMON>
	<LIGHTSALMON public="1" get="inline" set="null" expr="cast 0xFFA07A" line="124" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFA07A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIGHTSALMON>
	<ORANGERED public="1" get="inline" set="null" expr="cast 0xFF4500" line="125" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF4500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ORANGERED>
	<TOMATO public="1" get="inline" set="null" expr="cast 0xFF6347" line="126" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF6347</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TOMATO>
	<DARKORANGE public="1" get="inline" set="null" expr="cast 0xFF8C00" line="127" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF8C00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKORANGE>
	<CORAL public="1" get="inline" set="null" expr="cast 0xFF7F50" line="128" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF7F50</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CORAL>
	<DARKKHAKI public="1" get="inline" set="null" expr="cast 0xBDB76B" line="129" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xBDB76B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKKHAKI>
	<GOLD public="1" get="inline" set="null" expr="cast 0xFFD700" line="130" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFD700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GOLD>
	<KHAKI public="1" get="inline" set="null" expr="cast 0xF0E68C" line="131" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xF0E68C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KHAKI>
	<PEACHPUFF public="1" get="inline" set="null" expr="cast 0xFFDAB9" line="132" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFDAB9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PEACHPUFF>
	<PALEGOLDENROD public="1" get="inline" set="null" expr="cast 0xEEE8AA" line="133" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xEEE8AA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PALEGOLDENROD>
	<MOCCASIN public="1" get="inline" set="null" expr="cast 0xFFE4B5" line="134" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFE4B5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOCCASIN>
	<PAPAYAWHIP public="1" get="inline" set="null" expr="cast 0xFFEFD5" line="135" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFEFD5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PAPAYAWHIP>
	<LEMONCHIFFON public="1" get="inline" set="null" expr="cast 0xFFFACD" line="136" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFACD</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEMONCHIFFON>
	<LIGHTYELLOW public="1" get="inline" set="null" expr="cast 0xFFFFE0" line="137" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LIGHTYELLOW>
	<SIENNA public="1" get="inline" set="null" expr="cast 0xA0522D" line="138" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xA0522D</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SIENNA>
	<CHOCOLATE public="1" get="inline" set="null" expr="cast 0xD2691E" line="139" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xD2691E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CHOCOLATE>
	<PERU public="1" get="inline" set="null" expr="cast 0xCD853F" line="140" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xCD853F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PERU>
	<TAN public="1" get="inline" set="null" expr="cast 0xD2B48C" line="141" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xD2B48C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAN>
	<DARKOLIVEGREEN public="1" get="inline" set="null" expr="cast 0x556B2F" line="142" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x556B2F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DARKOLIVEGREEN>
	<OLIVE public="1" get="inline" set="null" expr="cast 0x808000" line="143" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x808000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OLIVE>
	<TEAL public="1" get="inline" set="null" expr="cast 0x008080" line="144" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x008080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEAL>
	<TURQUOISE public="1" get="inline" set="null" expr="cast 0x40E0D0" line="145" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x40E0D0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TURQUOISE>
	<NAVY public="1" get="inline" set="null" expr="cast 0x000080" line="146" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x000080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NAVY>
	<INDIGO public="1" get="inline" set="null" expr="cast 0x4B0082" line="147" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x4B0082</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</INDIGO>
	<ORCHID public="1" get="inline" set="null" expr="cast 0xDA70D6" line="148" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xDA70D6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ORCHID>
	<LAVENDER public="1" get="inline" set="null" expr="cast 0xE6E6FA" line="149" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xE6E6FA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LAVENDER>
	<AZURE public="1" get="inline" set="null" expr="cast 0xF0FFFF" line="150" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xF0FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AZURE>
	<IVORY public="1" get="inline" set="null" expr="cast 0xFFFFF0" line="151" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFF0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IVORY>
	<DIMGREY public="1" get="inline" set="null" expr="cast 0x696969" line="152" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x696969</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DIMGREY>
	<SLATEGREY public="1" get="inline" set="null" expr="cast 0x708090" line="153" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0x708090</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SLATEGREY>
	<SNOW public="1" get="inline" set="null" expr="cast 0xFFFAFA" line="154" static="1">
		<x path="justGraphix.pallette.random.CeramicRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFAFA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SNOW>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.random._CeramicColor.CeramicRGB_Impl_" params="" file="src/justGraphix/pallette/random/CeramicColor.hx" private="1" module="justGraphix.pallette.random.CeramicColor" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast -1" line="96" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast -1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NONE>
		<WHITE public="1" get="inline" set="null" expr="cast 0xFFFFFF" line="97" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WHITE>
		<GRAY public="1" get="inline" set="null" expr="cast 0x808080" line="98" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x808080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GRAY>
		<BLACK public="1" get="inline" set="null" expr="cast 0x000000" line="99" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x000000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BLACK>
		<GREEN public="1" get="inline" set="null" expr="cast 0x008000" line="100" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x008000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GREEN>
		<LIME public="1" get="inline" set="null" expr="cast 0x00FF00" line="101" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x00FF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIME>
		<YELLOW public="1" get="inline" set="null" expr="cast 0xFFFF00" line="102" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</YELLOW>
		<ORANGE public="1" get="inline" set="null" expr="cast 0xFFA500" line="103" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFA500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ORANGE>
		<RED public="1" get="inline" set="null" expr="cast 0xFF0000" line="104" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RED>
		<PURPLE public="1" get="inline" set="null" expr="cast 0x800080" line="105" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x800080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PURPLE>
		<BLUE public="1" get="inline" set="null" expr="cast 0x0000FF" line="106" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x0000FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BLUE>
		<BROWN public="1" get="inline" set="null" expr="cast 0x8B4513" line="107" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x8B4513</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BROWN>
		<PINK public="1" get="inline" set="null" expr="cast 0xFFC0CB" line="108" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFC0CB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PINK>
		<MAGENTA public="1" get="inline" set="null" expr="cast 0xFF00FF" line="109" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MAGENTA>
		<CYAN public="1" get="inline" set="null" expr="cast 0x00FFFF" line="110" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x00FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CYAN>
		<CORNFLOWERBLUE public="1" get="inline" set="null" expr="cast 0x6495ED" line="111" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x6495ED</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CORNFLOWERBLUE>
		<MEDIUMVIOLETRED public="1" get="inline" set="null" expr="cast 0xC71585" line="112" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xC71585</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MEDIUMVIOLETRED>
		<DEEPPINK public="1" get="inline" set="null" expr="cast 0xFF1493" line="113" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF1493</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DEEPPINK>
		<PALEVIOLETRED public="1" get="inline" set="null" expr="cast 0xDB7093" line="114" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xDB7093</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PALEVIOLETRED>
		<HOTPINK public="1" get="inline" set="null" expr="cast 0xFF69B4" line="115" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF69B4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HOTPINK>
		<LIGHTPINK public="1" get="inline" set="null" expr="cast 0xFFB6C1" line="116" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFB6C1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIGHTPINK>
		<DARKRED public="1" get="inline" set="null" expr="cast 0x8B0000" line="117" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x8B0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKRED>
		<FIREBRICK public="1" get="inline" set="null" expr="cast 0xB22222" line="118" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xB22222</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIREBRICK>
		<CRIMSON public="1" get="inline" set="null" expr="cast 0xDC143C" line="119" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xDC143C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CRIMSON>
		<INDIANRED public="1" get="inline" set="null" expr="cast 0xCD5C5C" line="120" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xCD5C5C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INDIANRED>
		<LIGHTCORAL public="1" get="inline" set="null" expr="cast 0xF08080" line="121" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xF08080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIGHTCORAL>
		<SALMON public="1" get="inline" set="null" expr="cast 0xFA8072" line="122" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFA8072</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SALMON>
		<DARKSALMON public="1" get="inline" set="null" expr="cast 0xE9967A" line="123" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xE9967A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKSALMON>
		<LIGHTSALMON public="1" get="inline" set="null" expr="cast 0xFFA07A" line="124" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFA07A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIGHTSALMON>
		<ORANGERED public="1" get="inline" set="null" expr="cast 0xFF4500" line="125" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF4500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ORANGERED>
		<TOMATO public="1" get="inline" set="null" expr="cast 0xFF6347" line="126" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF6347</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TOMATO>
		<DARKORANGE public="1" get="inline" set="null" expr="cast 0xFF8C00" line="127" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF8C00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKORANGE>
		<CORAL public="1" get="inline" set="null" expr="cast 0xFF7F50" line="128" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF7F50</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CORAL>
		<DARKKHAKI public="1" get="inline" set="null" expr="cast 0xBDB76B" line="129" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xBDB76B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKKHAKI>
		<GOLD public="1" get="inline" set="null" expr="cast 0xFFD700" line="130" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFD700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GOLD>
		<KHAKI public="1" get="inline" set="null" expr="cast 0xF0E68C" line="131" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xF0E68C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KHAKI>
		<PEACHPUFF public="1" get="inline" set="null" expr="cast 0xFFDAB9" line="132" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFDAB9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PEACHPUFF>
		<PALEGOLDENROD public="1" get="inline" set="null" expr="cast 0xEEE8AA" line="133" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xEEE8AA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PALEGOLDENROD>
		<MOCCASIN public="1" get="inline" set="null" expr="cast 0xFFE4B5" line="134" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFE4B5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOCCASIN>
		<PAPAYAWHIP public="1" get="inline" set="null" expr="cast 0xFFEFD5" line="135" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFEFD5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PAPAYAWHIP>
		<LEMONCHIFFON public="1" get="inline" set="null" expr="cast 0xFFFACD" line="136" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFACD</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEMONCHIFFON>
		<LIGHTYELLOW public="1" get="inline" set="null" expr="cast 0xFFFFE0" line="137" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LIGHTYELLOW>
		<SIENNA public="1" get="inline" set="null" expr="cast 0xA0522D" line="138" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xA0522D</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SIENNA>
		<CHOCOLATE public="1" get="inline" set="null" expr="cast 0xD2691E" line="139" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xD2691E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CHOCOLATE>
		<PERU public="1" get="inline" set="null" expr="cast 0xCD853F" line="140" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xCD853F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PERU>
		<TAN public="1" get="inline" set="null" expr="cast 0xD2B48C" line="141" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xD2B48C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAN>
		<DARKOLIVEGREEN public="1" get="inline" set="null" expr="cast 0x556B2F" line="142" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x556B2F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DARKOLIVEGREEN>
		<OLIVE public="1" get="inline" set="null" expr="cast 0x808000" line="143" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x808000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OLIVE>
		<TEAL public="1" get="inline" set="null" expr="cast 0x008080" line="144" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x008080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEAL>
		<TURQUOISE public="1" get="inline" set="null" expr="cast 0x40E0D0" line="145" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x40E0D0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TURQUOISE>
		<NAVY public="1" get="inline" set="null" expr="cast 0x000080" line="146" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x000080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NAVY>
		<INDIGO public="1" get="inline" set="null" expr="cast 0x4B0082" line="147" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x4B0082</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</INDIGO>
		<ORCHID public="1" get="inline" set="null" expr="cast 0xDA70D6" line="148" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xDA70D6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ORCHID>
		<LAVENDER public="1" get="inline" set="null" expr="cast 0xE6E6FA" line="149" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xE6E6FA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LAVENDER>
		<AZURE public="1" get="inline" set="null" expr="cast 0xF0FFFF" line="150" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xF0FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AZURE>
		<IVORY public="1" get="inline" set="null" expr="cast 0xFFFFF0" line="151" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFF0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IVORY>
		<DIMGREY public="1" get="inline" set="null" expr="cast 0x696969" line="152" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x696969</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DIMGREY>
		<SLATEGREY public="1" get="inline" set="null" expr="cast 0x708090" line="153" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0x708090</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SLATEGREY>
		<SNOW public="1" get="inline" set="null" expr="cast 0xFFFAFA" line="154" static="1">
			<x path="justGraphix.pallette.random.CeramicRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFAFA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SNOW>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.random.PalleteNine" params="" file="src/justGraphix/pallette/random/PalletteNine.hx" module="justGraphix.pallette.random.PalletteNine">
		<get9 public="1" get="inline" set="null" line="7" static="1"><f a="index">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></get9>
		<ARGB public="1" get="inline" set="null" line="14" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></ARGB>
		<RGB public="1" get="inline" set="null" line="341"><f a=""><c path="Array"><x path="Int"/></c></f></RGB>
	</class>
	<abstract path="justGraphix.pallette.random.Pride" params="" file="src/justGraphix/pallette/random/PrideFlag.hx" module="justGraphix.pallette.random.PrideFlag">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.random._PrideFlag.Pride_Impl_" params="" file="src/justGraphix/pallette/random/PrideFlag.hx" private="1" module="justGraphix.pallette.random.PrideFlag" extern="1" final="1">
	<hotPink public="1" get="inline" set="null" expr="cast 0xFFff69b4" line="5" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFFff69b4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hotPink>
	<red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="6" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</red>
	<pizzaz public="1" get="inline" set="null" expr="cast 0xFFff8e00" line="7" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFFff8e00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pizzaz>
	<yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="8" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellow>
	<japaneseLaurel public="1" get="inline" set="null" expr="cast 0xFF008e00" line="9" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFF008e00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</japaneseLaurel>
	<eggBlue public="1" get="inline" set="null" expr="cast 0xFF00c0c0" line="10" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFF00c0c0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</eggBlue>
	<pigmentIndigo public="1" get="inline" set="null" expr="cast 0xff400098" line="11" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xff400098</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pigmentIndigo>
	<darkMagenta public="1" get="inline" set="null" expr="cast 0xFF8e008e" line="12" static="1">
		<x path="justGraphix.pallette.random.Pride"/>
		<meta>
			<m n=":value"><e>cast 0xFF8e008e</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkMagenta>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.random._PrideFlag.Pride_Impl_" params="" file="src/justGraphix/pallette/random/PrideFlag.hx" private="1" module="justGraphix.pallette.random.PrideFlag" extern="1" final="1">
		<hotPink public="1" get="inline" set="null" expr="cast 0xFFff69b4" line="5" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFFff69b4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hotPink>
		<red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="6" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</red>
		<pizzaz public="1" get="inline" set="null" expr="cast 0xFFff8e00" line="7" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFFff8e00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pizzaz>
		<yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="8" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellow>
		<japaneseLaurel public="1" get="inline" set="null" expr="cast 0xFF008e00" line="9" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFF008e00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</japaneseLaurel>
		<eggBlue public="1" get="inline" set="null" expr="cast 0xFF00c0c0" line="10" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFF00c0c0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</eggBlue>
		<pigmentIndigo public="1" get="inline" set="null" expr="cast 0xff400098" line="11" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xff400098</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pigmentIndigo>
		<darkMagenta public="1" get="inline" set="null" expr="cast 0xFF8e008e" line="12" static="1">
			<x path="justGraphix.pallette.random.Pride"/>
			<meta>
				<m n=":value"><e>cast 0xFF8e008e</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkMagenta>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.pallette.random.PrideFlag" params="" file="src/justGraphix/pallette/random/PrideFlag.hx">
		<getColors public="1" get="inline" set="null" line="19" static="1"><f a=""><c path="Array"><x path="justGraphix.pallette.random.Pride"/></c></f></getColors>
		<random public="1" get="inline" set="null" line="30" static="1"><f a=""><x path="justGraphix.pallette.random.Pride"/></f></random>
		<getName public="1" get="inline" set="null" line="36" static="1"><f a="s">
	<x path="justGraphix.pallette.random.Pride"/>
	<c path="String"/>
</f></getName>
		<haxe_doc>![prideFlag](../../bootstrap/img/pride.png)</haxe_doc>
	</class>
	<abstract path="justGraphix.pallette.simple.QuickARGB" params="" file="src/justGraphix/pallette/simple/QuickARGB.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>![quick](../../bootstrap/img/quick.png)</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.simple._QuickARGB.QuickARGB_Impl_" params="" file="src/justGraphix/pallette/simple/QuickARGB.hx" private="1" module="justGraphix.pallette.simple.QuickARGB" extern="1" final="1">
	<Violet public="1" get="inline" set="null" expr="cast 0xFF9400D3" line="6" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF9400D3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Violet>
	<Indigo public="1" get="inline" set="null" expr="cast 0xFF4b0082" line="7" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF4b0082</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Indigo>
	<Blue public="1" get="inline" set="null" expr="cast 0xFF0000FF" line="8" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Blue>
	<Green public="1" get="inline" set="null" expr="cast 0xFF00ff00" line="9" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF00ff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Green>
	<Yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="10" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Yellow>
	<Orange public="1" get="inline" set="null" expr="cast 0xFFFF7F00" line="11" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF7F00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Orange>
	<Red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="12" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Red>
	<Black public="1" get="inline" set="null" expr="cast 0xFF000000" line="13" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF000000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Black>
	<LightGrey public="1" get="inline" set="null" expr="cast 0xFF444444" line="14" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF444444</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGrey>
	<MidGrey public="1" get="inline" set="null" expr="cast 0xFF333333" line="15" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF333333</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MidGrey>
	<DarkGrey public="1" get="inline" set="null" expr="cast 0xFF0c0c0c" line="16" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF0c0c0c</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGrey>
	<NearlyBlack public="1" get="inline" set="null" expr="cast 0xFF111111" line="17" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF111111</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NearlyBlack>
	<White public="1" get="inline" set="null" expr="cast 0xFFFFFFFF" line="18" static="1">
		<x path="justGraphix.pallette.simple.QuickARGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</White>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.simple._QuickARGB.QuickARGB_Impl_" params="" file="src/justGraphix/pallette/simple/QuickARGB.hx" private="1" module="justGraphix.pallette.simple.QuickARGB" extern="1" final="1">
		<Violet public="1" get="inline" set="null" expr="cast 0xFF9400D3" line="6" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF9400D3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Violet>
		<Indigo public="1" get="inline" set="null" expr="cast 0xFF4b0082" line="7" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF4b0082</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Indigo>
		<Blue public="1" get="inline" set="null" expr="cast 0xFF0000FF" line="8" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Blue>
		<Green public="1" get="inline" set="null" expr="cast 0xFF00ff00" line="9" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF00ff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Green>
		<Yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="10" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Yellow>
		<Orange public="1" get="inline" set="null" expr="cast 0xFFFF7F00" line="11" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF7F00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Orange>
		<Red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="12" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Red>
		<Black public="1" get="inline" set="null" expr="cast 0xFF000000" line="13" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF000000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Black>
		<LightGrey public="1" get="inline" set="null" expr="cast 0xFF444444" line="14" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF444444</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGrey>
		<MidGrey public="1" get="inline" set="null" expr="cast 0xFF333333" line="15" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF333333</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MidGrey>
		<DarkGrey public="1" get="inline" set="null" expr="cast 0xFF0c0c0c" line="16" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF0c0c0c</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGrey>
		<NearlyBlack public="1" get="inline" set="null" expr="cast 0xFF111111" line="17" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF111111</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NearlyBlack>
		<White public="1" get="inline" set="null" expr="cast 0xFFFFFFFF" line="18" static="1">
			<x path="justGraphix.pallette.simple.QuickARGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</White>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.simple.QuickRGB" params="" file="src/justGraphix/pallette/simple/QuickRGB.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>![quick](../../bootstrap/img/quick.png)</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.simple._QuickRGB.QuickRGB_Impl_" params="" file="src/justGraphix/pallette/simple/QuickRGB.hx" private="1" module="justGraphix.pallette.simple.QuickRGB" extern="1" final="1">
	<Violet public="1" get="inline" set="null" expr="cast 0x9400D3" line="6" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x9400D3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Violet>
	<Indigo public="1" get="inline" set="null" expr="cast 0x4b0082" line="7" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x4b0082</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Indigo>
	<Blue public="1" get="inline" set="null" expr="cast 0x0000FF" line="8" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x0000FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Blue>
	<Green public="1" get="inline" set="null" expr="cast 0x00ff00" line="9" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x00ff00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Green>
	<Yellow public="1" get="inline" set="null" expr="cast 0xFFFF00" line="10" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Yellow>
	<Orange public="1" get="inline" set="null" expr="cast 0xFF7F00" line="11" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF7F00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Orange>
	<Red public="1" get="inline" set="null" expr="cast 0xFF0000" line="12" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Red>
	<Black public="1" get="inline" set="null" expr="cast 0x000000" line="13" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x000000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Black>
	<LightGrey public="1" get="inline" set="null" expr="cast 0x444444" line="14" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x444444</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LightGrey>
	<MidGrey public="1" get="inline" set="null" expr="cast 0x333333" line="15" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x333333</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MidGrey>
	<DarkGrey public="1" get="inline" set="null" expr="cast 0x0c0c0c" line="16" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x0c0c0c</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DarkGrey>
	<NearlyBlack public="1" get="inline" set="null" expr="cast 0x111111" line="17" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x111111</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NearlyBlack>
	<White public="1" get="inline" set="null" expr="cast 0xFFFFFF" line="18" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</White>
	<BlueAlpha public="1" get="inline" set="null" expr="cast 0x0000FF" line="19" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x0000FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BlueAlpha>
	<GreenAlpha public="1" get="inline" set="null" expr="cast 0x00FF00" line="20" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0x00FF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GreenAlpha>
	<RedAlpha public="1" get="inline" set="null" expr="cast 0xFF0000" line="21" static="1">
		<x path="justGraphix.pallette.simple.QuickRGB"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RedAlpha>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.simple._QuickRGB.QuickRGB_Impl_" params="" file="src/justGraphix/pallette/simple/QuickRGB.hx" private="1" module="justGraphix.pallette.simple.QuickRGB" extern="1" final="1">
		<Violet public="1" get="inline" set="null" expr="cast 0x9400D3" line="6" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x9400D3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Violet>
		<Indigo public="1" get="inline" set="null" expr="cast 0x4b0082" line="7" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x4b0082</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Indigo>
		<Blue public="1" get="inline" set="null" expr="cast 0x0000FF" line="8" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x0000FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Blue>
		<Green public="1" get="inline" set="null" expr="cast 0x00ff00" line="9" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x00ff00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Green>
		<Yellow public="1" get="inline" set="null" expr="cast 0xFFFF00" line="10" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Yellow>
		<Orange public="1" get="inline" set="null" expr="cast 0xFF7F00" line="11" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF7F00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Orange>
		<Red public="1" get="inline" set="null" expr="cast 0xFF0000" line="12" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Red>
		<Black public="1" get="inline" set="null" expr="cast 0x000000" line="13" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x000000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Black>
		<LightGrey public="1" get="inline" set="null" expr="cast 0x444444" line="14" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x444444</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LightGrey>
		<MidGrey public="1" get="inline" set="null" expr="cast 0x333333" line="15" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x333333</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MidGrey>
		<DarkGrey public="1" get="inline" set="null" expr="cast 0x0c0c0c" line="16" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x0c0c0c</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DarkGrey>
		<NearlyBlack public="1" get="inline" set="null" expr="cast 0x111111" line="17" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x111111</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NearlyBlack>
		<White public="1" get="inline" set="null" expr="cast 0xFFFFFF" line="18" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</White>
		<BlueAlpha public="1" get="inline" set="null" expr="cast 0x0000FF" line="19" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x0000FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BlueAlpha>
		<GreenAlpha public="1" get="inline" set="null" expr="cast 0x00FF00" line="20" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0x00FF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GreenAlpha>
		<RedAlpha public="1" get="inline" set="null" expr="cast 0xFF0000" line="21" static="1">
			<x path="justGraphix.pallette.simple.QuickRGB"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RedAlpha>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Reds" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Reds_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<chickenBreast public="1" get="inline" set="null" expr="cast 0xFFFFBFB2" line="176" static="1">
		<x path="justGraphix.pallette.wheel.Reds"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFBFB2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chickenBreast>
	<paleRaspberry public="1" get="inline" set="null" expr="cast 0xFFFF907A" line="177" static="1">
		<x path="justGraphix.pallette.wheel.Reds"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF907A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleRaspberry>
	<red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="178" static="1">
		<x path="justGraphix.pallette.wheel.Reds"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF0000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</red>
	<darkRed public="1" get="inline" set="null" expr="cast 0xFFA10000" line="179" static="1">
		<x path="justGraphix.pallette.wheel.Reds"/>
		<meta>
			<m n=":value"><e>cast 0xFFA10000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkRed>
	<marron public="1" get="inline" set="null" expr="cast 0xFF660000" line="180" static="1">
		<x path="justGraphix.pallette.wheel.Reds"/>
		<meta>
			<m n=":value"><e>cast 0xFF660000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</marron>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Reds_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<chickenBreast public="1" get="inline" set="null" expr="cast 0xFFFFBFB2" line="176" static="1">
			<x path="justGraphix.pallette.wheel.Reds"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFBFB2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chickenBreast>
		<paleRaspberry public="1" get="inline" set="null" expr="cast 0xFFFF907A" line="177" static="1">
			<x path="justGraphix.pallette.wheel.Reds"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF907A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleRaspberry>
		<red public="1" get="inline" set="null" expr="cast 0xFFFF0000" line="178" static="1">
			<x path="justGraphix.pallette.wheel.Reds"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF0000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</red>
		<darkRed public="1" get="inline" set="null" expr="cast 0xFFA10000" line="179" static="1">
			<x path="justGraphix.pallette.wheel.Reds"/>
			<meta>
				<m n=":value"><e>cast 0xFFA10000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkRed>
		<marron public="1" get="inline" set="null" expr="cast 0xFF660000" line="180" static="1">
			<x path="justGraphix.pallette.wheel.Reds"/>
			<meta>
				<m n=":value"><e>cast 0xFF660000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</marron>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Oranges" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Oranges_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<parmesan public="1" get="inline" set="null" expr="cast 0xFFFFD2A6" line="183" static="1">
		<x path="justGraphix.pallette.wheel.Oranges"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFD2A6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</parmesan>
	<peanutButter public="1" get="inline" set="null" expr="cast 0xFFFFB266" line="184" static="1">
		<x path="justGraphix.pallette.wheel.Oranges"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFB266</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</peanutButter>
	<orange public="1" get="inline" set="null" expr="cast 0xFFFF8000" line="185" static="1">
		<x path="justGraphix.pallette.wheel.Oranges"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF8000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</orange>
	<brown public="1" get="inline" set="null" expr="cast 0xFFA65300" line="186" static="1">
		<x path="justGraphix.pallette.wheel.Oranges"/>
		<meta>
			<m n=":value"><e>cast 0xFFA65300</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brown>
	<darkBrown public="1" get="inline" set="null" expr="cast 0xFF5F2F00" line="187" static="1">
		<x path="justGraphix.pallette.wheel.Oranges"/>
		<meta>
			<m n=":value"><e>cast 0xFF5F2F00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkBrown>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Oranges_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<parmesan public="1" get="inline" set="null" expr="cast 0xFFFFD2A6" line="183" static="1">
			<x path="justGraphix.pallette.wheel.Oranges"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFD2A6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</parmesan>
		<peanutButter public="1" get="inline" set="null" expr="cast 0xFFFFB266" line="184" static="1">
			<x path="justGraphix.pallette.wheel.Oranges"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFB266</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</peanutButter>
		<orange public="1" get="inline" set="null" expr="cast 0xFFFF8000" line="185" static="1">
			<x path="justGraphix.pallette.wheel.Oranges"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF8000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</orange>
		<brown public="1" get="inline" set="null" expr="cast 0xFFA65300" line="186" static="1">
			<x path="justGraphix.pallette.wheel.Oranges"/>
			<meta>
				<m n=":value"><e>cast 0xFFA65300</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brown>
		<darkBrown public="1" get="inline" set="null" expr="cast 0xFF5F2F00" line="187" static="1">
			<x path="justGraphix.pallette.wheel.Oranges"/>
			<meta>
				<m n=":value"><e>cast 0xFF5F2F00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkBrown>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Turmeric" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Turmeric_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<buff public="1" get="inline" set="null" expr="cast 0xFFFFDAA6" line="190" static="1">
		<x path="justGraphix.pallette.wheel.Turmeric"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFDAA6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</buff>
	<turmeric public="1" get="inline" set="null" expr="cast 0xFFFFBF00" line="191" static="1">
		<x path="justGraphix.pallette.wheel.Turmeric"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFBF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</turmeric>
	<yellowOchre public="1" get="inline" set="null" expr="cast 0xFFD99800" line="192" static="1">
		<x path="justGraphix.pallette.wheel.Turmeric"/>
		<meta>
			<m n=":value"><e>cast 0xFFD99800</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellowOchre>
	<tan public="1" get="inline" set="null" expr="cast 0xFF996B00" line="193" static="1">
		<x path="justGraphix.pallette.wheel.Turmeric"/>
		<meta>
			<m n=":value"><e>cast 0xFF996B00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</tan>
	<milkChocolate public="1" get="inline" set="null" expr="cast 0xFF523900" line="194" static="1">
		<x path="justGraphix.pallette.wheel.Turmeric"/>
		<meta>
			<m n=":value"><e>cast 0xFF523900</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</milkChocolate>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Turmeric_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<buff public="1" get="inline" set="null" expr="cast 0xFFFFDAA6" line="190" static="1">
			<x path="justGraphix.pallette.wheel.Turmeric"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFDAA6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</buff>
		<turmeric public="1" get="inline" set="null" expr="cast 0xFFFFBF00" line="191" static="1">
			<x path="justGraphix.pallette.wheel.Turmeric"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFBF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</turmeric>
		<yellowOchre public="1" get="inline" set="null" expr="cast 0xFFD99800" line="192" static="1">
			<x path="justGraphix.pallette.wheel.Turmeric"/>
			<meta>
				<m n=":value"><e>cast 0xFFD99800</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellowOchre>
		<tan public="1" get="inline" set="null" expr="cast 0xFF996B00" line="193" static="1">
			<x path="justGraphix.pallette.wheel.Turmeric"/>
			<meta>
				<m n=":value"><e>cast 0xFF996B00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</tan>
		<milkChocolate public="1" get="inline" set="null" expr="cast 0xFF523900" line="194" static="1">
			<x path="justGraphix.pallette.wheel.Turmeric"/>
			<meta>
				<m n=":value"><e>cast 0xFF523900</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</milkChocolate>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.YellowCheese" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.YellowCheese_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<wheatEar public="1" get="inline" set="null" expr="cast 0xFFFFE8A1" line="197" static="1">
		<x path="justGraphix.pallette.wheel.YellowCheese"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFE8A1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</wheatEar>
	<yellowCheese public="1" get="inline" set="null" expr="cast 0xFFFFD400" line="198" static="1">
		<x path="justGraphix.pallette.wheel.YellowCheese"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFD400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellowCheese>
	<oliveOil public="1" get="inline" set="null" expr="cast 0xFFCCAA00" line="199" static="1">
		<x path="justGraphix.pallette.wheel.YellowCheese"/>
		<meta>
			<m n=":value"><e>cast 0xFFCCAA00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</oliveOil>
	<caneToad public="1" get="inline" set="null" expr="cast 0xFF8C7400" line="200" static="1">
		<x path="justGraphix.pallette.wheel.YellowCheese"/>
		<meta>
			<m n=":value"><e>cast 0xFF8C7400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</caneToad>
	<cowDung public="1" get="inline" set="null" expr="cast 0xFF473C00" line="201" static="1">
		<x path="justGraphix.pallette.wheel.YellowCheese"/>
		<meta>
			<m n=":value"><e>cast 0xFF473C00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cowDung>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.YellowCheese_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<wheatEar public="1" get="inline" set="null" expr="cast 0xFFFFE8A1" line="197" static="1">
			<x path="justGraphix.pallette.wheel.YellowCheese"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFE8A1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</wheatEar>
		<yellowCheese public="1" get="inline" set="null" expr="cast 0xFFFFD400" line="198" static="1">
			<x path="justGraphix.pallette.wheel.YellowCheese"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFD400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellowCheese>
		<oliveOil public="1" get="inline" set="null" expr="cast 0xFFCCAA00" line="199" static="1">
			<x path="justGraphix.pallette.wheel.YellowCheese"/>
			<meta>
				<m n=":value"><e>cast 0xFFCCAA00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</oliveOil>
		<caneToad public="1" get="inline" set="null" expr="cast 0xFF8C7400" line="200" static="1">
			<x path="justGraphix.pallette.wheel.YellowCheese"/>
			<meta>
				<m n=":value"><e>cast 0xFF8C7400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</caneToad>
		<cowDung public="1" get="inline" set="null" expr="cast 0xFF473C00" line="201" static="1">
			<x path="justGraphix.pallette.wheel.YellowCheese"/>
			<meta>
				<m n=":value"><e>cast 0xFF473C00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cowDung>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Yellows" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Yellows_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<butter public="1" get="inline" set="null" expr="cast 0xFFFFFFA6" line="204" static="1">
		<x path="justGraphix.pallette.wheel.Yellows"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFFA6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</butter>
	<yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="205" static="1">
		<x path="justGraphix.pallette.wheel.Yellows"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellow>
	<wasabi public="1" get="inline" set="null" expr="cast 0xFFC4C400" line="206" static="1">
		<x path="justGraphix.pallette.wheel.Yellows"/>
		<meta>
			<m n=":value"><e>cast 0xFFC4C400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</wasabi>
	<olive public="1" get="inline" set="null" expr="cast 0xFF8A8A00" line="207" static="1">
		<x path="justGraphix.pallette.wheel.Yellows"/>
		<meta>
			<m n=":value"><e>cast 0xFF8A8A00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</olive>
	<oliveDrab public="1" get="inline" set="null" expr="cast 0xFF454500" line="208" static="1">
		<x path="justGraphix.pallette.wheel.Yellows"/>
		<meta>
			<m n=":value"><e>cast 0xFF454500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</oliveDrab>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Yellows_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<butter public="1" get="inline" set="null" expr="cast 0xFFFFFFA6" line="204" static="1">
			<x path="justGraphix.pallette.wheel.Yellows"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFFA6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</butter>
		<yellow public="1" get="inline" set="null" expr="cast 0xFFFFFF00" line="205" static="1">
			<x path="justGraphix.pallette.wheel.Yellows"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellow>
		<wasabi public="1" get="inline" set="null" expr="cast 0xFFC4C400" line="206" static="1">
			<x path="justGraphix.pallette.wheel.Yellows"/>
			<meta>
				<m n=":value"><e>cast 0xFFC4C400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</wasabi>
		<olive public="1" get="inline" set="null" expr="cast 0xFF8A8A00" line="207" static="1">
			<x path="justGraphix.pallette.wheel.Yellows"/>
			<meta>
				<m n=":value"><e>cast 0xFF8A8A00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</olive>
		<oliveDrab public="1" get="inline" set="null" expr="cast 0xFF454500" line="208" static="1">
			<x path="justGraphix.pallette.wheel.Yellows"/>
			<meta>
				<m n=":value"><e>cast 0xFF454500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</oliveDrab>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.GreenGrape" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.GreenGrape_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<champagne public="1" get="inline" set="null" expr="cast 0xFFECFFA6" line="211" static="1">
		<x path="justGraphix.pallette.wheel.GreenGrape"/>
		<meta>
			<m n=":value"><e>cast 0xFFECFFA6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</champagne>
	<goldenDelicious public="1" get="inline" set="null" expr="cast 0xFFDDFF00" line="212" static="1">
		<x path="justGraphix.pallette.wheel.GreenGrape"/>
		<meta>
			<m n=":value"><e>cast 0xFFDDFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</goldenDelicious>
	<greenGrape public="1" get="inline" set="null" expr="cast 0xFFB6C700" line="213" static="1">
		<x path="justGraphix.pallette.wheel.GreenGrape"/>
		<meta>
			<m n=":value"><e>cast 0xFFB6C700</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</greenGrape>
	<lightKelp public="1" get="inline" set="null" expr="cast 0xFF7A8500" line="214" static="1">
		<x path="justGraphix.pallette.wheel.GreenGrape"/>
		<meta>
			<m n=":value"><e>cast 0xFF7A8500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightKelp>
	<darkKelp public="1" get="inline" set="null" expr="cast 0xFF3C4200" line="215" static="1">
		<x path="justGraphix.pallette.wheel.GreenGrape"/>
		<meta>
			<m n=":value"><e>cast 0xFF3C4200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkKelp>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.GreenGrape_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<champagne public="1" get="inline" set="null" expr="cast 0xFFECFFA6" line="211" static="1">
			<x path="justGraphix.pallette.wheel.GreenGrape"/>
			<meta>
				<m n=":value"><e>cast 0xFFECFFA6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</champagne>
		<goldenDelicious public="1" get="inline" set="null" expr="cast 0xFFDDFF00" line="212" static="1">
			<x path="justGraphix.pallette.wheel.GreenGrape"/>
			<meta>
				<m n=":value"><e>cast 0xFFDDFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</goldenDelicious>
		<greenGrape public="1" get="inline" set="null" expr="cast 0xFFB6C700" line="213" static="1">
			<x path="justGraphix.pallette.wheel.GreenGrape"/>
			<meta>
				<m n=":value"><e>cast 0xFFB6C700</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</greenGrape>
		<lightKelp public="1" get="inline" set="null" expr="cast 0xFF7A8500" line="214" static="1">
			<x path="justGraphix.pallette.wheel.GreenGrape"/>
			<meta>
				<m n=":value"><e>cast 0xFF7A8500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightKelp>
		<darkKelp public="1" get="inline" set="null" expr="cast 0xFF3C4200" line="215" static="1">
			<x path="justGraphix.pallette.wheel.GreenGrape"/>
			<meta>
				<m n=":value"><e>cast 0xFF3C4200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkKelp>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Chartreuse" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Chartreuse_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<avacado public="1" get="inline" set="null" expr="cast 0xFFDBFF9E" line="218" static="1">
		<x path="justGraphix.pallette.wheel.Chartreuse"/>
		<meta>
			<m n=":value"><e>cast 0xFFDBFF9E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</avacado>
	<chartreuse public="1" get="inline" set="null" expr="cast 0xFFBBFF00" line="219" static="1">
		<x path="justGraphix.pallette.wheel.Chartreuse"/>
		<meta>
			<m n=":value"><e>cast 0xFFBBFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chartreuse>
	<celery public="1" get="inline" set="null" expr="cast 0xFF96CC00" line="220" static="1">
		<x path="justGraphix.pallette.wheel.Chartreuse"/>
		<meta>
			<m n=":value"><e>cast 0xFF96CC00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</celery>
	<sage public="1" get="inline" set="null" expr="cast 0xFF6A9100" line="221" static="1">
		<x path="justGraphix.pallette.wheel.Chartreuse"/>
		<meta>
			<m n=":value"><e>cast 0xFF6A9100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</sage>
	<oakLeaf public="1" get="inline" set="null" expr="cast 0xFF334500" line="222" static="1">
		<x path="justGraphix.pallette.wheel.Chartreuse"/>
		<meta>
			<m n=":value"><e>cast 0xFF334500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</oakLeaf>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Chartreuse_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<avacado public="1" get="inline" set="null" expr="cast 0xFFDBFF9E" line="218" static="1">
			<x path="justGraphix.pallette.wheel.Chartreuse"/>
			<meta>
				<m n=":value"><e>cast 0xFFDBFF9E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</avacado>
		<chartreuse public="1" get="inline" set="null" expr="cast 0xFFBBFF00" line="219" static="1">
			<x path="justGraphix.pallette.wheel.Chartreuse"/>
			<meta>
				<m n=":value"><e>cast 0xFFBBFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chartreuse>
		<celery public="1" get="inline" set="null" expr="cast 0xFF96CC00" line="220" static="1">
			<x path="justGraphix.pallette.wheel.Chartreuse"/>
			<meta>
				<m n=":value"><e>cast 0xFF96CC00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</celery>
		<sage public="1" get="inline" set="null" expr="cast 0xFF6A9100" line="221" static="1">
			<x path="justGraphix.pallette.wheel.Chartreuse"/>
			<meta>
				<m n=":value"><e>cast 0xFF6A9100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</sage>
		<oakLeaf public="1" get="inline" set="null" expr="cast 0xFF334500" line="222" static="1">
			<x path="justGraphix.pallette.wheel.Chartreuse"/>
			<meta>
				<m n=":value"><e>cast 0xFF334500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</oakLeaf>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.GreenPea" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.GreenPea_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<greenCabbage public="1" get="inline" set="null" expr="cast 0xFFC6FF9E" line="225" static="1">
		<x path="justGraphix.pallette.wheel.GreenPea"/>
		<meta>
			<m n=":value"><e>cast 0xFFC6FF9E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</greenCabbage>
	<greenPea public="1" get="inline" set="null" expr="cast 0xFF9DFF00" line="226" static="1">
		<x path="justGraphix.pallette.wheel.GreenPea"/>
		<meta>
			<m n=":value"><e>cast 0xFF9DFF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</greenPea>
	<basil public="1" get="inline" set="null" expr="cast 0xFF6CC400" line="227" static="1">
		<x path="justGraphix.pallette.wheel.GreenPea"/>
		<meta>
			<m n=":value"><e>cast 0xFF6CC400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</basil>
	<spinach public="1" get="inline" set="null" expr="cast 0xFF549900" line="228" static="1">
		<x path="justGraphix.pallette.wheel.GreenPea"/>
		<meta>
			<m n=":value"><e>cast 0xFF549900</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spinach>
	<rhubarbLeaf public="1" get="inline" set="null" expr="cast 0xFF294A00" line="229" static="1">
		<x path="justGraphix.pallette.wheel.GreenPea"/>
		<meta>
			<m n=":value"><e>cast 0xFF294A00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rhubarbLeaf>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.GreenPea_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<greenCabbage public="1" get="inline" set="null" expr="cast 0xFFC6FF9E" line="225" static="1">
			<x path="justGraphix.pallette.wheel.GreenPea"/>
			<meta>
				<m n=":value"><e>cast 0xFFC6FF9E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</greenCabbage>
		<greenPea public="1" get="inline" set="null" expr="cast 0xFF9DFF00" line="226" static="1">
			<x path="justGraphix.pallette.wheel.GreenPea"/>
			<meta>
				<m n=":value"><e>cast 0xFF9DFF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</greenPea>
		<basil public="1" get="inline" set="null" expr="cast 0xFF6CC400" line="227" static="1">
			<x path="justGraphix.pallette.wheel.GreenPea"/>
			<meta>
				<m n=":value"><e>cast 0xFF6CC400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</basil>
		<spinach public="1" get="inline" set="null" expr="cast 0xFF549900" line="228" static="1">
			<x path="justGraphix.pallette.wheel.GreenPea"/>
			<meta>
				<m n=":value"><e>cast 0xFF549900</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spinach>
		<rhubarbLeaf public="1" get="inline" set="null" expr="cast 0xFF294A00" line="229" static="1">
			<x path="justGraphix.pallette.wheel.GreenPea"/>
			<meta>
				<m n=":value"><e>cast 0xFF294A00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rhubarbLeaf>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Green" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Green_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<greenHellebore public="1" get="inline" set="null" expr="cast 0xFFB2FFA3" line="232" static="1">
		<x path="justGraphix.pallette.wheel.Green"/>
		<meta>
			<m n=":value"><e>cast 0xFFB2FFA3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</greenHellebore>
	<grannySmith public="1" get="inline" set="null" expr="cast 0xFF00FF00" line="233" static="1">
		<x path="justGraphix.pallette.wheel.Green"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</grannySmith>
	<green public="1" get="inline" set="null" expr="cast 0xFF00BF00" line="234" static="1">
		<x path="justGraphix.pallette.wheel.Green"/>
		<meta>
			<m n=":value"><e>cast 0xFF00BF00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</green>
	<grassGreen public="1" get="inline" set="null" expr="cast 0xFF009900" line="235" static="1">
		<x path="justGraphix.pallette.wheel.Green"/>
		<meta>
			<m n=":value"><e>cast 0xFF009900</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</grassGreen>
	<zucchini public="1" get="inline" set="null" expr="cast 0xFF004F00" line="236" static="1">
		<x path="justGraphix.pallette.wheel.Green"/>
		<meta>
			<m n=":value"><e>cast 0xFF004F00</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</zucchini>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Green_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<greenHellebore public="1" get="inline" set="null" expr="cast 0xFFB2FFA3" line="232" static="1">
			<x path="justGraphix.pallette.wheel.Green"/>
			<meta>
				<m n=":value"><e>cast 0xFFB2FFA3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</greenHellebore>
		<grannySmith public="1" get="inline" set="null" expr="cast 0xFF00FF00" line="233" static="1">
			<x path="justGraphix.pallette.wheel.Green"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</grannySmith>
		<green public="1" get="inline" set="null" expr="cast 0xFF00BF00" line="234" static="1">
			<x path="justGraphix.pallette.wheel.Green"/>
			<meta>
				<m n=":value"><e>cast 0xFF00BF00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</green>
		<grassGreen public="1" get="inline" set="null" expr="cast 0xFF009900" line="235" static="1">
			<x path="justGraphix.pallette.wheel.Green"/>
			<meta>
				<m n=":value"><e>cast 0xFF009900</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</grassGreen>
		<zucchini public="1" get="inline" set="null" expr="cast 0xFF004F00" line="236" static="1">
			<x path="justGraphix.pallette.wheel.Green"/>
			<meta>
				<m n=":value"><e>cast 0xFF004F00</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</zucchini>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Clover" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Clover_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<celadon public="1" get="inline" set="null" expr="cast 0xFFA8FFAB" line="239" static="1">
		<x path="justGraphix.pallette.wheel.Clover"/>
		<meta>
			<m n=":value"><e>cast 0xFFA8FFAB</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</celadon>
	<chayote public="1" get="inline" set="null" expr="cast 0xFF00FF73" line="240" static="1">
		<x path="justGraphix.pallette.wheel.Clover"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FF73</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chayote>
	<clover public="1" get="inline" set="null" expr="cast 0xFF00B551" line="241" static="1">
		<x path="justGraphix.pallette.wheel.Clover"/>
		<meta>
			<m n=":value"><e>cast 0xFF00B551</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</clover>
	<shadedFern public="1" get="inline" set="null" expr="cast 0xFF009945" line="242" static="1">
		<x path="justGraphix.pallette.wheel.Clover"/>
		<meta>
			<m n=":value"><e>cast 0xFF009945</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</shadedFern>
	<cucumber public="1" get="inline" set="null" expr="cast 0xFF004F24" line="243" static="1">
		<x path="justGraphix.pallette.wheel.Clover"/>
		<meta>
			<m n=":value"><e>cast 0xFF004F24</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cucumber>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Clover_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<celadon public="1" get="inline" set="null" expr="cast 0xFFA8FFAB" line="239" static="1">
			<x path="justGraphix.pallette.wheel.Clover"/>
			<meta>
				<m n=":value"><e>cast 0xFFA8FFAB</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</celadon>
		<chayote public="1" get="inline" set="null" expr="cast 0xFF00FF73" line="240" static="1">
			<x path="justGraphix.pallette.wheel.Clover"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FF73</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chayote>
		<clover public="1" get="inline" set="null" expr="cast 0xFF00B551" line="241" static="1">
			<x path="justGraphix.pallette.wheel.Clover"/>
			<meta>
				<m n=":value"><e>cast 0xFF00B551</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</clover>
		<shadedFern public="1" get="inline" set="null" expr="cast 0xFF009945" line="242" static="1">
			<x path="justGraphix.pallette.wheel.Clover"/>
			<meta>
				<m n=":value"><e>cast 0xFF009945</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</shadedFern>
		<cucumber public="1" get="inline" set="null" expr="cast 0xFF004F24" line="243" static="1">
			<x path="justGraphix.pallette.wheel.Clover"/>
			<meta>
				<m n=":value"><e>cast 0xFF004F24</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cucumber>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Emerald" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Emerald_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<variscite public="1" get="inline" set="null" expr="cast 0xFFABFFC6" line="246" static="1">
		<x path="justGraphix.pallette.wheel.Emerald"/>
		<meta>
			<m n=":value"><e>cast 0xFFABFFC6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</variscite>
	<chrysolite public="1" get="inline" set="null" expr="cast 0xFF00FFAA" line="247" static="1">
		<x path="justGraphix.pallette.wheel.Emerald"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FFAA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chrysolite>
	<lightEmerald public="1" get="inline" set="null" expr="cast 0xFF00B277" line="248" static="1">
		<x path="justGraphix.pallette.wheel.Emerald"/>
		<meta>
			<m n=":value"><e>cast 0xFF00B277</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightEmerald>
	<emerald public="1" get="inline" set="null" expr="cast 0xFF009463" line="249" static="1">
		<x path="justGraphix.pallette.wheel.Emerald"/>
		<meta>
			<m n=":value"><e>cast 0xFF009463</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</emerald>
	<brunswickGreen public="1" get="inline" set="null" expr="cast 0xFF004C33" line="250" static="1">
		<x path="justGraphix.pallette.wheel.Emerald"/>
		<meta>
			<m n=":value"><e>cast 0xFF004C33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</brunswickGreen>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Emerald_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<variscite public="1" get="inline" set="null" expr="cast 0xFFABFFC6" line="246" static="1">
			<x path="justGraphix.pallette.wheel.Emerald"/>
			<meta>
				<m n=":value"><e>cast 0xFFABFFC6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</variscite>
		<chrysolite public="1" get="inline" set="null" expr="cast 0xFF00FFAA" line="247" static="1">
			<x path="justGraphix.pallette.wheel.Emerald"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FFAA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chrysolite>
		<lightEmerald public="1" get="inline" set="null" expr="cast 0xFF00B277" line="248" static="1">
			<x path="justGraphix.pallette.wheel.Emerald"/>
			<meta>
				<m n=":value"><e>cast 0xFF00B277</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightEmerald>
		<emerald public="1" get="inline" set="null" expr="cast 0xFF009463" line="249" static="1">
			<x path="justGraphix.pallette.wheel.Emerald"/>
			<meta>
				<m n=":value"><e>cast 0xFF009463</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</emerald>
		<brunswickGreen public="1" get="inline" set="null" expr="cast 0xFF004C33" line="250" static="1">
			<x path="justGraphix.pallette.wheel.Emerald"/>
			<meta>
				<m n=":value"><e>cast 0xFF004C33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</brunswickGreen>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Malachite" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Malachite_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<blueAgave public="1" get="inline" set="null" expr="cast 0xFFA3FFD4" line="253" static="1">
		<x path="justGraphix.pallette.wheel.Malachite"/>
		<meta>
			<m n=":value"><e>cast 0xFFA3FFD4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueAgave>
	<verdigris public="1" get="inline" set="null" expr="cast 0xFF00FFC3" line="254" static="1">
		<x path="justGraphix.pallette.wheel.Malachite"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FFC3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</verdigris>
	<shallowSeaGreen public="1" get="inline" set="null" expr="cast 0xFF00B89F" line="255" static="1">
		<x path="justGraphix.pallette.wheel.Malachite"/>
		<meta>
			<m n=":value"><e>cast 0xFF00B89F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</shallowSeaGreen>
	<broccoli public="1" get="inline" set="null" expr="cast 0xFF00917E" line="256" static="1">
		<x path="justGraphix.pallette.wheel.Malachite"/>
		<meta>
			<m n=":value"><e>cast 0xFF00917E</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</broccoli>
	<malachite public="1" get="inline" set="null" expr="cast 0xFF004C42" line="257" static="1">
		<x path="justGraphix.pallette.wheel.Malachite"/>
		<meta>
			<m n=":value"><e>cast 0xFF004C42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</malachite>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Malachite_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<blueAgave public="1" get="inline" set="null" expr="cast 0xFFA3FFD4" line="253" static="1">
			<x path="justGraphix.pallette.wheel.Malachite"/>
			<meta>
				<m n=":value"><e>cast 0xFFA3FFD4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueAgave>
		<verdigris public="1" get="inline" set="null" expr="cast 0xFF00FFC3" line="254" static="1">
			<x path="justGraphix.pallette.wheel.Malachite"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FFC3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</verdigris>
		<shallowSeaGreen public="1" get="inline" set="null" expr="cast 0xFF00B89F" line="255" static="1">
			<x path="justGraphix.pallette.wheel.Malachite"/>
			<meta>
				<m n=":value"><e>cast 0xFF00B89F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</shallowSeaGreen>
		<broccoli public="1" get="inline" set="null" expr="cast 0xFF00917E" line="256" static="1">
			<x path="justGraphix.pallette.wheel.Malachite"/>
			<meta>
				<m n=":value"><e>cast 0xFF00917E</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</broccoli>
		<malachite public="1" get="inline" set="null" expr="cast 0xFF004C42" line="257" static="1">
			<x path="justGraphix.pallette.wheel.Malachite"/>
			<meta>
				<m n=":value"><e>cast 0xFF004C42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</malachite>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Cyan" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Cyan_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<blueSpruceLight public="1" get="inline" set="null" expr="cast 0xFFA6FFFF" line="260" static="1">
		<x path="justGraphix.pallette.wheel.Cyan"/>
		<meta>
			<m n=":value"><e>cast 0xFFA6FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueSpruceLight>
	<cyan public="1" get="inline" set="null" expr="cast 0xFF00FFFF" line="261" static="1">
		<x path="justGraphix.pallette.wheel.Cyan"/>
		<meta>
			<m n=":value"><e>cast 0xFF00FFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cyan>
	<darkCyan public="1" get="inline" set="null" expr="cast 0xFF00B2B2" line="262" static="1">
		<x path="justGraphix.pallette.wheel.Cyan"/>
		<meta>
			<m n=":value"><e>cast 0xFF00B2B2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkCyan>
	<blueSpruceDark public="1" get="inline" set="null" expr="cast 0xFF008C8C" line="263" static="1">
		<x path="justGraphix.pallette.wheel.Cyan"/>
		<meta>
			<m n=":value"><e>cast 0xFF008C8C</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueSpruceDark>
	<pthaloGreen public="1" get="inline" set="null" expr="cast 0xFF004A4A" line="264" static="1">
		<x path="justGraphix.pallette.wheel.Cyan"/>
		<meta>
			<m n=":value"><e>cast 0xFF004A4A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pthaloGreen>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Cyan_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<blueSpruceLight public="1" get="inline" set="null" expr="cast 0xFFA6FFFF" line="260" static="1">
			<x path="justGraphix.pallette.wheel.Cyan"/>
			<meta>
				<m n=":value"><e>cast 0xFFA6FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueSpruceLight>
		<cyan public="1" get="inline" set="null" expr="cast 0xFF00FFFF" line="261" static="1">
			<x path="justGraphix.pallette.wheel.Cyan"/>
			<meta>
				<m n=":value"><e>cast 0xFF00FFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cyan>
		<darkCyan public="1" get="inline" set="null" expr="cast 0xFF00B2B2" line="262" static="1">
			<x path="justGraphix.pallette.wheel.Cyan"/>
			<meta>
				<m n=":value"><e>cast 0xFF00B2B2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkCyan>
		<blueSpruceDark public="1" get="inline" set="null" expr="cast 0xFF008C8C" line="263" static="1">
			<x path="justGraphix.pallette.wheel.Cyan"/>
			<meta>
				<m n=":value"><e>cast 0xFF008C8C</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueSpruceDark>
		<pthaloGreen public="1" get="inline" set="null" expr="cast 0xFF004A4A" line="264" static="1">
			<x path="justGraphix.pallette.wheel.Cyan"/>
			<meta>
				<m n=":value"><e>cast 0xFF004A4A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pthaloGreen>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Turquoise" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Turquoise_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<uranus public="1" get="inline" set="null" expr="cast 0xFF99DDFF" line="267" static="1">
		<x path="justGraphix.pallette.wheel.Turquoise"/>
		<meta>
			<m n=":value"><e>cast 0xFF99DDFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</uranus>
	<turquoise public="1" get="inline" set="null" expr="cast 0xFF00C3FF" line="268" static="1">
		<x path="justGraphix.pallette.wheel.Turquoise"/>
		<meta>
			<m n=":value"><e>cast 0xFF00C3FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</turquoise>
	<blueTopaz public="1" get="inline" set="null" expr="cast 0xFF0099B8" line="269" static="1">
		<x path="justGraphix.pallette.wheel.Turquoise"/>
		<meta>
			<m n=":value"><e>cast 0xFF0099B8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueTopaz>
	<seaGreen public="1" get="inline" set="null" expr="cast 0xFF007F99" line="270" static="1">
		<x path="justGraphix.pallette.wheel.Turquoise"/>
		<meta>
			<m n=":value"><e>cast 0xFF007F99</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</seaGreen>
	<darkSeaGreen public="1" get="inline" set="null" expr="cast 0xFF00424F" line="271" static="1">
		<x path="justGraphix.pallette.wheel.Turquoise"/>
		<meta>
			<m n=":value"><e>cast 0xFF00424F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkSeaGreen>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Turquoise_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<uranus public="1" get="inline" set="null" expr="cast 0xFF99DDFF" line="267" static="1">
			<x path="justGraphix.pallette.wheel.Turquoise"/>
			<meta>
				<m n=":value"><e>cast 0xFF99DDFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</uranus>
		<turquoise public="1" get="inline" set="null" expr="cast 0xFF00C3FF" line="268" static="1">
			<x path="justGraphix.pallette.wheel.Turquoise"/>
			<meta>
				<m n=":value"><e>cast 0xFF00C3FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</turquoise>
		<blueTopaz public="1" get="inline" set="null" expr="cast 0xFF0099B8" line="269" static="1">
			<x path="justGraphix.pallette.wheel.Turquoise"/>
			<meta>
				<m n=":value"><e>cast 0xFF0099B8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueTopaz>
		<seaGreen public="1" get="inline" set="null" expr="cast 0xFF007F99" line="270" static="1">
			<x path="justGraphix.pallette.wheel.Turquoise"/>
			<meta>
				<m n=":value"><e>cast 0xFF007F99</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</seaGreen>
		<darkSeaGreen public="1" get="inline" set="null" expr="cast 0xFF00424F" line="271" static="1">
			<x path="justGraphix.pallette.wheel.Turquoise"/>
			<meta>
				<m n=":value"><e>cast 0xFF00424F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkSeaGreen>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Azure" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Azure_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<powderBlue public="1" get="inline" set="null" expr="cast 0xFF91C8FF" line="274" static="1">
		<x path="justGraphix.pallette.wheel.Azure"/>
		<meta>
			<m n=":value"><e>cast 0xFF91C8FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</powderBlue>
	<lightAzure public="1" get="inline" set="null" expr="cast 0xFF00AAFF" line="275" static="1">
		<x path="justGraphix.pallette.wheel.Azure"/>
		<meta>
			<m n=":value"><e>cast 0xFF00AAFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightAzure>
	<darkAzure public="1" get="inline" set="null" expr="cast 0xFF0077B2" line="276" static="1">
		<x path="justGraphix.pallette.wheel.Azure"/>
		<meta>
			<m n=":value"><e>cast 0xFF0077B2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkAzure>
	<cobaltBlue public="1" get="inline" set="null" expr="cast 0xFF005A87" line="277" static="1">
		<x path="justGraphix.pallette.wheel.Azure"/>
		<meta>
			<m n=":value"><e>cast 0xFF005A87</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cobaltBlue>
	<prussianBlue public="1" get="inline" set="null" expr="cast 0xFF003957" line="278" static="1">
		<x path="justGraphix.pallette.wheel.Azure"/>
		<meta>
			<m n=":value"><e>cast 0xFF003957</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</prussianBlue>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Azure_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<powderBlue public="1" get="inline" set="null" expr="cast 0xFF91C8FF" line="274" static="1">
			<x path="justGraphix.pallette.wheel.Azure"/>
			<meta>
				<m n=":value"><e>cast 0xFF91C8FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</powderBlue>
		<lightAzure public="1" get="inline" set="null" expr="cast 0xFF00AAFF" line="275" static="1">
			<x path="justGraphix.pallette.wheel.Azure"/>
			<meta>
				<m n=":value"><e>cast 0xFF00AAFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightAzure>
		<darkAzure public="1" get="inline" set="null" expr="cast 0xFF0077B2" line="276" static="1">
			<x path="justGraphix.pallette.wheel.Azure"/>
			<meta>
				<m n=":value"><e>cast 0xFF0077B2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkAzure>
		<cobaltBlue public="1" get="inline" set="null" expr="cast 0xFF005A87" line="277" static="1">
			<x path="justGraphix.pallette.wheel.Azure"/>
			<meta>
				<m n=":value"><e>cast 0xFF005A87</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cobaltBlue>
		<prussianBlue public="1" get="inline" set="null" expr="cast 0xFF003957" line="278" static="1">
			<x path="justGraphix.pallette.wheel.Azure"/>
			<meta>
				<m n=":value"><e>cast 0xFF003957</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</prussianBlue>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.RoyalBlue" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.RoyalBlue_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<paleSkyBlue public="1" get="inline" set="null" expr="cast 0xFF9CBDFF" line="281" static="1">
		<x path="justGraphix.pallette.wheel.RoyalBlue"/>
		<meta>
			<m n=":value"><e>cast 0xFF9CBDFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</paleSkyBlue>
	<skyBlue public="1" get="inline" set="null" expr="cast 0xFF73A2FF" line="282" static="1">
		<x path="justGraphix.pallette.wheel.RoyalBlue"/>
		<meta>
			<m n=":value"><e>cast 0xFF73A2FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</skyBlue>
	<delphiniumBlue public="1" get="inline" set="null" expr="cast 0xFF006EFF" line="283" static="1">
		<x path="justGraphix.pallette.wheel.RoyalBlue"/>
		<meta>
			<m n=":value"><e>cast 0xFF006EFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</delphiniumBlue>
	<royalBlue public="1" get="inline" set="null" expr="cast 0xFF004299" line="284" static="1">
		<x path="justGraphix.pallette.wheel.RoyalBlue"/>
		<meta>
			<m n=":value"><e>cast 0xFF004299</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</royalBlue>
	<darkRoyalBlue public="1" get="inline" set="null" expr="cast 0xFF002C66" line="285" static="1">
		<x path="justGraphix.pallette.wheel.RoyalBlue"/>
		<meta>
			<m n=":value"><e>cast 0xFF002C66</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkRoyalBlue>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.RoyalBlue_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<paleSkyBlue public="1" get="inline" set="null" expr="cast 0xFF9CBDFF" line="281" static="1">
			<x path="justGraphix.pallette.wheel.RoyalBlue"/>
			<meta>
				<m n=":value"><e>cast 0xFF9CBDFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</paleSkyBlue>
		<skyBlue public="1" get="inline" set="null" expr="cast 0xFF73A2FF" line="282" static="1">
			<x path="justGraphix.pallette.wheel.RoyalBlue"/>
			<meta>
				<m n=":value"><e>cast 0xFF73A2FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</skyBlue>
		<delphiniumBlue public="1" get="inline" set="null" expr="cast 0xFF006EFF" line="283" static="1">
			<x path="justGraphix.pallette.wheel.RoyalBlue"/>
			<meta>
				<m n=":value"><e>cast 0xFF006EFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</delphiniumBlue>
		<royalBlue public="1" get="inline" set="null" expr="cast 0xFF004299" line="284" static="1">
			<x path="justGraphix.pallette.wheel.RoyalBlue"/>
			<meta>
				<m n=":value"><e>cast 0xFF004299</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</royalBlue>
		<darkRoyalBlue public="1" get="inline" set="null" expr="cast 0xFF002C66" line="285" static="1">
			<x path="justGraphix.pallette.wheel.RoyalBlue"/>
			<meta>
				<m n=":value"><e>cast 0xFF002C66</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkRoyalBlue>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Blue" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Blue_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<forgetMeNot public="1" get="inline" set="null" expr="cast 0xFFABABFF" line="288" static="1">
		<x path="justGraphix.pallette.wheel.Blue"/>
		<meta>
			<m n=":value"><e>cast 0xFFABABFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</forgetMeNot>
	<cornflower public="1" get="inline" set="null" expr="cast 0xFF8585FF" line="289" static="1">
		<x path="justGraphix.pallette.wheel.Blue"/>
		<meta>
			<m n=":value"><e>cast 0xFF8585FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</cornflower>
	<lightBlue public="1" get="inline" set="null" expr="cast 0xFF4C58FF" line="290" static="1">
		<x path="justGraphix.pallette.wheel.Blue"/>
		<meta>
			<m n=":value"><e>cast 0xFF4C58FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightBlue>
	<blue public="1" get="inline" set="null" expr="cast 0xFF0000FF" line="291" static="1">
		<x path="justGraphix.pallette.wheel.Blue"/>
		<meta>
			<m n=":value"><e>cast 0xFF0000FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blue>
	<darkBlue public="1" get="inline" set="null" expr="cast 0xFF00007A" line="292" static="1">
		<x path="justGraphix.pallette.wheel.Blue"/>
		<meta>
			<m n=":value"><e>cast 0xFF00007A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkBlue>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Blue_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<forgetMeNot public="1" get="inline" set="null" expr="cast 0xFFABABFF" line="288" static="1">
			<x path="justGraphix.pallette.wheel.Blue"/>
			<meta>
				<m n=":value"><e>cast 0xFFABABFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</forgetMeNot>
		<cornflower public="1" get="inline" set="null" expr="cast 0xFF8585FF" line="289" static="1">
			<x path="justGraphix.pallette.wheel.Blue"/>
			<meta>
				<m n=":value"><e>cast 0xFF8585FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</cornflower>
		<lightBlue public="1" get="inline" set="null" expr="cast 0xFF4C58FF" line="290" static="1">
			<x path="justGraphix.pallette.wheel.Blue"/>
			<meta>
				<m n=":value"><e>cast 0xFF4C58FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightBlue>
		<blue public="1" get="inline" set="null" expr="cast 0xFF0000FF" line="291" static="1">
			<x path="justGraphix.pallette.wheel.Blue"/>
			<meta>
				<m n=":value"><e>cast 0xFF0000FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blue>
		<darkBlue public="1" get="inline" set="null" expr="cast 0xFF00007A" line="292" static="1">
			<x path="justGraphix.pallette.wheel.Blue"/>
			<meta>
				<m n=":value"><e>cast 0xFF00007A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkBlue>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Dioxazine" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Dioxazine_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<rosaDeFrance public="1" get="inline" set="null" expr="cast 0xFFD9BFFF" line="295" static="1">
		<x path="justGraphix.pallette.wheel.Dioxazine"/>
		<meta>
			<m n=":value"><e>cast 0xFFD9BFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</rosaDeFrance>
	<lavender public="1" get="inline" set="null" expr="cast 0xFFB580FF" line="296" static="1">
		<x path="justGraphix.pallette.wheel.Dioxazine"/>
		<meta>
			<m n=":value"><e>cast 0xFFB580FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lavender>
	<hanPurple public="1" get="inline" set="null" expr="cast 0xFF6A00FF" line="297" static="1">
		<x path="justGraphix.pallette.wheel.Dioxazine"/>
		<meta>
			<m n=":value"><e>cast 0xFF6A00FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</hanPurple>
	<darkHanPurple public="1" get="inline" set="null" expr="cast 0xFF4A00B2" line="298" static="1">
		<x path="justGraphix.pallette.wheel.Dioxazine"/>
		<meta>
			<m n=":value"><e>cast 0xFF4A00B2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkHanPurple>
	<dioxazine public="1" get="inline" set="null" expr="cast 0xFF350080" line="299" static="1">
		<x path="justGraphix.pallette.wheel.Dioxazine"/>
		<meta>
			<m n=":value"><e>cast 0xFF350080</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dioxazine>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Dioxazine_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<rosaDeFrance public="1" get="inline" set="null" expr="cast 0xFFD9BFFF" line="295" static="1">
			<x path="justGraphix.pallette.wheel.Dioxazine"/>
			<meta>
				<m n=":value"><e>cast 0xFFD9BFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</rosaDeFrance>
		<lavender public="1" get="inline" set="null" expr="cast 0xFFB580FF" line="296" static="1">
			<x path="justGraphix.pallette.wheel.Dioxazine"/>
			<meta>
				<m n=":value"><e>cast 0xFFB580FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lavender>
		<hanPurple public="1" get="inline" set="null" expr="cast 0xFF6A00FF" line="297" static="1">
			<x path="justGraphix.pallette.wheel.Dioxazine"/>
			<meta>
				<m n=":value"><e>cast 0xFF6A00FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</hanPurple>
		<darkHanPurple public="1" get="inline" set="null" expr="cast 0xFF4A00B2" line="298" static="1">
			<x path="justGraphix.pallette.wheel.Dioxazine"/>
			<meta>
				<m n=":value"><e>cast 0xFF4A00B2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkHanPurple>
		<dioxazine public="1" get="inline" set="null" expr="cast 0xFF350080" line="299" static="1">
			<x path="justGraphix.pallette.wheel.Dioxazine"/>
			<meta>
				<m n=":value"><e>cast 0xFF350080</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dioxazine>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Violet" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Violet_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<mauve public="1" get="inline" set="null" expr="cast 0xFFE9BFFF" line="302" static="1">
		<x path="justGraphix.pallette.wheel.Violet"/>
		<meta>
			<m n=":value"><e>cast 0xFFE9BFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</mauve>
	<kunzite public="1" get="inline" set="null" expr="cast 0xFFD580FF" line="303" static="1">
		<x path="justGraphix.pallette.wheel.Violet"/>
		<meta>
			<m n=":value"><e>cast 0xFFD580FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</kunzite>
	<violet public="1" get="inline" set="null" expr="cast 0xFFAA00FF" line="304" static="1">
		<x path="justGraphix.pallette.wheel.Violet"/>
		<meta>
			<m n=":value"><e>cast 0xFFAA00FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</violet>
	<darkViolet public="1" get="inline" set="null" expr="cast 0xFF7700B2" line="305" static="1">
		<x path="justGraphix.pallette.wheel.Violet"/>
		<meta>
			<m n=":value"><e>cast 0xFF7700B2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkViolet>
	<spectralViolet public="1" get="inline" set="null" expr="cast 0xFF4C0073" line="306" static="1">
		<x path="justGraphix.pallette.wheel.Violet"/>
		<meta>
			<m n=":value"><e>cast 0xFF4C0073</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spectralViolet>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Violet_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<mauve public="1" get="inline" set="null" expr="cast 0xFFE9BFFF" line="302" static="1">
			<x path="justGraphix.pallette.wheel.Violet"/>
			<meta>
				<m n=":value"><e>cast 0xFFE9BFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</mauve>
		<kunzite public="1" get="inline" set="null" expr="cast 0xFFD580FF" line="303" static="1">
			<x path="justGraphix.pallette.wheel.Violet"/>
			<meta>
				<m n=":value"><e>cast 0xFFD580FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</kunzite>
		<violet public="1" get="inline" set="null" expr="cast 0xFFAA00FF" line="304" static="1">
			<x path="justGraphix.pallette.wheel.Violet"/>
			<meta>
				<m n=":value"><e>cast 0xFFAA00FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</violet>
		<darkViolet public="1" get="inline" set="null" expr="cast 0xFF7700B2" line="305" static="1">
			<x path="justGraphix.pallette.wheel.Violet"/>
			<meta>
				<m n=":value"><e>cast 0xFF7700B2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkViolet>
		<spectralViolet public="1" get="inline" set="null" expr="cast 0xFF4C0073" line="306" static="1">
			<x path="justGraphix.pallette.wheel.Violet"/>
			<meta>
				<m n=":value"><e>cast 0xFF4C0073</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spectralViolet>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Aniline" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Aniline_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<lilac public="1" get="inline" set="null" expr="cast 0xFFF4BFFF" line="309" static="1">
		<x path="justGraphix.pallette.wheel.Aniline"/>
		<meta>
			<m n=":value"><e>cast 0xFFF4BFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lilac>
	<roseOfSharon public="1" get="inline" set="null" expr="cast 0xFFEC8CFF" line="310" static="1">
		<x path="justGraphix.pallette.wheel.Aniline"/>
		<meta>
			<m n=":value"><e>cast 0xFFEC8CFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</roseOfSharon>
	<purpleDaisy public="1" get="inline" set="null" expr="cast 0xFFD400FF" line="311" static="1">
		<x path="justGraphix.pallette.wheel.Aniline"/>
		<meta>
			<m n=":value"><e>cast 0xFFD400FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</purpleDaisy>
	<aniline public="1" get="inline" set="null" expr="cast 0xFF9400B2" line="312" static="1">
		<x path="justGraphix.pallette.wheel.Aniline"/>
		<meta>
			<m n=":value"><e>cast 0xFF9400B2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</aniline>
	<amethyst public="1" get="inline" set="null" expr="cast 0xFF5A006B" line="313" static="1">
		<x path="justGraphix.pallette.wheel.Aniline"/>
		<meta>
			<m n=":value"><e>cast 0xFF5A006B</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</amethyst>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Aniline_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<lilac public="1" get="inline" set="null" expr="cast 0xFFF4BFFF" line="309" static="1">
			<x path="justGraphix.pallette.wheel.Aniline"/>
			<meta>
				<m n=":value"><e>cast 0xFFF4BFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lilac>
		<roseOfSharon public="1" get="inline" set="null" expr="cast 0xFFEC8CFF" line="310" static="1">
			<x path="justGraphix.pallette.wheel.Aniline"/>
			<meta>
				<m n=":value"><e>cast 0xFFEC8CFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</roseOfSharon>
		<purpleDaisy public="1" get="inline" set="null" expr="cast 0xFFD400FF" line="311" static="1">
			<x path="justGraphix.pallette.wheel.Aniline"/>
			<meta>
				<m n=":value"><e>cast 0xFFD400FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</purpleDaisy>
		<aniline public="1" get="inline" set="null" expr="cast 0xFF9400B2" line="312" static="1">
			<x path="justGraphix.pallette.wheel.Aniline"/>
			<meta>
				<m n=":value"><e>cast 0xFF9400B2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</aniline>
		<amethyst public="1" get="inline" set="null" expr="cast 0xFF5A006B" line="313" static="1">
			<x path="justGraphix.pallette.wheel.Aniline"/>
			<meta>
				<m n=":value"><e>cast 0xFF5A006B</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</amethyst>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Magenta" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Magenta_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<lightMusk public="1" get="inline" set="null" expr="cast 0xFFFFBFFF" line="316" static="1">
		<x path="justGraphix.pallette.wheel.Magenta"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFBFFF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightMusk>
	<musk public="1" get="inline" set="null" expr="cast 0xFFFF99FF" line="317" static="1">
		<x path="justGraphix.pallette.wheel.Magenta"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF99FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</musk>
	<magenta public="1" get="inline" set="null" expr="cast 0xFFFF00FF" line="318" static="1">
		<x path="justGraphix.pallette.wheel.Magenta"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00FF</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</magenta>
	<darkMagenta public="1" get="inline" set="null" expr="cast 0xFFA600A6" line="319" static="1">
		<x path="justGraphix.pallette.wheel.Magenta"/>
		<meta>
			<m n=":value"><e>cast 0xFFA600A6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkMagenta>
	<purple public="1" get="inline" set="null" expr="cast 0xFF660066" line="320" static="1">
		<x path="justGraphix.pallette.wheel.Magenta"/>
		<meta>
			<m n=":value"><e>cast 0xFF660066</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</purple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Magenta_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<lightMusk public="1" get="inline" set="null" expr="cast 0xFFFFBFFF" line="316" static="1">
			<x path="justGraphix.pallette.wheel.Magenta"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFBFFF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightMusk>
		<musk public="1" get="inline" set="null" expr="cast 0xFFFF99FF" line="317" static="1">
			<x path="justGraphix.pallette.wheel.Magenta"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF99FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</musk>
		<magenta public="1" get="inline" set="null" expr="cast 0xFFFF00FF" line="318" static="1">
			<x path="justGraphix.pallette.wheel.Magenta"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00FF</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</magenta>
		<darkMagenta public="1" get="inline" set="null" expr="cast 0xFFA600A6" line="319" static="1">
			<x path="justGraphix.pallette.wheel.Magenta"/>
			<meta>
				<m n=":value"><e>cast 0xFFA600A6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkMagenta>
		<purple public="1" get="inline" set="null" expr="cast 0xFF660066" line="320" static="1">
			<x path="justGraphix.pallette.wheel.Magenta"/>
			<meta>
				<m n=":value"><e>cast 0xFF660066</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</purple>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Bougainville" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Bougainville_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<dogRose public="1" get="inline" set="null" expr="cast 0xFFFFBFF2" line="323" static="1">
		<x path="justGraphix.pallette.wheel.Bougainville"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFBFF2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dogRose>
	<purpleLoosestrife public="1" get="inline" set="null" expr="cast 0xFFFF8CE8" line="324" static="1">
		<x path="justGraphix.pallette.wheel.Bougainville"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF8CE8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</purpleLoosestrife>
	<shockingPink public="1" get="inline" set="null" expr="cast 0xFFFF00CC" line="325" static="1">
		<x path="justGraphix.pallette.wheel.Bougainville"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00CC</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</shockingPink>
	<purpleBougainvillea public="1" get="inline" set="null" expr="cast 0xFFB2008F" line="326" static="1">
		<x path="justGraphix.pallette.wheel.Bougainville"/>
		<meta>
			<m n=":value"><e>cast 0xFFB2008F</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</purpleBougainvillea>
	<purpleBean public="1" get="inline" set="null" expr="cast 0xFF6B0055" line="327" static="1">
		<x path="justGraphix.pallette.wheel.Bougainville"/>
		<meta>
			<m n=":value"><e>cast 0xFF6B0055</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</purpleBean>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Bougainville_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<dogRose public="1" get="inline" set="null" expr="cast 0xFFFFBFF2" line="323" static="1">
			<x path="justGraphix.pallette.wheel.Bougainville"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFBFF2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dogRose>
		<purpleLoosestrife public="1" get="inline" set="null" expr="cast 0xFFFF8CE8" line="324" static="1">
			<x path="justGraphix.pallette.wheel.Bougainville"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF8CE8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</purpleLoosestrife>
		<shockingPink public="1" get="inline" set="null" expr="cast 0xFFFF00CC" line="325" static="1">
			<x path="justGraphix.pallette.wheel.Bougainville"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00CC</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</shockingPink>
		<purpleBougainvillea public="1" get="inline" set="null" expr="cast 0xFFB2008F" line="326" static="1">
			<x path="justGraphix.pallette.wheel.Bougainville"/>
			<meta>
				<m n=":value"><e>cast 0xFFB2008F</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</purpleBougainvillea>
		<purpleBean public="1" get="inline" set="null" expr="cast 0xFF6B0055" line="327" static="1">
			<x path="justGraphix.pallette.wheel.Bougainville"/>
			<meta>
				<m n=":value"><e>cast 0xFF6B0055</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</purpleBean>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Pink" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.Pink_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<lightPink public="1" get="inline" set="null" expr="cast 0xFFFFBFE9" line="330" static="1">
		<x path="justGraphix.pallette.wheel.Pink"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFBFE9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</lightPink>
	<pink public="1" get="inline" set="null" expr="cast 0xFFFF80D5" line="331" static="1">
		<x path="justGraphix.pallette.wheel.Pink"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF80D5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pink>
	<darkPink public="1" get="inline" set="null" expr="cast 0xFFFF00AA" line="332" static="1">
		<x path="justGraphix.pallette.wheel.Pink"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF00AA</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</darkPink>
	<pricklyPear public="1" get="inline" set="null" expr="cast 0xFFB20077" line="333" static="1">
		<x path="justGraphix.pallette.wheel.Pink"/>
		<meta>
			<m n=":value"><e>cast 0xFFB20077</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pricklyPear>
	<elderberry public="1" get="inline" set="null" expr="cast 0xFF70004A" line="334" static="1">
		<x path="justGraphix.pallette.wheel.Pink"/>
		<meta>
			<m n=":value"><e>cast 0xFF70004A</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</elderberry>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.Pink_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<lightPink public="1" get="inline" set="null" expr="cast 0xFFFFBFE9" line="330" static="1">
			<x path="justGraphix.pallette.wheel.Pink"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFBFE9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</lightPink>
		<pink public="1" get="inline" set="null" expr="cast 0xFFFF80D5" line="331" static="1">
			<x path="justGraphix.pallette.wheel.Pink"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF80D5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pink>
		<darkPink public="1" get="inline" set="null" expr="cast 0xFFFF00AA" line="332" static="1">
			<x path="justGraphix.pallette.wheel.Pink"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF00AA</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</darkPink>
		<pricklyPear public="1" get="inline" set="null" expr="cast 0xFFB20077" line="333" static="1">
			<x path="justGraphix.pallette.wheel.Pink"/>
			<meta>
				<m n=":value"><e>cast 0xFFB20077</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pricklyPear>
		<elderberry public="1" get="inline" set="null" expr="cast 0xFF70004A" line="334" static="1">
			<x path="justGraphix.pallette.wheel.Pink"/>
			<meta>
				<m n=":value"><e>cast 0xFF70004A</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</elderberry>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.RedPlum" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" module="justGraphix.pallette.wheel.MartianColorsEnums">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._MartianColorsEnums.RedPlum_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
	<babyPink public="1" get="inline" set="null" expr="cast 0xFFFFC2DE" line="337" static="1">
		<x path="justGraphix.pallette.wheel.RedPlum"/>
		<meta>
			<m n=":value"><e>cast 0xFFFFC2DE</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</babyPink>
	<pinkHydrangea public="1" get="inline" set="null" expr="cast 0xFFFF80B9" line="338" static="1">
		<x path="justGraphix.pallette.wheel.RedPlum"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF80B9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</pinkHydrangea>
	<dragonFriut public="1" get="inline" set="null" expr="cast 0xFFFF0073" line="339" static="1">
		<x path="justGraphix.pallette.wheel.RedPlum"/>
		<meta>
			<m n=":value"><e>cast 0xFFFF0073</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</dragonFriut>
	<chineseStrawberry public="1" get="inline" set="null" expr="cast 0xFFB20051" line="340" static="1">
		<x path="justGraphix.pallette.wheel.RedPlum"/>
		<meta>
			<m n=":value"><e>cast 0xFFB20051</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</chineseStrawberry>
	<redPlum public="1" get="inline" set="null" expr="cast 0xFF750035" line="341" static="1">
		<x path="justGraphix.pallette.wheel.RedPlum"/>
		<meta>
			<m n=":value"><e>cast 0xFF750035</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redPlum>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._MartianColorsEnums.RedPlum_Impl_" params="" file="src/justGraphix/pallette/wheel/MartianColorsEnums.hx" private="1" module="justGraphix.pallette.wheel.MartianColorsEnums" extern="1" final="1">
		<babyPink public="1" get="inline" set="null" expr="cast 0xFFFFC2DE" line="337" static="1">
			<x path="justGraphix.pallette.wheel.RedPlum"/>
			<meta>
				<m n=":value"><e>cast 0xFFFFC2DE</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</babyPink>
		<pinkHydrangea public="1" get="inline" set="null" expr="cast 0xFFFF80B9" line="338" static="1">
			<x path="justGraphix.pallette.wheel.RedPlum"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF80B9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</pinkHydrangea>
		<dragonFriut public="1" get="inline" set="null" expr="cast 0xFFFF0073" line="339" static="1">
			<x path="justGraphix.pallette.wheel.RedPlum"/>
			<meta>
				<m n=":value"><e>cast 0xFFFF0073</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</dragonFriut>
		<chineseStrawberry public="1" get="inline" set="null" expr="cast 0xFFB20051" line="340" static="1">
			<x path="justGraphix.pallette.wheel.RedPlum"/>
			<meta>
				<m n=":value"><e>cast 0xFFB20051</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</chineseStrawberry>
		<redPlum public="1" get="inline" set="null" expr="cast 0xFF750035" line="341" static="1">
			<x path="justGraphix.pallette.wheel.RedPlum"/>
			<meta>
				<m n=":value"><e>cast 0xFF750035</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redPlum>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.pallette.wheel.Wheel24" params="" file="src/justGraphix/pallette/wheel/Wheel24.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.pallette.wheel._Wheel24.Wheel24_Impl_" params="" file="src/justGraphix/pallette/wheel/Wheel24.hx" private="1" module="justGraphix.pallette.wheel.Wheel24" extern="1" final="1">
	<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="4" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffef3c42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redRadish>
	<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="5" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff25e40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</orangeSoda>
	<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="6" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff2823a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</gokuOrange>
	<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="7" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff69537</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</highlighterOrange>
	<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="8" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff4aa2f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</carona>
	<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="9" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff6c137</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</solarPower>
	<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="10" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffad435</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</flirtatious>
	<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="11" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffdf32f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellowBellied>
	<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="12" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffffff2d</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</daffodil>
	<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="13" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdff429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spoiledEgg>
	<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="14" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffa7d52a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</peraRocha>
	<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="15" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff79c725</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</appleGreen>
	<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="16" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff53c025</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fieldGreen>
	<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="17" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff52c67f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</parisGreen>
	<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="18" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4daecf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</maximumBlue>
	<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="19" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4592ca</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueTourmaline>
	<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="20" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3f77c4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</celestialPlum>
	<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="21" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3a57bf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</freeSpeechBlue>
	<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="22" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3438bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</earlySpringNight>
	<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="23" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4b27bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueDepression>
	<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="24" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff7328b6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</nebulaFuchsia>
	<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="25" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffb528c5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaFlair>
	<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="26" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffc32a94</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</royalFuchsia>
	<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="27" static="1">
		<x path="justGraphix.pallette.wheel.Wheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdd3371</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaPurple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.pallette.wheel._Wheel24.Wheel24_Impl_" params="" file="src/justGraphix/pallette/wheel/Wheel24.hx" private="1" module="justGraphix.pallette.wheel.Wheel24" extern="1" final="1">
		<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="4" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffef3c42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redRadish>
		<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="5" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff25e40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</orangeSoda>
		<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="6" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff2823a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</gokuOrange>
		<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="7" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff69537</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</highlighterOrange>
		<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="8" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff4aa2f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</carona>
		<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="9" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff6c137</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</solarPower>
		<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="10" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffad435</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</flirtatious>
		<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="11" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffdf32f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellowBellied>
		<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="12" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffffff2d</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</daffodil>
		<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="13" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdff429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spoiledEgg>
		<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="14" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffa7d52a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</peraRocha>
		<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="15" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff79c725</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</appleGreen>
		<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="16" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff53c025</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fieldGreen>
		<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="17" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff52c67f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</parisGreen>
		<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="18" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4daecf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</maximumBlue>
		<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="19" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4592ca</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueTourmaline>
		<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="20" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3f77c4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</celestialPlum>
		<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="21" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3a57bf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</freeSpeechBlue>
		<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="22" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3438bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</earlySpringNight>
		<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="23" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4b27bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueDepression>
		<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="24" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff7328b6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</nebulaFuchsia>
		<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="25" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffb528c5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaFlair>
		<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="26" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffc32a94</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</royalFuchsia>
		<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="27" static="1">
			<x path="justGraphix.pallette.wheel.Wheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdd3371</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaPurple>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.path.GraphicsPath" params="" file="src/justGraphix/path/GraphicsPath.hx">
		<commands><x path="haxe.ds.Vector"><x path="justGraphix.path.PathCommand"/></x></commands>
		<data><x path="haxe.ds.Vector"><x path="Float"/></x></data>
		<winding><x path="justGraphix.path.PathWinding"/></winding>
		<cubicCurveTo public="1" set="method" line="15"><f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></cubicCurveTo>
		<curveTo public="1" set="method" line="32"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<lineTo public="1" set="method" line="47"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="60"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<wideLineTo public="1" set="method" line="73"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></wideLineTo>
		<wideMoveTo public="1" set="method" line="88"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></wideMoveTo>
		<parse public="1" set="method" line="103"><f a="pathContext">
	<c path="justGraphix.path.IPathContext"/>
	<x path="Void"/>
</f></parse>
		<new public="1" set="method" line="10">
			<f a="commands:data:?winding" v="::EVEN_ODD">
				<x path="haxe.ds.Vector"><x path="justGraphix.path.PathCommand"/></x>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="justGraphix.path.PathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : EVEN_ODD }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.path.LinePathContextTrace" params="" file="src/justGraphix/path/LinePathContextTrace.hx">
		<implements path="justGraphix.path.ILinePathContext"/>
		<moveTo public="1" set="method" line="7"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="10"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineSegmentTo public="1" set="method" line="13"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineSegmentTo>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="justGraphix.path.M3data" params="" file="src/justGraphix/path/M3.hx" module="justGraphix.path.M3"><a>
	<y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</y>
	<x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</x>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<abstract path="justGraphix.path.M3" params="" file="src/justGraphix/path/M3.hx">
		<from><icast><t path="justGraphix.path.M3data"/></icast></from>
		<this><t path="justGraphix.path.M3data"/></this>
		<to><icast><t path="justGraphix.path.M3data"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="justGraphix.path._M3.M3_Impl_" params="" file="src/justGraphix/path/M3.hx" private="1" module="justGraphix.path.M3" final="1">
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="m3">
			<t path="justGraphix.path.M3data"/>
			<x path="justGraphix.path.M3"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<transformation public="1" get="inline" set="null" line="15" static="1">
		<f a="?tx:?ty:?sx:?sy:?theta" v="0:0:1:1:0">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.path.M3"/>
		</f>
		<meta><m n=":value"><e>{ theta : 0, sy : 1, sx : 1, ty : 0, tx : 0 }</e></m></meta>
	</transformation>
	<multmat public="1" get="inline" set="null" line="27" static="1">
		<f a="this:m">
			<t path="justGraphix.path.M3data"/>
			<x path="justGraphix.path.M3"/>
			<x path="justGraphix.path.M3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multmat>
	<add public="1" get="inline" set="null" line="42" static="1">
		<f a="this:m">
			<t path="justGraphix.path.M3data"/>
			<x path="justGraphix.path.M3"/>
			<x path="justGraphix.path.M3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<minus public="1" get="inline" set="null" line="57" static="1">
		<f a="this:m">
			<t path="justGraphix.path.M3data"/>
			<x path="justGraphix.path.M3"/>
			<x path="justGraphix.path.M3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</minus>
	<transform public="1" get="inline" set="null" line="72" static="1"><f a="this:x:y">
	<t path="justGraphix.path.M3data"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></transform>
</class></impl>
	</abstract>
	<class path="justGraphix.path._M3.M3_Impl_" params="" file="src/justGraphix/path/M3.hx" private="1" module="justGraphix.path.M3" final="1">
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="m3">
				<t path="justGraphix.path.M3data"/>
				<x path="justGraphix.path.M3"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<transformation public="1" get="inline" set="null" line="15" static="1">
			<f a="?tx:?ty:?sx:?sy:?theta" v="0:0:1:1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.path.M3"/>
			</f>
			<meta><m n=":value"><e>{ theta : 0, sy : 1, sx : 1, ty : 0, tx : 0 }</e></m></meta>
		</transformation>
		<multmat public="1" get="inline" set="null" line="27" static="1">
			<f a="this:m">
				<t path="justGraphix.path.M3data"/>
				<x path="justGraphix.path.M3"/>
				<x path="justGraphix.path.M3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multmat>
		<add public="1" get="inline" set="null" line="42" static="1">
			<f a="this:m">
				<t path="justGraphix.path.M3data"/>
				<x path="justGraphix.path.M3"/>
				<x path="justGraphix.path.M3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<minus public="1" get="inline" set="null" line="57" static="1">
			<f a="this:m">
				<t path="justGraphix.path.M3data"/>
				<x path="justGraphix.path.M3"/>
				<x path="justGraphix.path.M3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</minus>
		<transform public="1" get="inline" set="null" line="72" static="1"><f a="this:x:y">
	<t path="justGraphix.path.M3data"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></transform>
	</class>
	<abstract path="justGraphix.path.PathCommand" params="" file="src/justGraphix/path/PathCommand.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.path._PathCommand.PathCommand_Impl_" params="" file="src/justGraphix/path/PathCommand.hx" private="1" module="justGraphix.path.PathCommand" extern="1" final="1">
	<NO_OP public="1" get="inline" set="null" expr="cast 0" line="3" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NO_OP>
	<MOVE_TO public="1" get="inline" set="null" expr="cast 1" line="4" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MOVE_TO>
	<LINE_TO public="1" get="inline" set="null" expr="cast 2" line="5" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LINE_TO>
	<CURVE_TO public="1" get="inline" set="null" expr="cast 3" line="6" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CURVE_TO>
	<WIDE_MOVE_TO public="1" get="inline" set="null" expr="cast 4" line="7" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WIDE_MOVE_TO>
	<WIDE_LINE_TO public="1" get="inline" set="null" expr="cast 5" line="8" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WIDE_LINE_TO>
	<CUBIC_CURVE_TO public="1" get="inline" set="null" expr="cast 6" line="9" static="1">
		<x path="justGraphix.path.PathCommand"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CUBIC_CURVE_TO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.path._PathCommand.PathCommand_Impl_" params="" file="src/justGraphix/path/PathCommand.hx" private="1" module="justGraphix.path.PathCommand" extern="1" final="1">
		<NO_OP public="1" get="inline" set="null" expr="cast 0" line="3" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NO_OP>
		<MOVE_TO public="1" get="inline" set="null" expr="cast 1" line="4" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MOVE_TO>
		<LINE_TO public="1" get="inline" set="null" expr="cast 2" line="5" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LINE_TO>
		<CURVE_TO public="1" get="inline" set="null" expr="cast 3" line="6" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CURVE_TO>
		<WIDE_MOVE_TO public="1" get="inline" set="null" expr="cast 4" line="7" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WIDE_MOVE_TO>
		<WIDE_LINE_TO public="1" get="inline" set="null" expr="cast 5" line="8" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WIDE_LINE_TO>
		<CUBIC_CURVE_TO public="1" get="inline" set="null" expr="cast 6" line="9" static="1">
			<x path="justGraphix.path.PathCommand"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CUBIC_CURVE_TO>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.path.PathWinding" params="" file="src/justGraphix/path/PathCommand.hx" module="justGraphix.path.PathCommand">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.path._PathCommand.PathWinding_Impl_" params="" file="src/justGraphix/path/PathCommand.hx" private="1" module="justGraphix.path.PathCommand" extern="1" final="1">
	<EVEN_ODD public="1" get="inline" set="null" expr="cast &quot;evenOdd&quot;" line="12" static="1">
		<x path="justGraphix.path.PathWinding"/>
		<meta>
			<m n=":value"><e>cast "evenOdd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EVEN_ODD>
	<NON_ZERO public="1" get="inline" set="null" expr="cast &quot;nonZero&quot;" line="13" static="1">
		<x path="justGraphix.path.PathWinding"/>
		<meta>
			<m n=":value"><e>cast "nonZero"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NON_ZERO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.path._PathCommand.PathWinding_Impl_" params="" file="src/justGraphix/path/PathCommand.hx" private="1" module="justGraphix.path.PathCommand" extern="1" final="1">
		<EVEN_ODD public="1" get="inline" set="null" expr="cast &quot;evenOdd&quot;" line="12" static="1">
			<x path="justGraphix.path.PathWinding"/>
			<meta>
				<m n=":value"><e>cast "evenOdd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EVEN_ODD>
		<NON_ZERO public="1" get="inline" set="null" expr="cast &quot;nonZero&quot;" line="13" static="1">
			<x path="justGraphix.path.PathWinding"/>
			<meta>
				<m n=":value"><e>cast "nonZero"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NON_ZERO>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.path.PathContextTrace" params="" file="src/justGraphix/path/PathContextTrace.hx">
		<implements path="justGraphix.path.IPathContext"/>
		<moveTo public="1" set="method" line="6"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="9"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method" line="12"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method" line="15"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justGraphix.path.ScaleContext" params="" file="src/justGraphix/path/ScaleContext.hx">
		<implements path="justGraphix.path.IPathContext"/>
		<pathContext public="1"><c path="justGraphix.path.IPathContext"/></pathContext>
		<sx public="1"><x path="Float"/></sx>
		<sy public="1"><x path="Float"/></sy>
		<moveTo public="1" get="inline" set="null" line="13"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="21"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="25"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="7"><f a="pathContext_:sx_:sy_">
	<c path="justGraphix.path.IPathContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.path.ScaleTranslateContext" params="" file="src/justGraphix/path/ScaleTranslateContext.hx">
		<implements path="justGraphix.path.IPathContext"/>
		<pathContext public="1"><c path="justGraphix.path.IPathContext"/></pathContext>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<sx public="1"><x path="Float"/></sx>
		<sy public="1"><x path="Float"/></sy>
		<moveTo public="1" get="inline" set="null" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="21"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="25"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="29"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="9"><f a="pathContext_:dx_:dy_:sx_:sy_">
	<c path="justGraphix.path.IPathContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.path.StoreF6" params="" file="src/justGraphix/path/StoreF6.hx">
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<s0 public="1"><x path="Null"><x path="Float"/></x></s0>
		<s1 public="1"><x path="Null"><x path="Float"/></x></s1>
		<s2 public="1"><x path="Null"><x path="Float"/></x></s2>
		<s3 public="1"><x path="Null"><x path="Float"/></x></s3>
		<s4 public="1"><x path="Null"><x path="Float"/></x></s4>
		<s5 public="1"><x path="Null"><x path="Float"/></x></s5>
		<s6 public="1"><c path="justGraphix.path.StoreF6"/></s6>
		<clear public="1" get="inline" set="null" line="13"><f a=""><x path="Void"/></f></clear>
		<length public="1" get="inline" set="null" line="23"><f a=""><x path="Int"/></f></length>
		<push public="1" get="inline" set="null" line="26"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></push>
		<pop public="1" get="inline" set="null" line="46"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<unshift public="1" get="inline" set="null" line="74"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></unshift>
		<shift public="1" get="inline" set="null" line="84"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<toString public="1" get="inline" set="null" line="98"><f a=""><c path="String"/></f></toString>
		<populatedToString public="1" get="inline" set="null" line="105"><f a=""><c path="String"/></f></populatedToString>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<hasNext public="1" get="inline" set="null" line="129"><f a=""><x path="Bool"/></f></hasNext>
		<resetIterator public="1" get="inline" set="null" line="132"><f a=""><x path="Void"/></f></resetIterator>
		<next public="1" get="inline" set="null" line="136"><f a=""><x path="Null"><x path="Float"/></x></f></next>
		<first public="1" get="inline" set="null" line="157"><f a=""><x path="Null"><x path="Float"/></x></f></first>
		<last public="1" get="inline" set="null" line="160"><f a=""><x path="Null"><x path="Float"/></x></f></last>
		<penultimate public="1" get="inline" set="null" line="180"><f a=""><x path="Null"><x path="Float"/></x></f></penultimate>
		<toArray public="1" get="inline" set="null" line="200"><f a=""><x path="Void"/></f></toArray>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.path.StoreF8" params="" file="src/justGraphix/path/StoreF8.hx">
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<s0 public="1"><x path="Null"><x path="Float"/></x></s0>
		<s1 public="1"><x path="Null"><x path="Float"/></x></s1>
		<s2 public="1"><x path="Null"><x path="Float"/></x></s2>
		<s3 public="1"><x path="Null"><x path="Float"/></x></s3>
		<s4 public="1"><x path="Null"><x path="Float"/></x></s4>
		<s5 public="1"><x path="Null"><x path="Float"/></x></s5>
		<s6 public="1"><x path="Null"><x path="Float"/></x></s6>
		<s7 public="1"><x path="Null"><x path="Float"/></x></s7>
		<clear public="1" get="inline" set="null" line="14"><f a=""><x path="Void"/></f></clear>
		<length public="1" get="inline" set="null" line="25"><f a=""><x path="Int"/></f></length>
		<push public="1" get="inline" set="null" line="28"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></push>
		<pop public="1" get="inline" set="null" line="51"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<unshift public="1" get="inline" set="null" line="85"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></unshift>
		<shift public="1" get="inline" set="null" line="95"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<toString public="1" get="inline" set="null" line="110"><f a=""><c path="String"/></f></toString>
		<populatedToString public="1" get="inline" set="null" line="113"><f a=""><c path="String"/></f></populatedToString>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<hasNext public="1" get="inline" set="null" line="138"><f a=""><x path="Bool"/></f></hasNext>
		<resetIterator public="1" get="inline" set="null" line="141"><f a=""><x path="Void"/></f></resetIterator>
		<next public="1" get="inline" set="null" line="144"><f a=""><x path="Null"><x path="Float"/></x></f></next>
		<first public="1" get="inline" set="null" line="169"><f a=""><x path="Null"><x path="Float"/></x></f></first>
		<last public="1" get="inline" set="null" line="172"><f a=""><x path="Null"><x path="Float"/></x></f></last>
		<penultimate public="1" get="inline" set="null" line="196"><f a=""><x path="Null"><x path="Float"/></x></f></penultimate>
		<toArray public="1" get="inline" set="null" line="220"><f a=""><x path="Void"/></f></toArray>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justGraphix.path.SvgLinePath" params="" file="src/justGraphix/path/SvgLinePath.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<pos expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</pos>
		<lastX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastX>
		<lastY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastY>
		<controlX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlX>
		<controlY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlY>
		<c expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</c>
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<px expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</px>
		<py expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</py>
		<pathContext><c path="justGraphix.path.ILinePathContext"/></pathContext>
		<store><c path="justGraphix.path.StoreF6"/></store>
		<quickTriangle set="method" line="23"><f a="x0:y0:off">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quickTriangle>
		<parse public="1" set="method" line="30"><f a="str_">
	<c path="String"/>
	<c path="String"/>
</f></parse>
		<extractArgs get="inline" set="null" line="394">
			<f a="?process" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ process : true }</e></m></meta>
		</extractArgs>
		<nextChar get="inline" set="null" line="476"><f a=""><x path="Int"/></f></nextChar>
		<moveTo public="1" get="inline" set="null" line="480"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="486"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadThru public="1" get="inline" set="null" line="493"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<quadTo public="1" get="inline" set="null" line="499"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="508"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotSegmentCoord public="1" get="inline" set="null" line="517">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotSegmentCoord>
		<plotCoord public="1" get="inline" set="null" line="531">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<new public="1" set="method" line="20"><f a="pathContext_">
	<c path="justGraphix.path.ILinePathContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.path.SvgPath" params="" file="src/justGraphix/path/SvgPath.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<pos expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</pos>
		<lastX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastX>
		<lastY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastY>
		<controlX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlX>
		<controlY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlY>
		<c expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</c>
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<pathContext><c path="justGraphix.path.IPathContext"/></pathContext>
		<store><c path="justGraphix.path.StoreF6"/></store>
		<quickTriangle set="method" line="20"><f a="x0:y0:off">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quickTriangle>
		<parse public="1" set="method" line="27"><f a="str_">
	<c path="String"/>
	<c path="String"/>
</f></parse>
		<extractArgs get="inline" set="null" line="391">
			<f a="?process" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ process : true }</e></m></meta>
		</extractArgs>
		<nextChar get="inline" set="null" line="473"><f a=""><x path="Int"/></f></nextChar>
		<new public="1" set="method" line="17"><f a="pathContext_">
	<c path="justGraphix.path.IPathContext"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.path.TransformationContext" params="" file="src/justGraphix/path/TransformationContext.hx">
		<implements path="justGraphix.path.IPathContext"/>
		<pathContext public="1"><c path="justGraphix.path.IPathContext"/></pathContext>
		<m3 public="1"><x path="justGraphix.path.M3"/></m3>
		<moveTo public="1" get="inline" set="null" line="12"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="19"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="26"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="36"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="7"><f a="pathContext_:m3_">
	<c path="justGraphix.path.IPathContext"/>
	<x path="justGraphix.path.M3"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.path.TranslationContext" params="" file="src/justGraphix/path/TranslationContext.hx">
		<implements path="justGraphix.path.IPathContext"/>
		<pathContext public="1"><c path="justGraphix.path.IPathContext"/></pathContext>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<moveTo public="1" get="inline" set="null" line="13"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="21"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="25"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="7"><f a="pathContext_:dx_:dy_">
	<c path="justGraphix.path.IPathContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justGraphix.pixel.PixAlgo" params="" file="src/justGraphix/pixel/PixAlgo.hx">
		<_boundChannel public="1" expr="boundChannel">
			<f a="f">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>boundChannel</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">boundChannel</font> module level field]]></haxe_doc>
		</_boundChannel>
		<_colBlendFunc public="1" expr="colBlendFunc">
			<f a="x1:x2:a3:a2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>colBlendFunc</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">colBlendFunc</font> module level field]]></haxe_doc>
		</_colBlendFunc>
		<_alphaBlendFunc public="1" expr="alphaBlendFunc">
			<f a="a3:a2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>alphaBlendFunc</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">alphaBlendFunc</font> module level field]]></haxe_doc>
		</_alphaBlendFunc>
		<_channelFloat public="1" expr="channelFloat">
			<f a="color">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>channelFloat</e></m></meta>
			<haxe_doc><![CDATA[<font color="LightPink" font-weight:"Bold">channelFloat</font> module level field]]></haxe_doc>
		</_channelFloat>
		<new public="1" set="method" line="16">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="justGraphix.pixel._PixAlgo.PixAlgo_Fields_" params="" file="src/justGraphix/pixel/PixAlgo.hx" private="1" module="justGraphix.pixel.PixAlgo" final="1">
		<boundChannel public="1" get="inline" set="null" line="3" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></boundChannel>
		<colBlendFunc public="1" get="inline" set="null" line="10" static="1"><f a="x1:x2:a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colBlendFunc>
		<alphaBlendFunc public="1" get="inline" set="null" line="12" static="1"><f a="a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></alphaBlendFunc>
		<channelFloat public="1" get="inline" set="null" line="14" static="1"><f a="color">
	<x path="Int"/>
	<x path="Float"/>
</f></channelFloat>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="justGraphix.pixel.Pixel28" params="" file="src/justGraphix/pixel/Pixel28.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>This is an abstract RGB or BGR pixel 
    not used much
    @see Pixel32</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.pixel._Pixel28.Pixel28_Impl_" params="" file="src/justGraphix/pixel/Pixel28.hx" private="1" module="justGraphix.pixel.Pixel28" final="1">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="justGraphix.pixel.Pixel28"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<c1 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c1>
	<get_c1 get="inline" set="null" line="18" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c1>
	<set_c1 get="inline" set="null" line="20" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c1>
	<c2 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c2>
	<get_c2 get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c2>
	<set_c2 get="inline" set="null" line="29" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c2>
	<c3 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c3>
	<get_c3 get="inline" set="null" line="36" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c3>
	<set_c3 get="inline" set="null" line="38" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c3>
	<flip13 public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel28"/>
</f></flip13>
	<transferColor public="1" get="inline" set="null" line="47" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel28"/>
</f></transferColor>
	<stringHash public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
	<fromChannels public="1" get="inline" set="null" line="53" static="1"><f a="ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel28"/>
</f></fromChannels>
</class></impl>
	</abstract>
	<class path="justGraphix.pixel._Pixel28.Pixel28_Impl_" params="" file="src/justGraphix/pixel/Pixel28.hx" private="1" module="justGraphix.pixel.Pixel28" final="1">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="justGraphix.pixel.Pixel28"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<c1 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c1>
		<get_c1 get="inline" set="null" line="18" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c1>
		<set_c1 get="inline" set="null" line="20" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c1>
		<c2 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c2>
		<get_c2 get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c2>
		<set_c2 get="inline" set="null" line="29" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c2>
		<c3 public="1" get="accessor" set="accessor" static="1"><x path="Int"/></c3>
		<get_c3 get="inline" set="null" line="36" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></get_c3>
		<set_c3 get="inline" set="null" line="38" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_c3>
		<flip13 public="1" get="inline" set="null" line="44" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel28"/>
</f></flip13>
		<transferColor public="1" get="inline" set="null" line="47" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel28"/>
</f></transferColor>
		<stringHash public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
		<fromChannels public="1" get="inline" set="null" line="53" static="1"><f a="ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel28"/>
</f></fromChannels>
	</class>
	<abstract path="justGraphix.pixel.Pixel32" params="" file="src/justGraphix/pixel/Pixel32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>provides an abstract 32 bit color ARGB or ABGR
    can decompose channels c0,c1,c2,c3
    transferColor is used to flip R and B when drawing and reading from the canvas ( as required endian )
    channelBlend and alphaBlend are algorthms to blend a semi transparent pixel over another it does not transfer color channels</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.pixel._Pixel32.Pixel32_Impl_" params="" file="src/justGraphix/pixel/Pixel32.hx" private="1" module="justGraphix.pixel.Pixel32" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="justGraphix.pixel.Pixel32"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<hexChannel public="1" get="inline" set="null" line="22" static="1">
		<f a="this:i">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.pixel.PixelChannel"/>
		</f>
		<haxe_doc><![CDATA[returns the 0x00 -> 0xFF number component
        in ARGB, 0 -> B, 1 -> G, 2 - R, 3 -> A]]></haxe_doc>
	</hexChannel>
	<c0 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c0>
	<get_c0 get="inline" set="null" line="39" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c0>
	<set_c0 get="inline" set="null" line="41" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c0>
	<c1 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c1>
	<get_c1 get="inline" set="null" line="48" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c1>
	<set_c1 get="inline" set="null" line="50" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c1>
	<c2 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c2>
	<get_c2 get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c2>
	<set_c2 get="inline" set="null" line="59" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c2>
	<c3 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c3>
	<get_c3 get="inline" set="null" line="66" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c3>
	<set_c3 get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c3>
	<flip13 public="1" get="inline" set="null" line="74" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></flip13>
	<transferColor public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></transferColor>
	<stringHash public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
	<isTransparent public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTransparent>
	<fromPixel28Alpha public="1" get="inline" set="null" line="86" static="1"><f a="col:alpha">
	<x path="justGraphix.pixel.Pixel28"/>
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></fromPixel28Alpha>
	<fromChannels public="1" get="inline" set="null" line="89" static="1"><f a="ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></fromChannels>
	<from_argb public="1" get="inline" set="null" line="92" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></from_argb>
	<maskPixel public="1" get="inline" set="null" line="98" static="1"><f a="this:m">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></maskPixel>
	<channelBlend public="1" get="inline" set="null" line="118" static="1"><f a="this:ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></channelBlend>
	<alphaBlend public="1" get="inline" set="null" line="136" static="1">
		<f a="this:rhs">
			<x path="Int"/>
			<x path="justGraphix.pixel.Pixel32"/>
			<x path="justGraphix.pixel.Pixel32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</alphaBlend>
	<colBlendFunc get="inline" set="null" line="154" static="1"><f a="x1:x2:a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colBlendFunc>
	<alphaBlendFunc get="inline" set="null" line="157" static="1"><f a="a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></alphaBlendFunc>
</class></impl>
	</abstract>
	<class path="justGraphix.pixel._Pixel32.Pixel32_Impl_" params="" file="src/justGraphix/pixel/Pixel32.hx" private="1" module="justGraphix.pixel.Pixel32" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="justGraphix.pixel.Pixel32"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<hexChannel public="1" get="inline" set="null" line="22" static="1">
			<f a="this:i">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.pixel.PixelChannel"/>
			</f>
			<haxe_doc><![CDATA[returns the 0x00 -> 0xFF number component
        in ARGB, 0 -> B, 1 -> G, 2 - R, 3 -> A]]></haxe_doc>
		</hexChannel>
		<c0 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c0>
		<get_c0 get="inline" set="null" line="39" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c0>
		<set_c0 get="inline" set="null" line="41" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c0>
		<c1 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c1>
		<get_c1 get="inline" set="null" line="48" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c1>
		<set_c1 get="inline" set="null" line="50" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c1>
		<c2 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c2>
		<get_c2 get="inline" set="null" line="57" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c2>
		<set_c2 get="inline" set="null" line="59" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c2>
		<c3 public="1" get="accessor" set="accessor" static="1"><x path="justGraphix.pixel.PixelChannel"/></c3>
		<get_c3 get="inline" set="null" line="66" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></get_c3>
		<set_c3 get="inline" set="null" line="68" static="1"><f a="this:v">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
</f></set_c3>
		<flip13 public="1" get="inline" set="null" line="74" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></flip13>
		<transferColor public="1" get="inline" set="null" line="77" static="1"><f a="this">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></transferColor>
		<stringHash public="1" get="inline" set="null" line="80" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></stringHash>
		<isTransparent public="1" get="inline" set="null" line="83" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTransparent>
		<fromPixel28Alpha public="1" get="inline" set="null" line="86" static="1"><f a="col:alpha">
	<x path="justGraphix.pixel.Pixel28"/>
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></fromPixel28Alpha>
		<fromChannels public="1" get="inline" set="null" line="89" static="1"><f a="ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></fromChannels>
		<from_argb public="1" get="inline" set="null" line="92" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></from_argb>
		<maskPixel public="1" get="inline" set="null" line="98" static="1"><f a="this:m">
	<x path="Int"/>
	<x path="justGraphix.pixel.Pixel32"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></maskPixel>
		<channelBlend public="1" get="inline" set="null" line="118" static="1"><f a="this:ch0:ch1:ch2:ch3">
	<x path="Int"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.PixelChannel"/>
	<x path="justGraphix.pixel.Pixel32"/>
</f></channelBlend>
		<alphaBlend public="1" get="inline" set="null" line="136" static="1">
			<f a="this:rhs">
				<x path="Int"/>
				<x path="justGraphix.pixel.Pixel32"/>
				<x path="justGraphix.pixel.Pixel32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</alphaBlend>
		<colBlendFunc get="inline" set="null" line="154" static="1"><f a="x1:x2:a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colBlendFunc>
		<alphaBlendFunc get="inline" set="null" line="157" static="1"><f a="a3:a2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></alphaBlendFunc>
	</class>
	<abstract path="justGraphix.pixel.PixelChannel" params="" file="src/justGraphix/pixel/PixelChannel.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="toHexInt"><x path="Float"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="colIntToFloat"><x path="Float"/></icast>
			<icast field="stringHash"><c path="String"/></icast>
		</to>
		<haxe_doc>helper for working with colour channels
    so providing float ones for calculations and bounding for when converting back</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.pixel._PixelChannel.PixelChannel_Impl_" params="" file="src/justGraphix/pixel/PixelChannel.hx" private="1" module="justGraphix.pixel.PixelChannel" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="justGraphix.pixel.PixelChannel"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toHexInt public="1" get="inline" set="null" line="14" static="1">
		<f a="c">
			<x path="Float"/>
			<x path="justGraphix.pixel.PixelChannel"/>
		</f>
		<meta><m n=":from"/></meta>
	</toHexInt>
	<colIntToFloat public="1" get="inline" set="null" line="17" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</colIntToFloat>
	<stringHash public="1" get="inline" set="null" line="20" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</stringHash>
	<boundChannel public="1" get="inline" set="null" line="22" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></boundChannel>
</class></impl>
	</abstract>
	<class path="justGraphix.pixel._PixelChannel.PixelChannel_Impl_" params="" file="src/justGraphix/pixel/PixelChannel.hx" private="1" module="justGraphix.pixel.PixelChannel" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="justGraphix.pixel.PixelChannel"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toHexInt public="1" get="inline" set="null" line="14" static="1">
			<f a="c">
				<x path="Float"/>
				<x path="justGraphix.pixel.PixelChannel"/>
			</f>
			<meta><m n=":from"/></meta>
		</toHexInt>
		<colIntToFloat public="1" get="inline" set="null" line="17" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</colIntToFloat>
		<stringHash public="1" get="inline" set="null" line="20" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</stringHash>
		<boundChannel public="1" get="inline" set="null" line="22" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></boundChannel>
	</class>
	<typedef path="justGraphix.rectPack2d.Atlas" params="" file="src/justGraphix/rectPack2d/AtlasBuilder.hx" module="justGraphix.rectPack2d.AtlasBuilder"><a>
	<jsonString><c path="String"/></jsonString>
	<imageWrapper><t path="justGraphix.rectPack2d.ImageWrapper"/></imageWrapper>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.ImageWrapper" params="" file="src/justGraphix/rectPack2d/AtlasBuilder.hx" module="justGraphix.rectPack2d.AtlasBuilder"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
	<drawCW set="method"><f a="fx:fy:fromImg">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></drawCW>
	<drawACW set="method"><f a="fx:fy:fromImg">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></drawACW>
	<draw set="method"><f a="fx:fy:fromImg">
	<x path="Int"/>
	<x path="Int"/>
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></draw>
</a></typedef>
	<class path="justGraphix.rectPack2d.AtlasBuilder" params="" file="src/justGraphix/rectPack2d/AtlasBuilder.hx">
		<blocks expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</blocks>
		<bins expr="new Array&lt;Bin&gt;()">
			<c path="Array"><c path="justGraphix.rectPack2d.Bin"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bin>()]]></e></m></meta>
		</bins>
		<names expr="new Array&lt;String&gt;()">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<String>()]]></e></m></meta>
		</names>
		<locations><c path="Array"><t path="justGraphix.rectPack2d.Location"/></c></locations>
		<arrImages><c path="Array"><t path="justGraphix.rectPack2d.ImageWrapper"/></c></arrImages>
		<tp expr="new TP()">
			<c path="justGraphix.rectPack2d.TP"/>
			<meta><m n=":value"><e>new TP()</e></m></meta>
		</tp>
		<wid><x path="Int"/></wid>
		<hi><x path="Null"><x path="Int"/></x></hi>
		<packSize><x path="Int"/></packSize>
		<reset public="1" set="method" line="37"><f a=""><x path="Void"/></f></reset>
		<generatePackingData public="1" set="method" line="45"><f a="arrImages_:names_:packSize_">
	<c path="Array"><t path="justGraphix.rectPack2d.ImageWrapper"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></generatePackingData>
		<createBlocks get="inline" set="null" line="54"><f a=""><x path="Void"/></f></createBlocks>
		<pack get="inline" set="null" line="62"><f a=""><x path="Void"/></f></pack>
		<getAtlas public="1" set="method" line="69">
			<f a="fileName:image:?locations_" v="::null">
				<c path="String"/>
				<t path="justGraphix.rectPack2d.ImageWrapper"/>
				<c path="Array"><t path="justGraphix.rectPack2d.Location"/></c>
				<t path="justGraphix.rectPack2d.Atlas"/>
			</f>
			<meta><m n=":value"><e>{ locations_ : null }</e></m></meta>
		</getAtlas>
		<addMeta get="inline" set="null" line="79"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></addMeta>
		<renderToAtlas get="inline" set="null" line="83"><f a="image">
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></renderToAtlas>
		<addJSONBlock get="inline" set="null" line="108"><f a="name:location:block">
	<c path="String"/>
	<t path="justGraphix.rectPack2d.Location"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<c path="String"/>
</f></addJSONBlock>
		<renderBlock get="inline" set="null" line="117"><f a="image:name:id:left:top:wid:hi:flip">
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></renderBlock>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<haxe_doc>AtlasBuilder 
 *
 *  usage:
 *
 *  var atlasBuilder = new AtlasBuilder();
 *  var width = atlasBuilder.generatePackingData( arrImages, height ); // arrImages is array of image holders
 *  var img: ImageWrapper = new ImageHolder( height, width ); // image holder is your class.
 *  var atlas: Atlas = atlasBuilder.getAtlas( 'output.png', img );
 *</haxe_doc>
	</class>
	<typedef path="justGraphix.rectPack2d.ImageData" params="" file="src/justGraphix/rectPack2d/AtlasBuilder_wh.hx" module="justGraphix.rectPack2d.AtlasBuilder_wh"><a>
	<names><c path="Array"><c path="String"/></c></names>
	<images><c path="Array"><t path="justGraphix.rectPack2d.ImageWrapper"/></c></images>
</a></typedef>
	<class path="justGraphix.rectPack2d.AtlasBuilder_wh" params="" file="src/justGraphix/rectPack2d/AtlasBuilder_wh.hx">
		<blocks expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</blocks>
		<bins expr="new Array&lt;Bin&gt;()">
			<c path="Array"><c path="justGraphix.rectPack2d.Bin"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bin>()]]></e></m></meta>
		</bins>
		<imageData><t path="justGraphix.rectPack2d.ImageData"/></imageData>
		<locations><c path="Array"><t path="justGraphix.rectPack2d.Location"/></c></locations>
		<tp expr="new TP()">
			<c path="justGraphix.rectPack2d.TP"/>
			<meta><m n=":value"><e>new TP()</e></m></meta>
		</tp>
		<wid><x path="Int"/></wid>
		<hi><x path="Null"><x path="Int"/></x></hi>
		<packSize><x path="Int"/></packSize>
		<reset public="1" set="method" line="20"><f a=""><x path="Void"/></f></reset>
		<generatePackingData public="1" set="method" line="27"><f a="imageData_:packSize_">
	<t path="justGraphix.rectPack2d.ImageData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></generatePackingData>
		<createBlocks get="inline" set="null" line="35"><f a=""><x path="Void"/></f></createBlocks>
		<pack get="inline" set="null" line="44"><f a=""><x path="Void"/></f></pack>
		<getAtlas public="1" set="method" line="51">
			<f a="fileName:image:?locations_" v="::null">
				<c path="String"/>
				<t path="justGraphix.rectPack2d.ImageWrapper"/>
				<c path="Array"><t path="justGraphix.rectPack2d.Location"/></c>
				<t path="justGraphix.rectPack2d.Atlas"/>
			</f>
			<meta><m n=":value"><e>{ locations_ : null }</e></m></meta>
		</getAtlas>
		<addMeta get="inline" set="null" line="61"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></addMeta>
		<renderToAtlas get="inline" set="null" line="65"><f a="image">
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<x path="Void"/>
</f></renderToAtlas>
		<addJSONBlock get="inline" set="null" line="90"><f a="name:location:block">
	<c path="String"/>
	<t path="justGraphix.rectPack2d.Location"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<c path="String"/>
</f></addJSONBlock>
		<renderBlock set="method" line="99"><f a="image:name:id:left:top:wid:hi:flip">
	<t path="justGraphix.rectPack2d.ImageWrapper"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></renderBlock>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justGraphix.rectPack2d.Bin" params="" file="src/justGraphix/rectPack2d/Bin.hx">
		<size public="1"><x path="justGraphix.rectPack2d.WH"/></size>
		<rects public="1" expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</rects>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.BodyBuilder" params="" file="src/justGraphix/rectPack2d/BodyBuilder.hx">
		<blocks expr="new Array&lt;XYWHF&gt;()">
			<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<XYWHF>()]]></e></m></meta>
		</blocks>
		<bins expr="new Array&lt;Bin&gt;()">
			<c path="Array"><c path="justGraphix.rectPack2d.Bin"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bin>()]]></e></m></meta>
		</bins>
		<locations><c path="Array"><t path="justGraphix.rectPack2d.Location"/></c></locations>
		<tp expr="new TP()">
			<c path="justGraphix.rectPack2d.TP"/>
			<meta><m n=":value"><e>new TP()</e></m></meta>
		</tp>
		<wid><x path="Int"/></wid>
		<hi><x path="Null"><x path="Int"/></x></hi>
		<packSize><x path="Int"/></packSize>
		<jsonString public="1"><c path="String"/></jsonString>
		<bodyFrames public="1"><c path="justGraphix.rectPack2d.BodyFrames"/></bodyFrames>
		<names><c path="Array"><c path="String"/></c></names>
		<reset public="1" set="method" line="17"><f a=""><x path="Void"/></f></reset>
		<generatePackingData public="1" set="method" line="26"><f a="names_:blocks_:packSize_">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></generatePackingData>
		<pack get="inline" set="null" line="34"><f a=""><x path="Void"/></f></pack>
		<build public="1" set="method" line="40">
			<f a="fileName:?locations_" v=":null">
				<c path="String"/>
				<c path="Array"><t path="justGraphix.rectPack2d.Location"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ locations_ : null }</e></m></meta>
		</build>
		<addMeta get="inline" set="null" line="47"><f a="fileName">
	<c path="String"/>
	<x path="Void"/>
</f></addMeta>
		<renderToLimbs get="inline" set="null" line="51"><f a=""><x path="Void"/></f></renderToLimbs>
		<addJSONBlock get="inline" set="null" line="71"><f a="name:location:block">
	<c path="String"/>
	<t path="justGraphix.rectPack2d.Location"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<c path="String"/>
</f></addJSONBlock>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justGraphix.rectPack2d.BodyFrames" params="" file="src/justGraphix/rectPack2d/BodyFrames.hx">
		<framesHolder><t path="justGraphix.rectPack2d.FramesHolder"/></framesHolder>
		<limbs public="1" expr="new Array&lt;LimbFrame&gt;()">
			<c path="Array"><c path="justGraphix.rectPack2d.LimbFrame"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<LimbFrame>()]]></e></m></meta>
		</limbs>
		<limbByName public="1" set="method" line="15"><f a="name">
	<c path="String"/>
	<x path="Null"><c path="justGraphix.rectPack2d.LimbFrame"/></x>
</f></limbByName>
		<getNames public="1" set="method" line="25"><f a=""><c path="Array"><c path="String"/></c></f></getNames>
		<getNameString public="1" set="method" line="34"><f a=""><c path="String"/></f></getNameString>
		<new public="1" set="method" line="7"><f a="strJson">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.LTRB_" params="" file="src/justGraphix/rectPack2d/LTRB.hx" module="justGraphix.rectPack2d.LTRB">
		<l public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<t public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</t>
		<r public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</r>
		<b public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</b>
		<new public="1" get="inline" set="null" line="10"><f a="l:t:r:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.rectPack2d.LTRB" params="" file="src/justGraphix/rectPack2d/LTRB.hx">
		<from><icast><c path="justGraphix.rectPack2d.LTRB_"/></icast></from>
		<this><c path="justGraphix.rectPack2d.LTRB_"/></this>
		<to>
			<icast><c path="justGraphix.rectPack2d.LTRB_"/></icast>
			<icast field="toXYWH"><x path="justGraphix.rectPack2d.XYWH"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.rectPack2d._LTRB.LTRB_Impl_" params="" file="src/justGraphix/rectPack2d/LTRB.hx" private="1" module="justGraphix.rectPack2d.LTRB" final="1">
	<_new public="1" get="inline" set="null" line="22" static="1">
		<f a="l:t:r:b">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.rectPack2d.LTRB"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<w public="1" get="accessor" set="accessor" static="1"><x path="Int"/></w>
	<get_w get="inline" set="null" line="27" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_w>
	<set_w get="inline" set="null" line="31" static="1"><f a="this:ww">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_w>
	<h public="1" get="accessor" set="accessor" static="1"><x path="Int"/></h>
	<get_h get="inline" set="null" line="37" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_h>
	<set_h public="1" set="method" line="40" static="1"><f a="this:hh">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_h>
	<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
	<get_area public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_area>
	<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
	<get_perimeter public="1" get="inline" set="null" line="51" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_perimeter>
	<toXYWH public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="justGraphix.rectPack2d.LTRB_"/>
			<x path="justGraphix.rectPack2d.XYWH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toXYWH>
	<toString public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="justGraphix.rectPack2d._LTRB.LTRB_Impl_" params="" file="src/justGraphix/rectPack2d/LTRB.hx" private="1" module="justGraphix.rectPack2d.LTRB" final="1">
		<_new public="1" get="inline" set="null" line="22" static="1">
			<f a="l:t:r:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.rectPack2d.LTRB"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<w public="1" get="accessor" set="accessor" static="1"><x path="Int"/></w>
		<get_w get="inline" set="null" line="27" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_w>
		<set_w get="inline" set="null" line="31" static="1"><f a="this:ww">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_w>
		<h public="1" get="accessor" set="accessor" static="1"><x path="Int"/></h>
		<get_h get="inline" set="null" line="37" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_h>
		<set_h public="1" set="method" line="40" static="1"><f a="this:hh">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_h>
		<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
		<get_area public="1" get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_area>
		<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
		<get_perimeter public="1" get="inline" set="null" line="51" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<x path="Int"/>
</f></get_perimeter>
		<toXYWH public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="justGraphix.rectPack2d.LTRB_"/>
				<x path="justGraphix.rectPack2d.XYWH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toXYWH>
		<toString public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.LTRB_"/>
	<c path="String"/>
</f></toString>
	</class>
	<class path="justGraphix.rectPack2d.LimbFrame" params="" file="src/justGraphix/rectPack2d/LimbFrame.hx">
		<name public="1"><c path="String"/></name>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<w public="1"><x path="Float"/></w>
		<h public="1"><x path="Float"/></h>
		<flipped public="1"><x path="Bool"/></flipped>
		<realW public="1"><x path="Float"/></realW>
		<realH public="1"><x path="Float"/></realH>
		<new public="1" set="method" line="12"><f a="frame_">
	<t path="justGraphix.rectPack2d.Frame"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.Node" params="" file="src/justGraphix/rectPack2d/Node.hx">
		<c0 public="1" expr="new PNode()">
			<c path="justGraphix.rectPack2d.PNode"/>
			<meta><m n=":value"><e>new PNode()</e></m></meta>
		</c0>
		<c1 public="1" expr="new PNode()">
			<c path="justGraphix.rectPack2d.PNode"/>
			<meta><m n=":value"><e>new PNode()</e></m></meta>
		</c1>
		<rc public="1"><x path="justGraphix.rectPack2d.LTRB"/></rc>
		<id public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</id>
		<reset public="1" set="method" line="11"><f a="wh">
	<x path="justGraphix.rectPack2d.WH"/>
	<x path="Void"/>
</f></reset>
		<insert public="1" set="method" line="16"><f a="rect">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Null"><c path="justGraphix.rectPack2d.Node"/></x>
</f></insert>
		<delcheck set="method" line="51"><f a=""><x path="Void"/></f></delcheck>
		<new public="1" set="method" line="8"><f a="rc_">
	<x path="justGraphix.rectPack2d.LTRB"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.PNode" params="" file="src/justGraphix/rectPack2d/PNode.hx">
		<pn public="1" expr="null">
			<x path="Null"><c path="justGraphix.rectPack2d.Node"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</pn>
		<fill public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</fill>
		<init public="1" set="method" line="7"><f a="l:t:r:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></init>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.RectPack2d" params="" file="src/justGraphix/rectPack2d/RectPack2d.hx">
		<discardStep public="1" get="inline" set="null" expr="128" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</discardStep>
		<rect2D set="method" line="7" static="1"><f a="v:maxS:succ:unsucc">
	<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
	<x path="Int"/>
	<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
	<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
	<x path="justGraphix.rectPack2d.WH"/>
</f></rect2D>
		<pack public="1" set="method" line="99" static="1"><f a="v:maxS:bins">
	<c path="Array"><x path="justGraphix.rectPack2d.XYWHF"/></c>
	<x path="Int"/>
	<c path="Array"><c path="justGraphix.rectPack2d.Bin"/></c>
	<x path="Bool"/>
</f></pack>
		<new public="1" set="method" line="5"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.Sorts" params="" file="src/justGraphix/rectPack2d/Sorts.hx">
		<all public="1" get="inline" set="null" line="3" static="1"><f a=""><c path="Array"><f a=":">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></c></f></all>
		<area public="1" get="inline" set="null" line="9" static="1"><f a="a:b">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></area>
		<perimeter public="1" get="inline" set="null" line="21" static="1"><f a="a:b">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></perimeter>
		<maxSide public="1" get="inline" set="null" line="33" static="1"><f a="a:b">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></maxSide>
		<maxWidth public="1" get="inline" set="null" line="45" static="1"><f a="a:b">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></maxWidth>
		<maxHeight public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></maxHeight>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="justGraphix.rectPack2d.Location" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<h><x path="Float"/></h>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.FramesHolder" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<metaDetails><t path="justGraphix.rectPack2d.MetaDetails"/></metaDetails>
	<frames><c path="Array"><t path="justGraphix.rectPack2d.Frame"/></c></frames>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.Meta" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a><meta><t path="justGraphix.rectPack2d.MetaDetails"/></meta></a></typedef>
	<typedef path="justGraphix.rectPack2d.MetaDetails" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<version><c path="String"/></version>
	<size><t path="justGraphix.rectPack2d.Size"/></size>
	<scale><x path="Float"/></scale>
	<image><c path="String"/></image>
	<format><x path="justGraphix.rectPack2d.PixelFormat"/></format>
	<app><c path="String"/></app>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.Frame" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<imageName><c path="String"/></imageName>
	<frameContent><t path="justGraphix.rectPack2d.FrameContent"/></frameContent>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.FrameContent" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<trimmed><x path="Bool"/></trimmed>
	<spriteSourceSize><t path="justGraphix.rectPack2d.Dimensions"/></spriteSourceSize>
	<rotated><x path="Bool"/></rotated>
	<frame><t path="justGraphix.rectPack2d.Dimensions"/></frame>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.Dimensions" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
</a></typedef>
	<typedef path="justGraphix.rectPack2d.Size" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP"><a>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
</a></typedef>
	<abstract path="justGraphix.rectPack2d.PixelFormat" params="" file="src/justGraphix/rectPack2d/TP.hx" module="justGraphix.rectPack2d.TP">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="justGraphix.rectPack2d._TP.PixelFormat_Impl_" params="" file="src/justGraphix/rectPack2d/TP.hx" private="1" module="justGraphix.rectPack2d.TP" extern="1" final="1">
	<RGBA8888 public="1" get="inline" set="null" expr="cast &quot;RGBA8888&quot;" line="51" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA8888"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA8888>
	<RGBA4444 public="1" get="inline" set="null" expr="cast &quot;RGBA4444&quot;" line="52" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA4444"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA4444>
	<RGBA5551 public="1" get="inline" set="null" expr="cast &quot;RGBA5551&quot;" line="53" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA5551"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA5551>
	<RGBA5555 public="1" get="inline" set="null" expr="cast &quot;RGBA5555&quot;" line="54" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA5555"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGBA5555>
	<BGRA8888 public="1" get="inline" set="null" expr="cast &quot;BGRA8888&quot;" line="55" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "BGRA8888"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BGRA8888>
	<RGB888 public="1" get="inline" set="null" expr="cast &quot;RGB888&quot;" line="56" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGB888"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB888>
	<RGB565 public="1" get="inline" set="null" expr="cast &quot;RGB565&quot;" line="57" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "RGB565"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RGB565>
	<ALPHA public="1" get="inline" set="null" expr="cast &quot;ALPHA&quot;" line="58" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "ALPHA"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALPHA>
	<ALPHA_INTENSITY public="1" get="inline" set="null" expr="cast &quot;ALPHA_INTENSITY&quot;" line="59" static="1">
		<x path="justGraphix.rectPack2d.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast "ALPHA_INTENSITY"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALPHA_INTENSITY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.rectPack2d._TP.PixelFormat_Impl_" params="" file="src/justGraphix/rectPack2d/TP.hx" private="1" module="justGraphix.rectPack2d.TP" extern="1" final="1">
		<RGBA8888 public="1" get="inline" set="null" expr="cast &quot;RGBA8888&quot;" line="51" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA8888"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA8888>
		<RGBA4444 public="1" get="inline" set="null" expr="cast &quot;RGBA4444&quot;" line="52" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA4444"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA4444>
		<RGBA5551 public="1" get="inline" set="null" expr="cast &quot;RGBA5551&quot;" line="53" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA5551"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA5551>
		<RGBA5555 public="1" get="inline" set="null" expr="cast &quot;RGBA5555&quot;" line="54" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA5555"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGBA5555>
		<BGRA8888 public="1" get="inline" set="null" expr="cast &quot;BGRA8888&quot;" line="55" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "BGRA8888"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BGRA8888>
		<RGB888 public="1" get="inline" set="null" expr="cast &quot;RGB888&quot;" line="56" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGB888"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB888>
		<RGB565 public="1" get="inline" set="null" expr="cast &quot;RGB565&quot;" line="57" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "RGB565"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RGB565>
		<ALPHA public="1" get="inline" set="null" expr="cast &quot;ALPHA&quot;" line="58" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "ALPHA"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALPHA>
		<ALPHA_INTENSITY public="1" get="inline" set="null" expr="cast &quot;ALPHA_INTENSITY&quot;" line="59" static="1">
			<x path="justGraphix.rectPack2d.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast "ALPHA_INTENSITY"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALPHA_INTENSITY>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.TP" params="" file="src/justGraphix/rectPack2d/TP.hx">
		<frameHolderTraceImages public="1" set="method" line="151" static="1"><f a="framesHolder">
	<t path="justGraphix.rectPack2d.FramesHolder"/>
	<x path="Void"/>
</f></frameHolderTraceImages>
		<frameHolderToTP public="1" set="method" line="160" static="1"><f a="framesHolder">
	<t path="justGraphix.rectPack2d.FramesHolder"/>
	<c path="justGraphix.rectPack2d.TP"/>
</f></frameHolderToTP>
		<reconstruct public="1" set="method" line="188" static="1"><f a="atlasJson">
	<c path="String"/>
	<t path="justGraphix.rectPack2d.FramesHolder"/>
</f></reconstruct>
		<frames expr="new Array&lt;String&gt;()">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<String>()]]></e></m></meta>
		</frames>
		<meta><c path="String"/></meta>
		<resetFrames public="1" set="method" line="65"><f a=""><x path="Void"/></f></resetFrames>
		<frameDefine public="1" set="method" line="70">
			<f a="name:location:block:?x2:?trimmed_" v=":::false:false">
				<c path="String"/>
				<t path="justGraphix.rectPack2d.Location"/>
				<x path="justGraphix.rectPack2d.XYWHF"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ trimmed_ : false, x2 : false }</e></m></meta>
		</frameDefine>
		<metaDefine public="1" set="method" line="123">
			<f a="imageName_:width_:height_:?format_:?scale_" v=":::RGBA8888:1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.rectPack2d.PixelFormat"/>
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ scale_ : 1, format_ : RGBA8888 }</e></m></meta>
		</metaDefine>
		<write public="1" set="method" line="142"><f a=""><c path="String"/></f></write>
		<framesHolderAdd public="1" set="method" line="167"><f a="framesHolder">
	<t path="justGraphix.rectPack2d.FramesHolder"/>
	<x path="Void"/>
</f></framesHolderAdd>
		<framesHolderToMeta public="1" set="method" line="183"><f a="framesHolder">
	<t path="justGraphix.rectPack2d.FramesHolder"/>
	<x path="Void"/>
</f></framesHolderToMeta>
		<new public="1" set="method" line="64"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.WH_" params="" file="src/justGraphix/rectPack2d/WH.hx" module="justGraphix.rectPack2d.WH">
		<w public="1"><x path="Int"/></w>
		<h public="1"><x path="Int"/></h>
		<new public="1" set="method" line="7">
			<f a="?w:?h" v="0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : 0, w : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.rectPack2d.WH" params="" file="src/justGraphix/rectPack2d/WH.hx">
		<from><icast><c path="justGraphix.rectPack2d.WH_"/></icast></from>
		<this><c path="justGraphix.rectPack2d.WH_"/></this>
		<to><icast><c path="justGraphix.rectPack2d.WH_"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.rectPack2d._WH.WH_Impl_" params="" file="src/justGraphix/rectPack2d/WH.hx" private="1" module="justGraphix.rectPack2d.WH" final="1">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.rectPack2d.WH"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
	<get_area public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_area>
	<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
	<get_perimeter public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_perimeter>
	<fits public="1" set="method" line="30" static="1"><f a="this:r">
	<c path="justGraphix.rectPack2d.WH_"/>
	<x path="justGraphix.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
	<toString public="1" get="inline" set="null" line="38" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.WH_"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.rectPack2d._WH.WH_Impl_" params="" file="src/justGraphix/rectPack2d/WH.hx" private="1" module="justGraphix.rectPack2d.WH" final="1">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.rectPack2d.WH"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
		<get_area public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_area>
		<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
		<get_perimeter public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.WH_"/>
	<x path="Int"/>
</f></get_perimeter>
		<fits public="1" set="method" line="30" static="1"><f a="this:r">
	<c path="justGraphix.rectPack2d.WH_"/>
	<x path="justGraphix.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
		<toString public="1" get="inline" set="null" line="38" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.WH_"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rectPack2d.XYWH_" params="" file="src/justGraphix/rectPack2d/XYWH.hx" module="justGraphix.rectPack2d.XYWH">
		<extends path="justGraphix.rectPack2d.WH_"/>
		<x public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</x>
		<y public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</y>
		<new public="1" set="method" line="8"><f a="x:y:w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.rectPack2d.XYWH" params="" file="src/justGraphix/rectPack2d/XYWH.hx">
		<from><icast><c path="justGraphix.rectPack2d.XYWH_"/></icast></from>
		<this><c path="justGraphix.rectPack2d.XYWH_"/></this>
		<to>
			<icast><c path="justGraphix.rectPack2d.XYWH_"/></icast>
			<icast field="toWH"><x path="justGraphix.rectPack2d.WH"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.rectPack2d._XYWH.XYWH_Impl_" params="" file="src/justGraphix/rectPack2d/XYWH.hx" private="1" module="justGraphix.rectPack2d.XYWH" final="1">
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="x:y:w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.rectPack2d.XYWH"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<r public="1" get="accessor" set="accessor" static="1"><x path="Int"/></r>
	<get_r get="inline" set="null" line="23" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_r>
	<set_r get="inline" set="null" line="27" static="1"><f a="this:rr">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_r>
	<b public="1" get="accessor" set="accessor" static="1"><x path="Int"/></b>
	<get_b get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_b>
	<set_b get="inline" set="null" line="37" static="1"><f a="this:bb">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_b>
	<toWH public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<c path="justGraphix.rectPack2d.XYWH_"/>
			<x path="justGraphix.rectPack2d.WH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toWH>
	<toString public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="justGraphix.rectPack2d._XYWH.XYWH_Impl_" params="" file="src/justGraphix/rectPack2d/XYWH.hx" private="1" module="justGraphix.rectPack2d.XYWH" final="1">
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.rectPack2d.XYWH"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<r public="1" get="accessor" set="accessor" static="1"><x path="Int"/></r>
		<get_r get="inline" set="null" line="23" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_r>
		<set_r get="inline" set="null" line="27" static="1"><f a="this:rr">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_r>
		<b public="1" get="accessor" set="accessor" static="1"><x path="Int"/></b>
		<get_b get="inline" set="null" line="33" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
</f></get_b>
		<set_b get="inline" set="null" line="37" static="1"><f a="this:bb">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_b>
		<toWH public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<c path="justGraphix.rectPack2d.XYWH_"/>
				<x path="justGraphix.rectPack2d.WH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toWH>
		<toString public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWH_"/>
	<c path="String"/>
</f></toString>
	</class>
	<class path="justGraphix.rectPack2d.XYWHF_" params="" file="src/justGraphix/rectPack2d/XYWHF.hx" module="justGraphix.rectPack2d.XYWHF">
		<extends path="justGraphix.rectPack2d.XYWH_"/>
		<flipped public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</flipped>
		<id public="1"><x path="Int"/></id>
		<new public="1" set="method" line="8"><f a="id:x:y:w:h">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.rectPack2d.XYWHF" params="" file="src/justGraphix/rectPack2d/XYWHF.hx">
		<from><icast><c path="justGraphix.rectPack2d.XYWHF_"/></icast></from>
		<this><c path="justGraphix.rectPack2d.XYWHF_"/></this>
		<to>
			<icast><c path="justGraphix.rectPack2d.XYWHF_"/></icast>
			<icast field="toXYWH"><x path="justGraphix.rectPack2d.XYWH"/></icast>
			<icast field="toWH"><x path="justGraphix.rectPack2d.WH"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.rectPack2d._XYWHF.XYWHF_Impl_" params="" file="src/justGraphix/rectPack2d/XYWHF.hx" private="1" module="justGraphix.rectPack2d.XYWHF" final="1">
	<_new public="1" get="inline" set="null" line="16" static="1">
		<f a="id:x:y:w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.rectPack2d.XYWHF"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<flip public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="Void"/>
</f></flip>
	<clone public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
</f></clone>
	<sorts public="1" get="inline" set="null" line="34" static="1"><f a=""><c path="Array"><f a=":">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></c></f></sorts>
	<toObject public="1" get="inline" set="null" line="38" static="1">
		<f a="this:?name" v=":&quot;&quot;">
			<c path="justGraphix.rectPack2d.XYWHF_"/>
			<c path="String"/>
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
				<width><x path="Int"/></width>
				<name><c path="String"/></name>
				<id><x path="Int"/></id>
				<height><x path="Int"/></height>
			</a>
		</f>
		<meta><m n=":value"><e>{ name : "" }</e></m></meta>
	</toObject>
	<string public="1" get="inline" set="null" line="42" static="1"><f a="this:name">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<c path="String"/>
	<c path="String"/>
</f></string>
	<toXYWH public="1" get="inline" set="null" line="47" static="1">
		<f a="this">
			<c path="justGraphix.rectPack2d.XYWHF_"/>
			<x path="justGraphix.rectPack2d.XYWH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toXYWH>
	<toWH public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<c path="justGraphix.rectPack2d.XYWHF_"/>
			<x path="justGraphix.rectPack2d.WH"/>
		</f>
		<meta><m n=":to"/></meta>
	</toWH>
	<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
	<get_area public="1" get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_area>
	<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
	<get_perimeter public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_perimeter>
	<fits public="1" get="inline" set="null" line="67" static="1"><f a="this:r">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="justGraphix.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
	<toString public="1" get="inline" set="null" line="71" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="justGraphix.rectPack2d._XYWHF.XYWHF_Impl_" params="" file="src/justGraphix/rectPack2d/XYWHF.hx" private="1" module="justGraphix.rectPack2d.XYWHF" final="1">
		<_new public="1" get="inline" set="null" line="16" static="1">
			<f a="id:x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.rectPack2d.XYWHF"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<flip public="1" get="inline" set="null" line="21" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="Void"/>
</f></flip>
		<clone public="1" get="inline" set="null" line="28" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
</f></clone>
		<sorts public="1" get="inline" set="null" line="34" static="1"><f a=""><c path="Array"><f a=":">
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="justGraphix.rectPack2d.XYWHF"/>
	<x path="Int"/>
</f></c></f></sorts>
		<toObject public="1" get="inline" set="null" line="38" static="1">
			<f a="this:?name" v=":&quot;&quot;">
				<c path="justGraphix.rectPack2d.XYWHF_"/>
				<c path="String"/>
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<width><x path="Int"/></width>
					<name><c path="String"/></name>
					<id><x path="Int"/></id>
					<height><x path="Int"/></height>
				</a>
			</f>
			<meta><m n=":value"><e>{ name : "" }</e></m></meta>
		</toObject>
		<string public="1" get="inline" set="null" line="42" static="1"><f a="this:name">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<c path="String"/>
	<c path="String"/>
</f></string>
		<toXYWH public="1" get="inline" set="null" line="47" static="1">
			<f a="this">
				<c path="justGraphix.rectPack2d.XYWHF_"/>
				<x path="justGraphix.rectPack2d.XYWH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toXYWH>
		<toWH public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<c path="justGraphix.rectPack2d.XYWHF_"/>
				<x path="justGraphix.rectPack2d.WH"/>
			</f>
			<meta><m n=":to"/></meta>
		</toWH>
		<area public="1" get="accessor" set="null" static="1"><x path="Int"/></area>
		<get_area public="1" get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_area>
		<perimeter public="1" get="accessor" set="null" static="1"><x path="Int"/></perimeter>
		<get_perimeter public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="Int"/>
</f></get_perimeter>
		<fits public="1" get="inline" set="null" line="67" static="1"><f a="this:r">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<x path="justGraphix.rectPack2d.WH"/>
	<x path="Int"/>
</f></fits>
		<toString public="1" get="inline" set="null" line="71" static="1"><f a="this">
	<c path="justGraphix.rectPack2d.XYWHF_"/>
	<c path="String"/>
</f></toString>
	</class>
	<enum path="justGraphix.rose.DifferencePreference" params="" file="src/justGraphix/rose/Angles.hx" module="justGraphix.rose.Angles">
		<CLOCKWISE/>
		<ANTICLOCKWISE/>
		<SMALL/>
		<LARGE/>
		<SMALL_OLD/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="justGraphix.rose.Angles" params="" file="src/justGraphix/rose/Angles.hx">
		<pi2pi public="1" get="inline" set="null" line="14" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="22" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<zerotoMinus2pi public="1" get="inline" set="null" line="30" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zerotoMinus2pi>
		<differencePrefer public="1" get="inline" set="null" line="39" static="1"><f a="a:b:prefer">
	<x path="Float"/>
	<x path="Float"/>
	<e path="justGraphix.rose.DifferencePreference"/>
	<x path="Float"/>
</f></differencePrefer>
		<difference public="1" get="inline" set="null" line="53" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></difference>
		<differenceClockWise public="1" get="inline" set="null" line="62" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceClockWise>
		<differenceAntiClockwise public="1" get="inline" set="null" line="66" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceAntiClockwise>
		<differenceSmall public="1" get="inline" set="null" line="70" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall>
		<differenceSmall_old public="1" get="inline" set="null" line="85" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall_old>
		<differenceLarge public="1" get="inline" set="null" line="100" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceLarge>
		<differenceSmallLarge public="1" get="inline" set="null" line="115" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<small><x path="Float"/></small>
		<large><x path="Float"/></large>
	</a>
</f></differenceSmallLarge>
	</class>
	<class path="justGraphix.rose.ComplexNum_" params="" file="src/justGraphix/rose/ComplexNum.hx" module="justGraphix.rose.ComplexNum">
		<r public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</r>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<toString public="1" get="inline" set="null" line="17">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":keep"/>
				<m n=":to"/>
			</meta>
		</toString>
		<clone public="1" set="method" line="20"><f a=""><c path="justGraphix.rose.ComplexNum_"/></f></clone>
		<new set="method" line="10"><f a="r:i">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ r, i }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.rose.ComplexNum" params="" file="src/justGraphix/rose/ComplexNum.hx">
		<from>
			<icast><c path="justGraphix.rose.ComplexNum_"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromRealImaginary"><a>
	<real><x path="Float"/></real>
	<imaginary><x path="Float"/></imaginary>
</a></icast>
			<icast field="fromRi"><a>
	<r><x path="Float"/></r>
	<i><x path="Float"/></i>
</a></icast>
			<icast field="fromRealI"><a>
	<real><x path="Float"/></real>
	<i><x path="Float"/></i>
</a></icast>
			<icast field="fromPolar"><x path="justGraphix.rose.PolarRose"/></icast>
		</from>
		<this><c path="justGraphix.rose.ComplexNum_"/></this>
		<to>
			<icast><c path="justGraphix.rose.ComplexNum_"/></icast>
			<icast field="toString"><c path="String"/></icast>
			<icast field="toPolar"><x path="justGraphix.rose.PolarRose"/></icast>
		</to>
		<haxe_doc>ComplexNum - A Complex Float Type.  
   { r, i }
   
   For Convinence you can declare in several ways eg:  
   var c0: ComplexNum = '1 + 2i';  
   var c1: ComplexNum = { real: 1., imaginary: 2. };  
   var c2: ComplexNum = { r: 1., i: 2. };  
   var c3: ComplexNum = new ComplexNum({ r: 1., i: 2. });  
   
   You can use normal operations  
   var c4 = c0 * c1;  
   var c5 = c0 + c1;  
   
   You can extract either part  
   var real = c0.real;  
   var imaginary = c0.i;  
   
   You can trace it.
   trace( ComplexNum.fromString( c0 ) ); // '1. + 2. i'</haxe_doc>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.rose._ComplexNum.ComplexNum_Impl_" params="" file="src/justGraphix/rose/ComplexNum.hx" private="1" module="justGraphix.rose.ComplexNum" final="1">
	<fromString public="1" get="inline" set="null" line="59" static="1">
		<f a="s">
			<c path="String"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = '1 + 2i';
     * ... var c1 = new ComplexNum({ r: 1., i: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromString>
	<fromRealImaginary public="1" get="inline" set="null" line="77" static="1">
		<f a="c">
			<a>
				<real><x path="Float"/></real>
				<imaginary><x path="Float"/></imaginary>
			</a>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = { real: 1., imaginary: 2. };
     * ... var c1 = new ComplexNum({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRealImaginary>
	<fromRi public="1" get="inline" set="null" line="90" static="1">
		<f a="c">
			<a>
				<r><x path="Float"/></r>
				<i><x path="Float"/></i>
			</a>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = { r: 1., i: 2. };
     * ... var c1 = new ComplexNum({ r: 1., i: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRi>
	<fromRealI public="1" get="inline" set="null" line="103" static="1">
		<f a="c">
			<a>
				<real><x path="Float"/></real>
				<i><x path="Float"/></i>
			</a>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = { real: 1., i: 2. };
     * ... var c1 = new ComplexNum({ r: 1., i: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRealI>
	<toString public="1" get="inline" set="null" line="117" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c: ComplexNum = { r: 1., i: 2. };
     * ... var s: String = c;
     * ... // js seems to remove the .'s from the numbers not sure on other targets
     * ... s == '1. + 2. i' || s == '1 + 2 i'; }) == true
     * </code></pre>]]></haxe_doc>
	</toString>
	<_new public="1" get="inline" set="null" line="122" static="1">
		<f a="m">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<zero public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.zero == new ComplexNum({r:0.
     * ...                            , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<get_zero get="inline" set="null" line="134" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_zero>
	<one public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.one == new ComplexNum({x:1.
     * ...                           , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</one>
	<get_one get="inline" set="null" line="147" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_one>
	<minus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minus1 == new ComplexNum({r: -1.
     * ...                              , i: 0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minus1>
	<get_minus1 get="inline" set="null" line="160" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minus1>
	<unit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unit == new ComplexNum({x: 1.
     * ...                            , y: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<get_unit get="inline" set="null" line="173" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unit>
	<i1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.i1 == new ComplexNum({r: 0.
     * ...                          , i: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</i1>
	<get_i1 get="inline" set="null" line="186" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_i1>
	<iMinus1 public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinus1 == new ComplexNum({r: 0.
     * ...                               , i: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinus1>
	<get_iMinus1 get="inline" set="null" line="199" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinus1>
	<minusUnit public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.minusUnit == new ComplexNum({r: -1.
     * ...                                 , i: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusUnit>
	<get_minusUnit get="inline" set="null" line="212" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusUnit>
	<unitInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitInfinity == new ComplexNum({r:Math.POSITIVE_INFINITY
     * ...                                    , i:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitInfinity>
	<get_unitInfinity get="inline" set="null" line="225" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitInfinity>
	<unitMinusInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitMinusInfinity == new ComplexNum({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true]]></haxe_doc>
	</unitMinusInfinity>
	<get_unitMinusInfinity get="inline" set="null" line="237" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitMinusInfinity>
	<realInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realInfinity == new Complex({r:Math.POSITIVE_INFINITY
     * ...                                    , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</realInfinity>
	<get_realInfinity get="inline" set="null" line="250" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_realInfinity>
	<minusInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusInfinity>
	<get_minusInfinity get="inline" set="null" line="263" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusInfinity>
	<iInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iInfinity == new ComplexNum({r:0.
     * ...                                 , i:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iInfinity>
	<get_iInfinity get="inline" set="null" line="276" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iInfinity>
	<iMinusInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinusInfinity == new ComplexNum({r:0.
     * ...                                      , i:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinusInfinity>
	<get_iMinusInfinity get="inline" set="null" line="289" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinusInfinity>
	<posNegInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.posNegInfinity == new ComplexNum({r:Math.POSITIVE_INFINITY
     * ...                                      , i:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</posNegInfinity>
	<get_posNegInfinity get="inline" set="null" line="302" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_posNegInfinity>
	<negPosInfinity public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.negPosInfinity == new ComplexNum({r:Math.NEGATIVE_INFINITY
     * ...                                      , i:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negPosInfinity>
	<get_negPosInfinity get="inline" set="null" line="315" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_negPosInfinity>
	<realPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.realPi == new ComplexNum({r:(Math.PI)
     * ...                               , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</realPi>
	<get_realPi get="inline" set="null" line="328" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_realPi>
	<iPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iPi == new ComplexNum({r:0.
     * ...                            , i:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iPi>
	<get_iPi get="inline" set="null" line="341" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iPi>
	<unitPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitPi == new ComplexNum({r:(Math.PI)
     * ...                               , i:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitPi>
	<get_unitPi get="inline" set="null" line="354" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitPi>
	<unitMinusPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitMinusPi == new ComplexNum({r:(-Math.PI)
     * ...                                    , i:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitMinusPi>
	<get_unitMinusPi get="inline" set="null" line="367" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitMinusPi>
	<iMinusPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinusPi == new ComplexNum({r:0.
     * ...                                 , i:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinusPi>
	<get_iMinusPi get="inline" set="null" line="380" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinusPi>
	<minusPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.minusPi == new ComplexNum({r:(-Math.PI)
     * ...                                , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusPi>
	<get_minusPi get="inline" set="null" line="393" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusPi>
	<posNegPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.posNegPi == new ComplexNum({x:(Math.PI)
     * ...                                , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</posNegPi>
	<get_posNegPi get="inline" set="null" line="406" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_posNegPi>
	<negPosPi public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.negPosPi == new ComplexNum({r:(-Math.PI)
     * ...                                 , i:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negPosPi>
	<get_negPosPi get="inline" set="null" line="419" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_negPosPi>
	<realTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.realTau == new ComplexNum({r:(Math.PI*2)
     * ...                               , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</realTau>
	<get_realTau get="inline" set="null" line="432" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_realTau>
	<iTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iTau == new Complex({r:0.
     * ...                            , i:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iTau>
	<get_iTau get="inline" set="null" line="445" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iTau>
	<unitTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitTau == new ComplexNum({r:(Math.PI*2)
     * ...                               , i:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitTau>
	<get_unitTau get="inline" set="null" line="458" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitTau>
	<unitMinusTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitMinusTau == new ComplexNum({r:(-Math.PI*2)
     * ...                                    , i:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitMinusTau>
	<get_unitMinusTau get="inline" set="null" line="471" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitMinusTau>
	<iMinusTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinusTau == new ComplexNum({r:0.
     * ...                                 , i:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</iMinusTau>
	<get_iMinusTau get="inline" set="null" line="484" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinusTau>
	<minusTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.minusTau == new ComplexNum{r:(-Math.PI*2)
     * ...                                , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</minusTau>
	<get_minusTau get="inline" set="null" line="497" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusTau>
	<posNegTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.posNegTau == new ComplexNum({r:(Math.PI*2)
     * ...                                 , i:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</posNegTau>
	<get_posNegTau get="inline" set="null" line="510" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_posNegTau>
	<negPosTau public="1" get="accessor" set="null" static="1">
		<x path="justGraphix.rose.ComplexNum"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.negPosTau == new ComplexNum({x:(-Math.PI*2)
     * ...                                 , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</negPosTau>
	<get_negPosTau get="inline" set="null" line="523" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_negPosTau>
	<i public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... a.i == 2.; }) == true
     * </code></pre>]]></haxe_doc>
	</i>
	<get_i get="inline" set="null" line="535" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></get_i>
	<set_i get="inline" set="null" line="539" static="1"><f a="this:v">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_i>
	<real public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... a.real == 1.; }) == true
     * </code></pre>]]></haxe_doc>
	</real>
	<get_real get="inline" set="null" line="551" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></get_real>
	<set_real get="inline" set="null" line="554" static="1"><f a="this:v">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_real>
	<clone public="1" get="inline" set="null" line="566" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... a.clone() == a; }) == true
     * </code></pre>]]></haxe_doc>
	</clone>
	<swap public="1" get="inline" set="null" line="578" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = new ComplexNum({ r: 2., i: 1. });
     * ... a.swap() == b; }) == true
     * </code></pre>]]></haxe_doc>
	</swap>
	<equal public="1" get="inline" set="null" line="590" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = new ComplexNum({ r: 1., i: 2. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="606" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ x: 1., y: 2. });
     * ... var b = new ComplexNum({ x: 1., y: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<add public="1" get="inline" set="null" line="618" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = ComplexNum.unit;
     * ... a + a == new ComplexNum({ r: 2., i: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="630" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = ComplexNum.unit;
     * ... a - a == ComplexNum.zero; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scale public="1" get="inline" set="null" line="642" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scale>
	<multiply public="1" get="inline" set="null" line="655" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3., i: 2. });
     * ... var b = new ComplexNum({ r: 1., i: 7. });
     * ... a * b == new ComplexNum({ r: -11., i: 23. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</multiply>
	<addExponents public="1" get="inline" set="null" line="667" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3., i: 2. });
     * ... a.addExponents() == 5;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</addExponents>
	<conjugate public="1" get="inline" set="null" line="679" static="1">
		<f a="a">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = ~a;
     * ... b == new ComplexNum({ r: 1., i: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<divide public="1" get="inline" set="null" line="707" static="1">
		<f a="c1:c2">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: -3. });
     * ... var b = new ComplexNum({ r: 1., i: 2. });
     * ... a / b == new ComplexNum({ r:-1, i: -1 });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</divide>
	<negate public="1" get="inline" set="null" line="723" static="1">
		<f a="a">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = -a;
     * ... b == new ComplexNum({ r: -1., i: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<magnitudeSquared public="1" get="inline" set="null" line="734" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 2., i: 4. });
     * ... a.magnitudeSquared() == 4. + 16.; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3, i: 4});
     * ... a.magnitude == 5.; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="747" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="751" static="1"><f a="this:length">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
	<phase public="1" get="inline" set="null" line="763" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></phase>
	<isReal public="1" get="inline" set="null" line="774" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.one;
     * ... a.isReal() == true; }) == true
     * </code></pre>]]></haxe_doc>
	</isReal>
	<isImaginary public="1" get="inline" set="null" line="785" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = ComplexNum.i1;
     * ... a.isImaginary() == true; }) == true
     * </code></pre>]]></haxe_doc>
	</isImaginary>
	<cis public="1" get="inline" set="null" line="799" static="1">
		<f a="angle">
			<x path="Float"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var square = ComplexNum.square;
     * ... square(r*cis( theta )) == r*r*cis( 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
	</cis>
	<fromCircle public="1" get="inline" set="null" line="815" static="1">
		<f a="r:angle">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var square = ComplexNum.square;
     * ... var fromCircle = ComplexNum.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromCircle>
	<square public="1" get="inline" set="null" line="830" static="1">
		<f a="c">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var square = ComplexNum.square;
     * ... var fromCircle = ComplexNum.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
	</square>
	<exp public="1" get="inline" set="null" line="852" static="1">
		<f a="c">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var fromCircle = ComplexNum.fromCircle;
     * ... var exp = ComplexNum.exp;
     * ... fromCircle(r,theta) == r*exp( new ComplexNum({ r: 0, i: theta }) ); }) == true
     * </code></pre>]]></haxe_doc>
	</exp>
	<ln public="1" get="inline" set="null" line="869" static="1">
		<f a="c">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3, i: 4});
     * ... var b = new ComplexNum({ r: 6, i: 8});
     * ... var ln = ComplexNum.ln;
     * ... ln( a*b ) == ln( a ) + ln( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</ln>
	<arg public="1" get="inline" set="null" line="887" static="1">
		<f a="c">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3, i: 4});
     * ... var b = new ComplexNum({ r: 6, i: 8});
     * ... var arg = ComplexNum.arg;
     * ... arg( a*b ) == arg( a ) + arg( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</arg>
	<reciprocal public="1" get="inline" set="null" line="904" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></reciprocal>
	<pow public="1" get="inline" set="null" line="910" static="1"><f a="c:n">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="Float"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></pow>
	<squareRoot public="1" get="inline" set="null" line="921" static="1">
		<f a="c">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc>* squareRoot see pow</haxe_doc>
	</squareRoot>
	<root2 public="1" get="inline" set="null" line="928" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<haxe_doc>* root2 see pow</haxe_doc>
	</root2>
	<toPolar public="1" get="inline" set="null" line="936" static="1">
		<f a="this">
			<c path="justGraphix.rose.ComplexNum_"/>
			<x path="justGraphix.rose.PolarRose"/>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>* to PolarRose</haxe_doc>
	</toPolar>
	<fromPolar public="1" get="inline" set="null" line="945" static="1">
		<f a="polar">
			<x path="justGraphix.rose.PolarRose"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* from PolarRose</haxe_doc>
	</fromPolar>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._ComplexNum.ComplexNum_Impl_" params="" file="src/justGraphix/rose/ComplexNum.hx" private="1" module="justGraphix.rose.ComplexNum" final="1">
		<fromString public="1" get="inline" set="null" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = '1 + 2i';
     * ... var c1 = new ComplexNum({ r: 1., i: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromString>
		<fromRealImaginary public="1" get="inline" set="null" line="77" static="1">
			<f a="c">
				<a>
					<real><x path="Float"/></real>
					<imaginary><x path="Float"/></imaginary>
				</a>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = { real: 1., imaginary: 2. };
     * ... var c1 = new ComplexNum({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRealImaginary>
		<fromRi public="1" get="inline" set="null" line="90" static="1">
			<f a="c">
				<a>
					<r><x path="Float"/></r>
					<i><x path="Float"/></i>
				</a>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = { r: 1., i: 2. };
     * ... var c1 = new ComplexNum({ r: 1., i: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRi>
		<fromRealI public="1" get="inline" set="null" line="103" static="1">
			<f a="c">
				<a>
					<real><x path="Float"/></real>
					<i><x path="Float"/></i>
				</a>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: ComplexNum = { real: 1., i: 2. };
     * ... var c1 = new ComplexNum({ r: 1., i: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRealI>
		<toString public="1" get="inline" set="null" line="117" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c: ComplexNum = { r: 1., i: 2. };
     * ... var s: String = c;
     * ... // js seems to remove the .'s from the numbers not sure on other targets
     * ... s == '1. + 2. i' || s == '1 + 2 i'; }) == true
     * </code></pre>]]></haxe_doc>
		</toString>
		<_new public="1" get="inline" set="null" line="122" static="1">
			<f a="m">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<zero public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.zero == new ComplexNum({r:0.
     * ...                            , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<get_zero get="inline" set="null" line="134" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_zero>
		<one public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.one == new ComplexNum({x:1.
     * ...                           , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</one>
		<get_one get="inline" set="null" line="147" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_one>
		<minus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minus1 == new ComplexNum({r: -1.
     * ...                              , i: 0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minus1>
		<get_minus1 get="inline" set="null" line="160" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minus1>
		<unit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unit == new ComplexNum({x: 1.
     * ...                            , y: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<get_unit get="inline" set="null" line="173" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unit>
		<i1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.i1 == new ComplexNum({r: 0.
     * ...                          , i: 1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</i1>
		<get_i1 get="inline" set="null" line="186" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_i1>
		<iMinus1 public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinus1 == new ComplexNum({r: 0.
     * ...                               , i: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinus1>
		<get_iMinus1 get="inline" set="null" line="199" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinus1>
		<minusUnit public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.minusUnit == new ComplexNum({r: -1.
     * ...                                 , i: -1.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusUnit>
		<get_minusUnit get="inline" set="null" line="212" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusUnit>
		<unitInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitInfinity == new ComplexNum({r:Math.POSITIVE_INFINITY
     * ...                                    , i:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitInfinity>
		<get_unitInfinity get="inline" set="null" line="225" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitInfinity>
		<unitMinusInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitMinusInfinity == new ComplexNum({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:Math.NEGATIVE_INFINITY}); 
     * ... }) == true]]></haxe_doc>
		</unitMinusInfinity>
		<get_unitMinusInfinity get="inline" set="null" line="237" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitMinusInfinity>
		<realInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.realInfinity == new Complex({r:Math.POSITIVE_INFINITY
     * ...                                    , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</realInfinity>
		<get_realInfinity get="inline" set="null" line="250" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_realInfinity>
		<minusInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.minusInfinity == new Complex({x:Math.NEGATIVE_INFINITY
     * ...                                         , y:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusInfinity>
		<get_minusInfinity get="inline" set="null" line="263" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusInfinity>
		<iInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iInfinity == new ComplexNum({r:0.
     * ...                                 , i:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iInfinity>
		<get_iInfinity get="inline" set="null" line="276" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iInfinity>
		<iMinusInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinusInfinity == new ComplexNum({r:0.
     * ...                                      , i:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinusInfinity>
		<get_iMinusInfinity get="inline" set="null" line="289" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinusInfinity>
		<posNegInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.posNegInfinity == new ComplexNum({r:Math.POSITIVE_INFINITY
     * ...                                      , i:Math.NEGATIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</posNegInfinity>
		<get_posNegInfinity get="inline" set="null" line="302" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_posNegInfinity>
		<negPosInfinity public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.negPosInfinity == new ComplexNum({r:Math.NEGATIVE_INFINITY
     * ...                                      , i:Math.POSITIVE_INFINITY}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negPosInfinity>
		<get_negPosInfinity get="inline" set="null" line="315" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_negPosInfinity>
		<realPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.realPi == new ComplexNum({r:(Math.PI)
     * ...                               , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</realPi>
		<get_realPi get="inline" set="null" line="328" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_realPi>
		<iPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iPi == new ComplexNum({r:0.
     * ...                            , i:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iPi>
		<get_iPi get="inline" set="null" line="341" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iPi>
		<unitPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitPi == new ComplexNum({r:(Math.PI)
     * ...                               , i:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitPi>
		<get_unitPi get="inline" set="null" line="354" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitPi>
		<unitMinusPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitMinusPi == new ComplexNum({r:(-Math.PI)
     * ...                                    , i:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitMinusPi>
		<get_unitMinusPi get="inline" set="null" line="367" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitMinusPi>
		<iMinusPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinusPi == new ComplexNum({r:0.
     * ...                                 , i:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinusPi>
		<get_iMinusPi get="inline" set="null" line="380" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinusPi>
		<minusPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.minusPi == new ComplexNum({r:(-Math.PI)
     * ...                                , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusPi>
		<get_minusPi get="inline" set="null" line="393" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusPi>
		<posNegPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.posNegPi == new ComplexNum({x:(Math.PI)
     * ...                                , y:(-Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</posNegPi>
		<get_posNegPi get="inline" set="null" line="406" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_posNegPi>
		<negPosPi public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.negPosPi == new ComplexNum({r:(-Math.PI)
     * ...                                 , i:(Math.PI)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negPosPi>
		<get_negPosPi get="inline" set="null" line="419" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_negPosPi>
		<realTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.realTau == new ComplexNum({r:(Math.PI*2)
     * ...                               , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</realTau>
		<get_realTau get="inline" set="null" line="432" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_realTau>
		<iTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Complex.iTau == new Complex({r:0.
     * ...                            , i:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iTau>
		<get_iTau get="inline" set="null" line="445" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iTau>
		<unitTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitTau == new ComplexNum({r:(Math.PI*2)
     * ...                               , i:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitTau>
		<get_unitTau get="inline" set="null" line="458" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitTau>
		<unitMinusTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.unitMinusTau == new ComplexNum({r:(-Math.PI*2)
     * ...                                    , i:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitMinusTau>
		<get_unitMinusTau get="inline" set="null" line="471" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_unitMinusTau>
		<iMinusTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.iMinusTau == new ComplexNum({r:0.
     * ...                                 , i:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</iMinusTau>
		<get_iMinusTau get="inline" set="null" line="484" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_iMinusTau>
		<minusTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.minusTau == new ComplexNum{r:(-Math.PI*2)
     * ...                                , i:0.}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</minusTau>
		<get_minusTau get="inline" set="null" line="497" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_minusTau>
		<posNegTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.posNegTau == new ComplexNum({r:(Math.PI*2)
     * ...                                 , i:(-Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</posNegTau>
		<get_posNegTau get="inline" set="null" line="510" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_posNegTau>
		<negPosTau public="1" get="accessor" set="null" static="1">
			<x path="justGraphix.rose.ComplexNum"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... ComplexNum.negPosTau == new ComplexNum({x:(-Math.PI*2)
     * ...                                 , y:(Math.PI*2)}); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</negPosTau>
		<get_negPosTau get="inline" set="null" line="523" static="1"><f a=""><x path="justGraphix.rose.ComplexNum"/></f></get_negPosTau>
		<i public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... a.i == 2.; }) == true
     * </code></pre>]]></haxe_doc>
		</i>
		<get_i get="inline" set="null" line="535" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></get_i>
		<set_i get="inline" set="null" line="539" static="1"><f a="this:v">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_i>
		<real public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... a.real == 1.; }) == true
     * </code></pre>]]></haxe_doc>
		</real>
		<get_real get="inline" set="null" line="551" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></get_real>
		<set_real get="inline" set="null" line="554" static="1"><f a="this:v">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_real>
		<clone public="1" get="inline" set="null" line="566" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... a.clone() == a; }) == true
     * </code></pre>]]></haxe_doc>
		</clone>
		<swap public="1" get="inline" set="null" line="578" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = new ComplexNum({ r: 2., i: 1. });
     * ... a.swap() == b; }) == true
     * </code></pre>]]></haxe_doc>
		</swap>
		<equal public="1" get="inline" set="null" line="590" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = new ComplexNum({ r: 1., i: 2. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="606" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ x: 1., y: 2. });
     * ... var b = new ComplexNum({ x: 1., y: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<add public="1" get="inline" set="null" line="618" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = ComplexNum.unit;
     * ... a + a == new ComplexNum({ r: 2., i: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="630" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = ComplexNum.unit;
     * ... a - a == ComplexNum.zero; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scale public="1" get="inline" set="null" line="642" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scale>
		<multiply public="1" get="inline" set="null" line="655" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3., i: 2. });
     * ... var b = new ComplexNum({ r: 1., i: 7. });
     * ... a * b == new ComplexNum({ r: -11., i: 23. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</multiply>
		<addExponents public="1" get="inline" set="null" line="667" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3., i: 2. });
     * ... a.addExponents() == 5;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</addExponents>
		<conjugate public="1" get="inline" set="null" line="679" static="1">
			<f a="a">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = ~a;
     * ... b == new ComplexNum({ r: 1., i: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<divide public="1" get="inline" set="null" line="707" static="1">
			<f a="c1:c2">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: -3. });
     * ... var b = new ComplexNum({ r: 1., i: 2. });
     * ... a / b == new ComplexNum({ r:-1, i: -1 });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</divide>
		<negate public="1" get="inline" set="null" line="723" static="1">
			<f a="a">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 1., i: 2. });
     * ... var b = -a;
     * ... b == new ComplexNum({ r: -1., i: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<magnitudeSquared public="1" get="inline" set="null" line="734" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 2., i: 4. });
     * ... a.magnitudeSquared() == 4. + 16.; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3, i: 4});
     * ... a.magnitude == 5.; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="747" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="751" static="1"><f a="this:length">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
		<phase public="1" get="inline" set="null" line="763" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="Float"/>
</f></phase>
		<isReal public="1" get="inline" set="null" line="774" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.one;
     * ... a.isReal() == true; }) == true
     * </code></pre>]]></haxe_doc>
		</isReal>
		<isImaginary public="1" get="inline" set="null" line="785" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = ComplexNum.i1;
     * ... a.isImaginary() == true; }) == true
     * </code></pre>]]></haxe_doc>
		</isImaginary>
		<cis public="1" get="inline" set="null" line="799" static="1">
			<f a="angle">
				<x path="Float"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var square = ComplexNum.square;
     * ... square(r*cis( theta )) == r*r*cis( 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
		</cis>
		<fromCircle public="1" get="inline" set="null" line="815" static="1">
			<f a="r:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var square = ComplexNum.square;
     * ... var fromCircle = ComplexNum.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromCircle>
		<square public="1" get="inline" set="null" line="830" static="1">
			<f a="c">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var square = ComplexNum.square;
     * ... var fromCircle = ComplexNum.fromCircle;
     * ... square(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true
     * </code></pre>]]></haxe_doc>
		</square>
		<exp public="1" get="inline" set="null" line="852" static="1">
			<f a="c">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var r = 12;
     * ... var theta = Math.PI/4;
     * ... var cis = ComplexNum.cis;
     * ... var fromCircle = ComplexNum.fromCircle;
     * ... var exp = ComplexNum.exp;
     * ... fromCircle(r,theta) == r*exp( new ComplexNum({ r: 0, i: theta }) ); }) == true
     * </code></pre>]]></haxe_doc>
		</exp>
		<ln public="1" get="inline" set="null" line="869" static="1">
			<f a="c">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3, i: 4});
     * ... var b = new ComplexNum({ r: 6, i: 8});
     * ... var ln = ComplexNum.ln;
     * ... ln( a*b ) == ln( a ) + ln( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</ln>
		<arg public="1" get="inline" set="null" line="887" static="1">
			<f a="c">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new ComplexNum({ r: 3, i: 4});
     * ... var b = new ComplexNum({ r: 6, i: 8});
     * ... var arg = ComplexNum.arg;
     * ... arg( a*b ) == arg( a ) + arg( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</arg>
		<reciprocal public="1" get="inline" set="null" line="904" static="1"><f a="this">
	<c path="justGraphix.rose.ComplexNum_"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></reciprocal>
		<pow public="1" get="inline" set="null" line="910" static="1"><f a="c:n">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="Float"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></pow>
		<squareRoot public="1" get="inline" set="null" line="921" static="1">
			<f a="c">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc>* squareRoot see pow</haxe_doc>
		</squareRoot>
		<root2 public="1" get="inline" set="null" line="928" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<haxe_doc>* root2 see pow</haxe_doc>
		</root2>
		<toPolar public="1" get="inline" set="null" line="936" static="1">
			<f a="this">
				<c path="justGraphix.rose.ComplexNum_"/>
				<x path="justGraphix.rose.PolarRose"/>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>* to PolarRose</haxe_doc>
		</toPolar>
		<fromPolar public="1" get="inline" set="null" line="945" static="1">
			<f a="polar">
				<x path="justGraphix.rose.PolarRose"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* from PolarRose</haxe_doc>
		</fromPolar>
	</class>
	<class path="justGraphix.rose._ComplexNum.ComplexNum_Fields_" params="" file="src/justGraphix/rose/ComplexNum.hx" private="1" module="justGraphix.rose.ComplexNum" final="1">
		<sin public="1" get="inline" set="null" line="950" static="1"><f a="c">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></sin>
		<cos public="1" get="inline" set="null" line="959" static="1"><f a="c">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></cos>
		<tan public="1" get="inline" set="null" line="968" static="1"><f a="c">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></tan>
		<sinh public="1" get="inline" set="null" line="976" static="1"><f a="c">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></sinh>
		<cosh public="1" get="inline" set="null" line="985" static="1"><f a="c">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></cosh>
		<tanh public="1" get="inline" set="null" line="994" static="1"><f a="c">
	<x path="justGraphix.rose.ComplexNum"/>
	<x path="justGraphix.rose.ComplexNum"/>
</f></tanh>
	</class>
	<class path="justGraphix.rose.Hyperbolic" params="" file="src/justGraphix/rose/Hyperbolic.hx">
		<sinh public="1" get="inline" set="null" line="4" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></sinh>
		<cosech public="1" get="inline" set="null" line="9" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></cosech>
		<sech public="1" get="inline" set="null" line="13" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></sech>
		<cosh public="1" get="inline" set="null" line="17" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></cosh>
		<coth public="1" get="inline" set="null" line="22" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></coth>
		<tanh public="1" get="inline" set="null" line="26" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></tanh>
		<acosh public="1" get="inline" set="null" line="40" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></acosh>
		<asinh public="1" get="inline" set="null" line="44" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></asinh>
		<atanh public="1" get="inline" set="null" line="48" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></atanh>
	</class>
	<abstract path="justGraphix.rose.Pi2pi" params="" file="src/justGraphix/rose/Pi2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.rose._Pi2pi.Pi2pi_Impl_" params="" file="src/justGraphix/rose/Pi2pi.hx" private="1" module="justGraphix.rose.Pi2pi" final="1">
	<_new get="inline" set="null" line="7" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="13" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<et set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</et>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<additionPi public="1" set="method" line="22" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="26" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="30" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="34" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="38" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="42" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="46" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="50" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="55" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="59" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="65" static="1">
		<f a="val">
			<x path="justGraphix.fracs.Fraction"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="69" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="74" static="1">
		<f a="val">
			<c path="String"/>
			<x path="justGraphix.rose.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="80" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._Pi2pi.Pi2pi_Impl_" params="" file="src/justGraphix/rose/Pi2pi.hx" private="1" module="justGraphix.rose.Pi2pi" final="1">
		<_new get="inline" set="null" line="7" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="13" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<et set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</et>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<additionPi public="1" set="method" line="22" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="26" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="30" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="34" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="38" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="42" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="46" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="50" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="55" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="59" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="65" static="1">
			<f a="val">
				<x path="justGraphix.fracs.Fraction"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="69" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="74" static="1">
			<f a="val">
				<c path="String"/>
				<x path="justGraphix.rose.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="80" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justGraphix.rose.PolarRoseStruct" params="" file="src/justGraphix/rose/PolarRose.hx" module="justGraphix.rose.PolarRose">
		<radius public="1"><x path="Float"/></radius>
		<theta public="1"><x path="justGraphix.rose.Pi2pi"/></theta>
		<clone public="1" get="inline" set="null" line="16"><f a=""><x path="justGraphix.rose.PolarRose"/></f></clone>
		<new public="1" get="inline" set="null" line="11"><f a="radius:theta">
	<x path="Float"/>
	<x path="justGraphix.rose.Pi2pi"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<abstract path="justGraphix.rose.PolarRose" params="" file="src/justGraphix/rose/PolarRose.hx">
		<from>
			<icast><c path="justGraphix.rose.PolarRoseStruct"/></icast>
			<icast field="fromComplex"><x path="justGraphix.rose.ComplexNum"/></icast>
		</from>
		<this><c path="justGraphix.rose.PolarRoseStruct"/></this>
		<to>
			<icast><c path="justGraphix.rose.PolarRoseStruct"/></icast>
			<icast field="toComplexNum"><x path="justGraphix.rose.ComplexNum"/></icast>
		</to>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":access"><e>justGraphix.rose.PolarRoseStruct</e></m>
		</meta>
		<impl><class path="justGraphix.rose._PolarRose.PolarRose_Impl_" params="" file="src/justGraphix/rose/PolarRose.hx" private="1" module="justGraphix.rose.PolarRose" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="r:t">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.PolarRose"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<phase public="1" get="accessor" set="accessor" static="1"><x path="Float"/></phase>
	<get_phase get="inline" set="null" line="36" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_phase>
	<set_phase get="inline" set="null" line="40" static="1"><f a="this:phi">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_phase>
	<magnitude public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magnitude>
	<get_magnitude get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_magnitude>
	<set_magnitude get="inline" set="null" line="49" static="1"><f a="this:mag">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
	<cartX public="1" get="accessor" set="null" static="1"><x path="Float"/></cartX>
	<get_cartX get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_cartX>
	<cartY public="1" get="accessor" set="null" static="1"><x path="Float"/></cartY>
	<get_cartY get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_cartY>
	<fromCartesian public="1" get="inline" set="null" line="66" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.rose.PolarRose"/>
</f></fromCartesian>
	<toComplexNum public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="justGraphix.rose.PolarRoseStruct"/>
			<x path="justGraphix.rose.ComplexNum"/>
		</f>
		<meta><m n=":to"/></meta>
	</toComplexNum>
	<fromComplex public="1" get="inline" set="null" line="79" static="1">
		<f a="no">
			<x path="justGraphix.rose.ComplexNum"/>
			<x path="justGraphix.rose.PolarRose"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromComplex>
	<toString public="1" get="inline" set="null" line="84" static="1">
		<f a="this">
			<c path="justGraphix.rose.PolarRoseStruct"/>
			<c path="String"/>
		</f>
		<meta><m n=":keep"/></meta>
	</toString>
	<meta><m n=":access"><e>justGraphix.rose.PolarRoseStruct</e></m></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._PolarRose.PolarRose_Impl_" params="" file="src/justGraphix/rose/PolarRose.hx" private="1" module="justGraphix.rose.PolarRose" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="r:t">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.PolarRose"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<phase public="1" get="accessor" set="accessor" static="1"><x path="Float"/></phase>
		<get_phase get="inline" set="null" line="36" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_phase>
		<set_phase get="inline" set="null" line="40" static="1"><f a="this:phi">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_phase>
		<magnitude public="1" get="accessor" set="accessor" static="1"><x path="Float"/></magnitude>
		<get_magnitude get="inline" set="null" line="46" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_magnitude>
		<set_magnitude get="inline" set="null" line="49" static="1"><f a="this:mag">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_magnitude>
		<cartX public="1" get="accessor" set="null" static="1"><x path="Float"/></cartX>
		<get_cartX get="inline" set="null" line="58" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_cartX>
		<cartY public="1" get="accessor" set="null" static="1"><x path="Float"/></cartY>
		<get_cartY get="inline" set="null" line="62" static="1"><f a="this">
	<c path="justGraphix.rose.PolarRoseStruct"/>
	<x path="Float"/>
</f></get_cartY>
		<fromCartesian public="1" get="inline" set="null" line="66" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="justGraphix.rose.PolarRose"/>
</f></fromCartesian>
		<toComplexNum public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="justGraphix.rose.PolarRoseStruct"/>
				<x path="justGraphix.rose.ComplexNum"/>
			</f>
			<meta><m n=":to"/></meta>
		</toComplexNum>
		<fromComplex public="1" get="inline" set="null" line="79" static="1">
			<f a="no">
				<x path="justGraphix.rose.ComplexNum"/>
				<x path="justGraphix.rose.PolarRose"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromComplex>
		<toString public="1" get="inline" set="null" line="84" static="1">
			<f a="this">
				<c path="justGraphix.rose.PolarRoseStruct"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</toString>
		<meta><m n=":access"><e>justGraphix.rose.PolarRoseStruct</e></m></meta>
	</class>
	<abstract path="justGraphix.rose.Rose32" params="" file="src/justGraphix/rose/Rose.hx" module="justGraphix.rose.Rose">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>32 Compass Rose names</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.rose._Rose.Rose32_Impl_" params="" file="src/justGraphix/rose/Rose.hx" private="1" module="justGraphix.rose.Rose" extern="1" final="1">
	<N public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</N>
	<NbE public="1" get="inline" set="null" expr="cast 1" line="11" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NbE>
	<NNE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NNE>
	<NEbN public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NEbN>
	<NE public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NE>
	<NEbE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NEbE>
	<ENE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ENE>
	<EbN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EbN>
	<E public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</E>
	<EbS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EbS>
	<ESE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ESE>
	<SEbE public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEbE>
	<SE public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SE>
	<SEbS public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEbS>
	<SSE public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SSE>
	<SbE public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SbE>
	<S public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</S>
	<SbW public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SbW>
	<SSW public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SSW>
	<SWbS public="1" get="inline" set="null" expr="cast 19" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SWbS>
	<SW public="1" get="inline" set="null" expr="cast 20" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SW>
	<SWbW public="1" get="inline" set="null" expr="cast 21" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SWbW>
	<WSW public="1" get="inline" set="null" expr="cast 22" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WSW>
	<WbS public="1" get="inline" set="null" expr="cast 23" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WbS>
	<W public="1" get="inline" set="null" expr="cast 24" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 24</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</W>
	<WbN public="1" get="inline" set="null" expr="cast 25" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WbN>
	<WNW public="1" get="inline" set="null" expr="cast 26" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 26</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WNW>
	<NWbW public="1" get="inline" set="null" expr="cast 27" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 27</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NWbW>
	<NW public="1" get="inline" set="null" expr="cast 28" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NW>
	<NWbN public="1" get="inline" set="null" expr="cast 29" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 29</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NWbN>
	<NNW public="1" get="inline" set="null" expr="cast 30" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NNW>
	<NbW public="1" get="inline" set="null" expr="cast 31" line="1" static="1">
		<x path="justGraphix.rose.Rose32"/>
		<meta>
			<m n=":value"><e>cast 31</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NbW>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._Rose.Rose32_Impl_" params="" file="src/justGraphix/rose/Rose.hx" private="1" module="justGraphix.rose.Rose" extern="1" final="1">
		<N public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</N>
		<NbE public="1" get="inline" set="null" expr="cast 1" line="11" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NbE>
		<NNE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NNE>
		<NEbN public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NEbN>
		<NE public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NE>
		<NEbE public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NEbE>
		<ENE public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ENE>
		<EbN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EbN>
		<E public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</E>
		<EbS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EbS>
		<ESE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ESE>
		<SEbE public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEbE>
		<SE public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SE>
		<SEbS public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEbS>
		<SSE public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SSE>
		<SbE public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SbE>
		<S public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</S>
		<SbW public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SbW>
		<SSW public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SSW>
		<SWbS public="1" get="inline" set="null" expr="cast 19" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SWbS>
		<SW public="1" get="inline" set="null" expr="cast 20" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SW>
		<SWbW public="1" get="inline" set="null" expr="cast 21" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SWbW>
		<WSW public="1" get="inline" set="null" expr="cast 22" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WSW>
		<WbS public="1" get="inline" set="null" expr="cast 23" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WbS>
		<W public="1" get="inline" set="null" expr="cast 24" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 24</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</W>
		<WbN public="1" get="inline" set="null" expr="cast 25" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WbN>
		<WNW public="1" get="inline" set="null" expr="cast 26" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 26</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WNW>
		<NWbW public="1" get="inline" set="null" expr="cast 27" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 27</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NWbW>
		<NW public="1" get="inline" set="null" expr="cast 28" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NW>
		<NWbN public="1" get="inline" set="null" expr="cast 29" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 29</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NWbN>
		<NNW public="1" get="inline" set="null" expr="cast 30" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NNW>
		<NbW public="1" get="inline" set="null" expr="cast 31" line="1" static="1">
			<x path="justGraphix.rose.Rose32"/>
			<meta>
				<m n=":value"><e>cast 31</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NbW>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="justGraphix.rose.Rose" params="" file="src/justGraphix/rose/Rose.hx">
		<from>
			<icast><x path="justGraphix.rose.Rose32"/></icast>
			<icast field="fromRadians"><x path="Float"/></icast>
			<icast field="from32"><x path="Int"/></icast>
		</from>
		<this><x path="justGraphix.rose.Rose32"/></this>
		<to>
			<icast><x path="justGraphix.rose.Rose32"/></icast>
			<icast field="toInt"><x path="Int"/></icast>
			<icast field="tofraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="toRadians"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>Compass Rose</haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.rose._Rose.Rose_Impl_" params="" file="src/justGraphix/rose/Rose.hx" private="1" module="justGraphix.rose.Rose" final="1">
	<_new public="1" get="inline" set="null" line="49" static="1">
		<f a="rose">
			<x path="justGraphix.rose.Rose32"/>
			<x path="justGraphix.rose.Rose"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toInt public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<x path="justGraphix.rose.Rose32"/>
			<x path="Int"/>
		</f>
		<meta><m n=":to"/></meta>
	</toInt>
	<fromRadians public="1" get="inline" set="null" line="60" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.Rose"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromRadians>
	<compassInt get="inline" set="null" line="64" static="1"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></compassInt>
	<from8 get="inline" set="null" line="67" static="1"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></from8>
	<from16 get="inline" set="null" line="70" static="1"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></from16>
	<from32 get="inline" set="null" line="74" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="justGraphix.rose.Rose"/>
		</f>
		<meta><m n=":from"/></meta>
	</from32>
	<clock90 public="1" get="inline" set="null" line="85" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></clock90>
	<antiClock90 public="1" get="inline" set="null" line="90" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></antiClock90>
	<quarterClock90 public="1" get="inline" set="null" line="95" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></quarterClock90>
	<quarterAntiClock90 public="1" get="inline" set="null" line="100" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></quarterAntiClock90>
	<opposite public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></opposite>
	<tofraction get="inline" set="null" line="110" static="1">
		<f a="this">
			<x path="justGraphix.rose.Rose32"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<toRadians public="1" get="inline" set="null" line="115" static="1">
		<f a="this">
			<x path="justGraphix.rose.Rose32"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toRadians>
	<minus1 public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<x path="justGraphix.rose.Rose32"/>
			<x path="justGraphix.rose.Rose32"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</minus1>
	<plus1 public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<x path="justGraphix.rose.Rose32"/>
			<x path="justGraphix.rose.Rose32"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</plus1>
	<adding public="1" get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</adding>
	<add public="1" get="inline" set="null" line="143" static="1"><f a="this:b">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
	<x path="justGraphix.rose.Rose"/>
</f></add>
	<subtracting public="1" get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtracting>
	<subtract public="1" get="inline" set="null" line="152" static="1"><f a="this:b">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
	<x path="justGraphix.rose.Rose"/>
</f></subtract>
	<isEqualling public="1" get="inline" set="null" line="157" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</isEqualling>
	<isEqual public="1" get="inline" set="null" line="160" static="1"><f a="this:b">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
	<x path="Bool"/>
</f></isEqual>
	<notEqual public="1" get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</notEqual>
	<no public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>Int getter setter for value</haxe_doc>
	</no>
	<get_no get="inline" set="null" line="172" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Int"/>
</f></get_no>
	<set_no get="inline" set="null" line="176" static="1"><f a="this:v">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_no>
	<toString public="1" get="inline" set="null" line="182" static="1">
		<f a="this">
			<x path="justGraphix.rose.Rose32"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<isNorth public="1" get="inline" set="null" line="220" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isNorth>
	<isWest public="1" get="inline" set="null" line="224" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isWest>
	<isEast public="1" get="inline" set="null" line="228" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isEast>
	<isSouth public="1" get="inline" set="null" line="232" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isSouth>
	<closestA public="1" get="inline" set="null" line="239" static="1">
		<f a="this:a:b">
			<x path="justGraphix.rose.Rose32"/>
			<x path="justGraphix.rose.Rose"/>
			<x path="justGraphix.rose.Rose"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* takes Rose a,b and returns 1 if this is closer to a, -1 if not, 0 if same.</haxe_doc>
	</closestA>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._Rose.Rose_Impl_" params="" file="src/justGraphix/rose/Rose.hx" private="1" module="justGraphix.rose.Rose" final="1">
		<_new public="1" get="inline" set="null" line="49" static="1">
			<f a="rose">
				<x path="justGraphix.rose.Rose32"/>
				<x path="justGraphix.rose.Rose"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toInt public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<x path="justGraphix.rose.Rose32"/>
				<x path="Int"/>
			</f>
			<meta><m n=":to"/></meta>
		</toInt>
		<fromRadians public="1" get="inline" set="null" line="60" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.Rose"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromRadians>
		<compassInt get="inline" set="null" line="64" static="1"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></compassInt>
		<from8 get="inline" set="null" line="67" static="1"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></from8>
		<from16 get="inline" set="null" line="70" static="1"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></from16>
		<from32 get="inline" set="null" line="74" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="justGraphix.rose.Rose"/>
			</f>
			<meta><m n=":from"/></meta>
		</from32>
		<clock90 public="1" get="inline" set="null" line="85" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></clock90>
		<antiClock90 public="1" get="inline" set="null" line="90" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></antiClock90>
		<quarterClock90 public="1" get="inline" set="null" line="95" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></quarterClock90>
		<quarterAntiClock90 public="1" get="inline" set="null" line="100" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></quarterAntiClock90>
		<opposite public="1" get="inline" set="null" line="105" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
</f></opposite>
		<tofraction get="inline" set="null" line="110" static="1">
			<f a="this">
				<x path="justGraphix.rose.Rose32"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<toRadians public="1" get="inline" set="null" line="115" static="1">
			<f a="this">
				<x path="justGraphix.rose.Rose32"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toRadians>
		<minus1 public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<x path="justGraphix.rose.Rose32"/>
				<x path="justGraphix.rose.Rose32"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</minus1>
		<plus1 public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<x path="justGraphix.rose.Rose32"/>
				<x path="justGraphix.rose.Rose32"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</plus1>
		<adding public="1" get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</adding>
		<add public="1" get="inline" set="null" line="143" static="1"><f a="this:b">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
	<x path="justGraphix.rose.Rose"/>
</f></add>
		<subtracting public="1" get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtracting>
		<subtract public="1" get="inline" set="null" line="152" static="1"><f a="this:b">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
	<x path="justGraphix.rose.Rose"/>
</f></subtract>
		<isEqualling public="1" get="inline" set="null" line="157" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</isEqualling>
		<isEqual public="1" get="inline" set="null" line="160" static="1"><f a="this:b">
	<x path="justGraphix.rose.Rose32"/>
	<x path="justGraphix.rose.Rose"/>
	<x path="Bool"/>
</f></isEqual>
		<notEqual public="1" get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</notEqual>
		<no public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>Int getter setter for value</haxe_doc>
		</no>
		<get_no get="inline" set="null" line="172" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Int"/>
</f></get_no>
		<set_no get="inline" set="null" line="176" static="1"><f a="this:v">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_no>
		<toString public="1" get="inline" set="null" line="182" static="1">
			<f a="this">
				<x path="justGraphix.rose.Rose32"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<isNorth public="1" get="inline" set="null" line="220" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isNorth>
		<isWest public="1" get="inline" set="null" line="224" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isWest>
		<isEast public="1" get="inline" set="null" line="228" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isEast>
		<isSouth public="1" get="inline" set="null" line="232" static="1"><f a="this">
	<x path="justGraphix.rose.Rose32"/>
	<x path="Bool"/>
</f></isSouth>
		<closestA public="1" get="inline" set="null" line="239" static="1">
			<f a="this:a:b">
				<x path="justGraphix.rose.Rose32"/>
				<x path="justGraphix.rose.Rose"/>
				<x path="justGraphix.rose.Rose"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* takes Rose a,b and returns 1 if this is closer to a, -1 if not, 0 if same.</haxe_doc>
		</closestA>
	</class>
	<class path="justGraphix.rose._TauRadian.TauRadian_Fields_" params="" file="src/justGraphix/rose/TauRadian.hx" private="1" module="justGraphix.rose.TauRadian" final="1">
		<epsilon public="1" get="accessor" set="null" static="1"><x path="Float"/></epsilon>
		<get_epsilon public="1" get="inline" set="null" line="4" static="1"><f a=""><x path="Float"/></f></get_epsilon>
		<pie_2 public="1" get="accessor" set="null" static="1"><x path="Float"/></pie_2>
		<get_pie_2 public="1" get="inline" set="null" line="9" static="1"><f a=""><x path="Float"/></f></get_pie_2>
		<tau3_4 public="1" get="accessor" set="null" static="1"><x path="Float"/></tau3_4>
		<get_tau3_4 public="1" get="inline" set="null" line="14" static="1"><f a=""><x path="Float"/></f></get_tau3_4>
		<pie public="1" get="accessor" set="null" static="1"><x path="Float"/></pie>
		<get_pie public="1" get="inline" set="null" line="19" static="1"><f a=""><x path="Float"/></f></get_pie>
		<tau public="1" get="accessor" set="null" static="1"><x path="Float"/></tau>
		<get_tau public="1" get="inline" set="null" line="24" static="1"><f a=""><x path="Float"/></f></get_tau>
		<tauDivisor public="1" get="inline" set="null" line="28" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></tauDivisor>
		<minusTau public="1" get="inline" set="null" line="32" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></minusTau>
		<tauNormalize public="1" get="inline" set="null" line="37" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></tauNormalize>
		<clean0 public="1" get="inline" set="null" line="41" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></clean0>
		<tauLimit public="1" get="inline" set="null" line="49" static="1">
			<f a="val:?zero" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ zero : false }</e></m></meta>
		</tauLimit>
		<pi2piLimit public="1" get="inline" set="null" line="54" static="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2piLimit>
		<smallest public="1" get="inline" set="null" line="64" static="1"><f a="v1:v2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smallest>
	</class>
	<abstract path="justGraphix.rose.UNorm" params="" file="src/justGraphix/rose/UNorm.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="toInt"><x path="Int"/></icast>
		</to>
		<haxe_doc><![CDATA[UNorm limits values between 0 -> 1]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="justGraphix.rose._UNorm.UNorm_Impl_" params="" file="src/justGraphix/rose/UNorm.hx" private="1" module="justGraphix.rose.UNorm" final="1">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="no">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<negate get="inline" set="null" line="12" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<add get="inline" set="null" line="15" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addFloat get="inline" set="null" line="18" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addFloat>
	<addInt get="inline" set="null" line="21" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="24" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subFloat get="inline" set="null" line="27" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="30" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<subInt get="inline" set="null" line="33" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="36" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mulFloat get="inline" set="null" line="39" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulFloat>
	<mul set="method" line="42" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<mulInt set="method" line="45" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div set="method" line="48" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<divFloat set="method" line="51" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<FloatDiv set="method" line="54" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</FloatDiv>
	<divInt set="method" line="57" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv set="method" line="60" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<eq set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</eq>
	<eqInt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<eqFloat set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqFloat>
	<neq set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</neq>
	<neqInt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<neqFloat set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqFloat>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<ltInt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltInt>
	<intLt set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</intLt>
	<ltFloat set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltFloat>
	<floatLt set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</floatLt>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<lteInt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lteInt>
	<intLte set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</intLte>
	<lteFloat set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lteFloat>
	<floatLte set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</floatLte>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gtInt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtInt>
	<intGt set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</intGt>
	<gtFloat set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtFloat>
	<floatGt set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</floatGt>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<gteInt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gteInt>
	<intGte set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</intGte>
	<gteFloat set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.UNorm"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gteFloat>
	<floatGte set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="justGraphix.rose.UNorm"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</floatGte>
	<toInt get="inline" set="null" line="117" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":to"/></meta>
	</toInt>
	<clamp set="method" line="119" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.rose.UNorm"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._UNorm.UNorm_Impl_" params="" file="src/justGraphix/rose/UNorm.hx" private="1" module="justGraphix.rose.UNorm" final="1">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="no">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<negate get="inline" set="null" line="12" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<add get="inline" set="null" line="15" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addFloat get="inline" set="null" line="18" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addFloat>
		<addInt get="inline" set="null" line="21" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="24" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subFloat get="inline" set="null" line="27" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="30" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<subInt get="inline" set="null" line="33" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="36" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mulFloat get="inline" set="null" line="39" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulFloat>
		<mul set="method" line="42" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<mulInt set="method" line="45" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div set="method" line="48" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<divFloat set="method" line="51" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<FloatDiv set="method" line="54" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</FloatDiv>
		<divInt set="method" line="57" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv set="method" line="60" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<eq set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</eq>
		<eqInt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<eqFloat set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqFloat>
		<neq set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</neq>
		<neqInt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<neqFloat set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqFloat>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<ltInt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltInt>
		<intLt set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</intLt>
		<ltFloat set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltFloat>
		<floatLt set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</floatLt>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<lteInt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lteInt>
		<intLte set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</intLte>
		<lteFloat set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lteFloat>
		<floatLte set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</floatLte>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gtInt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtInt>
		<intGt set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</intGt>
		<gtFloat set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtFloat>
		<floatGt set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</floatGt>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<gteInt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gteInt>
		<intGte set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</intGte>
		<gteFloat set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.UNorm"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gteFloat>
		<floatGte set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="justGraphix.rose.UNorm"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</floatGte>
		<toInt get="inline" set="null" line="117" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":to"/></meta>
		</toInt>
		<clamp set="method" line="119" static="1"><f a="x">
	<x path="Float"/>
	<x path="justGraphix.rose.UNorm"/>
</f></clamp>
	</class>
	<abstract path="justGraphix.rose.ZeroToMinus2pi" params="" file="src/justGraphix/rose/Zero2Minus2pi.hx" module="justGraphix.rose.Zero2Minus2pi">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":transient"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.rose._Zero2Minus2pi.ZeroToMinus2pi_Impl_" params="" file="src/justGraphix/rose/Zero2Minus2pi.hx" private="1" module="justGraphix.rose.Zero2Minus2pi" final="1">
	<_new get="inline" set="null" line="7" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="13" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<et set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</et>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<additionPi public="1" set="method" line="22" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="26" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="30" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="34" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="38" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="42" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="46" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="50" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="55" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="59" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="65" static="1">
		<f a="val">
			<x path="justGraphix.fracs.Fraction"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="69" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="74" static="1">
		<f a="val">
			<c path="String"/>
			<x path="justGraphix.rose.ZeroToMinus2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="80" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._Zero2Minus2pi.ZeroToMinus2pi_Impl_" params="" file="src/justGraphix/rose/Zero2Minus2pi.hx" private="1" module="justGraphix.rose.Zero2Minus2pi" final="1">
		<_new get="inline" set="null" line="7" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="13" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<et set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</et>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<additionPi public="1" set="method" line="22" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="26" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="30" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="34" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="38" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="42" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="46" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="50" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="55" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="59" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="65" static="1">
			<f a="val">
				<x path="justGraphix.fracs.Fraction"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="69" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="74" static="1">
			<f a="val">
				<c path="String"/>
				<x path="justGraphix.rose.ZeroToMinus2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="80" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="justGraphix.rose.ZeroTo2pi" params="" file="src/justGraphix/rose/ZeroTo2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="justGraphix.fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="justGraphix.rose._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="src/justGraphix/rose/ZeroTo2pi.hx" private="1" module="justGraphix.rose.ZeroTo2pi" final="1">
	<_new get="inline" set="null" line="7" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="13" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<et set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</et>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<additionPi public="1" set="method" line="22" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="26" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="30" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="34" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="38" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="42" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="46" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="50" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="55" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="59" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="65" static="1">
		<f a="val">
			<x path="justGraphix.fracs.Fraction"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="69" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="justGraphix.fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="74" static="1">
		<f a="val">
			<c path="String"/>
			<x path="justGraphix.rose.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="80" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="justGraphix.rose._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="src/justGraphix/rose/ZeroTo2pi.hx" private="1" module="justGraphix.rose.ZeroTo2pi" final="1">
		<_new get="inline" set="null" line="7" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="13" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<et set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</et>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<additionPi public="1" set="method" line="22" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="26" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="30" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="34" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="38" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="42" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="46" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="50" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="55" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="59" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="65" static="1">
			<f a="val">
				<x path="justGraphix.fracs.Fraction"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="69" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="justGraphix.fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="74" static="1">
			<f a="val">
				<c path="String"/>
				<x path="justGraphix.rose.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="80" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="justGraphix.target.canvas_.JsCanvasContext" params="" file="src/justGraphix/target/canvas_/JsCanvasContext.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.target.canvas_._JsCanvasContext.JsCanvasContext_Impl_" params="" file="src/justGraphix/target/canvas_/JsCanvasContext.hx" private="1" module="justGraphix.target.canvas_.JsCanvasContext" final="1">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="w:h">
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.target.canvas_.JsCanvasContext"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<to public="1" get="inline" set="null" line="17" static="1">
		<f a="this:ctx:x:y:?useAvaliableMask" v="::::true">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="js.html.CanvasRenderingContext2D"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta>
			<m n=":value"><e>{ useAvaliableMask : true }</e></m>
			<m n=":access"><e>justGraphix.image.Pixelimage</e></m>
			<m n=":access"><e>justGraphix.image.ImageStruct</e></m>
		</meta>
	</to>
	<from public="1" get="inline" set="null" line="44" static="1">
		<f a="this:ctx:x:y">
			<x path="justGraphix.image.Pixelimage"/>
			<c path="js.html.CanvasRenderingContext2D"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta>
			<m n=":access"><e>justGraphix.image.Pixelimage</e></m>
			<m n=":access"><e>pi_xy.ImageStruct</e></m>
		</meta>
	</from>
	<imageElementToPixels public="1" get="inline" set="null" line="60" static="1">
		<f a="img:?transparent_" v=":false">
			<c path="js.html.ImageElement"/>
			<x path="Bool"/>
			<x path="justGraphix.image.Pixelimage"/>
		</f>
		<meta>
			<m n=":value"><e>{ transparent_ : false }</e></m>
			<m n=":access"><e>justGraphix.image.Pixelimage</e></m>
			<m n=":access"><e>pi_xy.ImageStruct</e></m>
		</meta>
	</imageElementToPixels>
</class></impl>
	</abstract>
	<class path="justGraphix.target.canvas_._JsCanvasContext.JsCanvasContext_Impl_" params="" file="src/justGraphix/target/canvas_/JsCanvasContext.hx" private="1" module="justGraphix.target.canvas_.JsCanvasContext" final="1">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.target.canvas_.JsCanvasContext"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<to public="1" get="inline" set="null" line="17" static="1">
			<f a="this:ctx:x:y:?useAvaliableMask" v="::::true">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="js.html.CanvasRenderingContext2D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":value"><e>{ useAvaliableMask : true }</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage</e></m>
				<m n=":access"><e>justGraphix.image.ImageStruct</e></m>
			</meta>
		</to>
		<from public="1" get="inline" set="null" line="44" static="1">
			<f a="this:ctx:x:y">
				<x path="justGraphix.image.Pixelimage"/>
				<c path="js.html.CanvasRenderingContext2D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":access"><e>justGraphix.image.Pixelimage</e></m>
				<m n=":access"><e>pi_xy.ImageStruct</e></m>
			</meta>
		</from>
		<imageElementToPixels public="1" get="inline" set="null" line="60" static="1">
			<f a="img:?transparent_" v=":false">
				<c path="js.html.ImageElement"/>
				<x path="Bool"/>
				<x path="justGraphix.image.Pixelimage"/>
			</f>
			<meta>
				<m n=":value"><e>{ transparent_ : false }</e></m>
				<m n=":access"><e>justGraphix.image.Pixelimage</e></m>
				<m n=":access"><e>pi_xy.ImageStruct</e></m>
			</meta>
		</imageElementToPixels>
	</class>
	<abstract path="justGraphix.target.openflTarget_.DataBitmap" params="" file="src/justGraphix/target/openflTarget_/DataBitmap.hx">
		<from><icast><x path="justGraphix.image.Pixelimage"/></icast></from>
		<this><x path="justGraphix.image.Pixelimage"/></this>
		<to><icast><x path="justGraphix.image.Pixelimage"/></icast></to>
		<meta>
			<m n=":forward"/>
			<m n=":transient"/>
		</meta>
		<impl><class path="justGraphix.target.openflTarget_._DataBitmap.DataBitmap_Impl_" params="" file="src/justGraphix/target/openflTarget_/DataBitmap.hx" private="1" module="justGraphix.target.openflTarget_.DataBitmap" final="1"><_new public="1" get="inline" set="null" line="12" static="1">
	<f a="w:h">
		<x path="Int"/>
		<x path="Int"/>
		<x path="justGraphix.target.openflTarget_.DataBitmap"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="justGraphix.target.openflTarget_._DataBitmap.DataBitmap_Impl_" params="" file="src/justGraphix/target/openflTarget_/DataBitmap.hx" private="1" module="justGraphix.target.openflTarget_.DataBitmap" final="1"><_new public="1" get="inline" set="null" line="12" static="1">
	<f a="w:h">
		<x path="Int"/>
		<x path="Int"/>
		<x path="justGraphix.target.openflTarget_.DataBitmap"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
</haxe>